@startuml
autonumber
box Modeselektor #LightBlue
participant Act as modeAct <<(λ,#ADD1B2)>>
participant CheckRespond as modeResp <<(ε,#FFD700)>>
participant Dispatch as modeDisp <<(τ, #33FF22)>>
end box

box Maestro #LightGreen
participant Process as maeProc <<(λ,#ADD1B2)>>
participant DispatchOne as maeDisp1 <<(τ, #33FF22)>>
participant DispatchTwo as maeDisp2 <<(τ, #33FF22)>>
end box

=== First Tick ===

activate modeAct
modeAct -> modeDisp ** : coro()
modeAct -> modeResp  ** :  uv.new_check()
[<- modeAct !! : return nil

=== Second Tick ===

modeResp -> modeResp ++ : check callback
modeResp -> modeDisp ++ : resume(Dispatch)
modeDisp -> maeProc ** : :dispatch()?
activate maeProc
maeProc -> maeDisp1 ** : coro()
maeProc -> maeDisp1 ++ : resume(DispatchOne)
maeDisp1 -> maeDisp1  : callAgents
maeDisp1 ->> maeProc -- : yield(msg)
maeProc -> maeProc : dispatchmessage(msg)
maeProc -> maeDisp2 ** : coro()
maeProc -> maeDisp2 ++ : resume(DispatchTwo)
maeDisp2 -> maeDisp2 : callAgents
maeDisp2 ->> maeProc -- : yield(nil)
maeProc -> maeDisp1 ++ : resume(DispatchOne)
maeDisp1 -> maeDisp1  : callAgents
maeDisp1 ->> maeProc -- : yield(throwable)
maeProc ->> modeDisp -- : yield(throwable, DispatchOne)
modeDisp -> modeDisp : .hist:something(throwable)
modeDisp -> maeDisp1 ++ : resume(DispatchOne, ...)
activate maeProc
maeDisp1 -> maeDisp1  : callAgents
maeDisp1 -> maeProc : return nil
destroy maeDisp1
[<- maeProc !! : return nil
@enduml
