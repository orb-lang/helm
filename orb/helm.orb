*  Helm


=helm= is our repl.


***** profiler

Normally commented out.

Planning to run this from time to time if it looks like we have significant
performance regressions.

#!lua
--[[
profile = require("jit.profile")
profiled = {}
profile.start("li1", function(th, samples, vmmode)
   local d = profile.dumpstack(th, "pF", 1)
   profiled[d] = (profiled[d] or 0) + samples
end)
--]]
#/lua

#!lua
assert(true)
if rawget(_G, "_Bridge") then
   _Bridge.helm = true
end
#/lua


**** Intercept _G

We don't want to put =helm= into the environment of the codebase under
examination, so we replace the global environment with a table which falls
back to =_G=. We make it available as a global anywhere in `helm`, without
exposing it to others who are still using the normal _G global environment.

Man.  I really like having first-class environments.

#!lua
local __G = setmetatable({}, {__index = _G})
__G.__G = __G
#/lua


*** _helm

The entire module is setup as a function, to allow our new fenv
to be passed in.

#!lua
local function _helm(_ENV)
#/lua

No sense wasting a level of indent on a wrapper imho

#!lua
setfenv(0, __G)

import = assert(require "core/module" . import)
meta = import("core/meta", "meta")
core = require "core:core"
kit = require "valiant:replkit"
jit.vmdef = require "helm:helm/vmdef"
jit.p = require "helm:helm/ljprof"
sql = assert(sql, "sql must be in _G")
#/lua

** Boot sequence

This boot sequence builds on Tim Caswell and the Luvit Author's repl example.

#!lua
uv = require "luv"
local usecolors
stdout = ""
#/lua


***** tty detection

  Should move this into =pylon= as a method in a bridge preload package, or
something like that.  We're not using the not tty branch, we just bail later
if we're in a pipe.

#!lua
if uv.guess_handle(1) == 'tty' then
   stdout = uv.new_tty(1, false)
   usecolors = true
else
   stdout = uv.new_pipe(false)
   uv.pipe_open(utils.stdout, 1)
   usecolors = false
end
#/lua

Not-blocking =write= and =print=:

#!lua
local function write(...)
   uv.write(stdout, {...})
end
#/lua

#!lua
local concat = assert(table.concat)

function print(...)
   local n = select('#', ...)
   local arguments = {...}
   for i = 1, n do
      arguments[i] = tostring(arguments[i])
   end
   uv.write(stdout, concat(arguments, "\t") .. "\n")
end
#/lua


*** tty setup

#!lua
if uv.guess_handle(0) ~= 'tty' or
   uv.guess_handle(1) ~= 'tty' then
   -- Bail if we're in a pipe
   error "stdio must be a tty"
end

local stdin = uv.new_tty(0, true)
#/lua

Primitives for terminal manipulation.

#!lua
a = require "anterm:anterm"
local Point = require "anterm:point"
--watch = require "watcher"
#/lua

** Modeselektor


#!lua

-- Get window size and set up an idler to keep it refreshed

local MOUSE_MAX = 223

local function bind_pane(dim1, dim2)
   dim1 = dim1 > MOUSE_MAX and MOUSE_MAX or dim1
   dim2 = dim2 > MOUSE_MAX and MOUSE_MAX or dim2
   return dim1, dim2
end

local max_col, max_row = bind_pane(uv.tty_get_winsize(stdin))
local max_extent = Point(max_row, max_col)



modeS = require "helm/modeselektor" (max_extent, write)
local insert = assert(table.insert)
local function s_out(msg)
   insert(modeS.status, msg)
end

-- make a new 'status' instance
local s = require "status:status" (s_out)

local bounds_watch = uv.new_timer()
uv.timer_start(bounds_watch, 500, 500, function()
   max_col, max_row = uv.tty_get_winsize(stdin)
   if Point(max_row, max_col) ~= modeS.max_extent then
      modeS.max_extent = Point(bind_pane(max_row, max_col))
      -- Mark all zones as touched since we don't know the state of the screen
      -- (some terminals, iTerm for sure, will attempt to reflow the screen
      -- themselves and fail miserably)
      for _, zone in ipairs(modeS.zones) do
         zone.touched = true
      end
      modeS:reflow()
   end
end)
#/lua


*** Orb listener

  If we start with the =--listen= flag, we open up a [[lume][@orb:lume/lume]],
and set an =uv= watcher on the project directory.

We then add a timer to check the lume for a flag indicating it has processed a
file, and restart the modeselektor if it has.


#!lua
local restart_watch, lume = nil, nil

if _Bridge.args.listen then
   uv.new_timer():start(0, 0, function()
      local orb = require "orb:orb"
      lume = orb.lume(uv.cwd())
      lume :run() :serve(true)
      restart_watch = uv.new_timer()
      uv.timer_start(restart_watch, 500, 500, function()
         if lume.has_file_change then
            modeS:restart()
            lume.has_file_change = nil
         end
      end)
   end)
end
#/lua


** Reader

The reader takes a stream of data from =stdin=, asynchronously, and
processes it into tokens, which stream to the =modeselektor=.


*** process_escapes(seq)

#!lua
local Codepoints = require "singletons/codepoints"
local byte, sub, char = assert(string.byte),
                        assert(string.sub),
                        assert(string.char)
local m_parse, is_mouse = a.mouse.parse_fast, a.mouse.ismousemove
local navigation = a.navigation

local function process_escapes(seq)
   if is_mouse(seq) then
      return {"MOUSE", m_parse(seq)}
   elseif #seq == 2 and byte(seq, 2) < 128 then
      -- Meta
      local key = "M-" .. sub(seq,2,2)
      return {"ALT", key}
   elseif a.is_paste(seq) then
      return {"PASTE", a.parse_paste(seq)}
   else
      return {"NYI", seq}
   end
end
#/lua


*** old_parse_input

Extract this logic to a function to keep =onseq= itself clean.

#!lua
local function old_parse_input(seq)
   local events = {}
   local head = byte(seq)
   -- Special "navigation" sequences--this includes some escape sequences
   if navigation[seq] then
      events[1] = {"NAV", navigation[seq]}
   -- Other escape sequences
   elseif head == 27 then
      events[1] = process_escapes(seq)
   -- Control sequences
   elseif head <= 31 then
      local ctrl = "^" .. char(head + 64)
      events[1] = {"CTRL", ctrl}
   -- Printables--break into codepoints in case of multi-char input sequence
   -- But first, optimize common case of single ascii printable
   -- Note that bytes <= 31 and 127 (DEL) will have been taken care of earlier
   elseif #seq == 1 and head < 128 then
      events[1] = {"ASCII", seq}
   else
      local points = Codepoints(seq)
      for i, pt in ipairs(points) do
         -- #todo handle decode errors here--right now we'll just insert an
         -- actual Unicode "replacement character"
         events[i] = {byte(pt) < 128 and "ASCII" or "UTF8", pt}
      end
   end
   return events
end
#/lua


*** onseq

Our =uv= read handler. Parses an input sequence into events and dispatches
them to the =Modeselektor=.

There seems to be a maximum size of sequence that we will be given at once, so
when input arrives extremely rapidly (the most common case being a large
paste), it may be chopped off at an arbitrary point. By default, the input
parser rejects any input that may represent an incomplete escape sequence. In
this case, we store the remaining input and try again in the next event-loop
cycle. If we did not receive any new input in that cycle, we inform the parser
that no more input is expected and it should parse ESC and CSI immediately
rather than holding on to them in case they begin an escape sequence.

=uv=, being an event loop, seems to sometimes keep reading after we expect it
to stop. We use a =_ditch= flag to prevents modeS from being reloaded in such
circumstances. Maybe.

#!lua

local _ditch = false
local parse_input = require "anterm:input-parser"

local should_dispatch_all = false
local input_idle = uv.new_idle()
local input_check = uv.new_check()
local input_buffer = ""

local function is_scroll(event)
   return event.type == "mouse" and event.scrolling
end

local compact = assert(require "core:table" . compact)
local function consolidate_scroll_events(events)
   -- We're going to nil-and-compact, so convert to ntable
   events.n = #events
   local i = 1
   while i <= events.n do
      local j = i + 1
      if is_scroll(events[i]) then
         events[i].num_lines = 1
         while j <= events.n
            and is_scroll(events[j])
            and events[j].key == events[i].key do
            events[i].num_lines = events[i].num_lines + 1
            events[j] = nil
            j = j + 1
         end
      end
      i = j
   end
   compact(events)
end

local function dispatch_input(seq, dispatch_all)
   -- Clear the flag and timer indicating whether we should clear down the
   -- input buffer this cycle. Note that we must explicitly stop the timer
   -- because we need to give it a repeat value to kick the event loop along
   should_dispatch_all = false
   input_idle:stop()
   -- Try parsing, letting the parser know whether it should definitely consume
   -- everything it can or hold off on possible incomplete escape sequences
   local new_events, pos = parse_input(seq, dispatch_all)
   local old_events = old_parse_input(seq)
   input_buffer = seq:sub(pos)
   if #input_buffer > 0 then
      if dispatch_all then
         -- If it's been a little while and we still have stuff we can't parse,
         -- figure we might have something actually invalid.
         -- #todo perform some kind of useful error recovery here
         error("Unparseable input encountered:\n" .. input_buffer)
      else
         -- Use an idler to wait until the beginning of the *next* loop to
         -- set the flag that will cause our check handler to clear the
         -- input buffer. An idler is the type of handle that (a) runs before
         -- blocking for input, and (b) causes the loop *not* to actually
         -- block for input. It will only ever run once (see above).
         input_idle:start(function() should_dispatch_all = true end)
      end
   end
   consolidate_scroll_events(new_events)
   for i = 1, #new_events do
      modeS(new_events[i], old_events[i])
      -- Okay, if the action resulted in a quit, break out of the event loop
      if modeS.has_quit then
         _ditch = true
         uv.read_stop(stdin)
         bounds_watch:stop()
         input_idle:stop()
         input_check:stop()
         if restart_watch then
            restart_watch:stop()
            lume.server:stop()
         end
         break
      end
   end
end

input_check:start(function()
   if should_dispatch_all and #input_buffer > 0 then
      dispatch_input(input_buffer, true)
   end
end)

local function onseq(err,seq)
   if _ditch then return nil end
   if err then error(err) end
   dispatch_input(input_buffer .. seq, false)
end
#/lua

#!lua


-- Get names for as many values as possible
-- into the colorizer
-- Treat package names as existing in the global namespace
-- rather than having a "package.loaded." prefix
local names = require "repr:repr/names"
names.loadNames(package.loaded)
names.loadNames(_G)
names.loadNames(__G)

-- assuming we survived that, set up our repling environment:

-- raw mode
uv.tty_set_mode(stdin, 2)

-- Enable mouse tracking, save the cursor, switch screens and wipe,
-- then put the cursor at 1,1.
-- #todo Cursor save/restore supposedly may not work on all terminals?
-- Test this and, if necessary, explicitly read and store the cursor position
-- and manually restore it at the end.
write(a.cursor.stash(),
      a.alternate_screen(true),
      a.erase.all(),
      a.jump(1, 1),
      a.paste_bracketing(true),
      a.mouse.track(true)
)
uv.read_start(stdin, onseq)

-- initial layout and paint screen
modeS:reflow()

-- main loop
local retcode =  uv.run('default')

-- Shut down the database conn:
local helm_db = require "helm:helm/helm-db"
helm_db.close()

retcode = uv.run 'default'

-- Teardown: Mouse tracking off, restore main screen and cursor
write(a.mouse.track(false),
      a.paste_bracketing(false),
      a.alternate_screen(false),
      a.cursor.pop(),
      a.cursor.show())

-- Back to normal mode and finish tearing down uv
uv.tty_reset_mode()
uv.stop()

-- Make sure the terminal processes all of the above,
-- then remove any spurious mouse inputs or other stdin stuff
io.stdout:flush()
io.stdin:read "*a"

-- Restore the global environment
setfenv(0, _G)
end -- of _helm
#/lua

**** Call helm

#!lua
return setfenv(_helm, __G)
#/lua
