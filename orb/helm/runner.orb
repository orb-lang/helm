* Runner


  The Runner runs a helm run.

The helm run itself is a funny sort of thing.  Bridge is stateful, and Unix is
architected around a loop of launch-run-exit-shell.

The intention and arcitecture of helm is such that it wakes up in a different
state from how it was closed.

The simplest /use/ of a run is to recreate the last state the helm was in at
the time of launch.  This has the syntax =br helm resume= or =br i r= or if
we can swing it ( =argparse= is not ready for this) =br ir=.  We may as
well alias in =bri= and =brir= because let's get comfortable with this
concatenative mini language I've been setting up on the =fish= line.

This is the role Actors play in bridge design: they are useful to the user.
Let us begin a discussion of the role Runner plays within the arcitecture of
=bridge=, with special notice to =helm=, the verb in which it operates.


** The Runner Actor

The role the Runner fills is to provide the living record of the helm run.

That sentence recurses on the last word, so let us expand.

What we call a Session is a specific and elaborated sort of Run.  A Run is
simply what happens between your flavour of Unix loading =br helm=, and exit.

Helm as presently constituted remains a =repl=, as it will going forward: it
receives code a keystroke or paste at a time, and it evaluates it.  The
distinction has always been (other than important but less than germane user
interface affordances) the creation of a permanent SQLite record of this loop.

Valiant stalwartly guards the integrity of the evaluation, and the Historian
marshals transactions and provides in-memory forms of the =helm.sqlite= file.

Part of the quiet genius of SQLite is that we can rapidly populate an
in-memory snapshot into the disk database, and use the same SQL statements to
pull that information into the Lua runtime system.  We haven't indulged in
this due to the dominance of disk queries in retrieving the amount of
information thus far generated by core =bridge= development and consider it an
optimization.


*** Data Flow

The Runner is the first Actor on input flowing into the helm event loop.

We parse the input into a table, and this arrives at the Maestro for action.

On the way, it is inspected by the Runner.

An input event opens up a transaction on the run table.

This records two messages immediately: the input and a message saying "the
helm has crashed".

Each additional record into the run table is in principle interpolated between
this crash record and the rest of the run.

In practice we fill a doubled block in the usual array-optimal fashion, such
that SQLite will return NULL on a query to the unwritten rows.  The run table
of the database is not well-formed if it doesn't end with one of a crash
padded by an arbitrary number of NULLs or a quit.

The completion of a happy-path run upserts the id which is in place for crash
reporting at the conclusion of the bridge/helm process run, with a message
concluding the Run in question.


*** Message Flow

  [[!154][https://gitlab.com/special-circumstance/femto/-/merge_requests/154]]
introduces queues for message passing between Agents, as choreographed by
Maestro, and cleanly separates action from presentation along the Window and
message queue.

While there is more work ahead on delineating Zoneherd responsibilities viz.
the Mailbox queue between such and the Maestro, I concern myself here with the
action loop for resolving recognized and written inputs into actions on the
various and sundry subjects of Agent responsibility.

This has been specified elsewhere, so the portion of message flow we address
is between Modeselektor, the Boss of the Runner, and the Runner himself.

The coroutine loop will yield Messages addressed to Valiant or the Historian,
and for the most part we simply have Modeselektor call over and resolve those
queries.  From the perspective of the Runner these are broadly trivial.  The
option of inspection remains open, but intermediate steps do not generally
constitute a part of the permanent record.

The Runner does concern itself with the result of an action, with special
attention to the case where Valiant has performed evaluation.


**** Runner language

I have notes on how any step in a run are recorded.

The primary key of a =run_action= is one of our cases of =(run, steps)= where
=run= is an autoincrement and steps are ordered from zero, which is always
=b=egin run.

