* Raga base

Some common functionality for ragas

** Dependencies

#!lua
local a         = require "anterm:anterm"

local concat         = assert(table.concat)
local sub, gsub, rep = assert(string.sub),
                       assert(string.gsub),
                       assert(string.rep)
#/lua

** Categories

These are the broad types of event.

#!lua
local RagaBase_meta = {}
local RagaBase = setmetatable({}, RagaBase_meta)

for _, cat in ipairs{"NAV", "CTRL", "ALT", "ASCII",
                     "UTF8", "PASTE", "MOUSE", "NYI"} do
   RagaBase[cat] = {}
end
#/lua

When creating a new raga, remember to set:
#!lua-example
RagaBase.name = "raga_base"
RagaBase.prompt_char = "$"
#/lua

** __call (main input handling/dispatch)

#!lua

local hasfield, iscallable = import("core/table", "hasfield", "iscallable")

function RagaBase_meta.__call(raga, modeS, category, value)
   -- Dispatch on value if possible
   if hasfield(modeS.raga[category], value) then
      modeS.raga[category][value](modeS, category, value)
   -- Or on category if the whole category is callable
   elseif iscallable(modeS.raga[category]) then
      modeS.raga[category](modeS, category, value)
   -- Otherwise indicate that we didn't know what to do with the input
   else
      return false
   end
   return true
end

#/lua

** Events

*** <Raga>.txtbufChanged(modeS)

Called whenever the txtbuf's contents have changed while processing a seq.

#!lua
function RagaBase.txtbufChanged(modeS)
end
#/lua

*** <Raga>.cursorChanged(modeS)

Called whenever the cursor has moved while processing a seq.
Both txtbufChanged and cursorChanged will be called in the
common case of a simple insertion.

#!lua
function RagaBase.cursorChanged(modeS)
end
#/lua

#!lua
return RagaBase
#/lua
