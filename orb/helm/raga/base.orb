* Raga base

Some common functionality for ragas.


**** imports

#!lua
local a         = require "anterm:anterm"

local concat         = assert(table.concat)
local sub, gsub, rep = assert(string.sub),
                       assert(string.gsub),
                       assert(string.rep)
#/lua

#!lua
local RagaBase_meta = {}
local RagaBase = setmetatable({}, RagaBase_meta)
#/lua

Ragas have several properties, some of which have sensible defaults,
others must be set explicitly for each:

#!lua
RagaBase.name        = nil                       -- e.g. "nerf"
RagaBase.prompt_char = nil                       -- e.g. "$"
RagaBase.keymap      = nil                       -- e.g. require "helm:keymap/raga_name"
RagaBase.target      = nil                       -- `msg.to` path string, e.g. "agents.edit"
RagaBase.lex         = require "helm:lex" . null -- Lexer to use for the command zone
#/lua


** <Raga>.getCursorPosition()

Computes and returns the position for the terminal cursor,
or nil if it should be hidden. This is a reasonable default
as not all ragas need the cursor shown.

#!lua
function RagaBase.getCursorPosition()
   return nil
end
#/lua


** Events


*** <Raga>.onTxtbufChanged()

Called whenever the txtbuf's contents have changed while processing a seq.

#!lua
function RagaBase.onTxtbufChanged()
   return
end
#/lua


*** <Raga>.onCursorChanged()

Called whenever the cursor has moved while processing a seq.
Both onTxtbufChanged and onCursorChanged will be called in the
common case of a simple insertion.

#!lua
function RagaBase.onCursorChanged()
   return
end
#/lua


*** <Raga>.onShift()

Called when first switching to the raga. Provides an opportunity to
reconfigure zones or perform other set-up work.

#!lua
function RagaBase.onShift()
   return
end
#/lua


*** <Raga>.onUnshift()

Opposite of onShift--called when switching away to another raga.

#!lua
function RagaBase.onUnshift()
   return
end
#/lua


#!lua
return RagaBase
#/lua
