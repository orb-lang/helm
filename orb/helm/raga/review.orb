* Session review

Raga for reviewing a previously-saved session.

#!lua
local clone = assert(require "core:table" . clone)
local RagaBase = require "helm:raga/base"
local Txtbuf = require "helm:txtbuf"
local Sessionbuf = require "helm:sessionbuf"
#/lua

#!lua
local Review = clone(RagaBase, 2)
Review.name = "review"
Review.prompt_char = "ðŸ’¬"
#/lua


*** _toSessionbuf(fn)


*** NAV

#!lua
local function _toSessionbuf(fn)
   return function(modeS, category, value)
      local buf = modeS.zones.results.contents
      modeS.zones.results:beTouched()
      return buf[fn](buf)
   end
end

local function _selectUsing(fn)
   return function(modeS, category, value)
      local buf = modeS.zones.results.contents
      buf[fn](buf)
      modeS.txtbuf:replace(buf:selectedPremise().title)
      modeS.zones.results:beTouched()
   end
end

local NAV = Review.NAV

NAV.UP   = _selectUsing "selectPrevious"
NAV.DOWN = _selectUsing "selectNext"

NAV.SHIFT_UP   = _toSessionbuf "scrollResultsUp"
NAV.SHIFT_DOWN = _toSessionbuf "scrollResultsDown"

NAV.TAB = _toSessionbuf "toggleSelectedState"

function NAV.RETURN(modeS, category, value)
   modeS.shift_to = "edit_title"
end
#/lua


*** MOUSE

We use the mouse wheel to scroll the results area. Ideally it would be nice
to choose between the results area and the entire session display based on
cursor position, but that'll have to wait for more general focus-tracking.

#!lua
function Review.MOUSE(modeS, category, value)
   if value.scrolling then
      if value.button == "MB0" then
         NAV.SHIFT_UP(modeS, category, value)
      elseif value.button == "MB1" then
         NAV.SHIFT_DOWN(modeS, category, value)
      end
   end
end
#/lua


*** Review.onShift(modeS)

We use the results area for displaying the lines and results
of the session in a Sessionbuf.

#!lua
function Review.onShift(modeS)
   modeS.zones.results:replace(
      Sessionbuf(modeS.hist.session, { scrollable = true }))
end
#/lua

#!lua
return Review
#/lua