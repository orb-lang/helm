* PromptAgent

Agent supplying the prompt. The prompt character is supplied by the raga,
we're just a dumb value holder for that, but we do retrieve the number of
continuation lines by sending a Message to the EditAgent.

#!lua
local Agent = require "helm:agent/agent"
local PromptAgent = meta(getmetatable(Agent))
#/lua


*** PromptAgent:update(prompt_char)

#!lua
function PromptAgent.update(agent, prompt_char)
   agent.prompt_char = prompt_char
   agent:contentsChanged()
end
#/lua


*** PromptAgent:checkTouched()

Changes to the number of continuation lines also affect us. Easiest to just
consider ourselves touched whenever the EditAgent is, not like painting the
prompt is expensive.

#!lua
function PromptAgent.checkTouched(agent)
   -- #todo .touched propagation is weird, we can't :checkTouched()
   -- on the EditAgent because we'll clear stuff prematurely
   -- All of this should be replaced by a handler for an action sent
   -- by the EditAgent (which would replace onTxtbufChanged() as well)
   agent.touched = agent.touched or agent :send { to = "agents.edit", field = "touched" }
   return Agent.checkTouched(agent)
end
#/lua


*** PromptAgent:bufferValue()

#!lua
function PromptAgent.bufferValue(agent)
   local continuation_lines = agent :send { to = "agents.edit",
                                          method = "continuationLines" }
   return agent.prompt_char .. " " .. ("\n..."):rep(continuation_lines)
end
#/lua


#!lua
return core.cluster.constructor(PromptAgent)
#/lua
