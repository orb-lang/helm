* SessionAgent

Agent responsible for editing/reviewing a session.


**** imports

#!lua
local table = core.table
#/lua


#!lua
local ReviewAgent = require "helm:agent/review"
local SessionAgent = meta(getmetatable(ReviewAgent))
#/lua


*** SessionAgent:update(sesh)

#!lua
function SessionAgent.update(agent, sesh)
   agent.subject = sesh
   agent.selected_index = #sesh == 0 and 0 or 1
   agent:_updateResultsAgent()
   -- Update any EditAgents we have without creating any more
   for index in pairs(agent.edit_agents) do
      agent:_updateEditAgent(index)
   end
   agent:contentsChanged()
end
#/lua


*** SessionAgent:selectIndex(i)

Transfer the newly-selected premise title to the EditAgent after selection.

#!lua
function SessionAgent.selectIndex(agent, i)
   ReviewAgent.selectIndex(agent, i)
   local premise = agent:selectedPremise()
   agent :send { to = "agents.edit",
                 method = "update",
                 premise and premise.title }
end
#/lua


*** Editing


**** Status list

#!lua
SessionAgent.valid_statuses = {
   "ignore", "accept", "reject", "trash"
}
#/lua


**** Title editing


***** SessionAgent:editSelectedTitle(), :cancelTitleEditing()

Switches in and out of special mode to edit the title of the selected premise.

#!lua
function SessionAgent.editSelectedTitle(agent)
   agent :send { method = "pushMode", "edit_title" }
end

function SessionAgent.cancelTitleEditing(agent)
   agent :send { method = "popMode" }
end
#/lua


***** SessionAgent:acceptTitleUpdate()

User is done editing a premise title, update it in the session data structure.

#!lua
function SessionAgent.acceptTitleUpdate(agent)
   local new_title = agent :send { to = "agents.edit", method = "contents" }
   agent:selectedPremise().title = new_title
   agent:selectNextWrap()
   agent:cancelTitleEditing()
end
#/lua


*** Prompt to save changes

#!lua
function SessionAgent.promptSaveChanges(agent)
   local sesh_title = agent.subject.session_title
   agent :send { to = "agents.modal", method = "show",
      'Save changes to the session "' .. sesh_title .. '"?',
      "yes_no_cancel" }
end
#/lua


#!lua
return core.cluster.constructor(SessionAgent)
#/lua
