* PagerAgent

Agent for displaying simple content (e.g. help files).

#!lua
local table = core.table

local Agent = require "helm:agent/agent"
local PagerAgent = meta(getmetatable(Agent))
#/lua


*** PagerAgent:update(result), :clear()

#!lua
function PagerAgent.update(agent, str)
   agent.str = str
   agent:contentsChanged()
end

function PagerAgent.clear(agent)
   agent:update(nil)
end
#/lua


*** PagerAgent:activate(), :quit()

Activate/dismiss the pager (showing/hiding the popup Zone in the process).

#!lua
function PagerAgent.activate(agent)
   agent :send { method = "shiftMode", "page" }
end
function PagerAgent.quit(agent)
   agent :send { method = "shiftMode", "default" }
end
#/lua


*** PagerAgent:bufferValue()

#!lua
function PagerAgent.bufferValue(agent)
   -- #todo we should work with a Rainbuf that does word-aware wrapping
   -- and accepts a string directly, rather than abusing Resbuf
   return { n = 1, agent.str }
end
#/lua


*** Keymaps

#!lua
PagerAgent.keymap_actions = {
   ESC = "quit",
   q = "quit"
}

local clone = assert(table.clone)
PagerAgent.keymap_scrolling = clone(Agent.keymap_scrolling)
for cmd, shortcuts in pairs{
   scrollDown     = { "RETURN", "e", "j", "C-n", "C-e", "C-j" },
   scrollUp       = { "S-RETURN", "y", "k", "C-y", "C-p", "C-l" },
   pageDown       = { " ", "f", "C-v", "C-f" },
   pageUp         = { "b", "C-b" },
   halfPageDown   = { "d", "C-d" },
   halfPageUp     = { "u", "C-u" },
   scrollToBottom = { "G", ">" },
   scrollToTop    = { "g", "<" }
} do
   for _, shortcut in ipairs(shortcuts) do
      PagerAgent.keymap_scrolling[shortcut] = cmd
   end
end
#/lua


#!lua
return core.cluster.constructor(PagerAgent)
#/lua#/lua
