* Historian


This module is responsible for REPL history.

Historian loads old records of lines and results from a SQLite database, as
well as persisting new ones to the same store.

It is also responsible for fuzzy searching across the last =HISTORY_LIMIT= of
records.


**** imports

#!lua
local uv      = require "luv"

local bridge = require "bridge"

local s = require "status:status" ()

local Session = require "helm:session"
local persist_tabulate = require "repr:persist-tabulate"
local helm_db = require "helm:helm-db"

local insert = assert(table.insert)

local Set = require "set:set"
local Deque = require "deque:deque"
#/lua


*** Historian metatable

#!lua
local Historian = meta {}
Historian.HISTORY_LIMIT = 2000
Historian.helm_db_home = helm_db.helm_db_home
Historian.project = uv.cwd()
#/lua

*** Historian:createPreparedStatements(helm_db)

#!lua
function Historian.createPreparedStatements(historian, helm_db_home)
   if helm_db_home then
      historian.helm_db_home = helm_db_home
   end
   local stmts = helm_db.historian(historian.helm_db_home)
   historian.stmts = stmts
   historian.insert_line = stmts.insert_line
   historian.insert_repr = stmts.insert_repr
   historian.insert_result_hash = stmts.insert_result_hash
   historian.get_results = stmts.get_results
end
#/lua

*** sql_insert_errcheck(stmt)

Execute the (already-bound) prepared statement, =stmt=, which is assumed to be
an insert such that it returns a value only if it fails. We convert that into
a Lua error, and in any case reset the statement so it can be reused.

#!lua
local function sql_insert_errcheck(stmt)
   local err = stmt:step()
   stmt:clearbind():reset()
   if err then
      error(err)
   end
end
#/lua

#todo bloody awful name, should be in sql.orb, but this is getting ridiculous.

*** Historian:load()

Brings up the project history and result ids.

Most of the complexity serves to make a simple key/value relationship
between the lines and their associated result history.

We want as much history as practical, because we search in it, but most of
the results never get used.

As much of the work as possible is offloaded to a uv idler process.

#!lua
local clamp, inbounds = import("core:core/math", "clamp", "inbounds")
local assertfmt = import("core:core/string", "assertfmt")
local format = assert(string.format)

function Historian.load(historian)
   local stmts = historian.stmts
   -- Retrieve project id
   local proj_val, proj_row = stmts.get_project
                                      : bind(historian.project)
                                      : resultset 'i'
   if not proj_val then
      proj_val, proj_row = stmts.insert_project
                             : bind(historian.project)
                             : step()
      -- retry
      proj_val, proj_row = stmts.get_project
                                      : bind(historian.project)
                                      : resultset 'i'
      if not proj_val then
         error "Could not create project in .bridge"
      end
   end
   local project_id = proj_val[1][1]
   historian.project_id = project_id

   -- start the latest run
   stmts.insert_run_start :bind(project_id) :step()
   historian.run = { run_id = stmts.lastRowId(), actions = {} }

   -- Retrieve history
   local number_of_lines = stmts.get_number_of_lines
                             :bind(project_id):step()[1]
   if number_of_lines == 0 then
      return nil
   end
   number_of_lines = clamp(number_of_lines, nil, historian.HISTORY_LIMIT)
   historian.lines_available = number_of_lines
   local pop_stmt = stmts.get_recent
                      : bindkv { project = project_id,
                                 num_lines = number_of_lines }
   historian.cursor = number_of_lines + 1
   historian.cursor_start = number_of_lines + 1
   historian.n = number_of_lines
   local counter = number_of_lines
   local idler
   local function load_one()
      local res = pop_stmt:step()
      if not res then
         if idler then idler:stop() end
         return nil
      end
      historian[counter] = res[2]
      historian.line_ids[counter] = res[1]
      -- Results are loaded backwards because that's how they're accessed
      counter = counter - 1
   end
   -- add one line to ensure we have history on startup
   load_one()
   -- idle to populate the rest of the history
   idler = uv.new_idle()
   idler:start(load_one)
end
#/lua


*** Historian:persist(line, results)

Persists a line and results to store.

#!lua
local tabulate_some = assert(persist_tabulate.tabulate_some)
local sha = assert(require "util:sha" . shorthash)
local blob = assert(assert(sql, "sql must be in bridge _G").blob)
function Historian.persist(historian, line, results)
   if type(results) ~= "table" or results.n == 0 then
      results = nil
   end
   if line == "" then
      -- A blank line can have no results and is uninteresting.
      return false
   end

   -- Persist the line of input itself
   sql_insert_errcheck(
      historian.insert_line:bindkv { project = historian.project_id,
                                     line    = blob(line) })
   local line_id = historian.stmts.lastRowId()
   insert(historian.line_ids, line_id)

   -- Then the run action indicating it was just evaluated
   local run_action = { run_id  = historian.run.run_id,
                        ordinal = #historian.run.actions + 1,
                        input   = line_id }
   insert(historian.run.actions, run_action)
   sql_insert_errcheck(historian.stmts.insert_run_input:bindkv(run_action))

   -- If there are no results, nothing more to persist,
   -- release our savepoint and don't bother starting the idler
   if not results then
      return line_id
   end

   local queue = historian.result_queue
   local persist_cb = tabulate_some(results)
   historian.idler = historian.idler or uv.new_idle()
   local empty = #queue == 0
   queue:push(pack(persist_cb, line_id, results.n))
   if empty then
      historian.idler:start(function()
         local cb, line_id, n = unpack(queue:peek())
         local done, results_tostring = cb()
         if not done then return nil end
         queue:pop()
         -- inform the Session that persisted results are available
         historian.session:resultsAvailable(line_id, results_tostring)
         -- now persist
         for i = 1, n do
            local hash = sha(results_tostring[i])
            sql_insert_errcheck(historian.insert_repr:bind(hash, results_tostring[i]))
            sql_insert_errcheck(historian.insert_result_hash:bind(line_id, hash))
         end
         if #queue == 0 then
            historian.idler:stop()
         end
      end)
   end
   return line_id
end
#/lua


*** Historian:idling()

Replies =true= if we have a running idler

#!lua
function Historian.idling(hist)
   if #hist.idlers > 0 then
      return true
   else
      return false
   end
end
#/lua


*** Historian:append(line, results, success)

As :persist(), but also appends to the history and the current session.

Doesn't adjust the cursor, but does store the results in the result_buffer.

#!lua
function Historian.append(historian, line, results, success)
   if line == "" or line == historian[historian.n] then
      -- don't bother
      return false
   end
   historian.n = historian.n + 1
   historian[historian.n] = line
   if not success then results = nil end
   historian.result_buffer[historian.n] = results
   local line_id = historian:persist(line, results)
   historian.session:append(line_id, line, results)
   return true
end
#/lua


** Historian:search(frag)

This is a 'fuzzy search', that attempts to find a string containing the
letters of the fragment in order.

If it finds nothing, it switches the last two letters and tries again. This
is an affordance for incremental searches, it's easy to make this mistake and
harmless to suggest the alternative.

Returns a =collection=. The array portion of a collection is any line
which matches the search. The other fields are:

- #fields
  -  best :  Whether this is a best-fit collection, that is, one with all
             codepoints in order.

  -  frag :  The fragment, used to highlight the collection.  Is transposed
             in a next-best search.

  -  lit_frag :  The literal fragment passed as the =frag= parameter.  Used to
                 compare to the last search.

  -  cursors :  This is an array, each value is the cursor position of
                the corresponding line in the history.


#!lua
local SelectionList = require "helm/selection_list"
local fuzz_patt = require "helm:helm/fuzz_patt"

function Historian.search(historian, frag)
   if frag == "" then
      return nil
   end
   local result = SelectionList(frag, { show_shortcuts = true, cursors = {}})
   local function try_search()
      local patt = fuzz_patt(result.frag)
      local dup = {}
      for i = historian.n, 1, -1 do
         local item_str = tostring(historian[i])
         if not dup[item_str] and patt:match(item_str) then
            dup[item_str] = true
            insert(result, item_str)
            insert(result.cursors, i)
         end
      end
   end
   try_search()
   if #result == 0 then
      result.best = false
      result.frag = frag:sub(1, -3) .. frag:sub(-1, -1) .. frag:sub(-2, -2)
      try_search()
   end
   return result
end
#/lua


** History navigation


*** _setCursor(cursor)

Sets the cursor and returns the line and results for that index. Unlike
=:index()= this is allowed to be out-of-bounds, in which we return =nil=.

#!lua
local db_result_M = assert(persist_tabulate.db_result_M)

local function _setCursor(historian, cursor)
   historian.cursor = cursor
   local line = historian[cursor]
   if not line then
      return nil, nil
   end
   if historian.result_buffer[cursor] then
      return line, historian.result_buffer[cursor]
   end
   local line_id = historian.line_ids[cursor]
   local stmt = historian.get_results
   stmt:bindkv {line_id = line_id}
   local results = stmt :resultset 'i'
   if results then
      results = results[1]
      results.n = #results
      for i = 1, results.n do
         -- stick the result in a table to enable repr-ing
         results[i] = {results[i]}
         setmetatable(results[i], db_result_M)
      end
   end
   stmt:reset()
   -- may as well memoize the database call, while we're here
   historian.result_buffer[cursor] = results
   return line, results
end
#/lua


*** Historian:delta(), :prev(), :next()

Moves the cursor by the given delta, returning the line
and result (if any) at the new cursor position.

#!lua
function Historian.delta(historian, delta)
   return _setCursor(historian,
                     clamp(historian.cursor + delta, 1, historian.n + 1))
end

function Historian.prev(historian)
   return historian:delta(-1)
end
function Historian.next(historian)
   return historian:delta(1)
end
#/lua


*** Historian:index(cursor)

  Loads the history to an exact index. The index must be one that actually
exists, i.e. 1 <= index <= historian.n--historian.n + 1 is not allowed.

#!lua
function Historian.index(historian, cursor)
   assert(inbounds(cursor, 1, historian.n))
   return _setCursor(historian, cursor)
end
#/lua


*** Historian:atEnd(), :toEnd()

Answer whether the cursor is at the end of the history (really off the end, ready for the next line), or move it there.
Note this is outside the bounds of what is allowed via =:index()=.

#!lua
function Historian.atEnd(historian)
   return historian.cursor > historian.n
end

function Historian.toEnd(historian)
   historian.cursor = historian.n + 1
end
#/lua


*** Historian:close()

This should do everything an Historian wants to do when helm quits.

Currently, it just saves the end of the run.

#!lua
function Historian.close(historian)
   historian.stmts.insert_run_finish :bind(historian.run.run_id) :step()
end
#/lua


*** Historian(helm_db)

Creates a new =historian=.

=helm_db= is an optional string parameter to load a non-standard helm database.


***** Metatable for result buffer

We need this so that attempts to __repr the result buffer don't produce an
infinite loop.

#!lua
local __result_buffer_M = meta {}
function __result_buffer_M.__repr(buf, window, c)
   return c.alert "cowardly refusing to print result_buffer to avoid infinite appending"
end

local function new(helm_db)
   s.verbose = true
   local historian = setmetatable({}, Historian)
   historian.line_ids = {}
   historian.cursor = 0
   historian.cursor_start = 0
   historian.n = 0
   historian.lines_available = 0
   historian.result_queue = Deque()

   historian:createPreparedStatements(helm_db)
   historian:load()
   if bridge.args.restart then
      local deque = require "deque:deque" ()
      local prev_run = historian.stmts.get_latest_finished_run
                                          :bind(historian.project_id)
                                          :value()
      for _, line in historian.stmts.get_lines_of_run:bind(prev_run):cols() do
         deque:push(line)
      end
      historian.reloads = deque
   elseif bridge.args.back then
      local deque = require "deque:deque" ()
      -- we could duplicate this information off the historian array, if we
      -- had the patience to wait around for it to populate.
      --
      -- We probably should do it that way, actually, but there's too much
      -- handwaving about how runs interact with history already, and this
      -- works, as blocking code tends to, with minimum fuss.
      local num_back = clamp(bridge.args.back,  nil, historian.lines_retrieved)
      if num_back < bridge.args.back then
         s:warn("Requested %d lines to rerun, only %d lines available")
      end
      local get_lines = historian.stmts.get_recent
                   : bindkv { project = historian.project_id,
                              num_lines = num_back }
      for _, __, line in get_lines:cols() do
         deque:push(line)
      end
      deque:reverse()
      historian.reloads = deque
   end

   local session_cfg = {}
   local session_title = bridge.args.macro or
                         bridge.args.new_session or
                         bridge.args.session
   if bridge.args.macro then
      session_cfg.accepted = true
      session_cfg.mode = "macro"
   end

   local sesh = Session(helm_db,
                        historian.project_id,
                        session_title,
                        session_cfg)
   -- Asked to create a session that already exists
   if (bridge.args.new_session or bridge.args.macro) and sesh.session_id then
      error('A session named "' .. session_title ..
            '" already exists. You can review it with br helm -s.')
   end
   if bridge.args.session then
      if sesh.session_id then
         sesh:loadPremises()
      else
         -- Asked to review a session that doesn't exist
         error('No session named "' .. session_title ..
               '" found. Use br helm -n to create a new session.')
      end
   end
   historian.session = sesh
   historian.result_buffer = setmetatable({}, __result_buffer_M)
   historian.idlers = Set()
   s.verbose = false
   return historian
end

Historian.idEst = new
#/lua

#!lua
return new
