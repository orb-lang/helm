* Modeselektor

=helm= will hold all state for an terminal session, including setup of io,
the main event loop, teardown and exuent.  Soon, we will encapsulate that,
making the library re-entrant.

=modeselektor= is the modal interpreter for the repl language, which becomes
the core of =ed=.  This is a glorified lookup table with a state switch and
a pointer to the =helm=cell we're operating on.


** Design

  =helm= passes keystrokes as messages to =modeselektor=.  It does no writes
to stdout at all.  It is smart enough to categorize and parse various device
reports, but has no knowledge of why those reports were requested.

=helm= runs the event loop, so all other members are pulled in as modules.

=modeselektor= takes care of system-level housekeeping: opening files
and sockets, keeping command history, fuzzy completion, and has its own eval
loop off the main track.  For evaluating lines, it will call a small executor,
so that in a little while we can put the user program in its own =LuaL_state=.

This is both good practice, and absolutely necessary if we are to REPL other
=bridge= programs, each of which has its own event loop.

The implementation is essentially a VM.  Category and value are
successively looked up in jump tables and the method applied with the =modeS=
instance as the first argument.

The state machine has to represent two sorts of state: the mode we're
operating in, and a buffer of commands.  Our mode engine is modeled after
emacs: rather than have some kind of flag that can be set to "insert",
"navigate", "command", or "visual", these will be modeled as swiching the
pointer to jump tables.  If a command needs to know which mode it's in, this
can be done with pointer comparison.

We're starting with =vi= mode and =nerf= mode, which is a lightweight
=readline= implementation that won't use the command buffer.  Issuing a
command like =d3w= requires a simple command buffer.

The syntax can't be tied to the semantics in any tighly-coupled way. I intend
to support =kakoune= syntax as soon as possible; there you would say =w3d=.

This implies that the commands can't be aware of the buffer; because =d3w=
and =w3d= are two ways of saying the same thing, they should end in an
identical method call.

This means when the time comes we handle it with a secondary dispatch layer.

There really are effectively arbitrary levels of indirection possible in an
editor.  This is why we must be absolutely consistent about everything
receiving the same tuple (modeS, category, value).

They must also have the same return type, with is either =true= or
=false, err=  where =err= is an error object which may be a primitive string.

=modeselektor= passes any edit or movement commands to an internally-owned
=txtbuf=, which keeps all modeling of the line.  =modeselektor= decides when
to repaint the screen, calling =rainbuf= (currently just =lex=) with a region
of =txtbuf= and instructions as to how to paint it.

There is one =deck= instance member per screen, which tiles the available
space.  =modeselektor= is the writer, and =rainbuf= holds a pointer to the
table for read access.

When we have our fancy parse engine and quipu structure, txtbuf will call
=comb= to redecorate the syntax tree before passing it to =rainbuf= for
markup.  At the moment I'm just going to write some crude lexers, which
will be more than enough for Clu and Lua, which have straightforward syntax.

An intermediate step could just squeeze the txtbuf into a string, parse it
with =espalier= and emit a =rainbuf= through the usual recursive method
lookup.  The problem isn't speed, not for a REPL, it's not having error
recovery parsing available.

I will likely content myself with a grammar that kicks in when the user
presses return.  I'll want that to perform rewrites (such as removing
outer-level =local=s to facilicate copy-pasting) and keep the readline
grammar from becoming too ad-hoc.


**** asserts

  There is little sense running =modeselektor= outside of the =bridge=
environment.

#!lua
assert(meta, "must have meta in _G")
assert(write, "must have write in _G")
#/lua


**** includes

The easiest way to go mad in concurrent environments is to share memory.

=modeselektor= will own txtbuf, historian, and the entire screen.

#!lua
local c = import("singletons/color", "color")

local Txtbuf     = require "helm/txtbuf"
local Resbuf     = require "helm/resbuf" -- Not currently used...
local Rainbuf    = require "helm/rainbuf"
local Historian  = require "helm/historian"
local Lex        = require "helm/lex"
local Zoneherd   = require "helm/zone"
local Suggest    = require "helm/suggest"
local repr       = require "helm/repr"
local lua_parser = require "helm/lua-parser"

local Nerf      = require "helm/raga/nerf"
local Search    = require "helm/raga/search"
local Complete  = require "helm/raga/complete"

local concat               = assert(table.concat)
local sub, gsub, rep, find = assert(string.sub),
                             assert(string.gsub),
                             assert(string.rep),
                             assert(string.find)

local ts = repr.ts_color

#/lua

#!lua
local ModeS = meta()
#/lua



Color schemes are supposed to be one-and-done, and I strongly suspect we
have a =__concat= dominated workflow, although I have yet to turn on the
profiler.

Therefore we use reference equality for the =color= and =hints= tables.
Switching themes is a matter of repopulating those tables.  I intend to
isolate this within an instance so that multiple terminals can each run their
own theme, through a simple 'fat inheritance' method.

=modeselektor= is what you might call hypermodal. Everything is isolated in
its own lookup, that is, we use /value/ equality.  This lets us pass strings
as messages and use jump tables to resolve most things.

It typically runs at the speed of human fingers and can afford to be much less
efficient than it will be, even before the JIT gets involved.

Note also that everything is a method, our dispatch pattern will always
include the =modeS= instance as the first argument.

#!lua
ModeS.modes = Nerf
#/lua

With some semi-constants:

#!lua
ModeS.REPL_LINE = 2
#/lua

Sometimes its useful to briefly override handlers, so we check values
against =special= first:

#!lua
ModeS.special = {}
#/lua

*** ModeS:errPrint(modeS, category, value)

Debug aide.

#!lua
function ModeS.errPrint(modeS, log_stmt)
   modeS.zones.suggest:replace(log_stmt)
   modeS:paint()
   return modeS
end
#/lua


*** status painter (colwrite)

This is a grab-bag with many traces of the bootstrap process.

It also contains the state-of-the-art renderers.


**** bootstrappers

A lot of this just paints mouse events, which we aren't using and won't be
able to use until we rigorously keep track of what's printed where.

Which is painstaking and annoying, but we'll get there...

This will continue to exist for awhile.

#!lua
local STAT_ICON = "◉ "

local function tf(bool)
  return bool and c["true"]("t") or c["false"]("f")
end

local function mouse_paint(m)
   return c.userdata(STAT_ICON)
      .. a.magenta(m.button) .. ": "
      .. tf(m.shift) .. " "
      .. tf(m.meta) .. " "
      .. tf(m.ctrl) .. " "
      .. tf(m.moving) .. " "
      .. tf(m.scrolling) .. " "
      .. a.cyan(m.col) .. "," .. a.cyan(m.row)
end

local function mk_paint(fragment, shade)
   return function(action)
      return shade(fragment .. action)
   end
end

local function paste_paint(frag)
   local result
   -- #todo handle escaping of special characters in pasted data
   if #frag < 20 then
      result = "PASTE: " .. frag
   else
      result = ("PASTE(%d): %s..."):format(#frag, frag:sub(1, 17))
   end
   return a.green(STAT_ICON .. result)
end

local icon_map = { MOUSE = mouse_paint,
                   NAV   = mk_paint(STAT_ICON, a.magenta),
                   CTRL  = mk_paint(STAT_ICON, a.blue),
                   ALT   = mk_paint(STAT_ICON, c["function"]),
                   ASCII = mk_paint(STAT_ICON, a.green),
                   UTF8  = mk_paint(STAT_ICON, a.green),
                   PASTE = paste_paint,
                   NYI   = mk_paint(STAT_ICON .. "! ", a.red) }

local function _make_icon(category, value)
   return icon_map[category](value)
end
#/lua

*** ModeS:placeCursor()

Places the cursor where it belongs within the =command= zone.

#!lua
function ModeS.placeCursor(modeS)
   local col = modeS.zones.command.tc + modeS.txtbuf.cursor.col - 1
   local row = modeS.zones.command.tr + modeS.txtbuf.cursor.row - 1
   write(a.colrow(col, row))
end
#/lua

*** ModeS:paint()

This simply calls the same method on the zoneherd.

#!lua
function ModeS.paint(modeS)
   modeS.zones:paint(modeS)
   return modeS
end
#/lua


*** ModeS:reflow()

#!lua
function ModeS.reflow(modeS)
   modeS.zones:reflow(modeS)
   modeS:paint()
   return modeS
end
#/lua

*** Prompts and modes / raga

Time to add modes to the =modeselektor=!

Right now everything works on the default mode, "nerf":

#!lua
ModeS.raga_default = "nerf"
#/lua

Yes, I'm calling it =raga= and that's a bit precious, but we have a =modes=
table and use it heavily.  =modes= is kind of short for =modal selector=.

We'll need several basic modes and some ways to do overlay, and we need a
single source of truth as to what mode we're in.

The entrance for that should be a single function, =ModeS:shiftMode(raga)=,
which takes care of all stateful changes to =modeselektor= needed to enter
the mode.  One thing it will do is set the field =raga= to the parameter.

As a general rule, we want mode changes to work generically, by changing
the functions attached to =(category, value)= pairs.

But sometimes we'll want a bit of logic that dispatches on the mode directly,
repainting is a good example of this.

The next mode we're going to write is ="search"=.

**** ModeS:continuationLines()

Answers the number of additional lines (beyond the first) needed
for the command zone.

#!lua
function ModeS.continuationLines(modeS)
   return modeS.txtbuf and #modeS.txtbuf.lines - 1 or 0
end
#/lua

**** ModeS:updatePrompt()

Updates the prompt with the correct symbol and number of continuation prompts.

#!lua
function ModeS.updatePrompt(modeS)
   local prompt = modeS.modes.prompt_char .. " " .. ("\n..."):rep(modeS:continuationLines())
   modeS.zones.prompt:replace(prompt)
end
#/lua


*** ModeS:shiftMode(raga)

The =modeselektor=, as described in the prelude, is a stateful and hypermodal
=repl= environment.

=shiftMode= is the gear stick which drives the state. It encapsulates the
state changes needed to switch between them.

I'm going to go ahead and weld on =search= before I start waxing eloquent.


**** ModeS.closet

A storage table for modes and other things we aren't using and need to
retrieve.

#!lua
ModeS.closet = { nerf =     { modes = Nerf,
                              lex   = Lex.lua_thor },
                 search =   { modes = Search,
                              lex   = Lex.null },
                 complete = { modes = Complete,
                              lex   = Lex.lua_thor } }

function ModeS.shiftMode(modeS, raga)
   if raga == "search" then
      -- stash current lexer
      -- #todo do this in a less dumb way
      modeS.closet[modeS.raga].lex = modeS.lex
   end
   modeS.lex = modeS.closet[raga].lex
   modeS.modes = modeS.closet[raga].modes
   modeS.raga = raga
   modeS:updatePrompt()
   return modeS
end
#/lua

**** _firstCharHandler

Our first character can trigger mode switches, notably we want an initial
=/= to trigger search mode.

#!lua
local function _firstCharHandler(modeS, category, value)
   local shifted = false
   if category == "ASCII" then
      if value == "/" then
         modeS:shiftMode "search"
         shifted = true
      end
   end
   modeS.firstChar = false
   return shifted
end
#/lua


** act

  =act= simply dispatches. Note that our common interfaces is
=method(modeS, category, value)=, we need to distinguish betwen the tuple
=("INSERT", "SHIFT-LEFT")= (which could arrive from copy-paste) and
=("NAV", "SHIFT-LEFT")= and preserve information for our fall-through method.

=act= always succeeds, meaning we need some metatable action to absorb and
log anything unexpected.

#!lua
local assertfmt = import("core/string", "assertfmt")
local hasfield, iscallable = import("core/table", "hasfield", "iscallable")

function ModeS.act(modeS, category, value)
   assertfmt(modeS.modes[category], "no category %s in modeS", category)
   -- catch special handlers first
   if modeS.special[value] then
      return modeS.special[value](modeS, category, value)
   end
   local icon = _make_icon(category, value)
   -- Special first-character handling
   if modeS.firstChar and not (category == "MOUSE" or category == "NAV") then
      modeS:setResults ""
      local shifted = _firstCharHandler(modeS, category, value)
      if shifted then
        goto final
      end
   end
   -- Dispatch on value if possible
   if hasfield(modeS.modes[category], value) then
      modeS.modes[category][value](modeS, category, value)
   -- Or on category if the whole category is callable
   elseif iscallable(modeS.modes[category]) then
      modeS.modes[category](modeS, category, value)
   -- Otherwise display the unknown command
   else
      local val_rep = string.format("%q",value):sub(2,-2)
      icon = _make_icon("NYI", category .. ": " .. val_rep)
   end

   ::final::
   if modeS.raga == "search" then
      local searchResult = modeS.hist:search(tostring(modeS.txtbuf))
      modeS:setResults(searchResult)
   end
   -- Replace zones
   modeS.zones.stat_col:replace(icon)
   modeS.zones.command:replace(modeS.txtbuf)
   modeS:updatePrompt()
   modeS.suggest:update(modeS, category, value)
   -- Reflow in case command height has changed. Includes a paint.
   modeS:reflow()
   collectgarbage()
end
#/lua

To keep =act= itself replaceable, we look it up on each call:

#!lua
function ModeS.__call(modeS, category, value)
  return modeS:act(category, value)
end
#/lua

*** ModeS:setResults(results)

Sets the contents of the results area to =results=, wrapping it in a Rainbuf
if necessary. Strings are passed through unchanged.

#!lua
local instanceof = import("core/meta", "instanceof")

function ModeS.setResults(modeS, results)
   results = results or ""
   if results == "" then
      modeS.zones.results:replace(results)
      return
   end
   if type(results) == "string" then
      results = { results, n = 1, frozen = true }
   end
   local rb = instanceof(results, Rainbuf) and results or Rainbuf(results)
   rb.scrollable = true
   modeS.zones.results:replace(rb)
end
#/lua

*** ModeS:eval()


**** eval Environment

Create an environment to =eval= the txtbuf in.

This copies new globals into =_G=, and puts their names into the repr =anti_G=
namespace.

It also does lookups against =_G= first, falling back on =__G=.

All of this assumes that user code doesn't tamper with the environment. Though
if it happens to, this code should do the right thing, which is nothing.

#!lua
local eval_ENV = {}
local eval_M = {}
setmetatable(eval_ENV, eval_M)


local function indexer(Env, key)
   return Env[key]
end

function eval_M.__index(eval_ENV, key)
   local ok, value = pcall(indexer, _G, key)
   if ok and value ~= nil then
      return value
   end
   ok, value = pcall(indexer, __G, key)
   if ok and value ~= nil then
      return value
   end
   return nil
end

local function newindexer(Env, key, value)
   Env[key] = value
end

local loadNames = import("helm/repr/names", "loadNames")

function eval_M.__newindex(eval_ENV, key, value)
   local ok = pcall(newindexer, _G, key, value)
   if not ok then
      rawset(_G, key, value)
   end
   -- Use loadNames() to get the key added to all_symbols
   -- Should really divide up responsibility better between
   -- loadNames() and addName()
   loadNames{ [key] = value }
end
#/lua

#!lua
local function gatherResults(success, ...)
  return success, pack(...)
end
#/lua

#!lua
local result_repr_M = meta {}

function result_repr_M.__repr(result)
  local i = 1
  return function()
     if i <= #result then
       i = i + 1
       return result[i - 1]
     end
  end
end
#/lua

#!lua
local insert = assert(table.insert)

function ModeS.__eval(modeS, chunk, no_append)
   -- Getting ready to eval, cancel any active autocompletion
   modeS.suggest:cancel(modeS)
   -- check for leading =, old-school style
   local head = sub(chunk, 1, 1)
   if head == "=" then -- take pity on old-school Lua hackers
       chunk = "return " .. sub(chunk,2)
   end
   -- add "return" and see if it parses
   local return_chunk = "return " .. chunk
   local parsed_chunk = lua_parser(return_chunk)
   if not parsed_chunk:select "Error" () then
      chunk = return_chunk
   else
      -- re-parse the chunk
      parsed_chunk = lua_parser(chunk)
   end
   -- #Todo tinker with the chunk, finding $1-type vars
   if parsed_chunk:select "Error" () then
      -- our parser isn't perfect, let's see what lua thinks
      local is_expr = loadstring(return_chunk)
      if is_expr then
         -- we have an expression which needs a return, and didn't
         -- detect it:
         chunk = return_chunk
         -- otherwise, we'll try our luck with the chunk, as-is
      end
   end
   local success, results
   local f, err = loadstring(chunk, 'REPL')
   if f then
      setfenv(f, eval_ENV)
      success, results = gatherResults(xpcall(f, debug.traceback))
      if not success then
         -- error
         results.frozen = true
      end
   else
      if err:match "'<eof>'$" then
         -- Lua expects some more input, advance the txtbuf
         modeS.txtbuf:advance()
         return true
      else
         -- make the error into the result
         results = { err,
                     n = 1,
                     frozen = true }
      end
   end
   if not no_append then
      modeS:setResults(results)
      modeS.hist:append(modeS.txtbuf, results, success)
      if success then
         modeS.hist.result_buffer[modeS.hist.n] = results
      end
      modeS.hist.cursor = modeS.hist.n
   else
      return results
   end
end

function ModeS.eval(modeS)
   return modeS:__eval(tostring(modeS.txtbuf))
end
#/lua


*** ModeS:restart()

This resets =_G= and runs all commands in the current session.

#!lua
function ModeS.restart(modeS)
   -- we might want to do this again, so:
   modeS.zones.status:replace "Restarting an repl ↩️"
   local _G_backback = core.deepclone(_G_back)
   _G = _G_back
   -- we need the existing __G, not the empty clone, in _G:
   _G.__G = __G
   -- and we need the new _G, not the old one, as the index for __G:
   getmetatable(__G).__index = _G
   _G_back = _G_backback
   -- perform rerun
   -- Replace results:
   local hist = modeS.hist
   local top = hist.cursor - 1
   local session_count = hist.cursor - hist.cursor_start
   hist.cursor = hist.cursor_start
   hist.n  = hist.n - session_count
   hist.conn:exec "SAVEPOINT restart_session;"
   for i = modeS.hist.cursor_start, top do
      local results = modeS:__eval(tostring(hist[i]), true)
      hist.n = hist.n + 1
      hist.result_buffer[hist.n] = results
      hist:persist(hist[i], results)
   end
   hist.cursor = top + 1
   hist.n = #hist
   modeS:paint()
   uv.timer_start(uv.new_timer(), 2000, 0,
                  function()
                     modeS.zones.status:replace(modeS.prompt_lines.default)
                     modeS:paint()
                  end)
   local restart_idle = uv.new_idle()
   restart_idle:start(function()
      if #hist.idlers > 0 then
         return nil
      end
      hist.conn:exec "RELEASE restart_session;"
      restart_idle:stop()
   end)
end
#/lua

**** modeS.status

A way to jack into =singletons/status=.

#!lua
local function _status__repr(status_table)
  return concat(status_table)
end

local _stat_M = meta {}
_stat_M.__repr = _status__repr

function _stat_M.clear(status_table)
  return setmetatable({}, getmetatable(status_table))
end
#/lua


** new


#!lua
local function new(max_col, max_row)
  local modeS = meta(ModeS)
  modeS.txtbuf = Txtbuf()
  modeS.hist  = Historian()
  modeS.suggest = Suggest()
  modeS.status = setmetatable({}, _stat_M)
  rawset(__G, "stat", modeS.status)
  modeS.max_col = max_col
  modeS.max_row = max_row
  -- this will be replaced with Zones
  modeS.l_margin = 4
  modeS.r_margin = 80
  modeS.repl_top = ModeS.REPL_LINE
  modeS.zones = Zoneherd(modeS, write)
  modeS.prompt_lines = { default = "an repl, plz reply uwu 👀" }
  modeS.zones.status:replace(modeS.prompt_lines.default)
  -- initial state
  modeS.firstChar = true
  modeS:shiftMode(modeS.raga_default)
  return modeS
end

ModeS.idEst = new
#/lua

#!lua
return new
#/lua























