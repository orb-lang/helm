* Rainbuf

This class encapsulates data to be written to the screen.

As it stands, we have two special cases, the =txtbuf= and =results=.

We need to extend the functionality of =results=, so we're building this as a
root metatable for those methods.

Plausibly, we can make this a 'mixin' for =txtbuf= as well, since they have
the additional complexity of receiving input.


** Design

We're aiming for complex interactivity with data.

Our current renderer is crude: it converts the entire table into a string
representation, including newlines, and returns it.

One sophistication we've added is a =__repr= metamethod, which overrides the
default use of =ts()=.  It still returns a dumb block of strings, using
concatenation at the moment of combination.  This is inefficient and also
impedes more intelligent rendering.  But it's a start.

=rainbuf= needs to have a cell-by-cell understanding of what's rendered and
what's not, must calculate a printable representation given the constraints of
the =zone=, and, eventually, will respond to mouse and cursor events.

Doing this correctly is extraordinarily complex but we can fake it adequately
as long as the engineering is correct.  Everything we're currently using is
ASCII-range or emojis and both of those are predictable, narrow/ordinary and
wide respectively.

There are libraries/databases which purport to answer this question.  We plan
to link one of those in.

Results, as we currently manifest them, use an array for the raw objects and
=n= rather than =#res= to represent the length.  That's a remnant of the
original repl from =luv=.  The =.n= is neceessary because =nil= can be a
positional result.

A =txtbuf= keeps its contents in a =.lines= table, and so we can reuse this
field for cached textual representations.  All internals should support both
strings and array-of-strings as possible values of the =lines= array.

We also need a =.wids= array of arrays of numbers and should probably hide
this behind methods so as to fake it when we just have strings.

Later, we add a =.targets=, this is a dense array for the number of lines,
each with a sparse array containing handlers for mouse events.  If a mouse
event doesn't hit a =target= then the default handler is engaged.

We also have =offset=, a number, and =more=, which is =true= if the buffer
continues past the edge of the zone and otherwise falsy.


**** includes

#!lua
local lineGen = import("repr:repr", "lineGen")
#/lua


**** Rainbuf metatable

#!lua
local Rainbuf = meta {}
#/lua


** Methods


*** Rainbuf:setExtent(rows, cols)

Sets the extent of the area the Rainbuf output will be painted in, adjusting
scroll position and clearing caches as needed.

#!lua
local lines = import("core/string", "lines")
function Rainbuf.setExtent(rainbuf, rows, cols)
   rows = rows or 20
   cols = cols or 80
   -- If width is changing, we need a re-render
   if cols ~= rainbuf.cols then
      rainbuf:clearCaches()
   end
   -- If the number of rows is increasing, may need to adjust our offset
   -- to avoid blank lines at the bottom. Note that if cols has also changed
   -- we don't know what's going on--but rainbuf.more will have also been reset
   -- so we won't try anything
   if rainbuf.rows and rows > rainbuf.rows and not rainbuf.more then
      -- #todo actually do the thing
   end
   rainbuf.rows = rows
   rainbuf.cols = cols
end
#/lua


*** Rainbuf:contentCols()

The number of columns available to the Rainbuf's content, less any gutter
(used for the scroll indicator, for now).

#!lua
function Rainbuf.contentCols(rainbuf)
   return rainbuf.scrollable and rainbuf.cols - 3 or rainbuf.cols
end
#/lua


*** Scrolling


**** Rainbuf:scrollTo(offset, allow_overscroll)

Main scrolling method. Scrolls the contents of the Rainbuf to start =offset=
lines into the underlying content.

=allow_overscroll= determines whether we are willing to scroll past the
available content. If falsy, scrolling stops when the last line of content
is the last line on the screen. If truthy, scrolling stops when the last
line of content is the *first* line on the screen.

Returns a boolean indicating whether any scrolling occurred.

#!lua
local clamp = import("core/math", "clamp")
function Rainbuf.scrollTo(rainbuf, offset, allow_overscroll)
   if offset < 0 then
      offset = 0
   end
   if offset ~= 0 then
      -- Try to render the content that will be visible after the scroll
      rainbuf:composeUpTo(offset + rainbuf.rows)
      local required_lines_visible = allow_overscroll and 1 or rainbuf.rows
      local max_offset = clamp(#rainbuf.lines - required_lines_visible, 0)
      offset = clamp(offset, 0, max_offset)
   end
   if offset ~= rainbuf.offset then
      rainbuf.offset = offset
      rainbuf:beTouched()
      return true
   else
      return false
   end
end
#/lua


**** Rainbuf:scrollBy(delta, allow_overscroll)

Relative scrolling operation. Change the scroll position by =delta= line(s).

#!lua
function Rainbuf.scrollBy(rainbuf, delta, allow_overscroll)
   return rainbuf:scrollTo(rainbuf.offset + delta, allow_overscroll)
end
#/lua


**** Rainbuf:scrollUp(), :scrollDown(), :pageUp(), :pageDown()

Helpers for common scrolling operations.

#!lua
function Rainbuf.scrollUp(rainbuf)
   return rainbuf:scrollBy(-1)
end
function Rainbuf.scrollDown(rainbuf)
   return rainbuf:scrollBy(1)
end

function Rainbuf.pageUp(rainbuf)
   return rainbuf:scrollBy(-rainbuf.rows)
end
function Rainbuf.pageDown(rainbuf)
   return rainbuf:scrollBy(rainbuf.rows)
end

local floor = assert(math.floor)
function Rainbuf.halfPageUp(rainbuf)
   return rainbuf:scrollBy(-floor(rainbuf.rows / 2))
end
function Rainbuf.halfPageDown(rainbuf)
   return rainbuf:scrollBy(floor(rainbuf.rows / 2))
end
#/lua


**** Rainbuf:scrollToTop(), Rainbuf:scrollToBottom(allow_overscroll)

Scroll to the very beginning or end of the content.
Beginning is easy, end is a little more interesting, as we have to first
render all the content (in order to know how much there is), then account
for allow_overscroll in deciding how far to go.

#!lua
function Rainbuf.scrollToTop(rainbuf)
   return rainbuf:scrollTo(0)
end

function Rainbuf.scrollToBottom(rainbuf, allow_overscroll)
   rainbuf:composeAll()
   -- Choose a definitely out-of-range value,
   -- which scrollTo will clamp appropriately
   return rainbuf:scrollTo(#rainbuf.lines, allow_overscroll)
end
#/lua


**** Rainbuf:ensureVisible(start_index[, end_index])

Scrolls such that the line at =start_index= is visible. If =end_index= is also
provided, attempts to fit the entire range =start_index..end_index= on screen,
falling back to scrolling such that =start_index= is at the top of the screen
if this is not possible (because the number of lines requested is too great).

#!lua
function Rainbuf.ensureVisible(rainbuf, start_index, end_index)
   end_index = end_index or start_index
   local min_offset = clamp(end_index - rainbuf.rows, 0)
   local max_offset = clamp(start_index - 1, 0)
   rainbuf:scrollTo(clamp(rainbuf.offset, min_offset, max_offset))
end
#/lua


*** Rendering


**** Rainbuf:initComposition()

Abstract method. Perform any setup necessary to begin composition. Do nothing
if setup is already done, i.e. this is a lazy-init.

A call to :clearCaches() should tear down everything this method sets up.


**** Rainbuf:composeOneLine()

Composes one line and saves it to the cached =lines= array.
Actual composition is delegated to an abstract method _composeOneLine.
Sets =more= to false and returns false if we are at the end of the content,
otherwise returns true.

#!lua
local insert = assert(table.insert)
function Rainbuf.composeOneLine(rainbuf)
   local line = rainbuf:_composeOneLine()
   if line then
      insert(rainbuf.lines, line)
      return true
   else
      rainbuf.more = false
      return false
   end
end
#/lua


**** Rainbuf:_composeOneLine()

Abstract method. Generate the next line of content (without caching it),
returning nil if the available content is exhausted.


**** Rainbuf:composeUpTo(line_number)

Attempts to compose at least =line_number= lines to the cached =lines= array.
In order to correctly set =rainbuf.more=, we attempt to render
one additional line.

#!lua
function Rainbuf.composeUpTo(rainbuf, line_number)
   rainbuf:initComposition()
   while rainbuf.more and #rainbuf.lines <= line_number do
      rainbuf:composeOneLine()
   end
   return rainbuf
end
#/lua


**** Rainbuf:composeAll()

Renders all of our content to the cached =lines= array.

#!lua
function Rainbuf.composeAll(rainbuf)
   rainbuf:initComposition()
   while rainbuf.more do
      rainbuf:composeOneLine()
   end
   return rainbuf
end
#/lua


**** Rainbuf:lineGen()

Generator which yields the portion of the Rainbuf that should be displayed
(based on .rows and .cols), one line at a time.

Since we've replaced the old all-at-once =repr= with something that generates
a line at a time (and it only took, oh, six months), we're finally able to
generate these on the fly.

#!lua
function Rainbuf.lineGen(rainbuf)
   rainbuf:initComposition()
   -- state for iterator
   local cursor = rainbuf.offset
   local max_row = rainbuf.offset + rainbuf.rows
   local function _nextLine()
      -- Off the end
      if cursor >= max_row then
         return nil
      end
      cursor = cursor + 1
      rainbuf:composeUpTo(cursor)
      local prefix = ""
      if rainbuf.scrollable then
         -- If this is the last line requested, but more are available,
         -- prepend a continuation marker, otherwise left padding
         prefix = "   "
         if cursor == max_row and rainbuf.more then
            prefix = a.red "..."
         end
      end
      return rainbuf.lines[cursor] and prefix .. rainbuf.lines[cursor]
   end
   return _nextLine
end
#/lua


*** Content management and change detection


*** Rainbuf:clearCaches()

  Clears any cached lineGen iterators and their output, causing a full
re-compose the next time lineGen is called.

#!lua
local clear = assert(table.clear)
function Rainbuf.clearCaches(rainbuf)
   clear(rainbuf.lines)
   rainbuf.more = true
end
#/lua


*** Rainbuf:replace([res])

Replace the contents of the Rainbuf with those from res, emptying it if res is
nil. Obviously we must be marked touched, clearing caches in the process.

#!lua
function Rainbuf.replace(rainbuf, res)
   rainbuf.value = res
   rainbuf:beTouched()
end
#/lua


*** Rainbuf:beTouched()

Mark the Rainbuf as touched. Might as well clear caches at this point, we'll
certainly need to before our next render.

#!lua
function Rainbuf.beTouched(rainbuf)
   rainbuf.touched = true
   rainbuf:clearCaches()
end
#/lua

*** Rainbuf:checkTouched()

Answers whether the Rainbuf (or its =source=, if it has one) have been touched
since the last time this method was called, clearing the flag in the process.

Overrides should generally follow the pattern of checking any sub-buffers or
other data sources first, calling =:beTouched()= if they answer true, and
calling =super= only at the end to reset the flag.

#todo We could replace the end of this with agent_utils.checkTouched. We
aren't an agent, so it feels a little weird to get it from there, but the
actual "touched" concept is the same and the implementation certainly works.

#!lua
function Rainbuf.checkTouched(rainbuf)
   if rainbuf.source and rainbuf.source:checkTouched() then
      rainbuf:replace(rainbuf.source.buffer_value)
   end
   local touched = rainbuf.touched
   rainbuf.touched = false
   return touched
end
#/lua


*** Rainbuf:_init()

Initialize the rainbuf immediately after creation. Extracted from __call
for easy extension.

#!lua
function Rainbuf._init(rainbuf)
   rainbuf.offset = 0
   rainbuf.lines = {}
   rainbuf.touched = false
end
#/lua


*** Rainbuf([res][, cfg])

#!lua
local Window = require "window:window"
local pget = assert(require "core:table" . pget)

function Rainbuf.__call(buf_class, res, cfg)
   local buf_M = getmetatable(buf_class)
   local rainbuf = setmetatable({}, buf_M)
   rainbuf:_init()
   -- #todo should check something else here--or just have mutually-exclusive
   -- parameters for source and value?
   if res and res.idEst == Window then
      rainbuf.source = res
      rainbuf:replace(res.buffer_value)
   else
      rainbuf:replace(res)
   end
   if cfg then
      for k, v in pairs(cfg) do
         rainbuf[k] = v
      end
   end
   return rainbuf
end
#/lua


*** Rainbuf:inherit([cfg])

Create a metatable for a "subclass" of Rainbuf. Cribbed from Phrase:inherit().

N.B. This will function against either an instance (=Rainbuf():inherit()=)
or the class itself (=Rainbuf:inherit()=), but in either case this is not true
prototype inheritance, only behavior on the Rainbuf metatable is inherited.

#!lua
local sub = assert(string.sub)
function Rainbuf.inherit(buf_class, cfg)
   local parent_M = getmetatable(buf_class)
   local child_M = setmetatable({}, parent_M)
   -- Copy metamethods because mmethod lookup does not respect =__index=es
   for k,v in pairs(parent_M) do
      if sub(k, 1, 2) == "__" then
         child_M[k] = v
      end
   end
   -- But, the new MT should have itself as __index, not the parent
   child_M.__index = child_M
   if cfg then
      -- this can override the above metamethod assignment
      for k,v in pairs(cfg) do
         child_M[k] = v
      end
   end
   return child_M
end
#/lua


*** Rainbuf:super(method_name)

We mixin core:cluster.super.

#!lua
Rainbuf.super = assert(require "core:cluster" . super)
#/lua


*** Rainbuf.is_rainbuf

We need a way to answer whether we are a Rainbuf *or any subclass*,
attach a property at this level similar to espalier:node.

#!lua
Rainbuf.is_rainbuf = true
#/lua


#!lua
local Rainbuf_class = setmetatable({}, Rainbuf)
Rainbuf.idEst = Rainbuf_class

return Rainbuf_class
#/lua
