digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 41"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-41"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 codeblock_5 codeblock_6}
{rank=same; header_2 prose_3 prose_4 codeblock_5 codeblock_6}

header_2 [label="1 : Resbuf"]

prose_3 [label="prose"]

prose_4 [label="prose"]

codeblock_5 [label="code block 9-13"]

codeblock_6 [label="code block 15-41"]


// END RANK section_1

header_2 -> leaf_7
leaf_7  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Resbuf"]
// END RANK header_2

prose_3 -> { raw_8 prespace_9 literal_10 raw_11}
{rank=same; raw_8 prespace_9 literal_10 raw_11}

raw_8 [label="raw"]

prespace_9 [label="prespace"]

literal_10 [label="literal"]

raw_11 [label="raw"]


// END RANK prose_3

raw_8 -> leaf_12
leaf_12  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Next in the"]
// END RANK raw_8

prespace_9 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_9

literal_10 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label="buf"]
// END RANK literal_10

raw_11 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" series, this will encapsulate results and their various
representations.
"]
// END RANK raw_11

prose_4 -> { raw_16 prespace_17 literal_18 raw_19}
{rank=same; raw_16 prespace_17 literal_18 raw_19}

raw_16 [label="raw"]

prespace_17 [label="prespace"]

literal_18 [label="literal"]

raw_19 [label="raw"]


// END RANK prose_4

raw_16 -> leaf_20
leaf_20  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This should get us from string concatenation to a phrase-like paradigm we can
generalize into"]
// END RANK raw_16

prespace_17 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_17

literal_18 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label="rainbuf"]
// END RANK literal_18

raw_19 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="s.
"]
// END RANK raw_19

codeblock_5 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label="assert (meta)
assert (ipairs)
local color = require \"color\""]
// END RANK codeblock_5

codeblock_6 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Resbuf = meta {}

function Resbuf.ts(resbuf)
   local res_map = {}
   if resbuf.frozen then
      for i, v in ipairs(resbuf) do
         res_map[i] = v
      end
   else
      for i, v in ipairs(resbuf) do
         res_map[i] = color.ts(v)
      end
   end

   return res_map
end

function new(results, frozen)
   local resbuf = meta(Resbuf)
   if frozen then resbuf.frozen = true end
   for k, v in pairs(results) do
      resbuf[k] = v
   end
   return resbuf
end"]
// END RANK codeblock_6


}
