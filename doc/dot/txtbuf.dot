digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 357"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-40"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 prose_5 prose_6 section_7 section_8}
{rank=same; header_2 prose_3 prose_4 prose_5 prose_6 section_7 section_8}

header_2 [label="1 : Txtbuf"]

prose_3 [label="prose"]

prose_4 [label="prose"]

prose_5 [label="prose"]

prose_6 [label="prose"]

section_7 [label="section: 15-16"]

section_8 [label="section: 41-326"]


// END RANK section_1

header_2 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Txtbuf"]
// END RANK header_2

prose_3 -> { raw_10}
{rank=same; raw_10}

raw_10 [label="raw"]


// END RANK prose_3

raw_10 -> leaf_11
leaf_11  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This is not much more than an ordinary array of lines that has a bit of
awareness, mostly about which lines have cursors and which don't.
"]
// END RANK raw_10

prose_4 -> { raw_12}
{rank=same; raw_12}

raw_12 [label="raw"]


// END RANK prose_4

raw_12 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I'll circle back for quipu but I want a basic editor as soon as possible. The
interaction dynamics need to be worked out right away, plus I want to use it!
"]
// END RANK raw_12

prose_5 -> { raw_14}
{rank=same; raw_14}

raw_14 [label="raw"]


// END RANK prose_5

raw_14 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Plan: A line that has a cursor on it, and there can be many, gets 'opened'
into a grid of characters.  These in turn get 'closed' when the cursor leaves.
"]
// END RANK raw_14

prose_6 -> { raw_16}
{rank=same; raw_16}

raw_16 [label="raw"]


// END RANK prose_6

raw_16 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A closed line is just a string.

"]
// END RANK raw_16

section_7 -> { header_18 prose_19 section_20}
{rank=same; header_18 prose_19 section_20}

header_18 [label="2 : Interface"]

prose_19 [label="prose"]

section_20 [label="section: 17-30"]


// END RANK section_7

header_18 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Interface"]
// END RANK header_18

prose_19 -> { raw_22}
{rank=same; raw_22}

raw_22 [label="raw"]


// END RANK prose_19

raw_22 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_22

section_20 -> { header_24 prose_25 prose_26 prose_27 prose_28 section_29}
{rank=same; header_24 prose_25 prose_26 prose_27 prose_28 section_29}

header_24 [label="3 : Instance fields"]

prose_25 [label="prose"]

prose_26 [label="prose"]

prose_27 [label="prose"]

prose_28 [label="prose"]

section_29 [label="section: 31-40"]


// END RANK section_20

header_24 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Instance fields"]
// END RANK header_24

prose_25 -> { raw_31}
{rank=same; raw_31}

raw_31 [label="raw"]


// END RANK prose_25

raw_31 -> leaf_32
leaf_32  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

- lines :  An array of arrays containing codepoints (string fragments).
"]
// END RANK raw_31

prose_26 -> { raw_33}
{rank=same; raw_33}

raw_33 [label="raw"]


// END RANK prose_26

raw_33 -> leaf_34
leaf_34  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- cursor :  Number of fragments to skip before an insertion.
"]
// END RANK raw_33

prose_27 -> { raw_35}
{rank=same; raw_35}

raw_35 [label="raw"]


// END RANK prose_27

raw_35 -> leaf_36
leaf_36  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- cur_row :  Row containing the cursor.
"]
// END RANK raw_35

prose_28 -> { raw_37}
{rank=same; raw_37}

raw_37 [label="raw"]


// END RANK prose_28

raw_37 -> leaf_38
leaf_38  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- disp :  Array of numbers, representing the furthest-right column which
          may be reached by printing the corresponding row.



"]
// END RANK raw_37

section_29 -> { header_39 prose_40 codeblock_41}
{rank=same; header_39 prose_40 codeblock_41}

header_39 [label="4 : dependencies"]

prose_40 [label="prose"]

codeblock_41 [label="code block 33-38"]


// END RANK section_29

header_39 -> leaf_42
leaf_42  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** dependencies"]
// END RANK header_39

prose_40 -> { raw_43}
{rank=same; raw_43}

raw_43 [label="raw"]


// END RANK prose_40

raw_43 -> leaf_44
leaf_44  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_43

codeblock_41 -> leaf_45
leaf_45  [color=Gray,shape=rectangle,fontname=Inconsolata,label="assert(meta)
local collect = assert(table.collect)
local lines = assert(string.lines)
local codepoints = assert(string.codepoints)"]
// END RANK codeblock_41

section_8 -> { header_46 prose_47 codeblock_48 section_49 section_50 section_51 section_52 section_53 section_54 section_55 section_56 section_57 section_58}
{rank=same; header_46 prose_47 codeblock_48 section_49 section_50 section_51 section_52 section_53 section_54 section_55 section_56 section_57 section_58}

header_46 [label="2 : Methods"]

prose_47 [label="prose"]

codeblock_48 [label="code block 43-45"]

section_49 [label="section: 47-78"]

section_50 [label="section: 79-113"]

section_51 [label="section: 114-126"]

section_52 [label="section: 127-156"]

section_53 [label="section: 157-177"]

section_54 [label="section: 178-201"]

section_55 [label="section: 202-220"]

section_56 [label="section: 221-252"]

section_57 [label="section: 253-326"]

section_58 [label="section: 327-357"]


// END RANK section_8

header_46 -> leaf_59
leaf_59  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Methods"]
// END RANK header_46

prose_47 -> { raw_60}
{rank=same; raw_60}

raw_60 [label="raw"]


// END RANK prose_47

raw_60 -> leaf_61
leaf_61  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_60

codeblock_48 -> leaf_62
leaf_62  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Txtbuf = meta {}"]
// END RANK codeblock_48

section_49 -> { header_63 prose_64 codeblock_65 codeblock_66}
{rank=same; header_63 prose_64 codeblock_65 codeblock_66}

header_63 [label="3 : Txtbuf.__tostring(txtbuf)"]

prose_64 [label="prose"]

codeblock_65 [label="code block 49-65"]

codeblock_66 [label="code block 67-76"]


// END RANK section_49

header_63 -> leaf_67
leaf_67  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Txtbuf.__tostring(txtbuf)"]
// END RANK header_63

prose_64 -> { raw_68}
{rank=same; raw_68}

raw_68 [label="raw"]


// END RANK prose_64

raw_68 -> leaf_69
leaf_69  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_68

codeblock_65 -> leaf_70
leaf_70  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local concat = assert(table.concat)

local function cat(l)
   if type(l) == \"string\" then
      return l
   elseif type(l) == \"table\" then
      if l[1] ~= nil then
         return concat(l)
      else
         return \"\"
      end
   end

   error(\"called private fn cat with type\" .. type(l))
end"]
// END RANK codeblock_65

codeblock_66 -> leaf_71
leaf_71  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Txtbuf.__tostring(txtbuf)
   local phrase = \"\"
   for i = 1, #txtbuf.lines - 1 do
      phrase = phrase .. cat(txtbuf.lines[i]) .. \"\\n\"
   end

   return phrase .. cat(txtbuf.lines[#txtbuf.lines])
end"]
// END RANK codeblock_66

section_50 -> { header_72 prose_73 codeblock_74}
{rank=same; header_72 prose_73 codeblock_74}

header_72 [label="3 : Txtbuf:insert(frag)"]

prose_73 [label="prose"]

codeblock_74 [label="code block 81-111"]


// END RANK section_50

header_72 -> leaf_75
leaf_75  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Txtbuf:insert(frag)"]
// END RANK header_72

prose_73 -> { raw_76}
{rank=same; raw_76}

raw_76 [label="raw"]


// END RANK prose_73

raw_76 -> leaf_77
leaf_77  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_76

codeblock_74 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local t_insert, splice = assert(table.insert), assert(table.splice)
local utf8, codepoints = string.utf8, string.codepoints

function Txtbuf.insert(txtbuf, frag)
   local line = txtbuf.lines[txtbuf.cur_row]
   if type(line) == \"string\" then
      line = codepoints(line)
      txtbuf.line = line
   end
   local wide_frag = utf8(frag)
   if wide_frag < #frag then -- a paste
      -- Normalize whitespace
      frag = gsub(frag, \"\\r\\n\", \"\\n\"):gsub(\"\\r\", \"\\n\"):gsub(\"\\t\", \"   \")
      wide_frag = codepoints(frag)
   else
      wide_frag = false
   end
   if not wide_frag then
      t_insert(line, txtbuf.cursor, frag)
      txtbuf.cursor = txtbuf.cursor + 1
      return true
   else
      splice(line, txtbuf.cursor, wide_frag)
      txtbuf.cursor = txtbuf.cursor + #wide_frag
      return true
   end

   return false
end"]
// END RANK codeblock_74

section_51 -> { header_79 prose_80 codeblock_81}
{rank=same; header_79 prose_80 codeblock_81}

header_79 [label="3 : Txtbuf:advance()"]

prose_80 [label="prose"]

codeblock_81 [label="code block 116-124"]


// END RANK section_51

header_79 -> leaf_82
leaf_82  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Txtbuf:advance()"]
// END RANK header_79

prose_80 -> { raw_83}
{rank=same; raw_83}

raw_83 [label="raw"]


// END RANK prose_80

raw_83 -> leaf_84
leaf_84  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_83

codeblock_81 -> leaf_85
leaf_85  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local ts_bw = (require \"color\").ts_bw

function Txtbuf.advance(txtbuf)
   txtbuf.lines[#txtbuf.lines + 1] = {}
   txtbuf.cur_row = #txtbuf.lines
   txtbuf.cursor = 1
end"]
// END RANK codeblock_81

section_52 -> { header_86 prose_87 codeblock_88}
{rank=same; header_86 prose_87 codeblock_88}

header_86 [label="3 : Txtbuf:d_back()"]

prose_87 [label="prose"]

codeblock_88 [label="code block 132-154"]


// END RANK section_52

header_86 -> leaf_89
leaf_89  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Txtbuf:d_back()"]
// END RANK header_86

prose_87 -> { raw_90}
{rank=same; raw_90}

raw_90 [label="raw"]


// END RANK prose_87

raw_90 -> leaf_91
leaf_91  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The return value tells us if we have one less line, since we need to
clear it off the screen (true of d_fwd as well).
"]
// END RANK raw_90

codeblock_88 -> leaf_92
leaf_92  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local remove = assert(table.remove)

function Txtbuf.d_back(txtbuf)
   local cursor, cur_row = txtbuf.cursor, txtbuf.cur_row
   if cursor > 1 then
      remove(txtbuf.lines[cur_row], cursor - 1)
      txtbuf.cursor = cursor - 1
      return false
   elseif cur_row == 1 then
      return false
   else
      local new_line = concat(txtbuf.lines[cur_row - 1])
                       .. concat(txtbuf.lines[cur_row])
      local new_cursor = #txtbuf.lines[cur_row - 1] + 1
      txtbuf.lines[cur_row - 1] = codepoints(new_line)
      remove(txtbuf.lines, cur_row)
      txtbuf.cur_row = cur_row - 1
      txtbuf.cursor = new_cursor
      return true
   end
end"]
// END RANK codeblock_88

section_53 -> { header_93 prose_94 codeblock_95}
{rank=same; header_93 prose_94 codeblock_95}

header_93 [label="3 : Txtbuf:d_fwd()"]

prose_94 [label="prose"]

codeblock_95 [label="code block 159-175"]


// END RANK section_53

header_93 -> leaf_96
leaf_96  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Txtbuf:d_fwd()"]
// END RANK header_93

prose_94 -> { raw_97}
{rank=same; raw_97}

raw_97 [label="raw"]


// END RANK prose_94

raw_97 -> leaf_98
leaf_98  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_97

codeblock_95 -> leaf_99
leaf_99  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Txtbuf.d_fwd(txtbuf)
   local cursor, cur_row = txtbuf.cursor, txtbuf.cur_row
   if cursor <= #txtbuf.lines[cur_row] then
      remove(txtbuf.lines[txtbuf.cur_row], txtbuf.cursor)
      return false
   elseif cur_row == #txtbuf.lines then
      return false
   else
      local new_line = concat(txtbuf.lines[cur_row])
                       .. concat(txtbuf.lines[cur_row + 1])
      txtbuf.lines[cur_row] = codepoints(new_line)
      remove(txtbuf.lines, cur_row + 1)
      return true
   end
end"]
// END RANK codeblock_95

section_54 -> { header_100 prose_101 prose_102 codeblock_103}
{rank=same; header_100 prose_101 prose_102 codeblock_103}

header_100 [label="3 : Txtbuf:left(disp)"]

prose_101 [label="prose"]

prose_102 [label="prose"]

codeblock_103 [label="code block 186-199"]


// END RANK section_54

header_100 -> leaf_104
leaf_104  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Txtbuf:left(disp)"]
// END RANK header_100

prose_101 -> { raw_105}
{rank=same; raw_105}

raw_105 [label="raw"]


// END RANK prose_101

raw_105 -> leaf_106
leaf_106  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This method and the next inform the modeSelektor if the cursor has moved,
so as to wrap around otherwise.
"]
// END RANK raw_105

prose_102 -> { raw_107 prespace_108 literal_109 raw_110 prespace_111 literal_112 raw_113}
{rank=same; raw_107 prespace_108 literal_109 raw_110 prespace_111 literal_112 raw_113}

raw_107 [label="raw"]

prespace_108 [label="prespace"]

literal_109 [label="literal"]

raw_110 [label="raw"]

prespace_111 [label="prespace"]

literal_112 [label="literal"]

raw_113 [label="raw"]


// END RANK prose_102

raw_107 -> leaf_114
leaf_114  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Arguably this logic should be completely internal to"]
// END RANK raw_107

prespace_108 -> leaf_115
leaf_115  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_108

literal_109 -> leaf_116
leaf_116  [color=Gray,shape=rectangle,fontname=Inconsolata,label="left"]
// END RANK literal_109

raw_110 -> leaf_117
leaf_117  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_110

prespace_111 -> leaf_118
leaf_118  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_111

literal_112 -> leaf_119
leaf_119  [color=Gray,shape=rectangle,fontname=Inconsolata,label="right"]
// END RANK literal_112

raw_113 -> leaf_120
leaf_120  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
themselves.
"]
// END RANK raw_113

codeblock_103 -> leaf_121
leaf_121  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Txtbuf.left(txtbuf, disp)
   local disp = disp or 1
   local moved = false
   if txtbuf.cursor - disp >= 1 then
      txtbuf.cursor = txtbuf.cursor - disp
      moved = true
   else
      txtbuf.cursor = 1
   end

   return moved
end"]
// END RANK codeblock_103

section_55 -> { header_122 prose_123 codeblock_124}
{rank=same; header_122 prose_123 codeblock_124}

header_122 [label="3 : Txtbuf:right(disp)"]

prose_123 [label="prose"]

codeblock_124 [label="code block 204-218"]


// END RANK section_55

header_122 -> leaf_125
leaf_125  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Txtbuf:right(disp)"]
// END RANK header_122

prose_123 -> { raw_126}
{rank=same; raw_126}

raw_126 [label="raw"]


// END RANK prose_123

raw_126 -> leaf_127
leaf_127  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_126

codeblock_124 -> leaf_128
leaf_128  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Txtbuf.right(txtbuf, disp)
   disp = disp or 1
   local moved = false
   local line = txtbuf.lines[txtbuf.cur_row]
   if txtbuf.cursor + disp <= #line + 1 then
      txtbuf.cursor = txtbuf.cursor + disp
      moved = true
   else
      txtbuf.cursor = #line + 1
   end

   return moved
end"]
// END RANK codeblock_124

section_56 -> { header_129 prose_130 codeblock_131 codeblock_132}
{rank=same; header_129 prose_130 codeblock_131 codeblock_132}

header_129 [label="3 : Txtbuf:up(), Txtbuf:down()"]

prose_130 [label="prose"]

codeblock_131 [label="code block 223-236"]

codeblock_132 [label="code block 238-251"]


// END RANK section_56

header_129 -> leaf_133
leaf_133  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Txtbuf:up(), Txtbuf:down()"]
// END RANK header_129

prose_130 -> { raw_134}
{rank=same; raw_134}

raw_134 [label="raw"]


// END RANK prose_130

raw_134 -> leaf_135
leaf_135  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_134

codeblock_131 -> leaf_136
leaf_136  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Txtbuf.up(txtbuf)
   local cur_row = txtbuf.cur_row
   if cur_row == 1 then
      return false
   else
      txtbuf.cur_row = cur_row - 1
      if txtbuf.cursor > #txtbuf.lines[txtbuf.cur_row] + 1 then
         txtbuf.cursor = #txtbuf.lines[txtbuf.cur_row] + 1
      end
      return true
   end
end"]
// END RANK codeblock_131

codeblock_132 -> leaf_137
leaf_137  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Txtbuf.down(txtbuf)
   local cur_row = txtbuf.cur_row
   if cur_row == #txtbuf.lines then
      return false
   else
      txtbuf.cur_row = cur_row + 1
      if txtbuf.cursor > #txtbuf.lines[txtbuf.cur_row] + 1 then
         txtbuf.cursor = #txtbuf.lines[txtbuf.cur_row] + 1
      end
      return true
   end
end"]
// END RANK codeblock_132

section_57 -> { header_138 prose_139 codeblock_140 codeblock_141 codeblock_142 codeblock_143}
{rank=same; header_138 prose_139 codeblock_140 codeblock_141 codeblock_142 codeblock_143}

header_138 [label="3 : Txtbuf:nl()"]

prose_139 [label="prose"]

codeblock_140 [label="code block 257-288"]

codeblock_141 [label="code block 291-299"]

codeblock_142 [label="code block 301-311"]

codeblock_143 [label="code block 313-324"]


// END RANK section_57

header_138 -> leaf_144
leaf_144  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Txtbuf:nl()"]
// END RANK header_138

prose_139 -> { raw_145}
{rank=same; raw_145}

raw_145 [label="raw"]


// END RANK prose_139

raw_145 -> leaf_146
leaf_146  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Either splits a line or (more usually) evaluates.
"]
// END RANK raw_145

codeblock_140 -> leaf_147
leaf_147  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local sub = assert(string.sub)
local insert = assert(table.insert)
function Txtbuf.nl(txtbuf)
   -- Most txtbufs are one line, so we always evaluate from
   -- a one-liner, regardless of cursor location.
   local linum = #txtbuf.lines
   if linum == 1 then
      return true
   end
   local cursor = txtbuf.cursor
   local cur_row = txtbuf.cur_row
   -- these are the two default positions for up and down
   -- history search
   if cur_row == 1 and cursor > #txtbuf.lines[1] then
      return true
   end
   if cur_row == linum and cursor > #txtbuf.lines[linum] then
      return true
   end
   -- split the line
   local cur_line = concat(txtbuf.lines[txtbuf.cur_row])
   local first = sub(cur_line, 1, cursor - 1)
   local second = sub(cur_line, cursor)
   txtbuf.lines[cur_row] = codepoints(first)
   insert(txtbuf.lines, cur_row + 1, codepoints(second))
   txtbuf.cursor = 1
   txtbuf.cur_row = cur_row + 1

   return false
end"]
// END RANK codeblock_140

codeblock_141 -> leaf_148
leaf_148  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Txtbuf.suspend(txtbuf)
   for i,v in ipairs(txtbuf.lines) do
      txtbuf.lines[i] = tostring(v)
   end

   return txtbuf
end"]
// END RANK codeblock_141

codeblock_142 -> leaf_149
leaf_149  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Txtbuf.resume(txtbuf)
   for i, line in ipairs(txtbuf.lines) do
      txtbuf.lines[i] = codepoints(line)
   end
   txtbuf.cursor = #txtbuf.lines[#txtbuf.lines] + 1
   txtbuf.cur_row = #txtbuf.lines

   return txtbuf
end"]
// END RANK codeblock_142

codeblock_143 -> leaf_150
leaf_150  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local cl = assert(table.clone, \"table.clone must be provided\")

function Txtbuf.clone(txtbuf)
   -- Clone to depth of 3 to get tb, tb.lines, and each lines
   local tb = cl(txtbuf, 3)
   if type(tb.lines[1]) == \"string\" then
      return tb:resume()
   end
   return tb
end"]
// END RANK codeblock_143

section_58 -> { header_151 prose_152 codeblock_153 codeblock_154}
{rank=same; header_151 prose_152 codeblock_153 codeblock_154}

header_151 [label="3 : new"]

prose_152 [label="prose"]

codeblock_153 [label="code block 329-353"]

codeblock_154 [label="code block 355-357"]


// END RANK section_58

header_151 -> leaf_155
leaf_155  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** new"]
// END RANK header_151

prose_152 -> { raw_156}
{rank=same; raw_156}

raw_156 [label="raw"]


// END RANK prose_152

raw_156 -> leaf_157
leaf_157  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_156

codeblock_153 -> leaf_158
leaf_158  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function into_codepoints(lines)
   local cp = {}
   for i,v in ipairs(lines) do
      cp[i] = codepoints(v)
   end

   return cp
end

local function new(line)
   local txtbuf = meta(Txtbuf)
   local __l = line or \"\"
   local _lines = into_codepoints(collect(lines, __l))
   if #_lines == 0 then
      _lines[1] = {}
   end
   txtbuf.cursor = line and #_lines[#_lines] + 1 or 1
   txtbuf.cur_row = line and #_lines  or 1
   txtbuf.lines = _lines
   return txtbuf
end

Txtbuf.idEst = new"]
// END RANK codeblock_153

codeblock_154 -> leaf_159
leaf_159  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return new"]
// END RANK codeblock_154


}
