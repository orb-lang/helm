digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 264"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-33"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 prose_5 prose_6 prose_7 section_8 section_9}
{rank=same; header_2 prose_3 prose_4 prose_5 prose_6 prose_7 section_8 section_9}

header_2 [label="1 : Txtbuf"]

prose_3 [label="prose"]

prose_4 [label="prose"]

prose_5 [label="prose"]

prose_6 [label="prose"]

prose_7 [label="prose"]

section_8 [label="section: 17-21"]

section_9 [label="section: 34-233"]


// END RANK section_1

header_2 -> leaf_10
leaf_10  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Txtbuf"]
// END RANK header_2

prose_3 -> { raw_11}
{rank=same; raw_11}

raw_11 [label="raw"]


// END RANK prose_3

raw_11 -> leaf_12
leaf_12  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

We're not going to have one of these right away.
"]
// END RANK raw_11

prose_4 -> { raw_13}
{rank=same; raw_13}

raw_13 [label="raw"]


// END RANK prose_4

raw_13 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This is not much more than an ordinary array of lines that has a bit of
awareness, mostly about which lines have cursors and which don't.
"]
// END RANK raw_13

prose_5 -> { raw_15}
{rank=same; raw_15}

raw_15 [label="raw"]


// END RANK prose_5

raw_15 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I'll circle back for quipu but I want a basic editor as soon as possible. The
interaction dynamics need to be worked out right away, plus I want to use it!
"]
// END RANK raw_15

prose_6 -> { raw_17}
{rank=same; raw_17}

raw_17 [label="raw"]


// END RANK prose_6

raw_17 -> leaf_18
leaf_18  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Plan: A line that has a cursor on it, and there can be many, gets 'opened'
into a grid of characters.  These in turn get 'closed' when the cursor leaves.
"]
// END RANK raw_17

prose_7 -> { raw_19}
{rank=same; raw_19}

raw_19 [label="raw"]


// END RANK prose_7

raw_19 -> leaf_20
leaf_20  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A closed line is just a string.

"]
// END RANK raw_19

section_8 -> { header_21 prose_22 section_23}
{rank=same; header_21 prose_22 section_23}

header_21 [label="2 : Interface"]

prose_22 [label="prose"]

section_23 [label="section: 22-33"]


// END RANK section_8

header_21 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Interface"]
// END RANK header_21

prose_22 -> { raw_25}
{rank=same; raw_25}

raw_25 [label="raw"]


// END RANK prose_22

raw_25 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  A txtbuf is a drop-in replacement for a txtbuf, used when there's more than
one line to buffer.
"]
// END RANK raw_25

section_23 -> { header_27 prose_28 prose_29 prose_30 prose_31}
{rank=same; header_27 prose_28 prose_29 prose_30 prose_31}

header_27 [label="3 : Instance fields"]

prose_28 [label="prose"]

prose_29 [label="prose"]

prose_30 [label="prose"]

prose_31 [label="prose"]


// END RANK section_23

header_27 -> leaf_32
leaf_32  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Instance fields"]
// END RANK header_27

prose_28 -> { raw_33}
{rank=same; raw_33}

raw_33 [label="raw"]


// END RANK prose_28

raw_33 -> leaf_34
leaf_34  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

- lines :  An array of arrays containing codepoints (string fragments).
"]
// END RANK raw_33

prose_29 -> { raw_35}
{rank=same; raw_35}

raw_35 [label="raw"]


// END RANK prose_29

raw_35 -> leaf_36
leaf_36  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- cursor :  Number of fragments to skip before an insertion.
"]
// END RANK raw_35

prose_30 -> { raw_37}
{rank=same; raw_37}

raw_37 [label="raw"]


// END RANK prose_30

raw_37 -> leaf_38
leaf_38  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- cur_row :  Row containing the cursor.
"]
// END RANK raw_37

prose_31 -> { raw_39}
{rank=same; raw_39}

raw_39 [label="raw"]


// END RANK prose_31

raw_39 -> leaf_40
leaf_40  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- disp :  Array of numbers, representing the furthest-right column which
          may be reached by printing the corresponding row.

"]
// END RANK raw_39

section_9 -> { header_41 prose_42 prose_43 prose_44 prose_45 section_46 section_47 section_48 section_49 section_50 section_51 section_52 section_53 section_54}
{rank=same; header_41 prose_42 prose_43 prose_44 prose_45 section_46 section_47 section_48 section_49 section_50 section_51 section_52 section_53 section_54}

header_41 [label="2 : Methods"]

prose_42 [label="prose"]

prose_43 [label="prose"]

prose_44 [label="prose"]

prose_45 [label="prose"]

section_46 [label="section: 49-61"]

section_47 [label="section: 62-93"]

section_48 [label="section: 94-127"]

section_49 [label="section: 128-140"]

section_50 [label="section: 141-152"]

section_51 [label="section: 153-161"]

section_52 [label="section: 162-177"]

section_53 [label="section: 178-233"]

section_54 [label="section: 234-264"]


// END RANK section_9

header_41 -> leaf_55
leaf_55  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Methods"]
// END RANK header_41

prose_42 -> { raw_56}
{rank=same; raw_56}

raw_56 [label="raw"]


// END RANK prose_42

raw_56 -> leaf_57
leaf_57  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Initially these are only the methods of txtbuf.
"]
// END RANK raw_56

prose_43 -> { raw_58}
{rank=same; raw_58}

raw_58 [label="raw"]


// END RANK prose_43

raw_58 -> leaf_59
leaf_59  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I think the way forward is to treat txtbuf as a special case until it's at
feature parity, and we have the other aspects such as resizing the result
field working correctly.
"]
// END RANK raw_58

prose_44 -> { raw_60 prespace_61 literal_62 raw_63 prespace_64 literal_65 raw_66}
{rank=same; raw_60 prespace_61 literal_62 raw_63 prespace_64 literal_65 raw_66}

raw_60 [label="raw"]

prespace_61 [label="prespace"]

literal_62 [label="literal"]

raw_63 [label="raw"]

prespace_64 [label="prespace"]

literal_65 [label="literal"]

raw_66 [label="raw"]


// END RANK prose_44

raw_60 -> leaf_67
leaf_67  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Then we will simply switch to using"]
// END RANK raw_60

prespace_61 -> leaf_68
leaf_68  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_61

literal_62 -> leaf_69
leaf_69  [color=Gray,shape=rectangle,fontname=Inconsolata,label="txtbuf"]
// END RANK literal_62

raw_63 -> leaf_70
leaf_70  [color=Gray,shape=rectangle,fontname=Inconsolata,label="s of a single line instead of the
two separate classes, and factor out"]
// END RANK raw_63

prespace_64 -> leaf_71
leaf_71  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_64

literal_65 -> leaf_72
leaf_72  [color=Gray,shape=rectangle,fontname=Inconsolata,label="txtbuf"]
// END RANK literal_65

raw_66 -> leaf_73
leaf_73  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_66

prose_45 -> { raw_74 prespace_75 literal_76 raw_77}
{rank=same; raw_74 prespace_75 literal_76 raw_77}

raw_74 [label="raw"]

prespace_75 [label="prespace"]

literal_76 [label="literal"]

raw_77 [label="raw"]


// END RANK prose_45

raw_74 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This amounts to porting the existing"]
// END RANK raw_74

prespace_75 -> leaf_79
leaf_79  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_75

literal_76 -> leaf_80
leaf_80  [color=Gray,shape=rectangle,fontname=Inconsolata,label="txtbuf"]
// END RANK literal_76

raw_77 -> leaf_81
leaf_81  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", as I think about it. A single
line isn't even a special case for the logic.

"]
// END RANK raw_77

section_46 -> { header_82 prose_83 codeblock_84 codeblock_85}
{rank=same; header_82 prose_83 codeblock_84 codeblock_85}

header_82 [label="4 : dependencies"]

prose_83 [label="prose"]

codeblock_84 [label="code block 51-56"]

codeblock_85 [label="code block 58-60"]


// END RANK section_46

header_82 -> leaf_86
leaf_86  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** dependencies"]
// END RANK header_82

prose_83 -> { raw_87}
{rank=same; raw_87}

raw_87 [label="raw"]


// END RANK prose_83

raw_87 -> leaf_88
leaf_88  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_87

codeblock_84 -> leaf_89
leaf_89  [color=Gray,shape=rectangle,fontname=Inconsolata,label="assert(meta)
local collect = assert(table.collect)
local lines = assert(string.lines)
local codepoints = assert(string.codepoints)"]
// END RANK codeblock_84

codeblock_85 -> leaf_90
leaf_90  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Txtbuf = meta {}"]
// END RANK codeblock_85

section_47 -> { header_91 prose_92 codeblock_93 codeblock_94}
{rank=same; header_91 prose_92 codeblock_93 codeblock_94}

header_91 [label="3 : Txtbuf.__tostring(txtbuf)"]

prose_92 [label="prose"]

codeblock_93 [label="code block 64-80"]

codeblock_94 [label="code block 82-91"]


// END RANK section_47

header_91 -> leaf_95
leaf_95  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Txtbuf.__tostring(txtbuf)"]
// END RANK header_91

prose_92 -> { raw_96}
{rank=same; raw_96}

raw_96 [label="raw"]


// END RANK prose_92

raw_96 -> leaf_97
leaf_97  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_96

codeblock_93 -> leaf_98
leaf_98  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local concat = assert(table.concat)

local function cat(l)
   if type(l) == \"string\" then
      return l
   elseif type(l) == \"table\" then
      if l[1] ~= nil then
         return concat(l)
      else
         return \"\"
      end
   end

   error(\"called private fn cat with type\" .. type(l))
end"]
// END RANK codeblock_93

codeblock_94 -> leaf_99
leaf_99  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Txtbuf.__tostring(txtbuf)
   local phrase = \"\"
   for i = 1, #txtbuf.lines - 1 do
      phrase = phrase .. cat(txtbuf.lines[i]) .. \"\\n\"
   end

   return phrase .. cat(txtbuf.lines[#txtbuf.lines])
end"]
// END RANK codeblock_94

section_48 -> { header_100 prose_101 codeblock_102}
{rank=same; header_100 prose_101 codeblock_102}

header_100 [label="3 : Txtbuf:insert(frag)"]

prose_101 [label="prose"]

codeblock_102 [label="code block 96-126"]


// END RANK section_48

header_100 -> leaf_103
leaf_103  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Txtbuf:insert(frag)"]
// END RANK header_100

prose_101 -> { raw_104}
{rank=same; raw_104}

raw_104 [label="raw"]


// END RANK prose_101

raw_104 -> leaf_105
leaf_105  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_104

codeblock_102 -> leaf_106
leaf_106  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local t_insert, splice = assert(table.insert), assert(table.splice)
local utf8, codepoints = string.utf8, string.codepoints

function Txtbuf.insert(txtbuf, frag)
   local line = txtbuf.lines[txtbuf.cur_row]
   if type(line) == \"string\" then
      line = codepoints(line)
      txtbuf.line = line
   end
   local wide_frag = utf8(frag)
   if wide_frag < #frag then -- a paste
      -- Normalize whitespace
      frag = gsub(frag, \"\\r\\n\", \"\\n\"):gsub(\"\\r\", \"\\n\"):gsub(\"\\t\", \"   \")
      wide_frag = codepoints(frag)
   else
      wide_frag = false
   end
   if not wide_frag then
      t_insert(line, txtbuf.cursor, frag)
      txtbuf.cursor = txtbuf.cursor + 1
      return true
   else
      splice(line, txtbuf.cursor, wide_frag)
      txtbuf.cursor = txtbuf.cursor + #wide_frag
      return true
   end

   return false
end"]
// END RANK codeblock_102

section_49 -> { header_107 prose_108 codeblock_109}
{rank=same; header_107 prose_108 codeblock_109}

header_107 [label="3 : Txtbuf:advance()"]

prose_108 [label="prose"]

codeblock_109 [label="code block 130-139"]


// END RANK section_49

header_107 -> leaf_110
leaf_110  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Txtbuf:advance()"]
// END RANK header_107

prose_108 -> { raw_111}
{rank=same; raw_111}

raw_111 [label="raw"]


// END RANK prose_108

raw_111 -> leaf_112
leaf_112  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_111

codeblock_109 -> leaf_113
leaf_113  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local ts_bw = (require \"color\").ts_bw

function Txtbuf.advance(txtbuf)
   txtbuf.lines[#txtbuf.lines + 1] = {}
   txtbuf.cur_row = #txtbuf.lines
   txtbuf.cursor = 1
   log(\"advanced %s\", ts_bw(txtbuf))
end"]
// END RANK codeblock_109

section_50 -> { header_114 prose_115 codeblock_116}
{rank=same; header_114 prose_115 codeblock_116}

header_114 [label="3 : Txtbuf:d_back()"]

prose_115 [label="prose"]

codeblock_116 [label="code block 143-150"]


// END RANK section_50

header_114 -> leaf_117
leaf_117  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Txtbuf:d_back()"]
// END RANK header_114

prose_115 -> { raw_118}
{rank=same; raw_118}

raw_118 [label="raw"]


// END RANK prose_115

raw_118 -> leaf_119
leaf_119  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_118

codeblock_116 -> leaf_120
leaf_120  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local remove = assert(table.remove)

function Txtbuf.d_back(txtbuf)
   remove(txtbuf.lines[txtbuf.cur_row], txtbuf.cursor - 1)
   txtbuf.cursor = txtbuf.cursor > 1 and txtbuf.cursor - 1 or 1
end"]
// END RANK codeblock_116

section_51 -> { header_121 prose_122 codeblock_123}
{rank=same; header_121 prose_122 codeblock_123}

header_121 [label="3 : Txtbuf:d_fwd()"]

prose_122 [label="prose"]

codeblock_123 [label="code block 155-159"]


// END RANK section_51

header_121 -> leaf_124
leaf_124  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Txtbuf:d_fwd()"]
// END RANK header_121

prose_122 -> { raw_125}
{rank=same; raw_125}

raw_125 [label="raw"]


// END RANK prose_122

raw_125 -> leaf_126
leaf_126  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_125

codeblock_123 -> leaf_127
leaf_127  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Txtbuf.d_fwd(txtbuf)
   remove(txtbuf.lines[txtbuf.cur_row], txtbuf.cursor)
end"]
// END RANK codeblock_123

section_52 -> { header_128 prose_129 codeblock_130}
{rank=same; header_128 prose_129 codeblock_130}

header_128 [label="3 : Txtbuf:left(disp)"]

prose_129 [label="prose"]

codeblock_130 [label="code block 164-175"]


// END RANK section_52

header_128 -> leaf_131
leaf_131  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Txtbuf:left(disp)"]
// END RANK header_128

prose_129 -> { raw_132}
{rank=same; raw_132}

raw_132 [label="raw"]


// END RANK prose_129

raw_132 -> leaf_133
leaf_133  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_132

codeblock_130 -> leaf_134
leaf_134  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Txtbuf.left(txtbuf, disp)
   local disp = disp or 1
   if txtbuf.cursor - disp >= 1 then
      txtbuf.cursor = txtbuf.cursor - disp
   else
      txtbuf.cursor = 1
   end

   return txtbuf.cursor
end"]
// END RANK codeblock_130

section_53 -> { header_135 prose_136 codeblock_137 codeblock_138 codeblock_139 codeblock_140}
{rank=same; header_135 prose_136 codeblock_137 codeblock_138 codeblock_139 codeblock_140}

header_135 [label="3 : Txtbuf:right(disp)"]

prose_136 [label="prose"]

codeblock_137 [label="code block 180-192"]

codeblock_138 [label="code block 195-203"]

codeblock_139 [label="code block 205-215"]

codeblock_140 [label="code block 217-231"]


// END RANK section_53

header_135 -> leaf_141
leaf_141  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Txtbuf:right(disp)"]
// END RANK header_135

prose_136 -> { raw_142}
{rank=same; raw_142}

raw_142 [label="raw"]


// END RANK prose_136

raw_142 -> leaf_143
leaf_143  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_142

codeblock_137 -> leaf_144
leaf_144  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Txtbuf.right(txtbuf, disp)
   disp = disp or 1
   local line = txtbuf.lines[txtbuf.cur_row]
   if txtbuf.cursor + disp <= #line + 1 then
      txtbuf.cursor = txtbuf.cursor + disp
   else
      txtbuf.cursor = #line + 1
   end

   return txtbuf.cursor
end"]
// END RANK codeblock_137

codeblock_138 -> leaf_145
leaf_145  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Txtbuf.suspend(txtbuf)
   for i,v in ipairs(txtbuf.lines) do
      txtbuf.lines[i] = tostring(v)
   end

   return txtbuf
end"]
// END RANK codeblock_138

codeblock_139 -> leaf_146
leaf_146  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Txtbuf.resume(txtbuf)
   for i, line in ipairs(txtbuf.lines) do
      txtbuf.lines[i] = codepoints(line)
   end
   txtbuf.cursor = #txtbuf.lines[#txtbuf.lines] + 1
   txtbuf.cur_row = #txtbuf.lines

   return txtbuf
end"]
// END RANK codeblock_139

codeblock_140 -> leaf_147
leaf_147  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local cl = assert(table.clone, \"table.clone must be provided\")

-- #todo rewrite this

function Txtbuf.clone(txtbuf)
   local lb = cl(txtbuf)
   if type(lb.line) == \"table\" then
      lb.line = cl(lb.line)
   elseif type(lb.line) == \"string\" then
      lb:resume()
   end
   return lb
end"]
// END RANK codeblock_140

section_54 -> { header_148 prose_149 codeblock_150 codeblock_151}
{rank=same; header_148 prose_149 codeblock_150 codeblock_151}

header_148 [label="3 : new"]

prose_149 [label="prose"]

codeblock_150 [label="code block 236-260"]

codeblock_151 [label="code block 262-264"]


// END RANK section_54

header_148 -> leaf_152
leaf_152  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** new"]
// END RANK header_148

prose_149 -> { raw_153}
{rank=same; raw_153}

raw_153 [label="raw"]


// END RANK prose_149

raw_153 -> leaf_154
leaf_154  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_153

codeblock_150 -> leaf_155
leaf_155  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function into_codepoints(lines)
   local cp = {}
   for i,v in ipairs(lines) do
      cp[i] = codepoints(v)
   end

   return cp
end

local function new(line)
   local txtbuf = meta(Txtbuf)
   local __l = line or \"\"
   local _lines = into_codepoints(collect(lines, __l))
   if #_lines == 0 then
      _lines[1] = {}
   end
   txtbuf.cursor = line and #_lines[#_lines] + 1 or 1
   txtbuf.cur_row = line and #_lines  or 1
   txtbuf.lines = _lines
   return txtbuf
end

Txtbuf.idEst = new"]
// END RANK codeblock_150

codeblock_151 -> leaf_156
leaf_156  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return new"]
// END RANK codeblock_151


}
