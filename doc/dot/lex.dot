digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 204"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-129"]


// END RANK doc_0

section_1 -> { header_2 prose_3 codeblock_4 section_5 section_6}
{rank=same; header_2 prose_3 codeblock_4 section_5 section_6}

header_2 [label="1 : Lex"]

prose_3 [label="prose"]

codeblock_4 [label="code block 8-17"]

section_5 [label="section: 20-129"]

section_6 [label="section: 130-134"]


// END RANK section_1

header_2 -> leaf_7
leaf_7  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Lex"]
// END RANK header_2

prose_3 -> { raw_8 prespace_9 literal_10 raw_11}
{rank=same; raw_8 prespace_9 literal_10 raw_11}

raw_8 [label="raw"]

prespace_9 [label="prespace"]

literal_10 [label="literal"]

raw_11 [label="raw"]


// END RANK prose_3

raw_8 -> leaf_12
leaf_12  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


We're going to do this will straight el peg, and fold in"]
// END RANK raw_8

prespace_9 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_9

literal_10 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label="espalier"]
// END RANK literal_10

raw_11 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" ASAP.
"]
// END RANK raw_11

codeblock_4 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local L = require \"lpeg\"
local P, R, S, match = L.P, L.R, L.S, L.match
local Lex = meta {}
local Rainbuf = require \"rainbuf\"
local sub, gsub = assert(string.sub), assert(string.gsub)
local concat = assert(table.concat)
local c = require \"color\"
local codepoints = assert(string.codepoints)"]
// END RANK codeblock_4

section_5 -> { header_17 prose_18 codeblock_19}
{rank=same; header_17 prose_18 codeblock_19}

header_17 [label="3 : Lua lexers"]

prose_18 [label="prose"]

codeblock_19 [label="code block 22-127"]


// END RANK section_5

header_17 -> leaf_20
leaf_20  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Lua lexers"]
// END RANK header_17

prose_18 -> { raw_21}
{rank=same; raw_21}

raw_21 [label="raw"]


// END RANK prose_18

raw_21 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_21

codeblock_19 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local WS = (P\" \")^0

local NL = P\"\\n\"

local terminal = S\" \\\"'+-*^~%#;,<>={}[]().:\\n\" + -P(1)

local KW = (P\"function\" + \"local\" + \"for\" + \"in\" + \"do\"
           + \"and\" + \"or\" + \"not\" + \"true\" + \"false\"
           + \"while\" + \"break\" + \"if\" + \"then\" + \"else\" + \"elseif\"
           + \"goto\" + \"repeat\" + \"until\" + \"return\" + \"nil\"
           + \"end\") * #terminal

local OP = P\"+\" + \"-\" + \"*\" + \"/\" + \"%\" + \"^\" + \"#\"
           + \"==\" + \"~=\" + \"<=\" + \">=\" + \"<\" + \">\"
           + \"=\" + \"(\" + \")\" + \"{\" + \"}\" + \"[\" + \"]\"
           + \";\" + \":\" + \"...\" + \"..\" + \".\" + \",\"

local digit = R\"09\"

local _decimal = P\"-\"^0 * ((digit^1 * P\".\"^-1 * digit^0
                           * ((P\"e\" + P\"E\")^-1 * P\"-\"^-1 * digit^1)^-1
                        + digit^1)^1 + digit^1)

local higit = R\"09\" + R\"af\" + R\"AF\"

-- hexadecimal floats. are a thing. that exists.
local _hexadecimal = P\"-\"^0 * P\"0\" * (P\"x\" + P\"X\")
                        * ((higit^1 * P\".\"^-1 * higit^0
                           * ((P\"p\" + P\"P\")^-1 * P\"-\"^-1 * higit^1)^-1
                        + higit^1)^1 + higit^1)

-- long strings, straight from the LPEG docs

local _equals = P\"=\"^0
local _open = \"[\" * L.Cg(_equals, \"init\") * \"[\" * P\"\\n\"^-1
local _close = \"]\" * L.C(_equals) * \"]\"
local _closeeq = L.Cmt(_close * L.Cb(\"init\"),
                          function (s, i, a, b) return a == b end)

local long_str = (_open * L.C((P(1) - _closeeq)^0) * _close) / 0 * L.Cp()

local str_esc = P\"\\\\\" * (S\"abfnrtvz\\\\\\\"'[]\\n\"
                         + (R\"09\" * R\"09\"^-2)
                         + (P\"x\" + P\"X\") * higit * higit)

local double_str = P\"\\\"\" * (P(1) - (P\"\\\"\" + P\"\\\\\") + str_esc)^0 * P\"\\\"\"
local single_str = P\"\\'\" * (P(1) - (P\"\\'\" + P\"\\\\\") + str_esc)^0 * P\"\\'\"

local string_esc = double_str + single_str

local string_long = long_str

local letter = R\"az\" + R\"AZ\"

local symbol =   (letter^1 + P\"_\"^1)
               * (letter + digit + P\"_\")^0
               * #terminal

local number = _hexadecimal + _decimal

local comment = P\"--\" * long_str
              + P\"--\" * (P(1) - NL)^0 * (NL + - P(1))

local ERR = P(1)

local lua_toks = {comment, KW, string_long, string_esc, number, OP, symbol,
                  WS, NL, ERR}

local lex_kv = { KW = KW,
                 number = number,
                 OP = OP,
                 symbol = symbol,
                 string_long = string_long,
                 string_esc = string_esc,
                 comment = comment,
                 WS = WS,
                 NL = NL,
                 ERR = ERR}

local color_map = {
   KW = c.color.keyword(),
   OP = c.color.operator(),
   number = c.color.number(),
   symbol = c.color.field(),
   string_esc = c.color.string(),
   string_long = c.color.string(),
   comment = c.color.comment(),
   ERR = c.color.error(),
   NL = a.clear(),
}


local lex_map = {}

for k, v in pairs(lex_kv) do
   lex_map[v] = k
end

lex_kv = nil

Lex.lex_map = lex_map

Lex.long_str = long_str
Lex.string = string_long"]
// END RANK codeblock_19

section_6 -> { header_24 prose_25 section_26}
{rank=same; header_24 prose_25 section_26}

header_24 [label="2 : Lex.lua_thor(txtbuf)"]

prose_25 [label="prose"]

section_26 [label="section: 135-204"]


// END RANK section_6

header_24 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Lex.lua_thor(txtbuf)"]
// END RANK header_24

prose_25 -> { raw_28}
{rank=same; raw_28}

raw_28 [label="raw"]


// END RANK prose_25

raw_28 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

...it's late.

"]
// END RANK raw_28

section_26 -> { header_30 prose_31 codeblock_32 codeblock_33}
{rank=same; header_30 prose_31 codeblock_32 codeblock_33}

header_30 [label="3 : chomp_token(lb)"]

prose_31 [label="prose"]

codeblock_32 [label="code block 140-198"]

codeblock_33 [label="code block 201-203"]


// END RANK section_26

header_30 -> leaf_34
leaf_34  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** chomp_token(lb)"]
// END RANK header_30

prose_31 -> { raw_35 prespace_36 literal_37 raw_38}
{rank=same; raw_35 prespace_36 literal_37 raw_38}

raw_35 [label="raw"]

prespace_36 [label="prespace"]

literal_37 [label="literal"]

raw_38 [label="raw"]


// END RANK prose_31

raw_35 -> leaf_39
leaf_39  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This is an almost pessimal way to use"]
// END RANK raw_35

prespace_36 -> leaf_40
leaf_40  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_36

literal_37 -> leaf_41
leaf_41  [color=Gray,shape=rectangle,fontname=Inconsolata,label="lpeg"]
// END RANK literal_37

raw_38 -> leaf_42
leaf_42  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", which is quite capable of
handling a full line in one pass.
"]
// END RANK raw_38

codeblock_32 -> leaf_43
leaf_43  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function chomp_token(lb)
   for _,v in ipairs(lua_toks) do
      local bite = match(v, lb)
      if bite ~= nil then
         return sub(lb, 1, bite - 1), sub(lb, bite), v
      end
   end
   return nil
end

Lex.chomp = chomp_token


-- Not using this. Want to replace it with a less-dumb match-based
-- lpeg system but kind over it for now.
local function _str_hl(str)
   local mark = sub(str,1,1) == \"'\" and \"'\" or '\"'
   mark = c.color.string(mark)
   return mark .. ts(str) .. mark
end


function Lex.lua_thor(txtbuf)
   local toks = {}
   local lb = tostring(txtbuf)
   while lb ~= \"\" do
      local len = #lb
      local bite, tok_t
      bite, lb, tok_t = chomp_token(lb)
      if bite == nil then
         break
      else
         -- #todo add a color
         local col = color_map[lex_map[tok_t]]
         if col then
            toks[#toks + 1] = col
            toks[#toks + 1] = bite
         elseif tok_t == string_esc then
            toks[#toks + 1] = _str_hl(bite)
         else
            toks[#toks + 1] = bite
         end
      end
      if len == #lb then
         bite = sub(lb, 1, 1) -- take a piece anyhow
         -- this is a bad hack because for some reason
         -- we're not picking up newlines correctly
         if bite ~= \"\\n\" then
            toks[#toks + 1] = a.clear .. color_map.ERR
         end
         toks[#toks + 1] = bite
         lb = sub(lb,2)
      end
   end
   toks[#toks + 1] = a.clear()
   return toks
end"]
// END RANK codeblock_32

codeblock_33 -> leaf_44
leaf_44  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return Lex"]
// END RANK codeblock_33


}
