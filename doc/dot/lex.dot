digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 155"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-105"]


// END RANK doc_0

section_1 -> { header_2 prose_3 codeblock_4 section_5 section_6}
{rank=same; header_2 prose_3 codeblock_4 section_5 section_6}

header_2 [label="1 : Lex"]

prose_3 [label="prose"]

codeblock_4 [label="code block 6-13"]

section_5 [label="section: 16-105"]

section_6 [label="section: 106-155"]


// END RANK section_1

header_2 -> leaf_7
leaf_7  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Lex"]
// END RANK header_2

prose_3 -> { raw_8 prespace_9 literal_10 raw_11}
{rank=same; raw_8 prespace_9 literal_10 raw_11}

raw_8 [label="raw"]

prespace_9 [label="prespace"]

literal_10 [label="literal"]

raw_11 [label="raw"]


// END RANK prose_3

raw_8 -> leaf_12
leaf_12  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


We're going to do this will straight el peg, and fold in"]
// END RANK raw_8

prespace_9 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_9

literal_10 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label="espalier"]
// END RANK literal_10

raw_11 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" ASAP.
"]
// END RANK raw_11

codeblock_4 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local L = require \"lpeg\"
local P, R, S, match = L.P, L.R, L.S, L.match
local Lex = meta {}
local Rainbuf = require \"rainbuf\"
local sub = assert(string.sub)
local c = require \"color\""]
// END RANK codeblock_4

section_5 -> { header_17 prose_18 codeblock_19}
{rank=same; header_17 prose_18 codeblock_19}

header_17 [label="3 : Lua lexers"]

prose_18 [label="prose"]

codeblock_19 [label="code block 18-103"]


// END RANK section_5

header_17 -> leaf_20
leaf_20  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Lua lexers"]
// END RANK header_17

prose_18 -> { raw_21}
{rank=same; raw_21}

raw_21 [label="raw"]


// END RANK prose_18

raw_21 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_21

codeblock_19 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local WS = (P\" \")^0

local NL = P\"\\n\"

local terminal = S\" +-*^~%#;,<>={}[]().:\\n\" + -P(1)

local KW = (P\"function\" + \"local\" + \"for\" + \"in\" + \"do\"
           + \"and\" + \"or\" + \"not\" + \"true\" + \"false\"
           + \"while\" + \"break\" + \"if\" + \"then\" + \"else\" + \"elseif\"
           + \"goto\" + \"repeat\" + \"until\" + \"return\" + \"nil\"
           + \"end\") * #terminal

local OP = P\"+\" + \"-\" + \"*\" + \"/\" + \"%\" + \"^\" + \"#\"
           + \"==\" + \"~=\" + \"<=\" + \">=\" + \"<\" + \">\"
           + \"=\" + \"(\" + \")\" + \"{\" + \"}\" + \"[\" + \"]\"
           + \";\" + \";\" + \"...\" + \"..\" + \".\" + \",\"

-- #todo valid escape sequences instead of P(1)s in below    â†“

local double_str = P\"\\\"\" * (P(1) - (P\"\\\"\" + P\"\\\\\") + P\"\\\\\" * P(1))^0 * P\"\\\"\"
local single_str = P\"\\'\" * (P(1) - (P\"\\'\" + P\"\\\\\") + P\"\\\\\" * P(1))^0 * P\"\\'\"

local digit = R\"09\"

local letter = R\"az\" + R\"AZ\"

local symbol =   (letter^1 + P\"_\"^1)
               * (letter + digit + P\"_\")^0
               * #terminal

local _digital = P\"-\"^0 * ((digit^1 * P\".\"^-1 * digit^0
                           * ((P\"e\" + P\"E\")^-1 * P\"-\"^-1 * digit^1)^-1
                        + digit^1)^1 + digit^1)

local _hexadecimal = P\"0\" * (P\"x\" + P\"X\") * (digit + R\"af\" + R\"AF\")^1

local number = _digital

local comment = P\"--\" * (P(1) - NL) * (NL + - (1))

-- long strings, long comments...

local ERR = P(1)^1

local lua_toks = {KW, number, OP, symbol, double_str, single_str,
                  comment, WS, NL, ERR}

local lex_kv = { KW = KW,
                 number = number,
                 OP = OP,
                 symbol = symbol,
                 double_str = double_str,
                 single_str = single_str,
                 comment = comment,
                 WS = WS,
                 NL = NL,
                 ERR = ERR}

local color_map = {
   KW = c.color.keyword(),
   OP = c.color.operator(),
   number = c.color.number(),
   symbol = c.color.field(),
   double_str = c.color.string(),
   single_str = c.color.string(),
   comment = c.color.comment(),
   ERR = c.color.error,
}


local lex_map = {}

for k, v in pairs(lex_kv) do
   lex_map[v] = k
end

lex_kv = nil

Lex.lex_map = lex_map

Lex.WS, Lex.NL, Lex.KW, Lex.OP = WS, NL, KW, OP
Lex.double, Lex.single = double_str, single_str
Lex.digit, Lex.letter, Lex.symbol, Lex.number = digit, letter, symbol, number
Lex.comment = comment"]
// END RANK codeblock_19

section_6 -> { header_24 prose_25 codeblock_26 codeblock_27}
{rank=same; header_24 prose_25 codeblock_26 codeblock_27}

header_24 [label="2 : Lex.lua_thor(linebuf)"]

prose_25 [label="prose"]

codeblock_26 [label="code block 110-149"]

codeblock_27 [label="code block 152-154"]


// END RANK section_6

header_24 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Lex.lua_thor(linebuf)"]
// END RANK header_24

prose_25 -> { raw_29}
{rank=same; raw_29}

raw_29 [label="raw"]


// END RANK prose_25

raw_29 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

...it's late.
"]
// END RANK raw_29

codeblock_26 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function chomp_token(lb)
   for _,v in ipairs(lua_toks) do
      local bite = match(v, lb)
      if bite ~= nil then
         return sub(lb, 1, bite - 1), sub(lb, bite), v
      end
   end
   return nil
end

Lex.chomp = chomp_token

function Lex.lua_thor(linebuf)
   local toks = {}
   local lb = tostring(linebuf)
   while lb ~= \"\" do
      local len = #lb
      local bite, tok_t
      bite, lb, tok_t = chomp_token(lb)
      if bite == nil then
         break
      else
         -- #todo add a color
         local col = color_map[lex_map[tok_t]]
         if col then
            toks[#toks + 1] = col
         end
         toks[#toks + 1] = bite

      end
      if len == #lb then
         toks[#toks + 1] = \"!!!\"
         lb = sub(lb,2)
      end
   end
   toks[#toks + 1] = a.clear()
   return toks
end"]
// END RANK codeblock_26

codeblock_27 -> leaf_32
leaf_32  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return Lex"]
// END RANK codeblock_27


}
