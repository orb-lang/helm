digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 504"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-262"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 prose_5 prose_6 prose_7 prose_8 prose_9 prose_10 prose_11 prose_12 section_13 section_14 section_15}
{rank=same; header_2 prose_3 prose_4 prose_5 prose_6 prose_7 prose_8 prose_9 prose_10 prose_11 prose_12 section_13 section_14 section_15}

header_2 [label="1 : Zone"]

prose_3 [label="prose"]

prose_4 [label="prose"]

prose_5 [label="prose"]

prose_6 [label="prose"]

prose_7 [label="prose"]

prose_8 [label="prose"]

prose_9 [label="prose"]

prose_10 [label="prose"]

prose_11 [label="prose"]

prose_12 [label="prose"]

section_13 [label="section: 46-149"]

section_14 [label="section: 166-248"]

section_15 [label="section: 263-457"]


// END RANK section_1

header_2 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Zone"]
// END RANK header_2

prose_3 -> { raw_17}
{rank=same; raw_17}

raw_17 [label="raw"]


// END RANK prose_3

raw_17 -> leaf_18
leaf_18  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


We need to get a lot more intelligent about how we write to the screen.
"]
// END RANK raw_17

prose_4 -> { prespace_19 literal_20 raw_21}
{rank=same; prespace_19 literal_20 raw_21}

prespace_19 [label="prespace"]

literal_20 [label="literal"]

raw_21 [label="raw"]


// END RANK prose_4

prespace_19 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_19

literal_20 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Zone"]
// END RANK literal_20

raw_21 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is our metatable for handling these regions.  It's a tricky bit of
engineering and something I've never really done before.
"]
// END RANK raw_21

prose_5 -> { raw_25 prespace_26 literal_27 raw_28}
{rank=same; raw_25 prespace_26 literal_27 raw_28}

raw_25 [label="raw"]

prespace_26 [label="prespace"]

literal_27 [label="literal"]

raw_28 [label="raw"]


// END RANK prose_5

raw_25 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The result we want is to have a single"]
// END RANK raw_25

prespace_26 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_26

literal_27 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeS:refresh()"]
// END RANK literal_27

raw_28 -> leaf_32
leaf_32  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" called at the end of
each action, which repaints the screen.  A Zone is either affected or it
isn't; if it is, we repaint the whole Zone, if not, nothing.
"]
// END RANK raw_28

prose_6 -> { raw_33 prespace_34 literal_35 raw_36 prespace_37 literal_38 raw_39}
{rank=same; raw_33 prespace_34 literal_35 raw_36 prespace_37 literal_38 raw_39}

raw_33 [label="raw"]

prespace_34 [label="prespace"]

literal_35 [label="literal"]

raw_36 [label="raw"]

prespace_37 [label="prespace"]

literal_38 [label="literal"]

raw_39 [label="raw"]


// END RANK prose_6

raw_33 -> leaf_40
leaf_40  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Zones have a"]
// END RANK raw_33

prespace_34 -> leaf_41
leaf_41  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_34

literal_35 -> leaf_42
leaf_42  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".z"]
// END RANK literal_35

raw_36 -> leaf_43
leaf_43  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" axis, starting with 1, and monotonically increasing. I
expect to use"]
// END RANK raw_36

prespace_37 -> leaf_44
leaf_44  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_37

literal_38 -> leaf_45
leaf_45  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".z == 2"]
// END RANK literal_38

raw_39 -> leaf_46
leaf_46  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and leave it at that, for now, but we want to
be able to stack as well as tile, at some point.
"]
// END RANK raw_39

prose_7 -> { raw_47 prespace_48 literal_49 raw_50 prespace_51 literal_52 raw_53}
{rank=same; raw_47 prespace_48 literal_49 raw_50 prespace_51 literal_52 raw_53}

raw_47 [label="raw"]

prespace_48 [label="prespace"]

literal_49 [label="literal"]

raw_50 [label="raw"]

prespace_51 [label="prespace"]

literal_52 [label="literal"]

raw_53 [label="raw"]


// END RANK prose_7

raw_47 -> leaf_54
leaf_54  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We'll want a"]
// END RANK raw_47

prespace_48 -> leaf_55
leaf_55  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_48

literal_49 -> leaf_56
leaf_56  [color=Gray,shape=rectangle,fontname=Inconsolata,label="zoneherder"]
// END RANK literal_49

raw_50 -> leaf_57
leaf_57  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" of some sort to manage zone changes. Each Z plane
has to have non-overlapping Zones, and"]
// END RANK raw_50

prespace_51 -> leaf_58
leaf_58  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_51

literal_52 -> leaf_59
leaf_59  [color=Gray,shape=rectangle,fontname=Inconsolata,label="1"]
// END RANK literal_52

raw_53 -> leaf_60
leaf_60  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" should be completely tiled. The
zoneherder propagates adjustments.
"]
// END RANK raw_53

prose_8 -> { raw_61 prespace_62 literal_63 raw_64}
{rank=same; raw_61 prespace_62 literal_63 raw_64}

raw_61 [label="raw"]

prespace_62 [label="prespace"]

literal_63 [label="literal"]

raw_64 [label="raw"]


// END RANK prose_8

raw_61 -> leaf_65
leaf_65  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A paint message to a Zone will be a"]
// END RANK raw_61

prespace_62 -> leaf_66
leaf_66  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_62

literal_63 -> leaf_67
leaf_67  [color=Gray,shape=rectangle,fontname=Inconsolata,label="rainbuf"]
// END RANK literal_63

raw_64 -> leaf_68
leaf_68  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  There are a few tricky things
here, and ultimately we'll need a Unicode database to chase down all the
edges.  We need to engineer the system so that it can use that info when the
time comes.
"]
// END RANK raw_64

prose_9 -> { raw_69}
{rank=same; raw_69}

raw_69 [label="raw"]


// END RANK prose_9

raw_69 -> leaf_70
leaf_70  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The Zone needs to stay in its lane, basically, so we need to know when we've
reached the edges.  When we start to add mouse clicks, we have to know what
the mouse has targeted, so Zones will receive mouse messages also.
"]
// END RANK raw_69

prose_10 -> { raw_71 prespace_72 literal_73 raw_74}
{rank=same; raw_71 prespace_72 literal_73 raw_74}

raw_71 [label="raw"]

prespace_72 [label="prespace"]

literal_73 [label="literal"]

raw_74 [label="raw"]


// END RANK prose_10

raw_71 -> leaf_75
leaf_75  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This is the next major push for"]
// END RANK raw_71

prespace_72 -> leaf_76
leaf_76  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_72

literal_73 -> leaf_77
leaf_77  [color=Gray,shape=rectangle,fontname=Inconsolata,label="femto"]
// END RANK literal_73

raw_74 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", and when it's complete I'll be ready
to show it off.  It's a significant piece of engineering and I'm thinking I
need to shore up Orb a bit to get there.
"]
// END RANK raw_74

prose_11 -> { raw_79}
{rank=same; raw_79}

raw_79 [label="raw"]


// END RANK prose_11

raw_79 -> leaf_80
leaf_80  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Specifically, I need the ability to add a plantUML pipeline to the doc
generator, and maybe cut the apron strings with respect to Markdown and public
hosting.
"]
// END RANK raw_79

prose_12 -> { raw_81 prespace_82 literal_83 raw_84 prespace_85 literal_86 raw_87 prespace_88 literal_89 raw_90 prespace_91 literal_92 raw_93 prespace_94 literal_95 raw_96 prespace_97 literal_98 raw_99}
{rank=same; raw_81 prespace_82 literal_83 raw_84 prespace_85 literal_86 raw_87 prespace_88 literal_89 raw_90 prespace_91 literal_92 raw_93 prespace_94 literal_95 raw_96 prespace_97 literal_98 raw_99}

raw_81 [label="raw"]

prespace_82 [label="prespace"]

literal_83 [label="literal"]

raw_84 [label="raw"]

prespace_85 [label="prespace"]

literal_86 [label="literal"]

raw_87 [label="raw"]

prespace_88 [label="prespace"]

literal_89 [label="literal"]

raw_90 [label="raw"]

prespace_91 [label="prespace"]

literal_92 [label="literal"]

raw_93 [label="raw"]

prespace_94 [label="prespace"]

literal_95 [label="literal"]

raw_96 [label="raw"]

prespace_97 [label="prespace"]

literal_98 [label="literal"]

raw_99 [label="raw"]


// END RANK prose_12

raw_81 -> leaf_100
leaf_100  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This is a delicate point in the boot process. "]
// END RANK raw_81

prespace_82 -> leaf_101
leaf_101  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_82

literal_83 -> leaf_102
leaf_102  [color=Gray,shape=rectangle,fontname=Inconsolata,label="femto"]
// END RANK literal_83

raw_84 -> leaf_103
leaf_103  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" needs to be able to
interact with an already-running bridge/luv process, as it stands the two
event loops will collide. "]
// END RANK raw_84

prespace_85 -> leaf_104
leaf_104  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_85

literal_86 -> leaf_105
leaf_105  [color=Gray,shape=rectangle,fontname=Inconsolata,label="orb"]
// END RANK literal_86

raw_87 -> leaf_106
leaf_106  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" only runs an event loop with"]
// END RANK raw_87

prespace_88 -> leaf_107
leaf_107  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_88

literal_89 -> leaf_108
leaf_108  [color=Gray,shape=rectangle,fontname=Inconsolata,label="orb serve"]
// END RANK literal_89

raw_90 -> leaf_109
leaf_109  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" so
the next step with"]
// END RANK raw_90

prespace_91 -> leaf_110
leaf_110  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_91

literal_92 -> leaf_111
leaf_111  [color=Gray,shape=rectangle,fontname=Inconsolata,label="femto"]
// END RANK literal_92

raw_93 -> leaf_112
leaf_112  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" proper is to set it up locally to run as a"]
// END RANK raw_93

prespace_94 -> leaf_113
leaf_113  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_94

literal_95 -> leaf_114
leaf_114  [color=Gray,shape=rectangle,fontname=Inconsolata,label="repl"]
// END RANK literal_95

raw_96 -> leaf_115
leaf_115  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
on plain ordinary"]
// END RANK raw_96

prespace_97 -> leaf_116
leaf_116  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_97

literal_98 -> leaf_117
leaf_117  [color=Gray,shape=rectangle,fontname=Inconsolata,label="br"]
// END RANK literal_98

raw_99 -> leaf_118
leaf_118  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" programs, so I can use all this carefully won tooling
on the other parts of the programme.

"]
// END RANK raw_99

section_13 -> { header_119 prose_120 prose_121 prose_122 prose_123 prose_124 codeblock_125 section_126 section_127}
{rank=same; header_119 prose_120 prose_121 prose_122 prose_123 prose_124 codeblock_125 section_126 section_127}

header_119 [label="2 : Design"]

prose_120 [label="prose"]

prose_121 [label="prose"]

prose_122 [label="prose"]

prose_123 [label="prose"]

prose_124 [label="prose"]

codeblock_125 [label="code block 69-81"]

section_126 [label="section: 84-149"]

section_127 [label="section: 150-165"]


// END RANK section_13

header_119 -> leaf_128
leaf_128  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Design"]
// END RANK header_119

prose_120 -> { raw_129 prespace_130 literal_131 raw_132 prespace_133 literal_134 raw_135 prespace_136 literal_137 raw_138}
{rank=same; raw_129 prespace_130 literal_131 raw_132 prespace_133 literal_134 raw_135 prespace_136 literal_137 raw_138}

raw_129 [label="raw"]

prespace_130 [label="prespace"]

literal_131 [label="literal"]

raw_132 [label="raw"]

prespace_133 [label="prespace"]

literal_134 [label="literal"]

raw_135 [label="raw"]

prespace_136 [label="prespace"]

literal_137 [label="literal"]

raw_138 [label="raw"]


// END RANK prose_120

raw_129 -> leaf_139
leaf_139  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This file is going to have both the"]
// END RANK raw_129

prespace_130 -> leaf_140
leaf_140  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_130

literal_131 -> leaf_141
leaf_141  [color=Gray,shape=rectangle,fontname=Inconsolata,label="zoneherd"]
// END RANK literal_131

raw_132 -> leaf_142
leaf_142  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", called"]
// END RANK raw_132

prespace_133 -> leaf_143
leaf_143  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_133

literal_134 -> leaf_144
leaf_144  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeS.zones"]
// END RANK literal_134

raw_135 -> leaf_145
leaf_145  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", and
a"]
// END RANK raw_135

prespace_136 -> leaf_146
leaf_146  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_136

literal_137 -> leaf_147
leaf_147  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Zone"]
// END RANK literal_137

raw_138 -> leaf_148
leaf_148  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" metatable for handling single Zones.
"]
// END RANK raw_138

prose_121 -> { raw_149 prespace_150 literal_151 raw_152 prespace_153 literal_154 raw_155}
{rank=same; raw_149 prespace_150 literal_151 raw_152 prespace_153 literal_154 raw_155}

raw_149 [label="raw"]

prespace_150 [label="prespace"]

literal_151 [label="literal"]

raw_152 [label="raw"]

prespace_153 [label="prespace"]

literal_154 [label="literal"]

raw_155 [label="raw"]


// END RANK prose_121

raw_149 -> leaf_156
leaf_156  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The Zone herd will need to hold zones by name as well as by index, because
we want to repaint in a specific order (pre-sorting by"]
// END RANK raw_149

prespace_150 -> leaf_157
leaf_157  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_150

literal_151 -> leaf_158
leaf_158  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".z"]
// END RANK literal_151

raw_152 -> leaf_159
leaf_159  [color=Gray,shape=rectangle,fontname=Inconsolata,label=") and pass messages
by name, so that we send a result to"]
// END RANK raw_152

prespace_153 -> leaf_160
leaf_160  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_153

literal_154 -> leaf_161
leaf_161  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeS.zones.result"]
// END RANK literal_154

raw_155 -> leaf_162
leaf_162  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_155

prose_122 -> { raw_163 prespace_164 literal_165 raw_166 prespace_167 literal_168 raw_169 prespace_170 literal_171 raw_172}
{rank=same; raw_163 prespace_164 literal_165 raw_166 prespace_167 literal_168 raw_169 prespace_170 literal_171 raw_172}

raw_163 [label="raw"]

prespace_164 [label="prespace"]

literal_165 [label="literal"]

raw_166 [label="raw"]

prespace_167 [label="prespace"]

literal_168 [label="literal"]

raw_169 [label="raw"]

prespace_170 [label="prespace"]

literal_171 [label="literal"]

raw_172 [label="raw"]


// END RANK prose_122

raw_163 -> leaf_173
leaf_173  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We'll need methods for reflowing, for creating, and for refreshing.  Each"]
// END RANK raw_163

prespace_164 -> leaf_174
leaf_174  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_164

literal_165 -> leaf_175
leaf_175  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Zone"]
// END RANK literal_165

raw_166 -> leaf_176
leaf_176  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" will have a"]
// END RANK raw_166

prespace_167 -> leaf_177
leaf_177  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_167

literal_168 -> leaf_178
leaf_178  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".touched"]
// END RANK literal_168

raw_169 -> leaf_179
leaf_179  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" field and if it's flipped we repaint; if there's
an overlapping Zone of higher"]
// END RANK raw_169

prespace_170 -> leaf_180
leaf_180  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_170

literal_171 -> leaf_181
leaf_181  [color=Gray,shape=rectangle,fontname=Inconsolata,label="z"]
// END RANK literal_171

raw_172 -> leaf_182
leaf_182  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" we flip its touched bit as well.
"]
// END RANK raw_172

prose_123 -> { raw_183 prespace_184 literal_185 raw_186 prespace_187 literal_188 raw_189 prespace_190 literal_191 raw_192 prespace_193 literal_194 raw_195}
{rank=same; raw_183 prespace_184 literal_185 raw_186 prespace_187 literal_188 raw_189 prespace_190 literal_191 raw_192 prespace_193 literal_194 raw_195}

raw_183 [label="raw"]

prespace_184 [label="prespace"]

literal_185 [label="literal"]

raw_186 [label="raw"]

prespace_187 [label="prespace"]

literal_188 [label="literal"]

raw_189 [label="raw"]

prespace_190 [label="prespace"]

literal_191 [label="literal"]

raw_192 [label="raw"]

prespace_193 [label="prespace"]

literal_194 [label="literal"]

raw_195 [label="raw"]


// END RANK prose_123

raw_183 -> leaf_196
leaf_196  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A"]
// END RANK raw_183

prespace_184 -> leaf_197
leaf_197  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_184

literal_185 -> leaf_198
leaf_198  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Zone"]
// END RANK literal_185

raw_186 -> leaf_199
leaf_199  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" needs an"]
// END RANK raw_186

prespace_187 -> leaf_200
leaf_200  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_187

literal_188 -> leaf_201
leaf_201  [color=Gray,shape=rectangle,fontname=Inconsolata,label="onMouse"]
// END RANK literal_188

raw_189 -> leaf_202
leaf_202  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" method that receives the whole packet and acts
accordingly.  The flow hands every input including parsed mouse messages to
the"]
// END RANK raw_189

prespace_190 -> leaf_203
leaf_203  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_190

literal_191 -> leaf_204
leaf_204  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_191

raw_192 -> leaf_205
leaf_205  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", and some, particularly scrolls, are handled there. The
rest are assigned by the zone herder, which sould probably normalize the
action so, for example, a click in the upper left corner of a Zone is"]
// END RANK raw_192

prespace_193 -> leaf_206
leaf_206  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_193

literal_194 -> leaf_207
leaf_207  [color=Gray,shape=rectangle,fontname=Inconsolata,label="1,1"]
// END RANK literal_194

raw_195 -> leaf_208
leaf_208  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_195

prose_124 -> { raw_209}
{rank=same; raw_209}

raw_209 [label="raw"]


// END RANK prose_124

raw_209 -> leaf_210
leaf_210  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Since the hard part is repainting, I'll start with reflow, and just hard-
switch the REPL to a 'reflow mode' that just draws characters to a screen,
then add a popup.
"]
// END RANK raw_209

codeblock_125 -> leaf_211
leaf_211  [color=Gray,shape=rectangle,fontname=Inconsolata,label="assert(meta)

local concat = assert(table.concat)

local Txtbuf = require \"txtbuf\"

local Rainbuf = require \"rainbuf\"

local Zone = meta {}

local Zoneherd = meta {}"]
// END RANK codeblock_125

section_126 -> { header_212 prose_213 structure_214 structure_215 codeblock_216}
{rank=same; header_212 prose_213 structure_214 structure_215 codeblock_216}

header_212 [label="3 : _collide(zone_a, zone_b)"]

prose_213 [label="prose"]

structure_214 [label="structure"]

structure_215 [label="structure"]

codeblock_216 [label="code block 99-147"]


// END RANK section_126

header_212 -> leaf_217
leaf_217  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** _collide(zone_a, zone_b)"]
// END RANK header_212

prose_213 -> { raw_218}
{rank=same; raw_218}

raw_218 [label="raw"]


// END RANK prose_213

raw_218 -> leaf_219
leaf_219  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_218

structure_214 -> { hashline_220}
{rank=same; hashline_220}

hashline_220 [label="hashline"]


// END RANK structure_214

hashline_220 -> { hashtag_221}
{rank=same; hashtag_221}

hashtag_221 [label="hashtag"]


// END RANK hashline_220

hashtag_221 -> leaf_222
leaf_222  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Deprecated"]
// END RANK hashtag_221

structure_215 -> { hashline_223}
{rank=same; hashline_223}

hashline_223 [label="hashline"]


// END RANK structure_215

hashline_223 -> { hashtag_224}
{rank=same; hashtag_224}

hashtag_224 [label="hashtag"]


// END RANK hashline_223

hashtag_224 -> leaf_225
leaf_225  [color=Gray,shape=rectangle,fontname=Inconsolata,label="NB"]
// END RANK hashtag_224

codeblock_216 -> leaf_226
leaf_226  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function _inside(col, row, zone)
   return (col >= zone.tc)
     and  (col <= zone.bc)
     and  (row >= zone.tr)
     and  (row <= zone.br)
end

function _collide(z_a, z_b)
   if z_a.z ~= z_b.z then
      -- this is just 'false' but let's refactor that when it's time
      return {false, false, false, false}, false, {false, false}
   end

   local collision = false
   -- clockwise from top left
   local z_a_corners = { {z_a.tc, z_a.tr},
                         {z_a.bc, z_a.tr},
                         {z_a.bc, z_a.br},
                         {z_a.tc, z_a.br} }
   local hits = {}
   for i, corner in ipairs(z_a_corners) do
      local hit = _inside(corner[1], corner[2], z_b)
      if hit then
         collision = true
      end
      hits[i] = hit
   end
   local a_left_of_b = z_a.tc < z_b.tc
   local a_above_b = z_a.tr < z_b.tr
   -- bottom of a over top of b
   if (hits[3] or hits[4]) and a_above_b then
      z_b.tr = z_a.br + 1
   end
   -- right of a over left of b
   if (hits[2] or hits[3]) and a_left_of_b then
      z_b.tc = z_a.bc + 1
   end
   -- top of a over bottom of b
   if (hits[1] or hits[2]) and not a_above_b then
      z_b.br = z_a.tr - 1
   end
   -- left of a over right of b
   if (hits[1] or hits[4]) and not a_left_of_b then
      z_b.bc = z_a.tc - 1
   end
   return hits, collision, {a_left_of_b, a_above_b}
end"]
// END RANK codeblock_216

section_127 -> { header_227 prose_228 prose_229 codeblock_230}
{rank=same; header_227 prose_228 prose_229 codeblock_230}

header_227 [label="3 : _collideAll(zoneherd, zone)"]

prose_228 [label="prose"]

prose_229 [label="prose"]

codeblock_230 [label="code block 156-164"]


// END RANK section_127

header_227 -> leaf_231
leaf_231  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** _collideAll(zoneherd, zone)"]
// END RANK header_227

prose_228 -> { raw_232}
{rank=same; raw_232}

raw_232 [label="raw"]


// END RANK prose_228

raw_232 -> leaf_233
leaf_233  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Collides a given zone with the rest of the herd.
"]
// END RANK raw_232

prose_229 -> { raw_234 prespace_235 literal_236 raw_237}
{rank=same; raw_234 prespace_235 literal_236 raw_237}

raw_234 [label="raw"]

prespace_235 [label="prespace"]

literal_236 [label="literal"]

raw_237 [label="raw"]


// END RANK prose_229

raw_234 -> leaf_238
leaf_238  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Called after an"]
// END RANK raw_234

prespace_235 -> leaf_239
leaf_239  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_235

literal_236 -> leaf_240
leaf_240  [color=Gray,shape=rectangle,fontname=Inconsolata,label="adjust"]
// END RANK literal_236

raw_237 -> leaf_241
leaf_241  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" to resettle matters.
"]
// END RANK raw_237

codeblock_230 -> leaf_242
leaf_242  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function _collideAll(zoneherd, zone)
   for i, z in ipairs(zoneherd) do
      if zone ~= z then
         _collide(zone, z)
      end
   end
end"]
// END RANK codeblock_230

section_14 -> { header_243 prose_244 section_245 section_246 section_247 section_248 section_249 section_250}
{rank=same; header_243 prose_244 section_245 section_246 section_247 section_248 section_249 section_250}

header_243 [label="2 : Zone methods"]

prose_244 [label="prose"]

section_245 [label="section: 169-181"]

section_246 [label="section: 182-192"]

section_247 [label="section: 193-205"]

section_248 [label="section: 206-225"]

section_249 [label="section: 226-248"]

section_250 [label="section: 249-262"]


// END RANK section_14

header_243 -> leaf_251
leaf_251  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Zone methods"]
// END RANK header_243

prose_244 -> { raw_252}
{rank=same; raw_252}

raw_252 [label="raw"]


// END RANK prose_244

raw_252 -> leaf_253
leaf_253  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

"]
// END RANK raw_252

section_245 -> { header_254 prose_255 codeblock_256}
{rank=same; header_254 prose_255 codeblock_256}

header_254 [label="3 : Zone:height(), Zone:width()"]

prose_255 [label="prose"]

codeblock_256 [label="code block 171-179"]


// END RANK section_245

header_254 -> leaf_257
leaf_257  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Zone:height(), Zone:width()"]
// END RANK header_254

prose_255 -> { raw_258}
{rank=same; raw_258}

raw_258 [label="raw"]


// END RANK prose_255

raw_258 -> leaf_259
leaf_259  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_258

codeblock_256 -> leaf_260
leaf_260  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Zone.height(zone)
   return zone.br - zone.tr + 1
end

function Zone.width(zone)
   return zone.bc - zone.tc + 1
end"]
// END RANK codeblock_256

section_246 -> { header_261 prose_262 codeblock_263}
{rank=same; header_261 prose_262 codeblock_263}

header_261 [label="3 : Zone:replace(zone, rainbuf)"]

prose_262 [label="prose"]

codeblock_263 [label="code block 184-191"]


// END RANK section_246

header_261 -> leaf_264
leaf_264  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Zone:replace(zone, rainbuf)"]
// END RANK header_261

prose_262 -> { raw_265}
{rank=same; raw_265}

raw_265 [label="raw"]


// END RANK prose_262

raw_265 -> leaf_266
leaf_266  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_265

codeblock_263 -> leaf_267
leaf_267  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Zone.replace(zone, rainbuf)
   zone.contents = rainbuf or zone.contents
   zone.touched = true

   return zone
end"]
// END RANK codeblock_263

section_247 -> { header_268 prose_269 codeblock_270}
{rank=same; header_268 prose_269 codeblock_270}

header_268 [label="3 : Zone:set(tc, tr, bc, br)"]

prose_269 [label="prose"]

codeblock_270 [label="code block 195-203"]


// END RANK section_247

header_268 -> leaf_271
leaf_271  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Zone:set(tc, tr, bc, br)"]
// END RANK header_268

prose_269 -> { raw_272}
{rank=same; raw_272}

raw_272 [label="raw"]


// END RANK prose_269

raw_272 -> leaf_273
leaf_273  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_272

codeblock_270 -> leaf_274
leaf_274  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Zone.set(zone, tc, tr, bc, br)
   zone.tc = tc
   zone.tr = tr
   zone.bc = bc
   zone.br = br
   return zone
end"]
// END RANK codeblock_270

section_248 -> { header_275 prose_276 codeblock_277}
{rank=same; header_275 prose_276 codeblock_277}

header_275 [label="3 : _writeLines(write, zone, str)"]

prose_276 [label="prose"]

codeblock_277 [label="code block 208-223"]


// END RANK section_248

header_275 -> leaf_278
leaf_278  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** _writeLines(write, zone, str)"]
// END RANK header_275

prose_276 -> { raw_279}
{rank=same; raw_279}

raw_279 [label="raw"]


// END RANK prose_276

raw_279 -> leaf_280
leaf_280  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_279

codeblock_277 -> leaf_281
leaf_281  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local lines = assert(string.lines, \"string.lines must be provided\")

local function _writeLines(write, zone, str)
   local nl = a.col(zone.tc) .. a.jump.down(1)
   local pr_row = zone.tr
   for line in lines(str) do
       write(line)
       write(nl)
       pr_row = pr_row + 1
       if pr_row > zone.br then
          break
       end
   end
end"]
// END RANK codeblock_277

section_249 -> { header_282 prose_283 codeblock_284}
{rank=same; header_282 prose_283 codeblock_284}

header_282 [label="3 : _writeResults"]

prose_283 [label="prose"]

codeblock_284 [label="code block 230-247"]


// END RANK section_249

header_282 -> leaf_285
leaf_285  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** _writeResults"]
// END RANK header_282

prose_283 -> { raw_286}
{rank=same; raw_286}

raw_286 [label="raw"]


// END RANK prose_283

raw_286 -> leaf_287
leaf_287  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

We'll special-case the results buffer for now.
"]
// END RANK raw_286

codeblock_284 -> leaf_288
leaf_288  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function _writeResults(write, zone, new)
   local rainbuf = {}
   local row = zone.tr
   local results = zone.contents
   if not results then
      return nil
   end
   if results.idEst ~= Rainbuf then
      results = Rainbuf(results)
   end
   local nl = a.col(zone.tc) .. a.jump.down(1)
   for line in results:lineGen(zone:height() + 1) do
      write(line)
      write(nl)
   end
end"]
// END RANK codeblock_284

section_250 -> { header_289 prose_290 codeblock_291}
{rank=same; header_289 prose_290 codeblock_291}

header_289 [label="3 : _renderTxtbuf(modeS, zone)"]

prose_290 [label="prose"]

codeblock_291 [label="code block 251-260"]


// END RANK section_250

header_289 -> leaf_292
leaf_292  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** _renderTxtbuf(modeS, zone)"]
// END RANK header_289

prose_290 -> { raw_293}
{rank=same; raw_293}

raw_293 [label="raw"]


// END RANK prose_290

raw_293 -> leaf_294
leaf_294  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_293

codeblock_291 -> leaf_295
leaf_295  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function _renderTxtbuf(modeS, zone, write)
   local lb = modeS.lex(tostring(zone.contents))
   if type(lb) == \"table\" then
      lb = concat(lb)
   end
   write(a.colrow(zone.tc, zone.tr))
   _writeLines(write, zone, lb)
end"]
// END RANK codeblock_291

section_15 -> { header_296 prose_297 section_298 section_299 section_300 section_301 section_302 section_303 section_304}
{rank=same; header_296 prose_297 section_298 section_299 section_300 section_301 section_302 section_303 section_304}

header_296 [label="2 : Zoneherd methods"]

prose_297 [label="prose"]

section_298 [label="section: 266-279"]

section_299 [label="section: 280-312"]

section_300 [label="section: 330-341"]

section_301 [label="section: 342-373"]

section_302 [label="section: 374-438"]

section_303 [label="section: 439-457"]

section_304 [label="section: 458-504"]


// END RANK section_15

header_296 -> leaf_305
leaf_305  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Zoneherd methods"]
// END RANK header_296

prose_297 -> { raw_306}
{rank=same; raw_306}

raw_306 [label="raw"]


// END RANK prose_297

raw_306 -> leaf_307
leaf_307  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

"]
// END RANK raw_306

section_298 -> { header_308 prose_309 codeblock_310}
{rank=same; header_308 prose_309 codeblock_310}

header_308 [label="3 : Zoneherd:newZone(name, tc, tr, bc, br, z, debug_mark)"]

prose_309 [label="prose"]

codeblock_310 [label="code block 268-277"]


// END RANK section_298

header_308 -> leaf_311
leaf_311  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Zoneherd:newZone(name, tc, tr, bc, br, z, debug_mark)"]
// END RANK header_308

prose_309 -> { raw_312}
{rank=same; raw_312}

raw_312 [label="raw"]


// END RANK prose_309

raw_312 -> leaf_313
leaf_313  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_312

codeblock_310 -> leaf_314
leaf_314  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Zoneherd.newZone(zoneherd, name, tc, tr, bc, br, z, debug_mark)
   zoneherd[name] = newZone(tc, tr, bc, br, z, debug_mark)
   -- this doesn't account for Z axis but for now:
   zoneherd[#zoneherd + 1] = zoneherd[name]
   -- todo: make a Zoneherd:add(zone, name) that handles z-ordering
   -- and auto-adjusts proportionally.
   return zoneherd
end"]
// END RANK codeblock_310

section_299 -> { header_315 prose_316 prose_317 structure_318 prose_319 codeblock_320 section_321}
{rank=same; header_315 prose_316 prose_317 structure_318 prose_319 codeblock_320 section_321}

header_315 [label="3 : Zoneherd:adjust(zoneherd, zone, delta, bottom)"]

prose_316 [label="prose"]

prose_317 [label="prose"]

structure_318 [label="structure"]

prose_319 [label="prose"]

codeblock_320 [label="code block 298-311"]

section_321 [label="section: 313-329"]


// END RANK section_299

header_315 -> leaf_322
leaf_322  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Zoneherd:adjust(zoneherd, zone, delta, bottom)"]
// END RANK header_315

prose_316 -> { raw_323}
{rank=same; raw_323}

raw_323 [label="raw"]


// END RANK prose_316

raw_323 -> leaf_324
leaf_324  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This adjusts the boundaries of a specific zone.
"]
// END RANK raw_323

prose_317 -> { raw_325}
{rank=same; raw_325}

raw_325 [label="raw"]


// END RANK prose_317

raw_325 -> leaf_326
leaf_326  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Collides as well
"]
// END RANK raw_325

structure_318 -> { hashline_327}
{rank=same; hashline_327}

hashline_327 [label="hashline"]


// END RANK structure_318

hashline_327 -> { hashtag_328}
{rank=same; hashtag_328}

hashtag_328 [label="hashtag"]


// END RANK hashline_327

hashtag_328 -> leaf_329
leaf_329  [color=Gray,shape=rectangle,fontname=Inconsolata,label="deprecated"]
// END RANK hashtag_328

prose_319 -> { raw_330 prespace_331 literal_332 raw_333 prespace_334 literal_335 raw_336}
{rank=same; raw_330 prespace_331 literal_332 raw_333 prespace_334 literal_335 raw_336}

raw_330 [label="raw"]

prespace_331 [label="prespace"]

literal_332 [label="literal"]

raw_333 [label="raw"]

prespace_334 [label="prespace"]

literal_335 [label="literal"]

raw_336 [label="raw"]


// END RANK prose_319

raw_330 -> leaf_337
leaf_337  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  - zoneherd: The"]
// END RANK raw_330

prespace_331 -> leaf_338
leaf_338  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_331

literal_332 -> leaf_339
leaf_339  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Zoneherd"]
// END RANK literal_332

raw_333 -> leaf_340
leaf_340  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  - zone:  The"]
// END RANK raw_333

prespace_334 -> leaf_341
leaf_341  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_334

literal_335 -> leaf_342
leaf_342  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Zone"]
// END RANK literal_335

raw_336 -> leaf_343
leaf_343  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  - delta:  A table, {col, row}, may be positive or negative
  - bottom:  A boolean, if true, delta is for the bottom right,
             false or nil, top left.
- #Return: zoneherd
"]
// END RANK raw_336

codeblock_320 -> leaf_344
leaf_344  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Zoneherd.adjust(zoneherd, zone, delta, bottom)
   if not bottom then
      zone.tc = zone.tc + delta[1]
      zone.tr = zone.tr + delta[1]
   else
      zone.bc = zone.bc + delta[1]
      zone.br = zone.br + delta[2]
   end

   _collideAll(zoneherd, zone)
   return zoneherd
end"]
// END RANK codeblock_320

section_321 -> { header_345 prose_346 codeblock_347}
{rank=same; header_345 prose_346 codeblock_347}

header_345 [label="4 : _zoneOffset(modes)"]

prose_346 [label="prose"]

codeblock_347 [label="code block 315-327"]


// END RANK section_321

header_345 -> leaf_348
leaf_348  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** _zoneOffset(modes)"]
// END RANK header_345

prose_346 -> { raw_349}
{rank=same; raw_349}

raw_349 [label="raw"]


// END RANK prose_346

raw_349 -> leaf_350
leaf_350  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_349

codeblock_347 -> leaf_351
leaf_351  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function _zoneOffset(modeS)
   if modeS.max_col <= 80 then
      return 20
   elseif modeS.max_col <= 100 then
      return 30
   elseif modeS.max_col <= 120 then
      return 40
   else
      return 50
   end
end"]
// END RANK codeblock_347

section_300 -> { header_352 prose_353 codeblock_354}
{rank=same; header_352 prose_353 codeblock_354}

header_352 [label="3 : Zoneherd:adjustCommand(zoneherd, delta)"]

prose_353 [label="prose"]

codeblock_354 [label="code block 332-340"]


// END RANK section_300

header_352 -> leaf_355
leaf_355  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Zoneherd:adjustCommand(zoneherd, delta)"]
// END RANK header_352

prose_353 -> { raw_356}
{rank=same; raw_356}

raw_356 [label="raw"]


// END RANK prose_353

raw_356 -> leaf_357
leaf_357  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_356

codeblock_354 -> leaf_358
leaf_358  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Zoneherd.adjustCommand(zoneherd)
   local lines = zoneherd.command.contents and zoneherd.command.contents.lines
   local txt_off = lines and #lines -1 or 0
   zoneherd.command.br = zoneherd.command.tr + txt_off
   zoneherd.results.tr = zoneherd.command.br + 1
   return zoneherd
end"]
// END RANK codeblock_354

section_301 -> { header_359 prose_360 codeblock_361}
{rank=same; header_359 prose_360 codeblock_361}

header_359 [label="3 : Zoneherd:reflow(modeS)"]

prose_360 [label="prose"]

codeblock_361 [label="code block 344-371"]


// END RANK section_301

header_359 -> leaf_362
leaf_362  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Zoneherd:reflow(modeS)"]
// END RANK header_359

prose_360 -> { raw_363}
{rank=same; raw_363}

raw_363 [label="raw"]


// END RANK prose_360

raw_363 -> leaf_364
leaf_364  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_363

codeblock_361 -> leaf_365
leaf_365  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Zoneherd.reflow(zoneherd, modeS)
   local right_col = modeS.max_col - _zoneOffset(modeS)
   local txt_off = modeS.txtbuf and #modeS.txtbuf.lines - 1 or 0
   zoneherd.status:set(1, 1, right_col, 1)
   zoneherd.command:set( modeS.l_margin,
                         modeS.repl_top,
                         right_col,
                         modeS.repl_top + txt_off )
   zoneherd.prompt:set(1, 2, modeS.l_margin - 1, 2)
   zoneherd.results:set( modeS.l_margin,
                         modeS.repl_top + txt_off + 1,
                         right_col,
                         modeS.max_row )
   zoneherd.stat_col:set( right_col + 1,
                          1,
                          modeS.max_col,
                          1 )
   zoneherd.suggest:set( right_col + 1,
                         3,
                         modeS.max_col,
                         modeS.max_row )
   for _,z in ipairs(zoneherd) do
      z.touched = true
   end
   return zoneherd
end"]
// END RANK codeblock_361

section_302 -> { header_366 prose_367 codeblock_368}
{rank=same; header_366 prose_367 codeblock_368}

header_366 [label="3 : Zoneherd:paint(modeS)"]

prose_367 [label="prose"]

codeblock_368 [label="code block 381-436"]


// END RANK section_302

header_366 -> leaf_369
leaf_369  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Zoneherd:paint(modeS)"]
// END RANK header_366

prose_367 -> { raw_370 prespace_371 literal_372 raw_373}
{rank=same; raw_370 prespace_371 literal_372 raw_373}

raw_370 [label="raw"]

prespace_371 [label="prespace"]

literal_372 [label="literal"]

raw_373 [label="raw"]


// END RANK prose_367

raw_370 -> leaf_374
leaf_374  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Once again we pass a reference to the"]
// END RANK raw_370

prespace_371 -> leaf_375
leaf_375  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_371

literal_372 -> leaf_376
leaf_376  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_372

raw_373 -> leaf_377
leaf_377  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" to get access to things
like the lexer.


"]
// END RANK raw_373

codeblock_368 -> leaf_378
leaf_378  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local a = require \"anterm\"

local _hard_nl = a.col(1) .. a.jump.down()

local function _paintGutter(zoneherd)
   local write = zoneherd.write
   local lines = zoneherd.command.contents
                 and #zoneherd.command.contents.lines - 1 or 0
   write(a.erase._box(1, 3, zoneherd.results.tc - 1, zoneherd.results.br))
   write(a.colrow(1,3))
   while lines > 0 do
      write \"...\"
      write(_hard_nl)
      lines = lines - 1
   end
   local results = zoneherd.results.contents
   if type(results) == \"table\" and results.more then
      write(a.colrow(1, zoneherd.results.br))
      write(a.red \"...\")
   end
end

function Zoneherd.paint(zoneherd, modeS, all)
   local write = zoneherd.write
   write(a.cursor.hide())
   write(a.clear())
   if all then
      write(a.erase.all())
   end
   for i, zone in ipairs(zoneherd) do
      if zone.touched or all then
         -- erase
         write(a.erase._box(    zone.tc,
                                zone.tr,
                                zone.bc,
                                zone.br ))
         write(a.colrow(zone.tc, zone.tr))
         -- actually render ze contents
         if type(zone.contents) == \"string\" then
            zoneherd.write(zone.contents)
         elseif type(zone.contents) == \"table\"
            and zone.contents.idEst == Txtbuf then
            _renderTxtbuf(modeS, zone, write)
         elseif zone == zoneherd.results then
            _writeResults(write, zone)
         end
         zone.touched = false
      end
   end
   zoneherd.write(a.cursor.show())
   _paintGutter(zoneherd)
   modeS:placeCursor()
   return zoneherd
end"]
// END RANK codeblock_368

section_303 -> { header_379 prose_380 codeblock_381}
{rank=same; header_379 prose_380 codeblock_381}

header_379 [label="3 : newZone(tr, tc, br, bc, z, debug_mark)"]

prose_380 [label="prose"]

codeblock_381 [label="code block 443-455"]


// END RANK section_303

header_379 -> leaf_382
leaf_382  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** newZone(tr, tc, br, bc, z, debug_mark)"]
// END RANK header_379

prose_380 -> { raw_383}
{rank=same; raw_383}

raw_383 [label="raw"]


// END RANK prose_380

raw_383 -> leaf_384
leaf_384  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This creates a new Zone.
"]
// END RANK raw_383

codeblock_381 -> leaf_385
leaf_385  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function newZone(tc, tr, bc, br, z, debug_mark)
   assert(tc <= bc, \"tc: \" .. tc .. \", bc: \" .. bc)
   assert(tr <= br, \"tr: \" .. tr .. \", br: \" .. br)
   local zone = meta(Zone)
   zone:set(tc, tr, bc, br)
   zone.debug_mark = debug_mark
   zone.z = z
   zone.touched = false
   -- zone.contents, aspirationally a rainbuf, is provided later
   return zone
end"]
// END RANK codeblock_381

section_304 -> { header_386 prose_387 prose_388 codeblock_389 codeblock_390}
{rank=same; header_386 prose_387 prose_388 codeblock_389 codeblock_390}

header_386 [label="3 : new"]

prose_387 [label="prose"]

prose_388 [label="prose"]

codeblock_389 [label="code block 467-490"]

codeblock_390 [label="code block 492-494"]


// END RANK section_304

header_386 -> leaf_391
leaf_391  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** new"]
// END RANK header_386

prose_387 -> { raw_392}
{rank=same; raw_392}

raw_392 [label="raw"]


// END RANK prose_387

raw_392 -> leaf_393
leaf_393  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Makes a Zoneherd.  Borrows the modeselektor to get proportions, but returns
the zoneherd, which is assigned to its slot on the modeselector at the call
site, for consistency.
"]
// END RANK raw_392

prose_388 -> { raw_394 prespace_395 literal_396 raw_397 prespace_398 literal_399 raw_400}
{rank=same; raw_394 prespace_395 literal_396 raw_397 prespace_398 literal_399 raw_400}

raw_394 [label="raw"]

prespace_395 [label="prespace"]

literal_396 [label="literal"]

raw_397 [label="raw"]

prespace_398 [label="prespace"]

literal_399 [label="literal"]

raw_400 [label="raw"]


// END RANK prose_388

raw_394 -> leaf_401
leaf_401  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Most of this code needs to be in the"]
// END RANK raw_394

prespace_395 -> leaf_402
leaf_402  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_395

literal_396 -> leaf_403
leaf_403  [color=Gray,shape=rectangle,fontname=Inconsolata,label="reflow"]
// END RANK literal_396

raw_397 -> leaf_404
leaf_404  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" method;"]
// END RANK raw_397

prespace_398 -> leaf_405
leaf_405  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_398

literal_399 -> leaf_406
leaf_406  [color=Gray,shape=rectangle,fontname=Inconsolata,label="new"]
// END RANK literal_399

raw_400 -> leaf_407
leaf_407  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" should allocate
and then reflow.
"]
// END RANK raw_400

codeblock_389 -> leaf_408
leaf_408  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function new(modeS, writer)
   local zoneherd = meta(Zoneherd)
   local right_col = modeS.max_col - _zoneOffset(modeS)
   zoneherd.write = writer
   -- make Zones
   -- correct values are provided by reflow
   zoneherd.status  = newZone(-1, -1, -1, -1, 1, \".\")
   zoneherd[1] = zoneherd.status
   zoneherd.command = newZone(-1, -1, -1, -1, 1, \"|\")
   zoneherd[3] = zoneherd.command
   zoneherd.prompt  = newZone(-1, -1, -1, -1, 1, \">\")
   zoneherd[2] = zoneherd.prompt
   zoneherd.results = newZone(-1, -1, -1, -1, 1, \"~\")
   zoneherd[4] = zoneherd.results
   zoneherd.stat_col = newZone(-1, -1, -1, -1, 1, \"!\")
   zoneherd[5] = zoneherd.stat_col
   zoneherd.suggest = newZone(-1, -1, -1, -1, 1, \"%\")
   zoneherd[6] = zoneherd.suggest
   zoneherd:reflow(modeS)

   return zoneherd
end"]
// END RANK codeblock_389

codeblock_390 -> leaf_409
leaf_409  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return new"]
// END RANK codeblock_390


}
