digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 131"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-97"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 prose_5 prose_6 codeblock_7 codeblock_8 prose_9 prose_10 codeblock_11 section_12}
{rank=same; header_2 prose_3 prose_4 prose_5 prose_6 codeblock_7 codeblock_8 prose_9 prose_10 codeblock_11 section_12}

header_2 [label="1 : Painter"]

prose_3 [label="prose"]

prose_4 [label="prose"]

prose_5 [label="prose"]

prose_6 [label="prose"]

codeblock_7 [label="code block 17-20"]

codeblock_8 [label="code block 22-24"]

prose_9 [label="prose"]

prose_10 [label="prose"]

codeblock_11 [label="code block 30-95"]

section_12 [label="section: 98-131"]


// END RANK section_1

header_2 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Painter"]
// END RANK header_2

prose_3 -> { raw_14 prespace_15 literal_16 raw_17}
{rank=same; raw_14 prespace_15 literal_16 raw_17}

raw_14 [label="raw"]

prespace_15 [label="prespace"]

literal_16 [label="literal"]

raw_17 [label="raw"]


// END RANK prose_3

raw_14 -> leaf_18
leaf_18  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


The"]
// END RANK raw_14

prespace_15 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_15

literal_16 -> leaf_20
leaf_20  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_16

raw_17 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" module responsible for display.
"]
// END RANK raw_17

prose_4 -> { prespace_22 literal_23 raw_24 prespace_25 literal_26 raw_27 prespace_28 literal_29 raw_30}
{rank=same; prespace_22 literal_23 raw_24 prespace_25 literal_26 raw_27 prespace_28 literal_29 raw_30}

prespace_22 [label="prespace"]

literal_23 [label="literal"]

raw_24 [label="raw"]

prespace_25 [label="prespace"]

literal_26 [label="literal"]

raw_27 [label="raw"]

prespace_28 [label="prespace"]

literal_29 [label="literal"]

raw_30 [label="raw"]


// END RANK prose_4

prespace_22 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_22

literal_23 -> leaf_32
leaf_32  [color=Gray,shape=rectangle,fontname=Inconsolata,label="femto"]
// END RANK literal_23

raw_24 -> leaf_33
leaf_33  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is currently both the loop loader and the inbox, and I will eventually
break the latter out into its own module.  In any case, it wholly owns"]
// END RANK raw_24

prespace_25 -> leaf_34
leaf_34  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_25

literal_26 -> leaf_35
leaf_35  [color=Gray,shape=rectangle,fontname=Inconsolata,label="stdin"]
// END RANK literal_26

raw_27 -> leaf_36
leaf_36  [color=Gray,shape=rectangle,fontname=Inconsolata,label=","]
// END RANK raw_27

prespace_28 -> leaf_37
leaf_37  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_28

literal_29 -> leaf_38
leaf_38  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_29

raw_30 -> leaf_39
leaf_39  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" runs entirely on messages.
"]
// END RANK raw_30

prose_5 -> { prespace_40 literal_41 raw_42 prespace_43 literal_44 raw_45 prespace_46 literal_47 raw_48 prespace_49 literal_50 raw_51 prespace_52 literal_53 raw_54 prespace_55 literal_56 raw_57 prespace_58 literal_59 raw_60 prespace_61 literal_62 raw_63}
{rank=same; prespace_40 literal_41 raw_42 prespace_43 literal_44 raw_45 prespace_46 literal_47 raw_48 prespace_49 literal_50 raw_51 prespace_52 literal_53 raw_54 prespace_55 literal_56 raw_57 prespace_58 literal_59 raw_60 prespace_61 literal_62 raw_63}

prespace_40 [label="prespace"]

literal_41 [label="literal"]

raw_42 [label="raw"]

prespace_43 [label="prespace"]

literal_44 [label="literal"]

raw_45 [label="raw"]

prespace_46 [label="prespace"]

literal_47 [label="literal"]

raw_48 [label="raw"]

prespace_49 [label="prespace"]

literal_50 [label="literal"]

raw_51 [label="raw"]

prespace_52 [label="prespace"]

literal_53 [label="literal"]

raw_54 [label="raw"]

prespace_55 [label="prespace"]

literal_56 [label="literal"]

raw_57 [label="raw"]

prespace_58 [label="prespace"]

literal_59 [label="literal"]

raw_60 [label="raw"]

prespace_61 [label="prespace"]

literal_62 [label="literal"]

raw_63 [label="raw"]


// END RANK prose_5

prespace_40 -> leaf_64
leaf_64  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_40

literal_41 -> leaf_65
leaf_65  [color=Gray,shape=rectangle,fontname=Inconsolata,label="painter"]
// END RANK literal_41

raw_42 -> leaf_66
leaf_66  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" receives a"]
// END RANK raw_42

prespace_43 -> leaf_67
leaf_67  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_43

literal_44 -> leaf_68
leaf_68  [color=Gray,shape=rectangle,fontname=Inconsolata,label="rainbuf"]
// END RANK literal_44

raw_45 -> leaf_69
leaf_69  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and a"]
// END RANK raw_45

prespace_46 -> leaf_70
leaf_70  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_46

literal_47 -> leaf_71
leaf_71  [color=Gray,shape=rectangle,fontname=Inconsolata,label="region"]
// END RANK literal_47

raw_48 -> leaf_72
leaf_72  [color=Gray,shape=rectangle,fontname=Inconsolata,label=". "]
// END RANK raw_48

prespace_49 -> leaf_73
leaf_73  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_49

literal_50 -> leaf_74
leaf_74  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_50

raw_51 -> leaf_75
leaf_75  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" triggers the
creation of"]
// END RANK raw_51

prespace_52 -> leaf_76
leaf_76  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_52

literal_53 -> leaf_77
leaf_77  [color=Gray,shape=rectangle,fontname=Inconsolata,label="rainbuf"]
// END RANK literal_53

raw_54 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label="s and"]
// END RANK raw_54

prespace_55 -> leaf_79
leaf_79  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_55

literal_56 -> leaf_80
leaf_80  [color=Gray,shape=rectangle,fontname=Inconsolata,label="region"]
// END RANK literal_56

raw_57 -> leaf_81
leaf_81  [color=Gray,shape=rectangle,fontname=Inconsolata,label="s; the former is write-owned by"]
// END RANK raw_57

prespace_58 -> leaf_82
leaf_82  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_58

literal_59 -> leaf_83
leaf_83  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_59

raw_60 -> leaf_84
leaf_84  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", the latter write-owned by"]
// END RANK raw_60

prespace_61 -> leaf_85
leaf_85  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_61

literal_62 -> leaf_86
leaf_86  [color=Gray,shape=rectangle,fontname=Inconsolata,label="painter"]
// END RANK literal_62

raw_63 -> leaf_87
leaf_87  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_63

prose_6 -> { raw_88 prespace_89 literal_90 raw_91 prespace_92 literal_93 raw_94}
{rank=same; raw_88 prespace_89 literal_90 raw_91 prespace_92 literal_93 raw_94}

raw_88 [label="raw"]

prespace_89 [label="prespace"]

literal_90 [label="literal"]

raw_91 [label="raw"]

prespace_92 [label="prespace"]

literal_93 [label="literal"]

raw_94 [label="raw"]


// END RANK prose_6

raw_88 -> leaf_95
leaf_95  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
First thing we're going to do with"]
// END RANK raw_88

prespace_89 -> leaf_96
leaf_96  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_89

literal_90 -> leaf_97
leaf_97  [color=Gray,shape=rectangle,fontname=Inconsolata,label="painter"]
// END RANK literal_90

raw_91 -> leaf_98
leaf_98  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is encapsulate all existing use
of"]
// END RANK raw_91

prespace_92 -> leaf_99
leaf_99  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_92

literal_93 -> leaf_100
leaf_100  [color=Gray,shape=rectangle,fontname=Inconsolata,label="stdout"]
// END RANK literal_93

raw_94 -> leaf_101
leaf_101  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_94

codeblock_7 -> leaf_102
leaf_102  [color=Gray,shape=rectangle,fontname=Inconsolata,label="assert(meta)
assert(type)"]
// END RANK codeblock_7

codeblock_8 -> leaf_103
leaf_103  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Paint = meta {}"]
// END RANK codeblock_8

prose_9 -> { raw_104 prespace_105 literal_106 raw_107 prespace_108 literal_109 raw_110}
{rank=same; raw_104 prespace_105 literal_106 raw_107 prespace_108 literal_109 raw_110}

raw_104 [label="raw"]

prespace_105 [label="prespace"]

literal_106 [label="literal"]

raw_107 [label="raw"]

prespace_108 [label="prespace"]

literal_109 [label="literal"]

raw_110 [label="raw"]


// END RANK prose_9

raw_104 -> leaf_111
leaf_111  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Carryovers from"]
// END RANK raw_104

prespace_105 -> leaf_112
leaf_112  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_105

literal_106 -> leaf_113
leaf_113  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_106

raw_107 -> leaf_114
leaf_114  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", many from"]
// END RANK raw_107

prespace_108 -> leaf_115
leaf_115  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_108

literal_109 -> leaf_116
leaf_116  [color=Gray,shape=rectangle,fontname=Inconsolata,label="femto"]
// END RANK literal_109

raw_110 -> leaf_117
leaf_117  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" originally.
"]
// END RANK raw_110

prose_10 -> { raw_118}
{rank=same; raw_118}

raw_118 [label="raw"]


// END RANK prose_10

raw_118 -> leaf_119
leaf_119  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This is the final resting place.
"]
// END RANK raw_118

codeblock_11 -> leaf_120
leaf_120  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local STATCOL = 81
local STAT_TOP = 1
local STAT_RUN = 2

local function colwrite(str, col, row)
   col = col or STATCOL
   row = row or STAT_TOP
   local dash = a.stash()
             .. a.cursor.hide()
             .. a.jump(row, col)
             .. a.erase.right()
             .. str
             .. a.pop()
             .. a.cursor.show()
   write(dash)
end

local STAT_ICON = \"◉ \"

local function tf(bool)
   if bool then
      return ts(\"t\", \"true\")
   else
      return ts(\"f\", \"false\")
   end
end

function pr_mouse(m)
   local phrase = a.magenta(m.button) .. \": \"
                     .. a.bright(m.kind) .. \" \" .. tf(m.shift)
                     .. \" \" .. tf(m.meta)
                     .. \" \" .. tf(m.ctrl) .. \" \" .. tf(m.moving) .. \" \"
                     .. tf(m.scrolling) .. \" \"
                     .. a.cyan(m.col) .. \",\" .. a.cyan(m.row)
   return phrase
end

local function mk_paint(fragment, shade)
   return function(category, action)
      return shade(category .. fragment .. action)
   end
end

local act_map = { MOUSE  = pr_mouse,
                  NAV    = mk_paint(\": \", a.italic),
                  CTRL   = mk_paint(\": \", c.field),
                  ALT    = mk_paint(\": \", a.underscore),
                  ASCII  = mk_paint(\": \", c.table),
                  NYI    = mk_paint(\": \", a.red)}

local icon_map = { MOUSE = mk_paint(STAT_ICON, c.userdata),
                   NAV   = mk_paint(STAT_ICON, a.magenta),
                   CTRL  = mk_paint(STAT_ICON, a.blue),
                   ALT   = mk_paint(STAT_ICON, c[\"function\"]),
                   ASCII = mk_paint(STAT_ICON, a.green),
                   NYI   = mk_paint(STAT_ICON .. \"! \", a.red) }

local function icon_paint(category, value)
   assert(icon_map[category], \"icon_paint NYI:\" .. category)
   if category == \"MOUSE\" then
      return colwrite(icon_map[category](\"\", pr_mouse(value)))
    end
   return colwrite(icon_map[category](\"\", ts(value)))
end"]
// END RANK codeblock_11

section_12 -> { header_121 prose_122 prose_123 prose_124 codeblock_125 codeblock_126 codeblock_127}
{rank=same; header_121 prose_122 prose_123 prose_124 codeblock_125 codeblock_126 codeblock_127}

header_121 [label="2 : Paint:inBox(rainbuf, box)"]

prose_122 [label="prose"]

prose_123 [label="prose"]

prose_124 [label="prose"]

codeblock_125 [label="code block 110-119"]

codeblock_126 [label="code block 121-127"]

codeblock_127 [label="code block 129-131"]


// END RANK section_12

header_121 -> leaf_128
leaf_128  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Paint:inBox(rainbuf, box)"]
// END RANK header_121

prose_122 -> { raw_129}
{rank=same; raw_129}

raw_129 [label="raw"]


// END RANK prose_122

raw_129 -> leaf_130
leaf_130  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Paints inside a bounding box.  Will paint a mere string, albeit making
incorrect assumptions about width in the presence of escape codes or wchars.
"]
// END RANK raw_129

prose_123 -> { raw_131}
{rank=same; raw_131}

raw_131 [label="raw"]


// END RANK prose_123

raw_131 -> leaf_132
leaf_132  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Intended for a rainbuf, where it will exhibit intelligence appropriate to the
occasion.
"]
// END RANK raw_131

prose_124 -> { raw_133}
{rank=same; raw_133}

raw_133 [label="raw"]


// END RANK prose_124

raw_133 -> leaf_134
leaf_134  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Supporting a box as an indexed array for now, we can detect keys vs. indices
if the former turns out to be cleaner.  Indexes give a cleaner literal syntax,
which helps for now.
"]
// END RANK raw_133

codeblock_125 -> leaf_135
leaf_135  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Paint.inBox(painter, rainbuf, box)
   local tc, tr, bc, br = box[1], box[2], box[3], box[4]
   if type(rainbuf) == \"string\" then
      -- string painter
   elseif type(rainbuf) == \"table\" then
      -- Detect rainbuf.idEst, paint the rainbuf
   end
end"]
// END RANK codeblock_125

codeblock_126 -> leaf_136
leaf_136  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function new(_stdout)
   local painter = meta(Paint)
   painter.out  = _stdout
   return painter
end"]
// END RANK codeblock_126

codeblock_127 -> leaf_137
leaf_137  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return new"]
// END RANK codeblock_127


}
