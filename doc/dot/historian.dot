digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 540"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-435"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 prose_5 prose_6 codeblock_7 codeblock_8 section_9 section_10 section_11 section_12}
{rank=same; header_2 prose_3 prose_4 prose_5 prose_6 codeblock_7 codeblock_8 section_9 section_10 section_11 section_12}

header_2 [label="1 : Historian"]

prose_3 [label="prose"]

prose_4 [label="prose"]

prose_5 [label="prose"]

prose_6 [label="prose"]

codeblock_7 [label="code block 16-26"]

codeblock_8 [label="code block 28-30"]

section_9 [label="section: 33-232"]

section_10 [label="section: 283-318"]

section_11 [label="section: 379-435"]

section_12 [label="section: 436-506"]


// END RANK section_1

header_2 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Historian"]
// END RANK header_2

prose_3 -> { raw_14}
{rank=same; raw_14}

raw_14 [label="raw"]


// END RANK prose_3

raw_14 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


This module is responsible for REPL history.
"]
// END RANK raw_14

prose_4 -> { raw_16}
{rank=same; raw_16}

raw_16 [label="raw"]


// END RANK prose_4

raw_16 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Eventually this will include persisting and restoring from a SQLite database,
fuzzy searching, and variable cacheing.
"]
// END RANK raw_16

prose_5 -> { raw_18}
{rank=same; raw_18}

raw_18 [label="raw"]


// END RANK prose_5

raw_18 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Currently does the basic job of retaining history and not letting subsequent
edits munge it.
"]
// END RANK raw_18

prose_6 -> { raw_20}
{rank=same; raw_20}

raw_20 [label="raw"]


// END RANK prose_6

raw_20 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Next step: now that we clone a new txtbuf each time, we have an immutable
record.  We should store the line as a string, to facilitate fuzzy matching.

"]
// END RANK raw_20

codeblock_7 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Txtbuf = require \"txtbuf\"
local sql     = require \"sqlayer\"
local color   = require \"color\"
local L       = require \"lpeg\"
local format  = assert (string.format)
local sub     = assert (string.sub)
local codepoints = assert(string.codepoints, \"must have string.codepoints\")
local reverse = assert (table.reverse)
assert(meta)"]
// END RANK codeblock_7

codeblock_8 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Historian = meta {}"]
// END RANK codeblock_8

section_9 -> { header_24 prose_25 section_26 section_27 section_28 section_29}
{rank=same; header_24 prose_25 section_26 section_27 section_28 section_29}

header_24 [label="2 : Persistence"]

prose_25 [label="prose"]

section_26 [label="section: 37-142"]

section_27 [label="section: 143-221"]

section_28 [label="section: 222-232"]

section_29 [label="section: 233-282"]


// END RANK section_9

header_24 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Persistence"]
// END RANK header_24

prose_25 -> { raw_31}
{rank=same; raw_31}

raw_31 [label="raw"]


// END RANK prose_25

raw_31 -> leaf_32
leaf_32  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This defines the persistence model for bridge.
"]
// END RANK raw_31

section_26 -> { header_33 prose_34 codeblock_35}
{rank=same; header_33 prose_34 codeblock_35}

header_33 [label="3 : SQLite battery"]

prose_34 [label="prose"]

codeblock_35 [label="code block 39-140"]


// END RANK section_26

header_33 -> leaf_36
leaf_36  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** SQLite battery"]
// END RANK header_33

prose_34 -> { raw_37}
{rank=same; raw_37}

raw_37 [label="raw"]


// END RANK prose_34

raw_37 -> leaf_38
leaf_38  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_37

codeblock_35 -> leaf_39
leaf_39  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Historian.HISTORY_LIMIT = 2000

local create_project_table = [[
CREATE TABLE IF NOT EXISTS project (
project_id INTEGER PRIMARY KEY AUTOINCREMENT,
directory TEXT UNIQUE,
time DATETIME DEFAULT CURRENT_TIMESTAMP );
]]

local create_repl_table = [[
CREATE TABLE IF NOT EXISTS repl (
line_id INTEGER PRIMARY KEY AUTOINCREMENT,
project INTEGER,
line TEXT,
time DATETIME DEFAULT CURRENT_TIMESTAMP,
FOREIGN KEY (project)
   REFERENCES project (project_id)
   ON DELETE CASCADE );
]]

local create_result_table = [[
CREATE TABLE IF NOT EXISTS result (
result_id INTEGER PRIMARY KEY AUTOINCREMENT,
line_id INTEGER,
repr text NOT NULL,
value blob,
FOREIGN KEY (line_id)
   REFERENCES repl (line_id)
   ON DELETE CASCADE );
]]

local create_session_table = [[
CREATE TABLE IF NOT EXISTS session (
session_id INTEGER PRIMARY KEY AUTOINCREMENT,
name TEXT,
project INTEGER,
-- These two are line_ids
start INTEGER NOT NULL,
end INTEGER,
test BOOLEAN,
sha TEXT,
FOREIGN KEY (project)
   REFERENCES project (project_id)
   ON DELETE CASCADE );
]]

local insert_line = [[
INSERT INTO repl (project, line) VALUES (:project, :line);
]]

local insert_result = [[
INSERT INTO result (line_id, repr) VALUES (:line_id, :repr);
]]

local insert_project = [[
INSERT INTO project (directory) VALUES (:dir);
]]

local get_tables = [[
SELECT name FROM sqlite_master WHERE type='table';
]]

local get_recent = [[
SELECT CAST (line_id AS REAL), line FROM repl
   WHERE project = %d
   ORDER BY time
   DESC LIMIT %d;
]]

local get_project = [[
SELECT project_id FROM project
   WHERE directory = %s;
]]

local get_reprs = [[
SELECT CAST (repl.line_id AS REAL), result.repr
FROM repl
LEFT OUTER JOIN result
ON repl.line_id = result.line_id
WHERE repl.project = %d
ORDER BY result.result_id
DESC LIMIT %d;
]]

local home_dir = io.popen(\"echo $HOME\", \"r\"):read(\"*a\"):sub(1, -2)

local bridge_home = io.popen(\"echo $BRIDGE_HOME\", \"r\"):read(\"*a\"):sub(1, -2)
Historian.bridge_home = bridge_home ~= \"\" and bridge_home
                        or home_dir .. \"/.bridge\"

Historian.project = io.popen(\"pwd\", \"r\"):read(\"*a\"):sub(1, -2)

local function has(table, name)
   for _,v in ipairs(table) do
      if name == v then
         return true
      end
   end
   return false
end"]
// END RANK codeblock_35

section_27 -> { header_40 prose_41 prose_42 codeblock_43}
{rank=same; header_40 prose_41 prose_42 codeblock_43}

header_40 [label="3 : Historian:load()"]

prose_41 [label="prose"]

prose_42 [label="prose"]

codeblock_43 [label="code block 150-219"]


// END RANK section_27

header_40 -> leaf_44
leaf_44  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Historian:load()"]
// END RANK header_40

prose_41 -> { raw_45}
{rank=same; raw_45}

raw_45 [label="raw"]


// END RANK prose_41

raw_45 -> leaf_46
leaf_46  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Brings up the project history and results, and (eventually) user config.
"]
// END RANK raw_45

prose_42 -> { raw_47}
{rank=same; raw_47}

raw_47 [label="raw"]


// END RANK prose_42

raw_47 -> leaf_48
leaf_48  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Most of the complexity serves to make a simple key/value relationship
between the regenerated txtbufs and their associated result history.
"]
// END RANK raw_47

codeblock_43 -> leaf_49
leaf_49  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Historian.load(historian)
   local conn = sql.open(historian.bridge_home)
   historian.conn = conn
   -- Set up bridge tables
   conn.pragma.foreign_keys(true)
   conn:exec(create_project_table)
   conn:exec(create_result_table)
   conn:exec(create_repl_table)
   conn:exec(create_session_table)
   -- Retrive project id
   local proj_val, proj_row = sql.pexec(conn,
                                  sql.format(get_project, historian.project),
                                  \"i\")
   if not proj_val then
      local ins_proj_stmt = conn:prepare(insert_project)
      ins_proj_stmt:bindkv {dir = historian.project}
      proj_val, proj_row = ins_proj_stmt:step()
      -- retry
      proj_val, proj_row = sql.pexec(conn,
                              sql.format(get_project, historian.project),
                              \"i\")
      if not proj_val then
         error \"Could not create project in .bridge\"
      end
   end

   local project_id = proj_val[1][1]
   historian.project_id = project_id
   -- Create insert prepared statements
   historian.insert_line = conn:prepare(insert_line)
   historian.insert_result = conn:prepare(insert_result)
   -- Retrieve history
   local pop_str = sql.format(get_recent, project_id,
                        historian.HISTORY_LIMIT)
   local repl_val, repl_row = sql.pexec(conn, pop_str, \"i\")
   local res_str = sql.format(get_reprs, project_id,
                       historian.HISTORY_LIMIT * 2)
   local res_val, res_row = sql.pexec(conn, res_str, \"i\")
   if repl_val and res_val then
      local lines = reverse(repl_val[2])
      local line_ids = reverse(repl_val[1])
      local repl_map = {}
      for i, v in ipairs(lines) do
         local buf = Txtbuf(v)
         historian[i] = buf
         repl_map[line_ids[i]] = buf
      end
      historian.cursor = #historian
      -- reuse line_id var for foreign keys
      line_ids = res_val[1]
      local reprs = res_val[2]
      -- This is keyed by txtbuf with a string value.
      local result_map = {}
      for i = 1, #reprs do
         local buf = repl_map[line_ids[i]]
         if buf then
            local result = result_map[buf] or {frozen = true}
            result[#result + 1] = reprs[i]
            result.n = #result -- for compat with nil in live use
            result_map[buf] = result
         end
      end
      historian.results = result_map
   else
      historian.results = {}
      historian.cursor = 0
   end
end"]
// END RANK codeblock_43

section_28 -> { header_50 prose_51 prose_52 codeblock_53}
{rank=same; header_50 prose_51 prose_52 codeblock_53}

header_50 [label="3 : Historian:restore_session(modeS, session)"]

prose_51 [label="prose"]

prose_52 [label="prose"]

codeblock_53 [label="code block 228-230"]


// END RANK section_28

header_50 -> leaf_54
leaf_54  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Historian:restore_session(modeS, session)"]
// END RANK header_50

prose_51 -> { raw_55}
{rank=same; raw_55}

raw_55 [label="raw"]


// END RANK prose_51

raw_55 -> leaf_56
leaf_56  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

If there is an open session, we want to replay it.
"]
// END RANK raw_55

prose_52 -> { raw_57}
{rank=same; raw_57}

raw_57 [label="raw"]


// END RANK prose_52

raw_57 -> leaf_58
leaf_58  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
To do this, we need to borrow the modeselektor.
"]
// END RANK raw_57

codeblock_53 -> leaf_59
leaf_59  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK codeblock_53

section_29 -> { header_60 prose_61 prose_62 prose_63 prose_64 codeblock_65}
{rank=same; header_60 prose_61 prose_62 prose_63 prose_64 codeblock_65}

header_60 [label="3 : Historian:persist(txtbuf)"]

prose_61 [label="prose"]

prose_62 [label="prose"]

prose_63 [label="prose"]

prose_64 [label="prose"]

codeblock_65 [label="code block 248-280"]


// END RANK section_29

header_60 -> leaf_66
leaf_66  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Historian:persist(txtbuf)"]
// END RANK header_60

prose_61 -> { raw_67}
{rank=same; raw_67}

raw_67 [label="raw"]


// END RANK prose_61

raw_67 -> leaf_68
leaf_68  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Persists a line and results to store.
"]
// END RANK raw_67

prose_62 -> { raw_69}
{rank=same; raw_69}

raw_69 [label="raw"]


// END RANK prose_62

raw_69 -> leaf_70
leaf_70  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The hooks are in place to persist the results. I'm starting with a string
representation; the goal is to provide the sense of persistence across
sessions, and supplement that over time with better and better approximations.
"]
// END RANK raw_69

prose_63 -> { raw_71 prespace_72 literal_73 raw_74 prespace_75 literal_76 raw_77}
{rank=same; raw_71 prespace_72 literal_73 raw_74 prespace_75 literal_76 raw_77}

raw_71 [label="raw"]

prespace_72 [label="prespace"]

literal_73 [label="literal"]

raw_74 [label="raw"]

prespace_75 [label="prespace"]

literal_76 [label="literal"]

raw_77 [label="raw"]


// END RANK prose_63

raw_71 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
To really nail it down will require semantic analysis and hence thorough
parsing.  General-purpose persistence tools belong in"]
// END RANK raw_71

prespace_72 -> leaf_79
leaf_79  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_72

literal_73 -> leaf_80
leaf_80  [color=Gray,shape=rectangle,fontname=Inconsolata,label="sqlayer"]
// END RANK literal_73

raw_74 -> leaf_81
leaf_81  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", which will
merge with our increasingly-modified"]
// END RANK raw_74

prespace_75 -> leaf_82
leaf_82  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_75

literal_76 -> leaf_83
leaf_83  [color=Gray,shape=rectangle,fontname=Inconsolata,label="sqlite"]
// END RANK literal_76

raw_77 -> leaf_84
leaf_84  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" bindings.
"]
// END RANK raw_77

prose_64 -> { raw_85}
{rank=same; raw_85}

raw_85 [label="raw"]


// END RANK prose_64

raw_85 -> leaf_86
leaf_86  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Medium-term goal is to hash any Lua object in a way that will resolve to a
common value for any identical semantics.
"]
// END RANK raw_85

codeblock_65 -> leaf_87
leaf_87  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Historian.persist(historian, txtbuf, results)
   local lb = tostring(txtbuf)
   if lb ~= \"\" then
      historian.insert_line:bindkv { project = historian.project_id,
                                          line    = lb }
      local err = historian.insert_line:step()
      if not err then
         historian.insert_line:clearbind():reset()
      else
         error(err)
      end
      local line_id = sql.lastRowId(historian.conn)
      if results and type(results) == \"table\" then
         for _,v in ipairs(reverse(results)) do
            -- insert result repr
            historian.insert_result:bindkv { line_id = line_id,
                                                  repr = color.ts(v) }
            err = historian.insert_result:step()
            if not err then
               historian.insert_result:clearbind():reset()
            end
         end
      end

   return true
   else
      -- A blank line can have no results and is uninteresting.
      return false
   end
   --]]
end"]
// END RANK codeblock_65

section_10 -> { header_88 prose_89 prose_90 section_91 section_92}
{rank=same; header_88 prose_89 prose_90 section_91 section_92}

header_88 [label="2 : Historian:search(frag)"]

prose_89 [label="prose"]

prose_90 [label="prose"]

section_91 [label="section: 293-318"]

section_92 [label="section: 319-378"]


// END RANK section_10

header_88 -> leaf_93
leaf_93  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Historian:search(frag)"]
// END RANK header_88

prose_89 -> { raw_94}
{rank=same; raw_94}

raw_94 [label="raw"]


// END RANK prose_89

raw_94 -> leaf_95
leaf_95  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This is a 'fuzzy search', that attempts to find a string containing the
letters of the fragment in order.
"]
// END RANK raw_94

prose_90 -> { raw_96}
{rank=same; raw_96}

raw_96 [label="raw"]


// END RANK prose_90

raw_96 -> leaf_97
leaf_97  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
If it finds nothing, it switches the last two letters and tries again. This
is an affordance for incremental searches, it's easy to make this mistake and
harmless to suggest the alternative.

"]
// END RANK raw_96

section_91 -> { header_98 prose_99 prose_100 codeblock_101}
{rank=same; header_98 prose_99 prose_100 codeblock_101}

header_98 [label="3 : fuss_patt"]

prose_99 [label="prose"]

prose_100 [label="prose"]

codeblock_101 [label="code block 302-316"]


// END RANK section_91

header_98 -> leaf_102
leaf_102  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** fuss_patt"]
// END RANK header_98

prose_99 -> { raw_103 prespace_104 literal_105 raw_106}
{rank=same; raw_103 prespace_104 literal_105 raw_106}

raw_103 [label="raw"]

prespace_104 [label="prespace"]

literal_105 [label="literal"]

raw_106 [label="raw"]


// END RANK prose_99

raw_103 -> leaf_107
leaf_107  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Here we incrementally build up a single"]
// END RANK raw_103

prespace_104 -> leaf_108
leaf_108  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_104

literal_105 -> leaf_109
leaf_109  [color=Gray,shape=rectangle,fontname=Inconsolata,label="lpeg"]
// END RANK literal_105

raw_106 -> leaf_110
leaf_110  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" pattern which will recognize
our desired lines.
"]
// END RANK raw_106

prose_100 -> { prespace_111 literal_112 raw_113 prespace_114 literal_115 raw_116}
{rank=same; prespace_111 literal_112 raw_113 prespace_114 literal_115 raw_116}

prespace_111 [label="prespace"]

literal_112 [label="literal"]

raw_113 [label="raw"]

prespace_114 [label="prespace"]

literal_115 [label="literal"]

raw_116 [label="raw"]


// END RANK prose_100

prespace_111 -> leaf_117
leaf_117  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_111

literal_112 -> leaf_118
leaf_118  [color=Gray,shape=rectangle,fontname=Inconsolata,label="(P(1) - P(frag[n]))^0"]
// END RANK literal_112

raw_113 -> leaf_119
leaf_119  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" matches anything that isn't the next fragment,
including"]
// END RANK raw_113

prespace_114 -> leaf_120
leaf_120  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_114

literal_115 -> leaf_121
leaf_121  [color=Gray,shape=rectangle,fontname=Inconsolata,label="\"\""]
// END RANK literal_115

raw_116 -> leaf_122
leaf_122  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  We then require this to be followed by the next fragment,
and so on.
"]
// END RANK raw_116

codeblock_101 -> leaf_123
leaf_123  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local P, match = L.P, L.match

local function fuzz_patt(frag)
   frag = type(frag) == \"string\" and codepoints(frag) or frag
   local patt =  (P(1) - P(frag[1]))^0
   for i = 1 , #frag - 1 do
      local v = frag[i]
      patt = patt * (P(v) * (P(1) - P(frag[i + 1]))^0)
   end
   patt = patt * P(frag[#frag])
   return patt
end
"]
// END RANK codeblock_101

section_92 -> { header_124 prose_125 prose_126 codeblock_127}
{rank=same; header_124 prose_125 prose_126 codeblock_127}

header_124 [label="3 : __repr for collection"]

prose_125 [label="prose"]

prose_126 [label="prose"]

codeblock_127 [label="code block 328-376"]


// END RANK section_92

header_124 -> leaf_128
leaf_128  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** __repr for collection"]
// END RANK header_124

prose_125 -> { raw_129 prespace_130 literal_131 raw_132}
{rank=same; raw_129 prespace_130 literal_131 raw_132}

raw_129 [label="raw"]

prespace_130 [label="prespace"]

literal_131 [label="literal"]

raw_132 [label="raw"]


// END RANK prose_125

raw_129 -> leaf_133
leaf_133  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

We use a pseudo-metamethod called"]
// END RANK raw_129

prespace_130 -> leaf_134
leaf_134  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_130

literal_131 -> leaf_135
leaf_135  [color=Gray,shape=rectangle,fontname=Inconsolata,label="__repr"]
// END RANK literal_131

raw_132 -> leaf_136
leaf_136  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" to specify custom table
representations.  These take the table as the first value and receive the
local color palette for consistency.
"]
// END RANK raw_132

prose_126 -> { raw_137}
{rank=same; raw_137}

raw_137 [label="raw"]


// END RANK prose_126

raw_137 -> leaf_138
leaf_138  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
In this case we want to highlight the letters of the fragment, which we
attach to the collection.
"]
// END RANK raw_137

codeblock_127 -> leaf_139
leaf_139  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local concat, litpat = assert(table.concat), assert(string.litpat)

local function _highlight(line, frag, c, best)
   local hl = {}
   local og_line = line -- debugging
   while #frag > 0 do
      local char
      char, frag = frag:sub(1,1), frag:sub(2)
      local at = line:find(litpat(char))
      if not at then
         error (\"can't find \" .. char .. \" in: \" .. line)
      end
      local color
      -- highlight the last two differently if this is a 'second best'
      -- search
      if not best and #frag <= 1 then
         color = c.alert
      else
         color = c.search_hl
      end
      hl[#hl + 1] = c.base(line:sub(1, at -1))
      hl[#hl + 1] = color(char)
      line = line:sub(at + 1)
   end
   hl[#hl + 1] = c.base(line)
   return concat(hl):gsub(\"\\n\", c.stresc(\"\\\\n\"))
end

local function _collect_repr(collection, c)
   if #collection == 0 then
      return c.alert \"No results found\"
   end
   local phrase = \"\"
   for i,v in ipairs(collection) do
      local alt_seq = \"         \"
      if i < 10 then
         alt_seq = a.bold(\"M-\" .. tostring(i) .. \" \")
      end
      phrase = phrase
               .. alt_seq
               .. _highlight(v, collection.frag, c, collection.best)
               .. \"\\n\"
   end
   return phrase
end

local collect_M = {__repr = _collect_repr}"]
// END RANK codeblock_127

section_11 -> { header_140 prose_141 prose_142 prose_143 prose_144 prose_145 prose_146 codeblock_147}
{rank=same; header_140 prose_141 prose_142 prose_143 prose_144 prose_145 prose_146 codeblock_147}

header_140 [label="2 : Historian:search(frag)"]

prose_141 [label="prose"]

prose_142 [label="prose"]

prose_143 [label="prose"]

prose_144 [label="prose"]

prose_145 [label="prose"]

prose_146 [label="prose"]

codeblock_147 [label="code block 396-433"]


// END RANK section_11

header_140 -> leaf_148
leaf_148  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Historian:search(frag)"]
// END RANK header_140

prose_141 -> { raw_149 prespace_150 literal_151 raw_152}
{rank=same; raw_149 prespace_150 literal_151 raw_152}

raw_149 [label="raw"]

prespace_150 [label="prespace"]

literal_151 [label="literal"]

raw_152 [label="raw"]


// END RANK prose_141

raw_149 -> leaf_153
leaf_153  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This is an incremental 'fuzzy' search, returning a"]
// END RANK raw_149

prespace_150 -> leaf_154
leaf_154  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_150

literal_151 -> leaf_155
leaf_155  [color=Gray,shape=rectangle,fontname=Inconsolata,label="collection"]
// END RANK literal_151

raw_152 -> leaf_156
leaf_156  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_152

prose_142 -> { raw_157}
{rank=same; raw_157}

raw_157 [label="raw"]


// END RANK prose_142

raw_157 -> leaf_158
leaf_158  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The array portion of a collection is any line which matches the search.
"]
// END RANK raw_157

prose_143 -> { raw_159}
{rank=same; raw_159}

raw_159 [label="raw"]


// END RANK prose_143

raw_159 -> leaf_160
leaf_160  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The other fields are:
"]
// END RANK raw_159

prose_144 -> { raw_161}
{rank=same; raw_161}

raw_161 [label="raw"]


// END RANK prose_144

raw_161 -> leaf_162
leaf_162  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- #fields
  -  best :  Whether this is a best-fit collection, that is, one with all
             codepoints in order.
"]
// END RANK raw_161

prose_145 -> { raw_163}
{rank=same; raw_163}

raw_163 [label="raw"]


// END RANK prose_145

raw_163 -> leaf_164
leaf_164  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  -  frag :  The fragment, used to highlight the collection
"]
// END RANK raw_163

prose_146 -> { raw_165}
{rank=same; raw_165}

raw_165 [label="raw"]


// END RANK prose_146

raw_165 -> leaf_166
leaf_166  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  -  cursors :  This is an array, each value is the cursor position of
                the corresponding line in the history.
"]
// END RANK raw_165

codeblock_147 -> leaf_167
leaf_167  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
function Historian.search(historian, frag)
   local collection = setmeta({}, collect_M)
   collection.frag = frag
   if frag == \"\" then
      return collection, false
   end
   local cursors = {}
   local best = true
   local patt = fuzz_patt(frag)
   for i = #historian, 1, -1 do
      local score = match(patt, tostring(historian[i]))
      if score then
         collection[#collection + 1] = tostring(historian[i])

            cursors[#cursors + 1] = i
      end
   end
   if #collection == 0 then
      -- try the transpose
      best = false
      local slip = sub(frag, 1, -3) .. sub(frag, -1, -1) .. sub(frag, -2, -2)
      collection.frag = slip
      patt = fuzz_patt(slip)
      for i = #historian, 1, -1 do
         local score = match(patt, tostring(historian[i]))
         if score then
            collection[#collection + 1] = tostring(historian[i])
            cursors[#cursors + 1] = i
         end
      end
   end
   collection.best = best
   collection.cursors = cursors
   return collection, best
end"]
// END RANK codeblock_147

section_12 -> { header_168 prose_169 codeblock_170 section_171 section_172 section_173}
{rank=same; header_168 prose_169 codeblock_170 section_171 section_172 section_173}

header_168 [label="2 : Historian:prev()"]

prose_169 [label="prose"]

codeblock_170 [label="code block 438-451"]

section_171 [label="section: 454-487"]

section_172 [label="section: 488-506"]

section_173 [label="section: 507-540"]


// END RANK section_12

header_168 -> leaf_174
leaf_174  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Historian:prev()"]
// END RANK header_168

prose_169 -> { raw_175}
{rank=same; raw_175}

raw_175 [label="raw"]


// END RANK prose_169

raw_175 -> leaf_176
leaf_176  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_175

codeblock_170 -> leaf_177
leaf_177  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Historian.prev(historian)
   if historian.cursor == 0 or #historian == 0 then
      return Txtbuf()
   end
   local Δ = historian.cursor > 1 and 1 or 0
   local txtbuf = historian[historian.cursor - Δ]
   txtbuf.cur_row = 1
   local result = historian.results[txtbuf]
   historian.cursor = historian.cursor - Δ
   txtbuf.cursor = #txtbuf.lines[txtbuf.cur_row] + 1
   return txtbuf:clone(), result
end"]
// END RANK codeblock_170

section_171 -> { header_178 prose_179 prose_180 codeblock_181}
{rank=same; header_178 prose_179 prose_180 codeblock_181}

header_178 [label="3 : Historian:next()"]

prose_179 [label="prose"]

prose_180 [label="prose"]

codeblock_181 [label="code block 461-485"]


// END RANK section_171

header_178 -> leaf_182
leaf_182  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Historian:next()"]
// END RANK header_178

prose_179 -> { raw_183 prespace_184 literal_185 raw_186}
{rank=same; raw_183 prespace_184 literal_185 raw_186}

raw_183 [label="raw"]

prespace_184 [label="prespace"]

literal_185 [label="literal"]

raw_186 [label="raw"]


// END RANK prose_179

raw_183 -> leaf_187
leaf_187  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Returns the next txtbuf in history, and a second flag to tell the"]
// END RANK raw_183

prespace_184 -> leaf_188
leaf_188  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_184

literal_185 -> leaf_189
leaf_189  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_185

raw_186 -> leaf_190
leaf_190  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" it might be time for a new one.
"]
// END RANK raw_186

prose_180 -> { raw_191}
{rank=same; raw_191}

raw_191 [label="raw"]


// END RANK prose_180

raw_191 -> leaf_192
leaf_192  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I'd like to stop buffering blank lines at some point.
"]
// END RANK raw_191

codeblock_181 -> leaf_193
leaf_193  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Historian.next(historian)
   local Δ = historian.cursor < #historian and 1 or 0
   if historian.cursor == 0 or #historian == 0 then
      return Txtbuf()
   end
   local txtbuf = historian[historian.cursor + Δ]
   if not txtbuf then
      return Txtbuf()
   end
   txtbuf.cur_row = #txtbuf.lines
   local result = historian.results[txtbuf]
   if not txtbuf then
      return Txtbuf()
   end
   historian.cursor = historian.cursor + Δ
   txtbuf.cursor = #txtbuf.lines[txtbuf.cur_row] + 1
   if not (Δ > 0) and #txtbuf.lines > 0 then
      historian.cursor = #historian + 1
      return txtbuf:clone(), nil, true
   else
      return txtbuf:clone(), result, false
   end
end"]
// END RANK codeblock_181

section_172 -> { header_194 prose_195 codeblock_196}
{rank=same; header_194 prose_195 codeblock_196}

header_194 [label="3 : Historian:index(cursor)"]

prose_195 [label="prose"]

codeblock_196 [label="code block 492-505"]


// END RANK section_172

header_194 -> leaf_197
leaf_197  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Historian:index(cursor)"]
// END RANK header_194

prose_195 -> { raw_198}
{rank=same; raw_198}

raw_198 [label="raw"]


// END RANK prose_195

raw_198 -> leaf_199
leaf_199  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Loads the history to an exact index.
"]
// END RANK raw_198

codeblock_196 -> leaf_200
leaf_200  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Historian.index(historian, cursor)
   if cursor < 0 or cursor > #historian + 1 then
      return false
   end
   local txtbuf = historian[cursor]
   local result = historian.results[txtbuf]
   txtbuf = txtbuf:clone()
   historian.cursor = cursor
   txtbuf.cur_row = #txtbuf.lines
   txtbuf.cursor = #txtbuf.lines[txtbuf.cur_row] + 1
   return txtbuf, result
end"]
// END RANK codeblock_196

section_173 -> { header_201 prose_202 prose_203 codeblock_204 codeblock_205 codeblock_206}
{rank=same; header_201 prose_202 prose_203 codeblock_204 codeblock_205 codeblock_206}

header_201 [label="3 : Historian:append(txtbuf, results, success)"]

prose_202 [label="prose"]

prose_203 [label="prose"]

codeblock_204 [label="code block 513-527"]

codeblock_205 [label="code block 529-536"]

codeblock_206 [label="code block 538-540"]


// END RANK section_173

header_201 -> leaf_207
leaf_207  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Historian:append(txtbuf, results, success)"]
// END RANK header_201

prose_202 -> { raw_208}
{rank=same; raw_208}

raw_208 [label="raw"]


// END RANK prose_202

raw_208 -> leaf_209
leaf_209  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Appends a txtbuf to history and persists it.
"]
// END RANK raw_208

prose_203 -> { raw_210}
{rank=same; raw_210}

raw_210 [label="raw"]


// END RANK prose_203

raw_210 -> leaf_211
leaf_211  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Doesn't adjust the cursor.
"]
// END RANK raw_210

codeblock_204 -> leaf_212
leaf_212  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Historian.append(historian, txtbuf, results, success)
   if tostring(historian[#historian]) == tostring(txtbuf) then
      -- don't bother
      return false
   end
   historian[#historian + 1] = txtbuf
   if success then
      historian:persist(txtbuf, results)
   else
      historian:persist(txtbuf)
   end
   return true
end"]
// END RANK codeblock_204

codeblock_205 -> leaf_213
leaf_213  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function new()
   local historian = meta(Historian)
   historian:load()
   return historian
end
Historian.idEst = new"]
// END RANK codeblock_205

codeblock_206 -> leaf_214
leaf_214  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return new"]
// END RANK codeblock_206


}
