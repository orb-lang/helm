digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 589"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-483"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 prose_5 prose_6 codeblock_7 codeblock_8 section_9 section_10 section_11 section_12}
{rank=same; header_2 prose_3 prose_4 prose_5 prose_6 codeblock_7 codeblock_8 section_9 section_10 section_11 section_12}

header_2 [label="1 : Historian"]

prose_3 [label="prose"]

prose_4 [label="prose"]

prose_5 [label="prose"]

prose_6 [label="prose"]

codeblock_7 [label="code block 16-29"]

codeblock_8 [label="code block 31-33"]

section_9 [label="section: 36-226"]

section_10 [label="section: 284-319"]

section_11 [label="section: 396-463"]

section_12 [label="section: 484-554"]


// END RANK section_1

header_2 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Historian"]
// END RANK header_2

prose_3 -> { raw_14}
{rank=same; raw_14}

raw_14 [label="raw"]


// END RANK prose_3

raw_14 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


This module is responsible for REPL history.
"]
// END RANK raw_14

prose_4 -> { raw_16}
{rank=same; raw_16}

raw_16 [label="raw"]


// END RANK prose_4

raw_16 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Eventually this will include persisting and restoring from a SQLite database,
fuzzy searching, and variable cacheing.
"]
// END RANK raw_16

prose_5 -> { raw_18}
{rank=same; raw_18}

raw_18 [label="raw"]


// END RANK prose_5

raw_18 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Currently does the basic job of retaining history and not letting subsequent
edits munge it.
"]
// END RANK raw_18

prose_6 -> { raw_20}
{rank=same; raw_20}

raw_20 [label="raw"]


// END RANK prose_6

raw_20 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Next step: now that we clone a new txtbuf each time, we have an immutable
record.  We should store the line as a string, to facilitate fuzzy matching.

"]
// END RANK raw_20

codeblock_7 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Txtbuf  = require \"txtbuf\"
local Rainbuf = require \"rainbuf\"
local sql     = require \"sqlayer\"
local color   = (require \"color\").color

local L       = require \"lpeg\"
local repr    = require \"repr\"
local format  = assert (string.format)
local sub     = assert (string.sub)
local codepoints = assert(string.codepoints, \"must have string.codepoints\")
local reverse = assert (table.reverse)
assert(meta)"]
// END RANK codeblock_7

codeblock_8 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Historian = meta {}"]
// END RANK codeblock_8

section_9 -> { header_24 prose_25 section_26 section_27 section_28 section_29}
{rank=same; header_24 prose_25 section_26 section_27 section_28 section_29}

header_24 [label="2 : Persistence"]

prose_25 [label="prose"]

section_26 [label="section: 40-144"]

section_27 [label="section: 145-215"]

section_28 [label="section: 216-226"]

section_29 [label="section: 227-283"]


// END RANK section_9

header_24 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Persistence"]
// END RANK header_24

prose_25 -> { raw_31}
{rank=same; raw_31}

raw_31 [label="raw"]


// END RANK prose_25

raw_31 -> leaf_32
leaf_32  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This defines the persistence model for bridge.
"]
// END RANK raw_31

section_26 -> { header_33 prose_34 codeblock_35}
{rank=same; header_33 prose_34 codeblock_35}

header_33 [label="3 : SQLite battery"]

prose_34 [label="prose"]

codeblock_35 [label="code block 42-142"]


// END RANK section_26

header_33 -> leaf_36
leaf_36  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** SQLite battery"]
// END RANK header_33

prose_34 -> { raw_37}
{rank=same; raw_37}

raw_37 [label="raw"]


// END RANK prose_34

raw_37 -> leaf_38
leaf_38  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_37

codeblock_35 -> leaf_39
leaf_39  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Historian.HISTORY_LIMIT = 2000

local create_project_table = [[
CREATE TABLE IF NOT EXISTS project (
   project_id INTEGER PRIMARY KEY AUTOINCREMENT,
   directory TEXT UNIQUE,
   time DATETIME DEFAULT CURRENT_TIMESTAMP
);
]]

local create_repl_table = [[
CREATE TABLE IF NOT EXISTS repl (
   line_id INTEGER PRIMARY KEY AUTOINCREMENT,
   project INTEGER,
   line TEXT,
   time DATETIME DEFAULT CURRENT_TIMESTAMP,
   FOREIGN KEY (project)
      REFERENCES project (project_id)
      ON DELETE CASCADE
);
]]

local create_result_table = [[
CREATE TABLE IF NOT EXISTS result (
   result_id INTEGER PRIMARY KEY AUTOINCREMENT,
   line_id INTEGER,
   repr text NOT NULL,
   value blob,
   FOREIGN KEY (line_id)
      REFERENCES repl (line_id)
      ON DELETE CASCADE
);
]]

local create_session_table = [[
CREATE TABLE IF NOT EXISTS session (
session_id INTEGER PRIMARY KEY AUTOINCREMENT,
name TEXT,
project INTEGER,
-- These two are line_ids
start INTEGER NOT NULL,
end INTEGER,
test BOOLEAN,
sha TEXT,
FOREIGN KEY (project)
   REFERENCES project (project_id)
   ON DELETE CASCADE );
]]

local insert_line = [[
INSERT INTO repl (project, line) VALUES (:project, :line);
]]

local insert_result = [[
INSERT INTO result (line_id, repr) VALUES (:line_id, :repr);
]]

local insert_project = [[
INSERT INTO project (directory) VALUES (:dir);
]]

local get_tables = [[
SELECT name FROM sqlite_master WHERE type='table';
]]

local get_recent = [[
SELECT CAST (line_id AS REAL), line FROM repl
   WHERE project = %d
   ORDER BY time
   DESC LIMIT %d;
]]

local get_project = [[
SELECT project_id FROM project
   WHERE directory = %s;
]]

local get_results = [[
SELECT result.repr
FROM result
WHERE result.line_id = :line_id
ORDER BY result.result_id;
]]

local home_dir = os.getenv \"HOME\"

local bridge_home = os.getenv \"BRIDGE_HOME\"
Historian.bridge_home = bridge_home or home_dir .. \"/.bridge\"

Historian.project = io.popen(\"pwd\", \"r\"):read(\"*a\"):sub(1, -2)

local function has(table, name)
   for _,v in ipairs(table) do
      if name == v then
         return true
      end
   end
   return false
end"]
// END RANK codeblock_35

section_27 -> { header_40 prose_41 prose_42 structure_43 prose_44 codeblock_45}
{rank=same; header_40 prose_41 prose_42 structure_43 prose_44 codeblock_45}

header_40 [label="3 : Historian:load()"]

prose_41 [label="prose"]

prose_42 [label="prose"]

structure_43 [label="structure"]

prose_44 [label="prose"]

codeblock_45 [label="code block 159-213"]


// END RANK section_27

header_40 -> leaf_46
leaf_46  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Historian:load()"]
// END RANK header_40

prose_41 -> { raw_47}
{rank=same; raw_47}

raw_47 [label="raw"]


// END RANK prose_41

raw_47 -> leaf_48
leaf_48  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Brings up the project history and results, and (eventually) user config.
"]
// END RANK raw_47

prose_42 -> { raw_49}
{rank=same; raw_49}

raw_49 [label="raw"]


// END RANK prose_42

raw_49 -> leaf_50
leaf_50  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Most of the complexity serves to make a simple key/value relationship
between the regenerated txtbufs and their associated result history.
"]
// END RANK raw_49

structure_43 -> { hashline_51}
{rank=same; hashline_51}

hashline_51 [label="hashline"]


// END RANK structure_43

hashline_51 -> { hashtag_52}
{rank=same; hashtag_52}

hashtag_52 [label="hashtag"]


// END RANK hashline_51

hashtag_52 -> leaf_53
leaf_53  [color=Gray,shape=rectangle,fontname=Inconsolata,label="todo"]
// END RANK hashtag_52

prose_44 -> { raw_54}
{rank=same; raw_54}

raw_54 [label="raw"]


// END RANK prose_44

raw_54 -> leaf_55
leaf_55  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
the results never get used.
"]
// END RANK raw_54

codeblock_45 -> leaf_56
leaf_56  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Historian.load(historian)
   local conn = sql.open(historian.bridge_home)
   historian.conn = conn
   -- Set up bridge tables
   conn.pragma.foreign_keys(true)
   conn:exec(create_project_table)
   conn:exec(create_result_table)
   conn:exec(create_repl_table)
   conn:exec(create_session_table)
   -- Retrive project id
   local proj_val, proj_row = sql.pexec(conn,
                                  sql.format(get_project, historian.project),
                                  \"i\")
   if not proj_val then
      local ins_proj_stmt = conn:prepare(insert_project)
      ins_proj_stmt:bindkv {dir = historian.project}
      proj_val, proj_row = ins_proj_stmt:step()
      -- retry
      proj_val, proj_row = sql.pexec(conn,
                              sql.format(get_project, historian.project),
                              \"i\")
      if not proj_val then
         error \"Could not create project in .bridge\"
      end
   end

   local project_id = proj_val[1][1]
   historian.project_id = project_id
   -- Create insert prepared statements
   historian.insert_line = conn:prepare(insert_line)
   historian.insert_result = conn:prepare(insert_result)
   -- Create result retrieval prepared statement
   historian.get_results = conn:prepare(get_results)
   -- Retrieve history
   local pop_str = sql.format(get_recent, project_id,
                        historian.HISTORY_LIMIT)
   local repl_val  = sql.pexec(conn, pop_str, \"i\")
   if repl_val then
      local lines = reverse(repl_val[2])
      local line_ids = reverse(repl_val[1])
      historian.line_ids = line_ids
      local repl_map = {}
      for i, v in ipairs(lines) do
         local buf = Txtbuf(v)
         historian[i] = buf
         repl_map[line_ids[i]] = buf
      end
      historian.cursor = #historian
   else
      historian.results = {}
      historian.cursor = 0
   end
end"]
// END RANK codeblock_45

section_28 -> { header_57 prose_58 prose_59 codeblock_60}
{rank=same; header_57 prose_58 prose_59 codeblock_60}

header_57 [label="3 : Historian:restore_session(modeS, session)"]

prose_58 [label="prose"]

prose_59 [label="prose"]

codeblock_60 [label="code block 222-224"]


// END RANK section_28

header_57 -> leaf_61
leaf_61  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Historian:restore_session(modeS, session)"]
// END RANK header_57

prose_58 -> { raw_62}
{rank=same; raw_62}

raw_62 [label="raw"]


// END RANK prose_58

raw_62 -> leaf_63
leaf_63  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

If there is an open session, we want to replay it.
"]
// END RANK raw_62

prose_59 -> { raw_64}
{rank=same; raw_64}

raw_64 [label="raw"]


// END RANK prose_59

raw_64 -> leaf_65
leaf_65  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
To do this, we need to borrow the modeselektor.
"]
// END RANK raw_64

codeblock_60 -> leaf_66
leaf_66  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK codeblock_60

section_29 -> { header_67 prose_68 prose_69 structure_70 prose_71 prose_72 codeblock_73}
{rank=same; header_67 prose_68 prose_69 structure_70 prose_71 prose_72 codeblock_73}

header_67 [label="3 : Historian:persist(txtbuf)"]

prose_68 [label="prose"]

prose_69 [label="prose"]

structure_70 [label="structure"]

prose_71 [label="prose"]

prose_72 [label="prose"]

codeblock_73 [label="code block 246-281"]


// END RANK section_29

header_67 -> leaf_74
leaf_74  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Historian:persist(txtbuf)"]
// END RANK header_67

prose_68 -> { raw_75}
{rank=same; raw_75}

raw_75 [label="raw"]


// END RANK prose_68

raw_75 -> leaf_76
leaf_76  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Persists a line and results to store.
"]
// END RANK raw_75

prose_69 -> { raw_77}
{rank=same; raw_77}

raw_77 [label="raw"]


// END RANK prose_69

raw_77 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The hooks are in place to persist the results. I'm starting with a string
representation; the goal is to provide the sense of persistence across
sessions, and supplement that over time with better and better approximations.
"]
// END RANK raw_77

structure_70 -> { hashline_79}
{rank=same; hashline_79}

hashline_79 [label="hashline"]


// END RANK structure_70

hashline_79 -> { hashtag_80}
{rank=same; hashtag_80}

hashtag_80 [label="hashtag"]


// END RANK hashline_79

hashtag_80 -> leaf_81
leaf_81  [color=Gray,shape=rectangle,fontname=Inconsolata,label="todo"]
// END RANK hashtag_80

prose_71 -> { raw_82 prespace_83 literal_84 raw_85 prespace_86 literal_87 raw_88}
{rank=same; raw_82 prespace_83 literal_84 raw_85 prespace_86 literal_87 raw_88}

raw_82 [label="raw"]

prespace_83 [label="prespace"]

literal_84 [label="literal"]

raw_85 [label="raw"]

prespace_86 [label="prespace"]

literal_87 [label="literal"]

raw_88 [label="raw"]


// END RANK prose_71

raw_82 -> leaf_89
leaf_89  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
parsing.  General-purpose persistence tools belong in"]
// END RANK raw_82

prespace_83 -> leaf_90
leaf_90  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_83

literal_84 -> leaf_91
leaf_91  [color=Gray,shape=rectangle,fontname=Inconsolata,label="sqlayer"]
// END RANK literal_84

raw_85 -> leaf_92
leaf_92  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", which will
merge with our increasingly-modified"]
// END RANK raw_85

prespace_86 -> leaf_93
leaf_93  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_86

literal_87 -> leaf_94
leaf_94  [color=Gray,shape=rectangle,fontname=Inconsolata,label="sqlite"]
// END RANK literal_87

raw_88 -> leaf_95
leaf_95  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" bindings.
"]
// END RANK raw_88

prose_72 -> { raw_96}
{rank=same; raw_96}

raw_96 [label="raw"]


// END RANK prose_72

raw_96 -> leaf_97
leaf_97  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Medium-term goal is to hash any Lua object in a way that will resolve to a
common value for any identical semantics.
"]
// END RANK raw_96

codeblock_73 -> leaf_98
leaf_98  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local concat = table.concat
function Historian.persist(historian, txtbuf, results)
   local lb = tostring(txtbuf)
   if lb ~= \"\" then
      historian.insert_line:bindkv { project = historian.project_id,
                                          line    = lb }
      local err = historian.insert_line:step()
      if not err then
         historian.insert_line:clearbind():reset()
      else
         error(err)
      end
      local line_id = sql.lastRowId(historian.conn)
      table.insert(historian.line_ids, line_id)
      if results and type(results) == \"table\" then
         for i = 1, results.n do
            -- insert result repr
            local res = results[i]
            historian.insert_result:bindkv { line_id = line_id,
                                                  repr = repr.ts(res) }
            err = historian.insert_result:step()
            if not err then
               historian.insert_result:clearbind():reset()
            end
         end
      end

   return true
   else
      -- A blank line can have no results and is uninteresting.
      return false
   end
   --]]
end"]
// END RANK codeblock_73

section_10 -> { header_99 prose_100 prose_101 section_102 section_103}
{rank=same; header_99 prose_100 prose_101 section_102 section_103}

header_99 [label="2 : Historian:search(frag)"]

prose_100 [label="prose"]

prose_101 [label="prose"]

section_102 [label="section: 294-319"]

section_103 [label="section: 320-395"]


// END RANK section_10

header_99 -> leaf_104
leaf_104  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Historian:search(frag)"]
// END RANK header_99

prose_100 -> { raw_105}
{rank=same; raw_105}

raw_105 [label="raw"]


// END RANK prose_100

raw_105 -> leaf_106
leaf_106  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This is a 'fuzzy search', that attempts to find a string containing the
letters of the fragment in order.
"]
// END RANK raw_105

prose_101 -> { raw_107}
{rank=same; raw_107}

raw_107 [label="raw"]


// END RANK prose_101

raw_107 -> leaf_108
leaf_108  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
If it finds nothing, it switches the last two letters and tries again. This
is an affordance for incremental searches, it's easy to make this mistake and
harmless to suggest the alternative.

"]
// END RANK raw_107

section_102 -> { header_109 prose_110 prose_111 codeblock_112}
{rank=same; header_109 prose_110 prose_111 codeblock_112}

header_109 [label="3 : fuzz_patt"]

prose_110 [label="prose"]

prose_111 [label="prose"]

codeblock_112 [label="code block 303-317"]


// END RANK section_102

header_109 -> leaf_113
leaf_113  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** fuzz_patt"]
// END RANK header_109

prose_110 -> { raw_114 prespace_115 literal_116 raw_117}
{rank=same; raw_114 prespace_115 literal_116 raw_117}

raw_114 [label="raw"]

prespace_115 [label="prespace"]

literal_116 [label="literal"]

raw_117 [label="raw"]


// END RANK prose_110

raw_114 -> leaf_118
leaf_118  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Here we incrementally build up a single"]
// END RANK raw_114

prespace_115 -> leaf_119
leaf_119  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_115

literal_116 -> leaf_120
leaf_120  [color=Gray,shape=rectangle,fontname=Inconsolata,label="lpeg"]
// END RANK literal_116

raw_117 -> leaf_121
leaf_121  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" pattern which will recognize
our desired lines.
"]
// END RANK raw_117

prose_111 -> { prespace_122 literal_123 raw_124 prespace_125 literal_126 raw_127}
{rank=same; prespace_122 literal_123 raw_124 prespace_125 literal_126 raw_127}

prespace_122 [label="prespace"]

literal_123 [label="literal"]

raw_124 [label="raw"]

prespace_125 [label="prespace"]

literal_126 [label="literal"]

raw_127 [label="raw"]


// END RANK prose_111

prespace_122 -> leaf_128
leaf_128  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_122

literal_123 -> leaf_129
leaf_129  [color=Gray,shape=rectangle,fontname=Inconsolata,label="(P(1) - P(frag[n]))^0"]
// END RANK literal_123

raw_124 -> leaf_130
leaf_130  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" matches anything that isn't the next fragment,
including"]
// END RANK raw_124

prespace_125 -> leaf_131
leaf_131  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_125

literal_126 -> leaf_132
leaf_132  [color=Gray,shape=rectangle,fontname=Inconsolata,label="\"\""]
// END RANK literal_126

raw_127 -> leaf_133
leaf_133  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  We then require this to be followed by the next fragment,
and so on.
"]
// END RANK raw_127

codeblock_112 -> leaf_134
leaf_134  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local P, match = L.P, L.match

local function fuzz_patt(frag)
   frag = type(frag) == \"string\" and codepoints(frag) or frag
   local patt =  (P(1) - P(frag[1]))^0
   for i = 1 , #frag - 1 do
      local v = frag[i]
      patt = patt * (P(v) * (P(1) - P(frag[i + 1]))^0)
   end
   patt = patt * P(frag[#frag])
   return patt
end
"]
// END RANK codeblock_112

section_103 -> { header_135 prose_136 prose_137 codeblock_138}
{rank=same; header_135 prose_136 prose_137 codeblock_138}

header_135 [label="3 : __repr for collection"]

prose_136 [label="prose"]

prose_137 [label="prose"]

codeblock_138 [label="code block 329-393"]


// END RANK section_103

header_135 -> leaf_139
leaf_139  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** __repr for collection"]
// END RANK header_135

prose_136 -> { raw_140 prespace_141 literal_142 raw_143}
{rank=same; raw_140 prespace_141 literal_142 raw_143}

raw_140 [label="raw"]

prespace_141 [label="prespace"]

literal_142 [label="literal"]

raw_143 [label="raw"]


// END RANK prose_136

raw_140 -> leaf_144
leaf_144  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

We use a pseudo-metamethod called"]
// END RANK raw_140

prespace_141 -> leaf_145
leaf_145  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_141

literal_142 -> leaf_146
leaf_146  [color=Gray,shape=rectangle,fontname=Inconsolata,label="__repr"]
// END RANK literal_142

raw_143 -> leaf_147
leaf_147  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" to specify custom table
representations.  These take the table as the first value and receive the
local color palette for consistency.
"]
// END RANK raw_143

prose_137 -> { raw_148}
{rank=same; raw_148}

raw_148 [label="raw"]


// END RANK prose_137

raw_148 -> leaf_149
leaf_149  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
In this case we want to highlight the letters of the fragment, which we
attach to the collection.
"]
// END RANK raw_148

codeblock_138 -> leaf_150
leaf_150  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local concat, litpat = assert(table.concat), assert(string.litpat)
local gsub = assert(string.gsub)
local function _highlight(line, frag, best, c)
   local hl = {}
   while #frag > 0 do
      local char
      char, frag = frag:sub(1,1), frag:sub(2)
      local at = line:find(litpat(char))
      if not at then
         break
      end
      local Color
      -- highlight the last two differently if this is a 'second best'
      -- search
      if not best and #frag <= 1 then
         Color = c.alert
      else
         Color = c.search_hl
      end
      hl[#hl + 1] = c.base(line:sub(1, at -1))
      hl[#hl + 1] = Color(char)
      line = line:sub(at + 1)
   end
   hl[#hl + 1] = c.base(line)
   return concat(hl):gsub(\"\\n\", c.stresc(\"\\\\n\"))
end

local function _collect_repr(collection, phrase, c)
   assert(c, \"must provide a color table\")
   local i = 1
   local first = true
   return function()
      if #collection == 0 then
         if first then
            first = false
            return c.alert \"No results found\"
         else
            return nil
         end
      end
      local line = collection[i]
      if line == nil then return nil end
      local len = #line
      local alt_seq = \"    \"
      if i < 10 then
         alt_seq = c.bold(\"M-\" .. tostring(i) .. \" \")
      end
      len = len + 4
      if len > phrase:remains() then
         line = line:sub(1, phrase:remains() - 5) .. c.alert \"…\"
         len = phrase.width - (phrase.width - phrase:remains() - 4)
      end
      local next_line = alt_seq
                     .. _highlight(line, collection.frag, collection.best, c)
      if i == collection.hl then
         next_line = c.highlight(next_line)
      end
      i = i + 1
      return next_line, len
   end
end

local collect_M = {__repr = _collect_repr}"]
// END RANK codeblock_138

section_11 -> { header_151 prose_152 prose_153 prose_154 prose_155 prose_156 prose_157 prose_158 codeblock_159 section_160}
{rank=same; header_151 prose_152 prose_153 prose_154 prose_155 prose_156 prose_157 prose_158 codeblock_159 section_160}

header_151 [label="2 : Historian:search(frag)"]

prose_152 [label="prose"]

prose_153 [label="prose"]

prose_154 [label="prose"]

prose_155 [label="prose"]

prose_156 [label="prose"]

prose_157 [label="prose"]

prose_158 [label="prose"]

codeblock_159 [label="code block 417-461"]

section_160 [label="section: 464-483"]


// END RANK section_11

header_151 -> leaf_161
leaf_161  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Historian:search(frag)"]
// END RANK header_151

prose_152 -> { raw_162 prespace_163 literal_164 raw_165}
{rank=same; raw_162 prespace_163 literal_164 raw_165}

raw_162 [label="raw"]

prespace_163 [label="prespace"]

literal_164 [label="literal"]

raw_165 [label="raw"]


// END RANK prose_152

raw_162 -> leaf_166
leaf_166  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This is an incremental 'fuzzy' search, returning a"]
// END RANK raw_162

prespace_163 -> leaf_167
leaf_167  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_163

literal_164 -> leaf_168
leaf_168  [color=Gray,shape=rectangle,fontname=Inconsolata,label="collection"]
// END RANK literal_164

raw_165 -> leaf_169
leaf_169  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_165

prose_153 -> { raw_170}
{rank=same; raw_170}

raw_170 [label="raw"]


// END RANK prose_153

raw_170 -> leaf_171
leaf_171  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The array portion of a collection is any line which matches the search.
"]
// END RANK raw_170

prose_154 -> { raw_172}
{rank=same; raw_172}

raw_172 [label="raw"]


// END RANK prose_154

raw_172 -> leaf_173
leaf_173  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The other fields are:
"]
// END RANK raw_172

prose_155 -> { raw_174}
{rank=same; raw_174}

raw_174 [label="raw"]


// END RANK prose_155

raw_174 -> leaf_175
leaf_175  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- #fields
  -  best :  Whether this is a best-fit collection, that is, one with all
             codepoints in order.
"]
// END RANK raw_174

prose_156 -> { raw_176}
{rank=same; raw_176}

raw_176 [label="raw"]


// END RANK prose_156

raw_176 -> leaf_177
leaf_177  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  -  frag :  The fragment, used to highlight the collection.  Is transposed
             in a next-best search.
"]
// END RANK raw_176

prose_157 -> { raw_178 prespace_179 literal_180 raw_181}
{rank=same; raw_178 prespace_179 literal_180 raw_181}

raw_178 [label="raw"]

prespace_179 [label="prespace"]

literal_180 [label="literal"]

raw_181 [label="raw"]


// END RANK prose_157

raw_178 -> leaf_182
leaf_182  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  -  lit_frag :  The literal fragment passed as the"]
// END RANK raw_178

prespace_179 -> leaf_183
leaf_183  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_179

literal_180 -> leaf_184
leaf_184  [color=Gray,shape=rectangle,fontname=Inconsolata,label="frag"]
// END RANK literal_180

raw_181 -> leaf_185
leaf_185  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" parameter.  Used to
                 compare to the last search.
"]
// END RANK raw_181

prose_158 -> { raw_186}
{rank=same; raw_186}

raw_186 [label="raw"]


// END RANK prose_158

raw_186 -> leaf_187
leaf_187  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  -  cursors :  This is an array, each value is the cursor position of
                the corresponding line in the history.
"]
// END RANK raw_186

codeblock_159 -> leaf_188
leaf_188  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Historian.search(historian, frag)
   if historian.last_collection
      and historian.last_collection[1].lit_frag == frag then
      -- don't repeat a search
      return historian.last_collection
   end
   local collection = setmeta({}, collect_M)
   collection.frag = frag
   collection.lit_frag = frag
   if frag == \"\" then
      return Rainbuf {[1] = collection, n = 1}, false
   end
   local cursors = {}
   local best = true
   local patt = fuzz_patt(frag)
   for i = #historian, 1, -1 do
      local score = match(patt, tostring(historian[i]))
      if score then
         collection[#collection + 1] = tostring(historian[i])
         cursors[#cursors + 1] = i
      end
   end
   if #collection == 0 then
      -- try the transpose
      best = false
      local slip = sub(frag, 1, -3) .. sub(frag, -1, -1) .. sub(frag, -2, -2)
      collection.frag = slip
      patt = fuzz_patt(slip)
      for i = #historian, 1, -1 do
         local score = match(patt, tostring(historian[i]))
         if score then
            collection[#collection + 1] = tostring(historian[i])
            cursors[#cursors + 1] = i
         end
      end
   end
   collection.best = best
   collection.cursors = cursors
   collection.hl = 1
   historian.last_collection = Rainbuf {[1] = collection, n = 1, live = true}
   historian.last_collection.made_in = \"historian.search\"
   return historian.last_collection, best
end"]
// END RANK codeblock_159

section_160 -> { header_189 prose_190 codeblock_191}
{rank=same; header_189 prose_190 codeblock_191}

header_189 [label="4 : _resultsFrom(historian, line_id)"]

prose_190 [label="prose"]

codeblock_191 [label="code block 468-481"]


// END RANK section_160

header_189 -> leaf_192
leaf_192  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** _resultsFrom(historian, line_id)"]
// END RANK header_189

prose_190 -> { raw_193}
{rank=same; raw_193}

raw_193 [label="raw"]


// END RANK prose_190

raw_193 -> leaf_194
leaf_194  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Retrieve a set of results reprs from the database, given a line_id.
"]
// END RANK raw_193

codeblock_191 -> leaf_195
leaf_195  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function _resultsFrom(historian, line_id)
   local stmt = historian.get_results
   stmt:bindkv {line_id = line_id}
   local results = stmt:resultset()
   if results then
      results = results[1]
      results.n = #results
      results.frozen = true
   end
   historian.get_results:clearbind():reset()
   return results
end"]
// END RANK codeblock_191

section_12 -> { header_196 prose_197 codeblock_198 section_199 section_200 section_201}
{rank=same; header_196 prose_197 codeblock_198 section_199 section_200 section_201}

header_196 [label="2 : Historian:prev()"]

prose_197 [label="prose"]

codeblock_198 [label="code block 486-500"]

section_199 [label="section: 503-535"]

section_200 [label="section: 536-554"]

section_201 [label="section: 555-589"]


// END RANK section_12

header_196 -> leaf_202
leaf_202  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Historian:prev()"]
// END RANK header_196

prose_197 -> { raw_203}
{rank=same; raw_203}

raw_203 [label="raw"]


// END RANK prose_197

raw_203 -> leaf_204
leaf_204  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_203

codeblock_198 -> leaf_205
leaf_205  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Historian.prev(historian)
   if historian.cursor == 0 or #historian == 0 then
      return Txtbuf()
   end
   local Δ = historian.cursor > 1 and historian.cursor - 1 or historian.cursor
   local txtbuf = historian[Δ]
   txtbuf.cur_row = 1
   local result = _resultsFrom(historian, historian.line_ids[Δ])
   --local result = historian.results[txtbuf]
   historian.cursor = Δ
   txtbuf.cursor = #txtbuf.lines[txtbuf.cur_row] + 1
   return txtbuf:clone(), result
end"]
// END RANK codeblock_198

section_199 -> { header_206 prose_207 codeblock_208}
{rank=same; header_206 prose_207 codeblock_208}

header_206 [label="3 : Historian:next()"]

prose_207 [label="prose"]

codeblock_208 [label="code block 509-533"]


// END RANK section_199

header_206 -> leaf_209
leaf_209  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Historian:next()"]
// END RANK header_206

prose_207 -> { raw_210 prespace_211 literal_212 raw_213}
{rank=same; raw_210 prespace_211 literal_212 raw_213}

raw_210 [label="raw"]

prespace_211 [label="prespace"]

literal_212 [label="literal"]

raw_213 [label="raw"]


// END RANK prose_207

raw_210 -> leaf_214
leaf_214  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Returns the next txtbuf in history, and a second flag to tell the"]
// END RANK raw_210

prespace_211 -> leaf_215
leaf_215  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_211

literal_212 -> leaf_216
leaf_216  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_212

raw_213 -> leaf_217
leaf_217  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" it might be time for a new one.

"]
// END RANK raw_213

codeblock_208 -> leaf_218
leaf_218  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Historian.next(historian)
   local Δ = historian.cursor < #historian
             and historian.cursor + 1
             or  historian.cursor
   local fwd = historian.cursor >= #historian
   if historian.cursor == 0 or #historian == 0 then
      return Txtbuf()
   end
   local txtbuf = historian[Δ]
   if not txtbuf then
      return Txtbuf(), nil, true
   end
   txtbuf.cur_row = #txtbuf.lines
   local result = _resultsFrom(historian, historian.line_ids[Δ])
   historian.cursor = Δ
   txtbuf.cursor = #txtbuf.lines[txtbuf.cur_row] + 1
   if fwd and #txtbuf.lines > 0 then
      historian.cursor = #historian + 1
      return txtbuf:clone(), nil, true
   else
      return txtbuf:clone(), result, false
   end
end"]
// END RANK codeblock_208

section_200 -> { header_219 prose_220 codeblock_221}
{rank=same; header_219 prose_220 codeblock_221}

header_219 [label="3 : Historian:index(cursor)"]

prose_220 [label="prose"]

codeblock_221 [label="code block 540-553"]


// END RANK section_200

header_219 -> leaf_222
leaf_222  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Historian:index(cursor)"]
// END RANK header_219

prose_220 -> { raw_223}
{rank=same; raw_223}

raw_223 [label="raw"]


// END RANK prose_220

raw_223 -> leaf_224
leaf_224  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Loads the history to an exact index.
"]
// END RANK raw_223

codeblock_221 -> leaf_225
leaf_225  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Historian.index(historian, cursor)
   if (not cursor) or cursor < 0 or cursor > #historian + 1 then
      return Txtbuf()
   end
   local txtbuf = historian[cursor]
   local result = _resultsFrom(historian, historian.line_ids[cursor])
   txtbuf = txtbuf:clone()
   historian.cursor = cursor
   txtbuf.cur_row = #txtbuf.lines
   txtbuf.cursor = #txtbuf.lines[txtbuf.cur_row] + 1
   return txtbuf, result
end"]
// END RANK codeblock_221

section_201 -> { header_226 prose_227 prose_228 codeblock_229 codeblock_230 codeblock_231}
{rank=same; header_226 prose_227 prose_228 codeblock_229 codeblock_230 codeblock_231}

header_226 [label="3 : Historian:append(txtbuf, results, success)"]

prose_227 [label="prose"]

prose_228 [label="prose"]

codeblock_229 [label="code block 561-576"]

codeblock_230 [label="code block 578-585"]

codeblock_231 [label="code block 587-589"]


// END RANK section_201

header_226 -> leaf_232
leaf_232  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Historian:append(txtbuf, results, success)"]
// END RANK header_226

prose_227 -> { raw_233}
{rank=same; raw_233}

raw_233 [label="raw"]


// END RANK prose_227

raw_233 -> leaf_234
leaf_234  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Appends a txtbuf to history and persists it.
"]
// END RANK raw_233

prose_228 -> { raw_235}
{rank=same; raw_235}

raw_235 [label="raw"]


// END RANK prose_228

raw_235 -> leaf_236
leaf_236  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Doesn't adjust the cursor.
"]
// END RANK raw_235

codeblock_229 -> leaf_237
leaf_237  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Historian.append(historian, txtbuf, results, success)
   if tostring(historian[#historian]) == tostring(txtbuf)
      or tostring(txtbuf) == \"\" then
      -- don't bother
      return false
   end
   historian[#historian + 1] = txtbuf
   if success then
      historian:persist(txtbuf, results)
   else
      historian:persist(txtbuf)
   end
   return true
end"]
// END RANK codeblock_229

codeblock_230 -> leaf_238
leaf_238  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function new()
   local historian = meta(Historian)
   historian:load()
   return historian
end
Historian.idEst = new"]
// END RANK codeblock_230

codeblock_231 -> leaf_239
leaf_239  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return new"]
// END RANK codeblock_231


}
