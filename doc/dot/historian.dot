digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 208"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-146"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 prose_5 prose_6 codeblock_7 codeblock_8 section_9 section_10 section_11}
{rank=same; header_2 prose_3 prose_4 prose_5 prose_6 codeblock_7 codeblock_8 section_9 section_10 section_11}

header_2 [label="1 : Historian"]

prose_3 [label="prose"]

prose_4 [label="prose"]

prose_5 [label="prose"]

prose_6 [label="prose"]

codeblock_7 [label="code block 16-21"]

codeblock_8 [label="code block 23-25"]

section_9 [label="section: 28-71"]

section_10 [label="section: 72-146"]

section_11 [label="section: 147-185"]


// END RANK section_1

header_2 -> leaf_12
leaf_12  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Historian"]
// END RANK header_2

prose_3 -> { raw_13}
{rank=same; raw_13}

raw_13 [label="raw"]


// END RANK prose_3

raw_13 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


This module is responsible for REPL history.
"]
// END RANK raw_13

prose_4 -> { raw_15}
{rank=same; raw_15}

raw_15 [label="raw"]


// END RANK prose_4

raw_15 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Eventually this will include persisting and restoring from a SQLite database,
fuzzy searching, and variable cacheing.
"]
// END RANK raw_15

prose_5 -> { raw_17}
{rank=same; raw_17}

raw_17 [label="raw"]


// END RANK prose_5

raw_17 -> leaf_18
leaf_18  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Currently does the basic job of retaining history and not letting subsequent
edits munge it.
"]
// END RANK raw_17

prose_6 -> { raw_19}
{rank=same; raw_19}

raw_19 [label="raw"]


// END RANK prose_6

raw_19 -> leaf_20
leaf_20  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Next step: now that we clone a new linebuf each time, we have an immutable
record.  We should store the line as a string, to facilitate fuzzy matching.

"]
// END RANK raw_19

codeblock_7 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Linebuf = require \"linebuf\"
local sql     = require \"sqlayer\"
local L       = require \"lpeg\"
local format  = assert (string.format)"]
// END RANK codeblock_7

codeblock_8 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Historian = meta {}"]
// END RANK codeblock_8

section_9 -> { header_23 prose_24 codeblock_25}
{rank=same; header_23 prose_24 codeblock_25}

header_23 [label="2 : Historian:load()"]

prose_24 [label="prose"]

codeblock_25 [label="code block 32-69"]


// END RANK section_9

header_23 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Historian:load()"]
// END RANK header_23

prose_24 -> { raw_27 prespace_28 literal_29 raw_30}
{rank=same; raw_27 prespace_28 literal_29 raw_30}

raw_27 [label="raw"]

prespace_28 [label="prespace"]

literal_29 [label="literal"]

raw_30 [label="raw"]


// END RANK prose_24

raw_27 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This is where we either create query or create our"]
// END RANK raw_27

prespace_28 -> leaf_32
leaf_32  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_28

literal_29 -> leaf_33
leaf_33  [color=Gray,shape=rectangle,fontname=Inconsolata,label="~/.bridge"]
// END RANK literal_29

raw_30 -> leaf_34
leaf_34  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" database.
"]
// END RANK raw_30

codeblock_25 -> leaf_35
leaf_35  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Historian.HISTORY_LIMIT = 1000

local create_repl_table = [[
CREATE TABLE IF NOT EXISTS repl (
line_id INTEGER PRIMARY KEY AUTOINCREMENT,
project TEXT,
line TEXT,
time DATETIME DEFAULT CURRENT_TIMESTAMP);
]]

local insert_line_stmt = [[
INSERT INTO repl (project, line) VALUES(:project, :line);
]]

local get_tables = [[
SELECT name FROM sqlite_master WHERE type='table';
]]

local get_recent = [[
SELECT line FROM repl
   WHERE project = %s
   ORDER BY time
   DESC LIMIT %d;
]]

Historian.home_dir = io.popen(\"echo $HOME\", \"r\"):read(\"*a\"):sub(1, -2)
Historian.project = io.popen(\"pwd\", \"r\"):read(\"*a\"):sub(1, -2)

local function has(table, name)
   for _,v in ipairs(table) do
      if name == v then
         return true
      end
   end
   return false
end"]
// END RANK codeblock_25

section_10 -> { header_36 prose_37 codeblock_38 codeblock_39 codeblock_40}
{rank=same; header_36 prose_37 codeblock_38 codeblock_39 codeblock_40}

header_36 [label="2 : Historian:search(frag)"]

prose_37 [label="prose"]

codeblock_38 [label="code block 74-88"]

codeblock_39 [label="code block 90-102"]

codeblock_40 [label="code block 105-144"]


// END RANK section_10

header_36 -> leaf_41
leaf_41  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Historian:search(frag)"]
// END RANK header_36

prose_37 -> { raw_42}
{rank=same; raw_42}

raw_42 [label="raw"]


// END RANK prose_37

raw_42 -> leaf_43
leaf_43  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_42

codeblock_38 -> leaf_44
leaf_44  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local P, match = L.P, L.match
local function fuzz_patt(frag)
   frag = type(frag) == \"string\" and codepoints(frag) or frag
   local patt = (P(1) - P(frag[1]))^0
   for i,v in ipairs(frag) do
      if i < #frag then
         patt = patt * (P(v) * (P(1) - P(frag[i + 1]))^0)
      else
         patt = patt * (P(v))
      end
   end
   return patt
end"]
// END RANK codeblock_38

codeblock_39 -> leaf_45
leaf_45  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Historian.search(historian, frag)
   local collection = {}
   local patt = fuzz_patt(frag)
   for i = #historian, 1, -1 do
      local score = match(patt, tostring(historian[i]))
      if score then
         collection[#collection + 1] = tostring(historian[i])
      end
   end
   return collection
end"]
// END RANK codeblock_39

codeblock_40 -> leaf_46
leaf_46  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local reverse = assert(table.reverse)

function Historian.load(historian)
   local conn = sql.open(historian.home_dir .. \"/.bridge\")
   historian.conn = conn
   local table_names = conn:exec(get_tables)
   if not table_names or not has(table_names.name, \"repl\") then
      local success, err = sql.pexec(conn, create_repl_table)
      -- success is nil for creation, false for error
      if success == false then
         error(err)
      end
   end
   historian.insert_stmt = conn:prepare(insert_line_stmt)
   local pop_stmt = sql.format(get_recent, historian.project,
                        historian.HISTORY_LIMIT)
   local values, err = sql.pexec(conn, pop_stmt)
   if values then
      for i,v in ipairs(reverse(values[1])) do
         historian[i] = Linebuf(v)
      end
      historian.cursor = #historian
      historian.up = false
   end
end

function Historian.persist(historian, linebuf)
   local lb = tostring(linebuf)
   historian.insert_stmt:bindkv { project = historian.project,
                                  line    = lb }
   local err = historian.insert_stmt:step()
   if not err then
      historian.insert_stmt:clearbind():reset()
   else
      error(error)
   end
   return true
end"]
// END RANK codeblock_40

section_11 -> { header_47 prose_48 codeblock_49 section_50 section_51}
{rank=same; header_47 prose_48 codeblock_49 section_50 section_51}

header_47 [label="2 : Historian:prev()"]

prose_48 [label="prose"]

codeblock_49 [label="code block 149-160"]

section_50 [label="section: 163-185"]

section_51 [label="section: 186-208"]


// END RANK section_11

header_47 -> leaf_52
leaf_52  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Historian:prev()"]
// END RANK header_47

prose_48 -> { raw_53}
{rank=same; raw_53}

raw_53 [label="raw"]


// END RANK prose_48

raw_53 -> leaf_54
leaf_54  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_53

codeblock_49 -> leaf_55
leaf_55  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Historian.prev(historian)
   if historian.cursor == 0 then
      return Linebuf()
   end
   local Δ = historian.cursor > 1 and 1 or 0
   local linebuf = historian[historian.cursor - Δ]:clone()
   historian.cursor = historian.cursor - Δ
   linebuf.cursor = #linebuf.line + 1
   return linebuf
end"]
// END RANK codeblock_49

section_50 -> { header_56 prose_57 codeblock_58}
{rank=same; header_56 prose_57 codeblock_58}

header_56 [label="3 : Historian:next()"]

prose_57 [label="prose"]

codeblock_58 [label="code block 168-183"]


// END RANK section_50

header_56 -> leaf_59
leaf_59  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Historian:next()"]
// END RANK header_56

prose_57 -> { raw_60 prespace_61 literal_62 raw_63}
{rank=same; raw_60 prespace_61 literal_62 raw_63}

raw_60 [label="raw"]

prespace_61 [label="prespace"]

literal_62 [label="literal"]

raw_63 [label="raw"]


// END RANK prose_57

raw_60 -> leaf_64
leaf_64  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Returns the next linebuf in history, and a second flag to tell the"]
// END RANK raw_60

prespace_61 -> leaf_65
leaf_65  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_61

literal_62 -> leaf_66
leaf_66  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_62

raw_63 -> leaf_67
leaf_67  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" it might be time for a new one.
"]
// END RANK raw_63

codeblock_58 -> leaf_68
leaf_68  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Historian.next(historian)
   local Δ = historian.cursor < #historian and 1 or 0
   if historian.cursor == 0 then
      return Linebuf()
   end
   local linebuf= historian[historian.cursor + Δ]:clone()
   historian.cursor = historian.cursor + Δ
   linebuf.cursor = #linebuf.line + 1
   if not (Δ > 0) and #linebuf.line > 0 then
      return linebuf, true
   else
      return linebuf, false
   end
end"]
// END RANK codeblock_58

section_51 -> { header_69 prose_70 codeblock_71 codeblock_72 codeblock_73}
{rank=same; header_69 prose_70 codeblock_71 codeblock_72 codeblock_73}

header_69 [label="3 : Historian:append()"]

prose_70 [label="prose"]

codeblock_71 [label="code block 188-195"]

codeblock_72 [label="code block 197-204"]

codeblock_73 [label="code block 206-208"]


// END RANK section_51

header_69 -> leaf_74
leaf_74  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Historian:append()"]
// END RANK header_69

prose_70 -> { raw_75}
{rank=same; raw_75}

raw_75 [label="raw"]


// END RANK prose_70

raw_75 -> leaf_76
leaf_76  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_75

codeblock_71 -> leaf_77
leaf_77  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Historian.append(historian, linebuf)
   historian[#historian + 1] = linebuf
   historian.cursor = #historian
   historian:persist(linebuf)
   return true
end"]
// END RANK codeblock_71

codeblock_72 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function new()
   local historian = meta(Historian)
   historian:load()
   return historian
end
Historian.idEst = new"]
// END RANK codeblock_72

codeblock_73 -> leaf_79
leaf_79  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return new"]
// END RANK codeblock_73


}
