digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 226"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-162"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 prose_5 prose_6 codeblock_7 codeblock_8 section_9 section_10 section_11}
{rank=same; header_2 prose_3 prose_4 prose_5 prose_6 codeblock_7 codeblock_8 section_9 section_10 section_11}

header_2 [label="1 : Historian"]

prose_3 [label="prose"]

prose_4 [label="prose"]

prose_5 [label="prose"]

prose_6 [label="prose"]

codeblock_7 [label="code block 16-23"]

codeblock_8 [label="code block 25-27"]

section_9 [label="section: 30-73"]

section_10 [label="section: 74-162"]

section_11 [label="section: 163-201"]


// END RANK section_1

header_2 -> leaf_12
leaf_12  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Historian"]
// END RANK header_2

prose_3 -> { raw_13}
{rank=same; raw_13}

raw_13 [label="raw"]


// END RANK prose_3

raw_13 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


This module is responsible for REPL history.
"]
// END RANK raw_13

prose_4 -> { raw_15}
{rank=same; raw_15}

raw_15 [label="raw"]


// END RANK prose_4

raw_15 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Eventually this will include persisting and restoring from a SQLite database,
fuzzy searching, and variable cacheing.
"]
// END RANK raw_15

prose_5 -> { raw_17}
{rank=same; raw_17}

raw_17 [label="raw"]


// END RANK prose_5

raw_17 -> leaf_18
leaf_18  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Currently does the basic job of retaining history and not letting subsequent
edits munge it.
"]
// END RANK raw_17

prose_6 -> { raw_19}
{rank=same; raw_19}

raw_19 [label="raw"]


// END RANK prose_6

raw_19 -> leaf_20
leaf_20  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Next step: now that we clone a new linebuf each time, we have an immutable
record.  We should store the line as a string, to facilitate fuzzy matching.

"]
// END RANK raw_19

codeblock_7 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Linebuf = require \"linebuf\"
local sql     = require \"sqlayer\"
local L       = require \"lpeg\"
local format  = assert (string.format)
local sub     = assert (string.sub)
assert(meta)"]
// END RANK codeblock_7

codeblock_8 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Historian = meta {}"]
// END RANK codeblock_8

section_9 -> { header_23 prose_24 codeblock_25}
{rank=same; header_23 prose_24 codeblock_25}

header_23 [label="2 : Historian:load()"]

prose_24 [label="prose"]

codeblock_25 [label="code block 34-71"]


// END RANK section_9

header_23 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Historian:load()"]
// END RANK header_23

prose_24 -> { raw_27 prespace_28 literal_29 raw_30}
{rank=same; raw_27 prespace_28 literal_29 raw_30}

raw_27 [label="raw"]

prespace_28 [label="prespace"]

literal_29 [label="literal"]

raw_30 [label="raw"]


// END RANK prose_24

raw_27 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This is where we either create query or create our"]
// END RANK raw_27

prespace_28 -> leaf_32
leaf_32  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_28

literal_29 -> leaf_33
leaf_33  [color=Gray,shape=rectangle,fontname=Inconsolata,label="~/.bridge"]
// END RANK literal_29

raw_30 -> leaf_34
leaf_34  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" database.
"]
// END RANK raw_30

codeblock_25 -> leaf_35
leaf_35  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Historian.HISTORY_LIMIT = 1000

local create_repl_table = [[
CREATE TABLE IF NOT EXISTS repl (
line_id INTEGER PRIMARY KEY AUTOINCREMENT,
project TEXT,
line TEXT,
time DATETIME DEFAULT CURRENT_TIMESTAMP);
]]

local insert_line_stmt = [[
INSERT INTO repl (project, line) VALUES(:project, :line);
]]

local get_tables = [[
SELECT name FROM sqlite_master WHERE type='table';
]]

local get_recent = [[
SELECT line FROM repl
   WHERE project = %s
   ORDER BY time
   DESC LIMIT %d;
]]

Historian.home_dir = io.popen(\"echo $HOME\", \"r\"):read(\"*a\"):sub(1, -2)
Historian.project = io.popen(\"pwd\", \"r\"):read(\"*a\"):sub(1, -2)

local function has(table, name)
   for _,v in ipairs(table) do
      if name == v then
         return true
      end
   end
   return false
end"]
// END RANK codeblock_25

section_10 -> { header_36 prose_37 codeblock_38 codeblock_39}
{rank=same; header_36 prose_37 codeblock_38 codeblock_39}

header_36 [label="2 : Historian:search(frag)"]

prose_37 [label="prose"]

codeblock_38 [label="code block 76-118"]

codeblock_39 [label="code block 121-160"]


// END RANK section_10

header_36 -> leaf_40
leaf_40  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Historian:search(frag)"]
// END RANK header_36

prose_37 -> { raw_41}
{rank=same; raw_41}

raw_41 [label="raw"]


// END RANK prose_37

raw_41 -> leaf_42
leaf_42  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_41

codeblock_38 -> leaf_43
leaf_43  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local P, match = L.P, L.match

-- second_best is broke and I don't know why
-- also this fails on a single key search >.<
local function fuzz_patt(frag)
   frag = type(frag) == \"string\" and codepoints(frag) or frag
   local patt =        (P(1) - P(frag[1]))^0
   for i = 1 , #frag - 1 do
      local v = frag[i]
      patt = patt * (P(v) * (P(1) - P(frag[i + 1]))^0)
   end
   patt = patt * P(frag[#frag])
   return patt
end

function Historian.search(historian, frag)
   local collection = {}
   local best = true
   local patt = fuzz_patt(frag)
   for i = #historian, 1, -1 do
      local score = match(patt, tostring(historian[i]))
      if score then
         collection[#collection + 1] = tostring(historian[i])
      end
   end
   local slip = \"\"
   if #collection == 0 then
      -- try the transpose
      best = false
      slip = sub(frag, 1, -3) .. sub(frag, -1, -1) .. sub(frag, -2, -2)
      local second = fuzz_patt(slip)
      for i = #historian, 1, -1 do
         local score = match(second, tostring(historian[i]))
         if score then
            collection[#collection + 1] = tostring(historian[i])
         end
      end
   end

   return collection, best, slip
end"]
// END RANK codeblock_38

codeblock_39 -> leaf_44
leaf_44  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local reverse = assert(table.reverse)

function Historian.load(historian)
   local conn = sql.open(historian.home_dir .. \"/.bridge\")
   historian.conn = conn
   local table_names = conn:exec(get_tables)
   if not table_names or not has(table_names.name, \"repl\") then
      local success, err = sql.pexec(conn, create_repl_table)
      -- success is nil for creation, false for error
      if success == false then
         error(err)
      end
   end
   historian.insert_stmt = conn:prepare(insert_line_stmt)
   local pop_stmt = sql.format(get_recent, historian.project,
                        historian.HISTORY_LIMIT)
   local values, err = sql.pexec(conn, pop_stmt)
   if values then
      for i,v in ipairs(reverse(values[1])) do
         historian[i] = Linebuf(v)
      end
      historian.cursor = #historian
      historian.up = false
   end
end

function Historian.persist(historian, linebuf)
   local lb = tostring(linebuf)
   historian.insert_stmt:bindkv { project = historian.project,
                                  line    = lb }
   local err = historian.insert_stmt:step()
   if not err then
      historian.insert_stmt:clearbind():reset()
   else
      error(error)
   end
   return true
end"]
// END RANK codeblock_39

section_11 -> { header_45 prose_46 codeblock_47 section_48 section_49}
{rank=same; header_45 prose_46 codeblock_47 section_48 section_49}

header_45 [label="2 : Historian:prev()"]

prose_46 [label="prose"]

codeblock_47 [label="code block 165-176"]

section_48 [label="section: 179-201"]

section_49 [label="section: 202-226"]


// END RANK section_11

header_45 -> leaf_50
leaf_50  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Historian:prev()"]
// END RANK header_45

prose_46 -> { raw_51}
{rank=same; raw_51}

raw_51 [label="raw"]


// END RANK prose_46

raw_51 -> leaf_52
leaf_52  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_51

codeblock_47 -> leaf_53
leaf_53  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Historian.prev(historian)
   if historian.cursor == 0 then
      return Linebuf()
   end
   local Δ = historian.cursor > 1 and 1 or 0
   local linebuf = historian[historian.cursor - Δ]:clone()
   historian.cursor = historian.cursor - Δ
   linebuf.cursor = #linebuf.line + 1
   return linebuf
end"]
// END RANK codeblock_47

section_48 -> { header_54 prose_55 codeblock_56}
{rank=same; header_54 prose_55 codeblock_56}

header_54 [label="3 : Historian:next()"]

prose_55 [label="prose"]

codeblock_56 [label="code block 184-199"]


// END RANK section_48

header_54 -> leaf_57
leaf_57  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Historian:next()"]
// END RANK header_54

prose_55 -> { raw_58 prespace_59 literal_60 raw_61}
{rank=same; raw_58 prespace_59 literal_60 raw_61}

raw_58 [label="raw"]

prespace_59 [label="prespace"]

literal_60 [label="literal"]

raw_61 [label="raw"]


// END RANK prose_55

raw_58 -> leaf_62
leaf_62  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Returns the next linebuf in history, and a second flag to tell the"]
// END RANK raw_58

prespace_59 -> leaf_63
leaf_63  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_59

literal_60 -> leaf_64
leaf_64  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_60

raw_61 -> leaf_65
leaf_65  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" it might be time for a new one.
"]
// END RANK raw_61

codeblock_56 -> leaf_66
leaf_66  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Historian.next(historian)
   local Δ = historian.cursor < #historian and 1 or 0
   if historian.cursor == 0 then
      return Linebuf()
   end
   local linebuf= historian[historian.cursor + Δ]:clone()
   historian.cursor = historian.cursor + Δ
   linebuf.cursor = #linebuf.line + 1
   if not (Δ > 0) and #linebuf.line > 0 then
      return linebuf, true
   else
      return linebuf, false
   end
end"]
// END RANK codeblock_56

section_49 -> { header_67 prose_68 codeblock_69 codeblock_70 codeblock_71}
{rank=same; header_67 prose_68 codeblock_69 codeblock_70 codeblock_71}

header_67 [label="3 : Historian:append()"]

prose_68 [label="prose"]

codeblock_69 [label="code block 204-211"]

codeblock_70 [label="code block 213-222"]

codeblock_71 [label="code block 224-226"]


// END RANK section_49

header_67 -> leaf_72
leaf_72  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Historian:append()"]
// END RANK header_67

prose_68 -> { raw_73}
{rank=same; raw_73}

raw_73 [label="raw"]


// END RANK prose_68

raw_73 -> leaf_74
leaf_74  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_73

codeblock_69 -> leaf_75
leaf_75  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Historian.append(historian, linebuf)
   historian[#historian + 1] = linebuf
   historian.cursor = #historian
   historian:persist(linebuf)
   return true
end"]
// END RANK codeblock_69

codeblock_70 -> leaf_76
leaf_76  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function new()
   local historian = meta(Historian)
   historian:load()
   -- This will also be load()ed once we have the tables for it
   historian.results = {} -- keyed by linebuf
   return historian
end
Historian.idEst = new"]
// END RANK codeblock_70

codeblock_71 -> leaf_77
leaf_77  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return new"]
// END RANK codeblock_71


}
