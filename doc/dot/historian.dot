digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 193"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-131"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 prose_5 prose_6 codeblock_7 codeblock_8 section_9 section_10}
{rank=same; header_2 prose_3 prose_4 prose_5 prose_6 codeblock_7 codeblock_8 section_9 section_10}

header_2 [label="1 : Historian"]

prose_3 [label="prose"]

prose_4 [label="prose"]

prose_5 [label="prose"]

prose_6 [label="prose"]

codeblock_7 [label="code block 16-20"]

codeblock_8 [label="code block 22-24"]

section_9 [label="section: 27-131"]

section_10 [label="section: 132-170"]


// END RANK section_1

header_2 -> leaf_11
leaf_11  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Historian"]
// END RANK header_2

prose_3 -> { raw_12}
{rank=same; raw_12}

raw_12 [label="raw"]


// END RANK prose_3

raw_12 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


This module is responsible for REPL history.
"]
// END RANK raw_12

prose_4 -> { raw_14}
{rank=same; raw_14}

raw_14 [label="raw"]


// END RANK prose_4

raw_14 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Eventually this will include persisting and restoring from a SQLite database,
fuzzy searching, and variable cacheing.
"]
// END RANK raw_14

prose_5 -> { raw_16}
{rank=same; raw_16}

raw_16 [label="raw"]


// END RANK prose_5

raw_16 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Currently does the basic job of retaining history and not letting subsequent
edits munge it.
"]
// END RANK raw_16

prose_6 -> { raw_18}
{rank=same; raw_18}

raw_18 [label="raw"]


// END RANK prose_6

raw_18 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Next step: now that we clone a new linebuf each time, we have an immutable
record.  We should store the line as a string, to facilitate fuzzy matching.

"]
// END RANK raw_18

codeblock_7 -> leaf_20
leaf_20  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Linebuf = require \"linebuf\"
local sql     = require \"sqlayer\"
local format  = assert (string.format)"]
// END RANK codeblock_7

codeblock_8 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Historian = meta {}"]
// END RANK codeblock_8

section_9 -> { header_22 prose_23 codeblock_24 prose_25 codeblock_26 codeblock_27}
{rank=same; header_22 prose_23 codeblock_24 prose_25 codeblock_26 codeblock_27}

header_22 [label="2 : Historian:load()"]

prose_23 [label="prose"]

codeblock_24 [label="code block 32-70"]

prose_25 [label="prose"]

codeblock_26 [label="code block 72-89"]

codeblock_27 [label="code block 91-129"]


// END RANK section_9

header_22 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Historian:load()"]
// END RANK header_22

prose_23 -> { raw_29 prespace_30 literal_31 raw_32}
{rank=same; raw_29 prespace_30 literal_31 raw_32}

raw_29 [label="raw"]

prespace_30 [label="prespace"]

literal_31 [label="literal"]

raw_32 [label="raw"]


// END RANK prose_23

raw_29 -> leaf_33
leaf_33  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This is where we either create query or create our"]
// END RANK raw_29

prespace_30 -> leaf_34
leaf_34  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_30

literal_31 -> leaf_35
leaf_35  [color=Gray,shape=rectangle,fontname=Inconsolata,label="~/.bridge"]
// END RANK literal_31

raw_32 -> leaf_36
leaf_36  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" database.

"]
// END RANK raw_32

codeblock_24 -> leaf_37
leaf_37  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Historian.HISTORY_LIMIT = 50

local create_repl_table = [[
CREATE TABLE repl (
line_id INTEGER PRIMARY KEY AUTOINCREMENT,
project TEXT,
line TEXT,
time DATETIME DEFAULT CURRENT_TIMESTAMP);
]]

local insert_line_stmt = [[
INSERT INTO repl (project, line) VALUES(?, ?);
]]

local get_tables = [[
SELECT name FROM sqlite_master WHERE type='table';
]]

local get_recent = [[
SELECT line FROM repl
   WHERE project = %s
   ORDER BY time
   DESC LIMIT %d;
]]

Historian.home_dir = io.popen(\"echo $HOME\", \"r\"):read(\"*a\"):sub(1, -2)
Historian.project = io.popen(\"pwd\", \"r\"):read(\"*a\"):sub(1, -2)

local function has(table, name)
   for _,v in ipairs(table) do
      if name == v then
         return true
      end
   end
   return false
end
"]
// END RANK codeblock_24

prose_25 -> { raw_38}
{rank=same; raw_38}

raw_38 [label="raw"]


// END RANK prose_25

raw_38 -> leaf_39
leaf_39  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
bring in colwrite for diagnosis"]
// END RANK raw_38

codeblock_26 -> leaf_40
leaf_40  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local STATCOL = 81
local STAT_TOP = 1
local STAT_RUN = 2

local function colwrite(str, col, row)
   col = col or STATCOL
   row = row or STAT_TOP
   local dash = a.stash()
             .. a.cursor.hide()
             .. a.jump(row, col)
             .. a.erase.right()
             .. str
             .. a.pop()
             .. a.cursor.show()
   write(dash)
end"]
// END RANK codeblock_26

codeblock_27 -> leaf_41
leaf_41  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local reverse = assert(table.reverse)

function Historian.load(historian)
   local conn = sql.open(historian.home_dir .. \"/.bridge\")
   historian.conn = conn
   local table_names = conn:exec(get_tables)
   if not table_names or not has(table_names.name, \"repl\") then
      local success, err = sql.pexec(conn, create_repl_table)
      -- success is nil for creation, false for error
      if success == false then
         error(err)
      end
   end
   historian.insert_stmt = conn:prepare(insert_line_stmt)
   local pop_stmt = sql.format(get_recent, historian.project,
                        historian.HISTORY_LIMIT)
   local values, err = sql.pexec(conn, pop_stmt)
   if values then
      for i,v in ipairs(reverse(values[1])) do
         historian[i] = Linebuf(v)
      end
      historian.cursor = #historian
      historian.up = false
   end
end

function Historian.persist(historian, linebuf)
   local lb = tostring(linebuf)
   historian.insert_stmt:bind(historian.project, lb)
   local err = historian.insert_stmt:step()
   if not err then
      historian.insert_stmt:clearbind():reset()
   else
      error(error)
   end
   return true
end"]
// END RANK codeblock_27

section_10 -> { header_42 prose_43 codeblock_44 section_45 section_46}
{rank=same; header_42 prose_43 codeblock_44 section_45 section_46}

header_42 [label="2 : Historian:prev()"]

prose_43 [label="prose"]

codeblock_44 [label="code block 134-145"]

section_45 [label="section: 148-170"]

section_46 [label="section: 171-193"]


// END RANK section_10

header_42 -> leaf_47
leaf_47  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Historian:prev()"]
// END RANK header_42

prose_43 -> { raw_48}
{rank=same; raw_48}

raw_48 [label="raw"]


// END RANK prose_43

raw_48 -> leaf_49
leaf_49  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_48

codeblock_44 -> leaf_50
leaf_50  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Historian.prev(historian)
   if historian.cursor == 0 then
      return Linebuf()
   end
   local delta = historian.cursor > 1 and 1 or 0
   local linebuf = historian[historian.cursor - delta]:clone()
   historian.cursor = historian.cursor - delta
   linebuf.cursor = #linebuf.line + 1
   return linebuf
end"]
// END RANK codeblock_44

section_45 -> { header_51 prose_52 codeblock_53}
{rank=same; header_51 prose_52 codeblock_53}

header_51 [label="3 : Historian:next()"]

prose_52 [label="prose"]

codeblock_53 [label="code block 153-168"]


// END RANK section_45

header_51 -> leaf_54
leaf_54  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Historian:next()"]
// END RANK header_51

prose_52 -> { raw_55 prespace_56 literal_57 raw_58}
{rank=same; raw_55 prespace_56 literal_57 raw_58}

raw_55 [label="raw"]

prespace_56 [label="prespace"]

literal_57 [label="literal"]

raw_58 [label="raw"]


// END RANK prose_52

raw_55 -> leaf_59
leaf_59  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Returns the next linebuf in history, and a second flag to tell the"]
// END RANK raw_55

prespace_56 -> leaf_60
leaf_60  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_56

literal_57 -> leaf_61
leaf_61  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_57

raw_58 -> leaf_62
leaf_62  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" it might be time for a new one.
"]
// END RANK raw_58

codeblock_53 -> leaf_63
leaf_63  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Historian.next(historian)
   local delta = historian.cursor < #historian and 1 or 0
   if historian.cursor == 0 then
      return Linebuf()
   end
   local linebuf= historian[historian.cursor + delta]:clone()
   historian.cursor = historian.cursor + delta
   linebuf.cursor = #linebuf.line + 1
   if not (delta > 0) and #linebuf.line > 0 then
      return linebuf, true
   else
      return linebuf, false
   end
end"]
// END RANK codeblock_53

section_46 -> { header_64 prose_65 codeblock_66 codeblock_67 codeblock_68}
{rank=same; header_64 prose_65 codeblock_66 codeblock_67 codeblock_68}

header_64 [label="3 : Historian:append()"]

prose_65 [label="prose"]

codeblock_66 [label="code block 173-180"]

codeblock_67 [label="code block 182-189"]

codeblock_68 [label="code block 191-193"]


// END RANK section_46

header_64 -> leaf_69
leaf_69  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Historian:append()"]
// END RANK header_64

prose_65 -> { raw_70}
{rank=same; raw_70}

raw_70 [label="raw"]


// END RANK prose_65

raw_70 -> leaf_71
leaf_71  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_70

codeblock_66 -> leaf_72
leaf_72  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Historian.append(historian, linebuf)
   historian[#historian + 1] = linebuf
   historian.cursor = #historian
   historian:persist(linebuf)
   return true
end"]
// END RANK codeblock_66

codeblock_67 -> leaf_73
leaf_73  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function new()
   local historian = meta(Historian)
   historian:load()
   return historian
end
Historian.idEst = new"]
// END RANK codeblock_67

codeblock_68 -> leaf_74
leaf_74  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return new"]
// END RANK codeblock_68


}
