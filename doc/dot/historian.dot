digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 174"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-112"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 prose_5 prose_6 codeblock_7 codeblock_8 section_9 section_10}
{rank=same; header_2 prose_3 prose_4 prose_5 prose_6 codeblock_7 codeblock_8 section_9 section_10}

header_2 [label="1 : Historian"]

prose_3 [label="prose"]

prose_4 [label="prose"]

prose_5 [label="prose"]

prose_6 [label="prose"]

codeblock_7 [label="code block 16-20"]

codeblock_8 [label="code block 22-24"]

section_9 [label="section: 27-112"]

section_10 [label="section: 113-151"]


// END RANK section_1

header_2 -> leaf_11
leaf_11  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Historian"]
// END RANK header_2

prose_3 -> { raw_12}
{rank=same; raw_12}

raw_12 [label="raw"]


// END RANK prose_3

raw_12 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


This module is responsible for REPL history.
"]
// END RANK raw_12

prose_4 -> { raw_14}
{rank=same; raw_14}

raw_14 [label="raw"]


// END RANK prose_4

raw_14 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Eventually this will include persisting and restoring from a SQLite database,
fuzzy searching, and variable cacheing.
"]
// END RANK raw_14

prose_5 -> { raw_16}
{rank=same; raw_16}

raw_16 [label="raw"]


// END RANK prose_5

raw_16 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Currently does the basic job of retaining history and not letting subsequent
edits munge it.
"]
// END RANK raw_16

prose_6 -> { raw_18}
{rank=same; raw_18}

raw_18 [label="raw"]


// END RANK prose_6

raw_18 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Next step: now that we clone a new linebuf each time, we have an immutable
record.  We should store the line as a string, to facilitate fuzzy matching.

"]
// END RANK raw_18

codeblock_7 -> leaf_20
leaf_20  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Linebuf = require \"linebuf\"
local sql     = require \"sqlayer\"
local format  = assert (string.format)"]
// END RANK codeblock_7

codeblock_8 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Historian = meta {}"]
// END RANK codeblock_8

section_9 -> { header_22 prose_23 codeblock_24 codeblock_25}
{rank=same; header_22 prose_23 codeblock_24 codeblock_25}

header_22 [label="2 : Historian:load()"]

prose_23 [label="prose"]

codeblock_24 [label="code block 32-69"]

codeblock_25 [label="code block 72-110"]


// END RANK section_9

header_22 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Historian:load()"]
// END RANK header_22

prose_23 -> { raw_27 prespace_28 literal_29 raw_30}
{rank=same; raw_27 prespace_28 literal_29 raw_30}

raw_27 [label="raw"]

prespace_28 [label="prespace"]

literal_29 [label="literal"]

raw_30 [label="raw"]


// END RANK prose_23

raw_27 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This is where we either create query or create our"]
// END RANK raw_27

prespace_28 -> leaf_32
leaf_32  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_28

literal_29 -> leaf_33
leaf_33  [color=Gray,shape=rectangle,fontname=Inconsolata,label="~/.bridge"]
// END RANK literal_29

raw_30 -> leaf_34
leaf_34  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" database.

"]
// END RANK raw_30

codeblock_24 -> leaf_35
leaf_35  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Historian.HISTORY_LIMIT = 50

local create_repl_table = [[
CREATE TABLE repl (
line_id INTEGER PRIMARY KEY AUTOINCREMENT,
project TEXT,
line TEXT,
time DATETIME DEFAULT CURRENT_TIMESTAMP);
]]

local insert_line_stmt = [[
INSERT INTO repl (project, line) VALUES(?, ?);
]]

local get_tables = [[
SELECT name FROM sqlite_master WHERE type='table';
]]

local get_recent = [[
SELECT line FROM repl
   WHERE project = %s
   ORDER BY time
   DESC LIMIT %d;
]]

Historian.home_dir = io.popen(\"echo $HOME\", \"r\"):read(\"*a\"):sub(1, -2)
Historian.project = io.popen(\"pwd\", \"r\"):read(\"*a\"):sub(1, -2)

local function has(table, name)
   for _,v in ipairs(table) do
      if name == v then
         return true
      end
   end
   return false
end"]
// END RANK codeblock_24

codeblock_25 -> leaf_36
leaf_36  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local reverse = assert(table.reverse)

function Historian.load(historian)
   local conn = sql.open(historian.home_dir .. \"/.bridge\")
   historian.conn = conn
   local table_names = conn:exec(get_tables)
   if not table_names or not has(table_names.name, \"repl\") then
      local success, err = sql.pexec(conn, create_repl_table)
      -- success is nil for creation, false for error
      if success == false then
         error(err)
      end
   end
   historian.insert_stmt = conn:prepare(insert_line_stmt)
   local pop_stmt = sql.format(get_recent, historian.project,
                        historian.HISTORY_LIMIT)
   local values, err = sql.pexec(conn, pop_stmt)
   if values then
      for i,v in ipairs(reverse(values[1])) do
         historian[i] = Linebuf(v)
      end
      historian.cursor = #historian
      historian.up = false
   end
end

function Historian.persist(historian, linebuf)
   local lb = tostring(linebuf)
   historian.insert_stmt:bind(historian.project, lb)
   local err = historian.insert_stmt:step()
   if not err then
      historian.insert_stmt:clearbind():reset()
   else
      error(error)
   end
   return true
end"]
// END RANK codeblock_25

section_10 -> { header_37 prose_38 codeblock_39 section_40 section_41}
{rank=same; header_37 prose_38 codeblock_39 section_40 section_41}

header_37 [label="2 : Historian:prev()"]

prose_38 [label="prose"]

codeblock_39 [label="code block 115-126"]

section_40 [label="section: 129-151"]

section_41 [label="section: 152-174"]


// END RANK section_10

header_37 -> leaf_42
leaf_42  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Historian:prev()"]
// END RANK header_37

prose_38 -> { raw_43}
{rank=same; raw_43}

raw_43 [label="raw"]


// END RANK prose_38

raw_43 -> leaf_44
leaf_44  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_43

codeblock_39 -> leaf_45
leaf_45  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Historian.prev(historian)
   if historian.cursor == 0 then
      return Linebuf()
   end
   local delta = historian.cursor > 1 and 1 or 0
   local linebuf = historian[historian.cursor - delta]:clone()
   historian.cursor = historian.cursor - delta
   linebuf.cursor = #linebuf.line + 1
   return linebuf
end"]
// END RANK codeblock_39

section_40 -> { header_46 prose_47 codeblock_48}
{rank=same; header_46 prose_47 codeblock_48}

header_46 [label="3 : Historian:next()"]

prose_47 [label="prose"]

codeblock_48 [label="code block 134-149"]


// END RANK section_40

header_46 -> leaf_49
leaf_49  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Historian:next()"]
// END RANK header_46

prose_47 -> { raw_50 prespace_51 literal_52 raw_53}
{rank=same; raw_50 prespace_51 literal_52 raw_53}

raw_50 [label="raw"]

prespace_51 [label="prespace"]

literal_52 [label="literal"]

raw_53 [label="raw"]


// END RANK prose_47

raw_50 -> leaf_54
leaf_54  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Returns the next linebuf in history, and a second flag to tell the"]
// END RANK raw_50

prespace_51 -> leaf_55
leaf_55  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_51

literal_52 -> leaf_56
leaf_56  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_52

raw_53 -> leaf_57
leaf_57  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" it might be time for a new one.
"]
// END RANK raw_53

codeblock_48 -> leaf_58
leaf_58  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Historian.next(historian)
   local delta = historian.cursor < #historian and 1 or 0
   if historian.cursor == 0 then
      return Linebuf()
   end
   local linebuf= historian[historian.cursor + delta]:clone()
   historian.cursor = historian.cursor + delta
   linebuf.cursor = #linebuf.line + 1
   if not (delta > 0) and #linebuf.line > 0 then
      return linebuf, true
   else
      return linebuf, false
   end
end"]
// END RANK codeblock_48

section_41 -> { header_59 prose_60 codeblock_61 codeblock_62 codeblock_63}
{rank=same; header_59 prose_60 codeblock_61 codeblock_62 codeblock_63}

header_59 [label="3 : Historian:append()"]

prose_60 [label="prose"]

codeblock_61 [label="code block 154-161"]

codeblock_62 [label="code block 163-170"]

codeblock_63 [label="code block 172-174"]


// END RANK section_41

header_59 -> leaf_64
leaf_64  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Historian:append()"]
// END RANK header_59

prose_60 -> { raw_65}
{rank=same; raw_65}

raw_65 [label="raw"]


// END RANK prose_60

raw_65 -> leaf_66
leaf_66  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_65

codeblock_61 -> leaf_67
leaf_67  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Historian.append(historian, linebuf)
   historian[#historian + 1] = linebuf
   historian.cursor = #historian
   historian:persist(linebuf)
   return true
end"]
// END RANK codeblock_61

codeblock_62 -> leaf_68
leaf_68  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function new()
   local historian = meta(Historian)
   historian:load()
   return historian
end
Historian.idEst = new"]
// END RANK codeblock_62

codeblock_63 -> leaf_69
leaf_69  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return new"]
// END RANK codeblock_63


}
