digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 144"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-91"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 prose_5 section_6 section_7 section_8}
{rank=same; header_2 prose_3 prose_4 prose_5 section_6 section_7 section_8}

header_2 [label="1 : Femto 0.2"]

prose_3 [label="prose"]

prose_4 [label="prose"]

prose_5 [label="prose"]

section_6 [label="section: 13-23"]

section_7 [label="section: 43-69"]

section_8 [label="section: 92-130"]


// END RANK section_1

header_2 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Femto 0.2"]
// END RANK header_2

prose_3 -> { raw_10 prespace_11 literal_12 raw_13}
{rank=same; raw_10 prespace_11 literal_12 raw_13}

raw_10 [label="raw"]

prespace_11 [label="prespace"]

literal_12 [label="literal"]

raw_13 [label="raw"]


// END RANK prose_3

raw_10 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


This is exciting!"]
// END RANK raw_10

prespace_11 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_11

literal_12 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label="femto"]
// END RANK literal_12

raw_13 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is now a capable-enough top-line repl. Capable
enough that I'm no longer using the cooked-mode REPL which I started with,
and certainly not lua(jit) -i.
"]
// END RANK raw_13

prose_4 -> { raw_18}
{rank=same; raw_18}

raw_18 [label="raw"]


// END RANK prose_4

raw_18 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The 0.1 release needs some polishing, most of the notes for that are in-line.
"]
// END RANK raw_18

prose_5 -> { raw_20}
{rank=same; raw_20}

raw_20 [label="raw"]


// END RANK prose_5

raw_20 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It's time to start planning out 0.2.

"]
// END RANK raw_20

section_6 -> { header_22 prose_23 prose_24 section_25}
{rank=same; header_22 prose_23 prose_24 section_25}

header_22 [label="2 : Big-picture design"]

prose_23 [label="prose"]

prose_24 [label="prose"]

section_25 [label="section: 24-42"]


// END RANK section_6

header_22 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Big-picture design"]
// END RANK header_22

prose_23 -> { raw_27 prespace_28 literal_29 raw_30 prespace_31 literal_32 raw_33}
{rank=same; raw_27 prespace_28 literal_29 raw_30 prespace_31 literal_32 raw_33}

raw_27 [label="raw"]

prespace_28 [label="prespace"]

literal_29 [label="literal"]

raw_30 [label="raw"]

prespace_31 [label="prespace"]

literal_32 [label="literal"]

raw_33 [label="raw"]


// END RANK prose_23

raw_27 -> leaf_34
leaf_34  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Right now,"]
// END RANK raw_27

prespace_28 -> leaf_35
leaf_35  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_28

literal_29 -> leaf_36
leaf_36  [color=Gray,shape=rectangle,fontname=Inconsolata,label="femto"]
// END RANK literal_29

raw_30 -> leaf_37
leaf_37  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" shares a namespace with the 'program'. Actually, it is the
program.  I'm reminded of this every time I accidentally declare an"]
// END RANK raw_30

prespace_31 -> leaf_38
leaf_38  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_31

literal_32 -> leaf_39
leaf_39  [color=Gray,shape=rectangle,fontname=Inconsolata,label="a"]
// END RANK literal_32

raw_33 -> leaf_40
leaf_40  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and
blow my terminal object to pieces.
"]
// END RANK raw_33

prose_24 -> { raw_41}
{rank=same; raw_41}

raw_41 [label="raw"]


// END RANK prose_24

raw_41 -> leaf_42
leaf_42  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
There's a super-light fix, which is to just wrap _G as a metatable.  I'd need
to think about how that interacts with the colorizer; but in any case it
doesn't get us where we need to go.

"]
// END RANK raw_41

section_25 -> { header_43 prose_44 prose_45 prose_46}
{rank=same; header_43 prose_44 prose_45 prose_46}

header_43 [label="3 : Pylon 0.2"]

prose_44 [label="prose"]

prose_45 [label="prose"]

prose_46 [label="prose"]


// END RANK section_25

header_43 -> leaf_47
leaf_47  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Pylon 0.2"]
// END RANK header_43

prose_44 -> { raw_48 prespace_49 literal_50 raw_51}
{rank=same; raw_48 prespace_49 literal_50 raw_51}

raw_48 [label="raw"]

prespace_49 [label="prespace"]

literal_50 [label="literal"]

raw_51 [label="raw"]


// END RANK prose_44

raw_48 -> leaf_52
leaf_52  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK raw_48

prespace_49 -> leaf_53
leaf_53  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_49

literal_50 -> leaf_54
leaf_54  [color=Gray,shape=rectangle,fontname=Inconsolata,label="pylon"]
// END RANK literal_50

raw_51 -> leaf_55
leaf_55  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is effectively 0.1. In the process of adding semver so that this can
be made blessed and official.
"]
// END RANK raw_51

prose_45 -> { raw_56 prespace_57 literal_58 raw_59 prespace_60 literal_61 raw_62}
{rank=same; raw_56 prespace_57 literal_58 raw_59 prespace_60 literal_61 raw_62}

raw_56 [label="raw"]

prespace_57 [label="prespace"]

literal_58 [label="literal"]

raw_59 [label="raw"]

prespace_60 [label="prespace"]

literal_61 [label="literal"]

raw_62 [label="raw"]


// END RANK prose_45

raw_56 -> leaf_63
leaf_63  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
0.2 is going to enhance our runtime so that it can allocate and free a
flexible number of lua states.  It won't have any thread management or process
forking, at least not in 0.2, and we'll most likely stick with"]
// END RANK raw_56

prespace_57 -> leaf_64
leaf_64  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_57

literal_58 -> leaf_65
leaf_65  [color=Gray,shape=rectangle,fontname=Inconsolata,label="libuv"]
// END RANK literal_58

raw_59 -> leaf_66
leaf_66  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" for
threads and handle forks and processes on an even higher level. "]
// END RANK raw_59

prespace_60 -> leaf_67
leaf_67  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_60

literal_61 -> leaf_68
leaf_68  [color=Gray,shape=rectangle,fontname=Inconsolata,label="pylon"]
// END RANK literal_61

raw_62 -> leaf_69
leaf_69  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is
explicitly a process-level abstraction.
"]
// END RANK raw_62

prose_46 -> { raw_70 prespace_71 literal_72 raw_73 prespace_74 literal_75 raw_76 prespace_77 literal_78 raw_79}
{rank=same; raw_70 prespace_71 literal_72 raw_73 prespace_74 literal_75 raw_76 prespace_77 literal_78 raw_79}

raw_70 [label="raw"]

prespace_71 [label="prespace"]

literal_72 [label="literal"]

raw_73 [label="raw"]

prespace_74 [label="prespace"]

literal_75 [label="literal"]

raw_76 [label="raw"]

prespace_77 [label="prespace"]

literal_78 [label="literal"]

raw_79 [label="raw"]


// END RANK prose_46

raw_70 -> leaf_80
leaf_80  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The C to manage these states will expose through the internal FFI, giving us
the tooling to establish multiple Lua environments from within"]
// END RANK raw_70

prespace_71 -> leaf_81
leaf_81  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_71

literal_72 -> leaf_82
leaf_82  [color=Gray,shape=rectangle,fontname=Inconsolata,label="pylon"]
// END RANK literal_72

raw_73 -> leaf_83
leaf_83  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
I'm going to reach out to Tim Caswell on this, because the first-step goal is
to run"]
// END RANK raw_73

prespace_74 -> leaf_84
leaf_84  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_74

literal_75 -> leaf_85
leaf_85  [color=Gray,shape=rectangle,fontname=Inconsolata,label="femto"]
// END RANK literal_75

raw_76 -> leaf_86
leaf_86  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" against other"]
// END RANK raw_76

prespace_77 -> leaf_87
leaf_87  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_77

literal_78 -> leaf_88
leaf_88  [color=Gray,shape=rectangle,fontname=Inconsolata,label="luv"]
// END RANK literal_78

raw_79 -> leaf_89
leaf_89  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" applications in the classic runtime
attachment style, and I think they're going to like this and have some
insight into how to do it.

"]
// END RANK raw_79

section_7 -> { header_90 prose_91 prose_92 prose_93 prose_94 prose_95 prose_96 section_97}
{rank=same; header_90 prose_91 prose_92 prose_93 prose_94 prose_95 prose_96 section_97}

header_90 [label="2 : Femto 0.2: runtime architecture"]

prose_91 [label="prose"]

prose_92 [label="prose"]

prose_93 [label="prose"]

prose_94 [label="prose"]

prose_95 [label="prose"]

prose_96 [label="prose"]

section_97 [label="section: 70-91"]


// END RANK section_7

header_90 -> leaf_98
leaf_98  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Femto 0.2: runtime architecture"]
// END RANK header_90

prose_91 -> { raw_99 prespace_100 literal_101 raw_102}
{rank=same; raw_99 prespace_100 literal_101 raw_102}

raw_99 [label="raw"]

prespace_100 [label="prespace"]

literal_101 [label="literal"]

raw_102 [label="raw"]


// END RANK prose_91

raw_99 -> leaf_103
leaf_103  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

According to the roadmap,"]
// END RANK raw_99

prespace_100 -> leaf_104
leaf_104  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_100

literal_101 -> leaf_105
leaf_105  [color=Gray,shape=rectangle,fontname=Inconsolata,label="femto"]
// END RANK literal_101

raw_102 -> leaf_106
leaf_106  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" will grow for two or three point releases,
then slim down.  By 1.0, it will handle tty reads and writes; end of story.
"]
// END RANK raw_102

prose_92 -> { raw_107 prespace_108 literal_109 raw_110 prespace_111 literal_112 raw_113 prespace_114 literal_115 raw_116}
{rank=same; raw_107 prespace_108 literal_109 raw_110 prespace_111 literal_112 raw_113 prespace_114 literal_115 raw_116}

raw_107 [label="raw"]

prespace_108 [label="prespace"]

literal_109 [label="literal"]

raw_110 [label="raw"]

prespace_111 [label="prespace"]

literal_112 [label="literal"]

raw_113 [label="raw"]

prespace_114 [label="prespace"]

literal_115 [label="literal"]

raw_116 [label="raw"]


// END RANK prose_92

raw_107 -> leaf_117
leaf_117  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
In the meantime, we're going to have a \"fat femto\". It will be a nursery for
techniques and libraries which will end up in"]
// END RANK raw_107

prespace_108 -> leaf_118
leaf_118  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_108

literal_109 -> leaf_119
leaf_119  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bridge"]
// END RANK literal_109

raw_110 -> leaf_120
leaf_120  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_110

prespace_111 -> leaf_121
leaf_121  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_111

literal_112 -> leaf_122
leaf_122  [color=Gray,shape=rectangle,fontname=Inconsolata,label="codex"]
// END RANK literal_112

raw_113 -> leaf_123
leaf_123  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_113

prespace_114 -> leaf_124
leaf_124  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_114

literal_115 -> leaf_125
leaf_125  [color=Gray,shape=rectangle,fontname=Inconsolata,label="ed"]
// END RANK literal_115

raw_116 -> leaf_126
leaf_126  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
as time goes by.
"]
// END RANK raw_116

prose_93 -> { prespace_127 literal_128 raw_129 prespace_130 literal_131 raw_132}
{rank=same; prespace_127 literal_128 raw_129 prespace_130 literal_131 raw_132}

prespace_127 [label="prespace"]

literal_128 [label="literal"]

raw_129 [label="raw"]

prespace_130 [label="prespace"]

literal_131 [label="literal"]

raw_132 [label="raw"]


// END RANK prose_93

prespace_127 -> leaf_133
leaf_133  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_127

literal_128 -> leaf_134
leaf_134  [color=Gray,shape=rectangle,fontname=Inconsolata,label="femto"]
// END RANK literal_128

raw_129 -> leaf_135
leaf_135  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" 1.0 will be around 1000 lines of Lua, with a full graphical"]
// END RANK raw_129

prespace_130 -> leaf_136
leaf_136  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_130

literal_131 -> leaf_137
leaf_137  [color=Gray,shape=rectangle,fontname=Inconsolata,label="anterm"]
// END RANK literal_131

raw_132 -> leaf_138
leaf_138  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
protocol, about twice that.  I expect it will look a fair amount like it does
now, just with all the modules living elsewhere.
"]
// END RANK raw_132

prose_94 -> { raw_139}
{rank=same; raw_139}

raw_139 [label="raw"]


// END RANK prose_94

raw_139 -> leaf_140
leaf_140  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
So. 0.2. We'll steadily beef up modeselecktor into a respectable editor, not
much to say about that.
"]
// END RANK raw_139

prose_95 -> { raw_141 prespace_142 literal_143 raw_144}
{rank=same; raw_141 prespace_142 literal_143 raw_144}

raw_141 [label="raw"]

prespace_142 [label="prespace"]

literal_143 [label="literal"]

raw_144 [label="raw"]


// END RANK prose_95

raw_141 -> leaf_145
leaf_145  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I'll be working out good and better strategies for SQLite persistence of
objects, ending up with a sort of T-shaped structure:"]
// END RANK raw_141

prespace_142 -> leaf_146
leaf_146  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_142

literal_143 -> leaf_147
leaf_147  [color=Gray,shape=rectangle,fontname=Inconsolata,label="pylon"]
// END RANK literal_143

raw_144 -> leaf_148
leaf_148  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" will juggle two
or three SQLite states, one for the i/o loop, one for the attached runtime,
and possibly a third to handle disk persistence.
"]
// END RANK raw_144

prose_96 -> { raw_149}
{rank=same; raw_149}

raw_149 [label="raw"]


// END RANK prose_96

raw_149 -> leaf_150
leaf_150  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
State is shared between Luas, each of which is on its own thread, by a shared
in-memory SQLite database. Each will have its own conn, and its own trigger
collection, and between them, that database will manage flow between the
otherwise non-blocking systems.

"]
// END RANK raw_149

section_97 -> { header_151 prose_152 prose_153 prose_154 prose_155 prose_156}
{rank=same; header_151 prose_152 prose_153 prose_154 prose_155 prose_156}

header_151 [label="3 : LuaL_states: pylon or femto?"]

prose_152 [label="prose"]

prose_153 [label="prose"]

prose_154 [label="prose"]

prose_155 [label="prose"]

prose_156 [label="prose"]


// END RANK section_97

header_151 -> leaf_157
leaf_157  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** LuaL_states: pylon or femto?"]
// END RANK header_151

prose_152 -> { raw_158 prespace_159 literal_160 raw_161}
{rank=same; raw_158 prespace_159 literal_160 raw_161}

raw_158 [label="raw"]

prespace_159 [label="prespace"]

literal_160 [label="literal"]

raw_161 [label="raw"]


// END RANK prose_152

raw_158 -> leaf_162
leaf_162  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

It's possible to just generate new LuaL_states from the"]
// END RANK raw_158

prespace_159 -> leaf_163
leaf_163  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_159

literal_160 -> leaf_164
leaf_164  [color=Gray,shape=rectangle,fontname=Inconsolata,label="luv"]
// END RANK literal_160

raw_161 -> leaf_165
leaf_165  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" threadpool.
Let's go the distance and manage them from within Pylon.  Otherwise we've
preselected a privileged state and that kinda decision leads to regret.
"]
// END RANK raw_161

prose_153 -> { raw_166 prespace_167 literal_168 raw_169 prespace_170 literal_171 raw_172}
{rank=same; raw_166 prespace_167 literal_168 raw_169 prespace_170 literal_171 raw_172}

raw_166 [label="raw"]

prespace_167 [label="prespace"]

literal_168 [label="literal"]

raw_169 [label="raw"]

prespace_170 [label="prespace"]

literal_171 [label="literal"]

raw_172 [label="raw"]


// END RANK prose_153

raw_166 -> leaf_173
leaf_173  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I don't think we save any ass or neck pain with this choice, either.  Might
need some flick of the wrist to keep the"]
// END RANK raw_166

prespace_167 -> leaf_174
leaf_174  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_167

literal_168 -> leaf_175
leaf_175  [color=Gray,shape=rectangle,fontname=Inconsolata,label="luv"]
// END RANK literal_168

raw_169 -> leaf_176
leaf_176  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_169

prespace_170 -> leaf_177
leaf_177  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_170

literal_171 -> leaf_178
leaf_178  [color=Gray,shape=rectangle,fontname=Inconsolata,label="pylon"]
// END RANK literal_171

raw_172 -> leaf_179
leaf_179  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" ideas of what's
happening consistent.
"]
// END RANK raw_172

prose_154 -> { prespace_180 literal_181 raw_182 prespace_183 literal_184 raw_185}
{rank=same; prespace_180 literal_181 raw_182 prespace_183 literal_184 raw_185}

prespace_180 [label="prespace"]

literal_181 [label="literal"]

raw_182 [label="raw"]

prespace_183 [label="prespace"]

literal_184 [label="literal"]

raw_185 [label="raw"]


// END RANK prose_154

prespace_180 -> leaf_186
leaf_186  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_180

literal_181 -> leaf_187
leaf_187  [color=Gray,shape=rectangle,fontname=Inconsolata,label="femto"]
// END RANK literal_181

raw_182 -> leaf_188
leaf_188  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is 0.2 when user commands are inserted into the shared-memory
database, triggering an update in the attached loop, where the return value
is then inserted to that database, triggering an update on the"]
// END RANK raw_182

prespace_183 -> leaf_189
leaf_189  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_183

literal_184 -> leaf_190
leaf_190  [color=Gray,shape=rectangle,fontname=Inconsolata,label="femto"]
// END RANK literal_184

raw_185 -> leaf_191
leaf_191  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" side.
During idles, these changes get transacted to store.
"]
// END RANK raw_185

prose_155 -> { raw_192 prespace_193 literal_194 raw_195 prespace_196 literal_197 raw_198}
{rank=same; raw_192 prespace_193 literal_194 raw_195 prespace_196 literal_197 raw_198}

raw_192 [label="raw"]

prespace_193 [label="prespace"]

literal_194 [label="literal"]

raw_195 [label="raw"]

prespace_196 [label="prespace"]

literal_197 [label="literal"]

raw_198 [label="raw"]


// END RANK prose_155

raw_192 -> leaf_199
leaf_199  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Letting the database keep blocking on the femto side is probably okay for 0.2.
When building"]
// END RANK raw_192

prespace_193 -> leaf_200
leaf_200  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_193

literal_194 -> leaf_201
leaf_201  [color=Gray,shape=rectangle,fontname=Inconsolata,label="n"]
// END RANK literal_194

raw_195 -> leaf_202
leaf_202  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" interacting systems, set"]
// END RANK raw_195

prespace_196 -> leaf_203
leaf_203  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_196

literal_197 -> leaf_204
leaf_204  [color=Gray,shape=rectangle,fontname=Inconsolata,label="n=2"]
// END RANK literal_197

raw_198 -> leaf_205
leaf_205  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" at first.
"]
// END RANK raw_198

prose_156 -> { raw_206 prespace_207 literal_208 raw_209}
{rank=same; raw_206 prespace_207 literal_208 raw_209}

raw_206 [label="raw"]

prespace_207 [label="prespace"]

literal_208 [label="literal"]

raw_209 [label="raw"]


// END RANK prose_156

raw_206 -> leaf_210
leaf_210  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
But the user OODA loop is sacred, and"]
// END RANK raw_206

prespace_207 -> leaf_211
leaf_211  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_207

literal_208 -> leaf_212
leaf_212  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bridge"]
// END RANK literal_208

raw_209 -> leaf_213
leaf_213  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" systems give it the highest
priority the platform easily allows.

"]
// END RANK raw_209

section_8 -> { header_214 prose_215 prose_216 prose_217 prose_218 prose_219 prose_220 prose_221 prose_222 section_223}
{rank=same; header_214 prose_215 prose_216 prose_217 prose_218 prose_219 prose_220 prose_221 prose_222 section_223}

header_214 [label="2 : Game Plan"]

prose_215 [label="prose"]

prose_216 [label="prose"]

prose_217 [label="prose"]

prose_218 [label="prose"]

prose_219 [label="prose"]

prose_220 [label="prose"]

prose_221 [label="prose"]

prose_222 [label="prose"]

section_223 [label="section: 131-144"]


// END RANK section_8

header_214 -> leaf_224
leaf_224  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Game Plan"]
// END RANK header_214

prose_215 -> { raw_225 prespace_226 literal_227 raw_228 prespace_229 literal_230 raw_231 prespace_232 literal_233 raw_234}
{rank=same; raw_225 prespace_226 literal_227 raw_228 prespace_229 literal_230 raw_231 prespace_232 literal_233 raw_234}

raw_225 [label="raw"]

prespace_226 [label="prespace"]

literal_227 [label="literal"]

raw_228 [label="raw"]

prespace_229 [label="prespace"]

literal_230 [label="literal"]

raw_231 [label="raw"]

prespace_232 [label="prespace"]

literal_233 [label="literal"]

raw_234 [label="raw"]


// END RANK prose_215

raw_225 -> leaf_235
leaf_235  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

My nomenclature is aspirational as much as it is informative."]
// END RANK raw_225

prespace_226 -> leaf_236
leaf_236  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_226

literal_227 -> leaf_237
leaf_237  [color=Gray,shape=rectangle,fontname=Inconsolata,label="pylon"]
// END RANK literal_227

raw_228 -> leaf_238
leaf_238  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" makes a
binary called"]
// END RANK raw_228

prespace_229 -> leaf_239
leaf_239  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_229

literal_230 -> leaf_240
leaf_240  [color=Gray,shape=rectangle,fontname=Inconsolata,label="br"]
// END RANK literal_230

raw_231 -> leaf_241
leaf_241  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", and I'll fork it and have that fork make"]
// END RANK raw_231

prespace_232 -> leaf_242
leaf_242  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_232

literal_233 -> leaf_243
leaf_243  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bur"]
// END RANK literal_233

raw_234 -> leaf_244
leaf_244  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" or
something, while I make a test repo that purely works out the basic character
of running a couple processes against each other.
"]
// END RANK raw_234

prose_216 -> { raw_245 prespace_246 literal_247 raw_248}
{rank=same; raw_245 prespace_246 literal_247 raw_248}

raw_245 [label="raw"]

prespace_246 [label="prespace"]

literal_247 [label="literal"]

raw_248 [label="raw"]


// END RANK prose_216

raw_245 -> leaf_249
leaf_249  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I'm hoping to get some reasonable advice from Tim Caswell, whom I will put on
the contact list for femto 0.1. I want luv/lit/luvit programs to be able to
pull in one module  and then be able to connect to the"]
// END RANK raw_245

prespace_246 -> leaf_250
leaf_250  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_246

literal_247 -> leaf_251
leaf_251  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bridge"]
// END RANK literal_247

raw_248 -> leaf_252
leaf_252  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" repl from
there.
"]
// END RANK raw_248

prose_217 -> { raw_253 prespace_254 literal_255 raw_256}
{rank=same; raw_253 prespace_254 literal_255 raw_256}

raw_253 [label="raw"]

prespace_254 [label="prespace"]

literal_255 [label="literal"]

raw_256 [label="raw"]


// END RANK prose_217

raw_253 -> leaf_257
leaf_257  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I think the boot sequence is: if the -i flag isn't present, just run the
program, if it is, fire up the repl first, which launches a second state
that holds a conn to"]
// END RANK raw_253

prespace_254 -> leaf_258
leaf_258  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_254

literal_255 -> leaf_259
leaf_259  [color=Gray,shape=rectangle,fontname=Inconsolata,label="~/.bridge"]
// END RANK literal_255

raw_256 -> leaf_260
leaf_260  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and another to an in-memory DB, once the
luser has a prompt, set up the programme, print any output to a buffer, then
run back any session from the DB.
"]
// END RANK raw_256

prose_218 -> { raw_261}
{rank=same; raw_261}

raw_261 [label="raw"]


// END RANK prose_218

raw_261 -> leaf_262
leaf_262  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This is all a little mind-bending but having an ACID store between threads is
literally what STM is and I think once I figure out some good, if not totally
ordered, semantics for ORM in Lua, we'll be in pretty nice shape.
"]
// END RANK raw_261

prose_219 -> { raw_263}
{rank=same; raw_263}

raw_263 [label="raw"]


// END RANK prose_219

raw_263 -> leaf_264
leaf_264  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Clu is supposed to be \"What if Clojure except persistent rather than immutable\"
and having the snapshot living in in-memory and store DBs while the state
itself lives in a fast mutable object is a good premise.
"]
// END RANK raw_263

prose_220 -> { raw_265}
{rank=same; raw_265}

raw_265 [label="raw"]


// END RANK prose_220

raw_265 -> leaf_266
leaf_266  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It's not exceptionally expensive to keep undo buffers and the like, and I tend
to want the property that a pointer always shows the latest state, rather than
value-side referential transparency.
"]
// END RANK raw_265

prose_221 -> { raw_267}
{rank=same; raw_267}

raw_267 [label="raw"]


// END RANK prose_221

raw_267 -> leaf_268
leaf_268  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Quipu are intended to have this property also. I recognize that this makes
OT editing of them inappropriate and that's fine, we solve one problem at a
time and using a fast, owned quipu doesn't preclude more intricate AST forms
later.
"]
// END RANK raw_267

prose_222 -> { raw_269}
{rank=same; raw_269}

raw_269 [label="raw"]


// END RANK prose_222

raw_269 -> leaf_270
leaf_270  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
What I want is a form of undo which looks for changes by recency within a
defined form. Usually a function, sometimes a conditional.

"]
// END RANK raw_269

section_223 -> { header_271 prose_272 prose_273 prose_274}
{rank=same; header_271 prose_272 prose_273 prose_274}

header_271 [label="3 : Build model objects"]

prose_272 [label="prose"]

prose_273 [label="prose"]

prose_274 [label="prose"]


// END RANK section_223

header_271 -> leaf_275
leaf_275  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Build model objects"]
// END RANK header_271

prose_272 -> { raw_276}
{rank=same; raw_276}

raw_276 [label="raw"]


// END RANK prose_272

raw_276 -> leaf_277
leaf_277  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

To really get places in this refactoring, I intend to build small collections
of objects which simply exhibit the behavior I'm looking for.  These will be
useful in PMPLVM and will spare a lot of grief compared to bolting new
patterns onto existing systems.
"]
// END RANK raw_276

prose_273 -> { raw_278}
{rank=same; raw_278}

raw_278 [label="raw"]


// END RANK prose_273

raw_278 -> leaf_279
leaf_279  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This is of course the huge advantage of a proper prototype object system.
We don't try and make an ontology or figure out what a class is or why we
would need one. We just hook a few tables together with our surrounding C and
library code and get them doing what we want.
"]
// END RANK raw_278

prose_274 -> { raw_280}
{rank=same; raw_280}

raw_280 [label="raw"]


// END RANK prose_274

raw_280 -> leaf_281
leaf_281  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I do need to figure out a couple really-basic things.  Like how to register
a trigger with SQLite from Lua."]
// END RANK raw_280


}
