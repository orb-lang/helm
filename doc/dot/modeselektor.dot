digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 635"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-587"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 section_5 section_6 section_7}
{rank=same; header_2 prose_3 prose_4 section_5 section_6 section_7}

header_2 [label="1 : Modeselektor"]

prose_3 [label="prose"]

prose_4 [label="prose"]

section_5 [label="section: 12-306"]

section_6 [label="section: 355-517"]

section_7 [label="section: 588-635"]


// END RANK section_1

header_2 -> leaf_8
leaf_8  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Modeselektor"]
// END RANK header_2

prose_3 -> { raw_9 prespace_10 literal_11 raw_12}
{rank=same; raw_9 prespace_10 literal_11 raw_12}

raw_9 [label="raw"]

prespace_10 [label="prespace"]

literal_11 [label="literal"]

raw_12 [label="raw"]


// END RANK prose_3

raw_9 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK raw_9

prespace_10 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_10

literal_11 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label="femto"]
// END RANK literal_11

raw_12 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" will hold all state for an terminal session, including setup of io,
the main event loop, teardown and exuent.  Soon, we will encapsulate that,
making the library re-entrant.
"]
// END RANK raw_12

prose_4 -> { prespace_17 literal_18 raw_19 prespace_20 literal_21 raw_22 prespace_23 literal_24 raw_25}
{rank=same; prespace_17 literal_18 raw_19 prespace_20 literal_21 raw_22 prespace_23 literal_24 raw_25}

prespace_17 [label="prespace"]

literal_18 [label="literal"]

raw_19 [label="raw"]

prespace_20 [label="prespace"]

literal_21 [label="literal"]

raw_22 [label="raw"]

prespace_23 [label="prespace"]

literal_24 [label="literal"]

raw_25 [label="raw"]


// END RANK prose_4

prespace_17 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_17

literal_18 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_18

raw_19 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is the modal interpreter for the repl language, which becomes
the core of"]
// END RANK raw_19

prespace_20 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_20

literal_21 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label="ed"]
// END RANK literal_21

raw_22 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  This is a glorified lookup table with a state switch and
a pointer to the"]
// END RANK raw_22

prespace_23 -> leaf_32
leaf_32  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_23

literal_24 -> leaf_33
leaf_33  [color=Gray,shape=rectangle,fontname=Inconsolata,label="femto"]
// END RANK literal_24

raw_25 -> leaf_34
leaf_34  [color=Gray,shape=rectangle,fontname=Inconsolata,label="cell we're operating on.

"]
// END RANK raw_25

section_5 -> { header_35 prose_36 prose_37 prose_38 prose_39 prose_40 prose_41 prose_42 prose_43 prose_44 prose_45 prose_46 prose_47 prose_48 prose_49 prose_50 prose_51 prose_52 section_53 section_54 section_55 section_56 section_57 section_58 section_59}
{rank=same; header_35 prose_36 prose_37 prose_38 prose_39 prose_40 prose_41 prose_42 prose_43 prose_44 prose_45 prose_46 prose_47 prose_48 prose_49 prose_50 prose_51 prose_52 section_53 section_54 section_55 section_56 section_57 section_58 section_59}

header_35 [label="2 : Design"]

prose_36 [label="prose"]

prose_37 [label="prose"]

prose_38 [label="prose"]

prose_39 [label="prose"]

prose_40 [label="prose"]

prose_41 [label="prose"]

prose_42 [label="prose"]

prose_43 [label="prose"]

prose_44 [label="prose"]

prose_45 [label="prose"]

prose_46 [label="prose"]

prose_47 [label="prose"]

prose_48 [label="prose"]

prose_49 [label="prose"]

prose_50 [label="prose"]

prose_51 [label="prose"]

prose_52 [label="prose"]

section_53 [label="section: 84-95"]

section_54 [label="section: 96-118"]

section_55 [label="section: 119-182"]

section_56 [label="section: 183-193"]

section_57 [label="section: 194-200"]

section_58 [label="section: 288-306"]

section_59 [label="section: 307-354"]


// END RANK section_5

header_35 -> leaf_60
leaf_60  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Design"]
// END RANK header_35

prose_36 -> { raw_61 prespace_62 literal_63 raw_64 prespace_65 literal_66 raw_67}
{rank=same; raw_61 prespace_62 literal_63 raw_64 prespace_65 literal_66 raw_67}

raw_61 [label="raw"]

prespace_62 [label="prespace"]

literal_63 [label="literal"]

raw_64 [label="raw"]

prespace_65 [label="prespace"]

literal_66 [label="literal"]

raw_67 [label="raw"]


// END RANK prose_36

raw_61 -> leaf_68
leaf_68  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

 "]
// END RANK raw_61

prespace_62 -> leaf_69
leaf_69  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_62

literal_63 -> leaf_70
leaf_70  [color=Gray,shape=rectangle,fontname=Inconsolata,label="femto"]
// END RANK literal_63

raw_64 -> leaf_71
leaf_71  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" passes keystrokes as messages to"]
// END RANK raw_64

prespace_65 -> leaf_72
leaf_72  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_65

literal_66 -> leaf_73
leaf_73  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_66

raw_67 -> leaf_74
leaf_74  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  It does no writes
to stdout at all.  It is smart enough to categorize and parse various device
reports, but has no knowledge of why those reports were requested.
"]
// END RANK raw_67

prose_37 -> { prespace_75 literal_76 raw_77}
{rank=same; prespace_75 literal_76 raw_77}

prespace_75 [label="prespace"]

literal_76 [label="literal"]

raw_77 [label="raw"]


// END RANK prose_37

prespace_75 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_75

literal_76 -> leaf_79
leaf_79  [color=Gray,shape=rectangle,fontname=Inconsolata,label="femto"]
// END RANK literal_76

raw_77 -> leaf_80
leaf_80  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" runs the event loop, so all other members are pulled in as modules.
"]
// END RANK raw_77

prose_38 -> { prespace_81 literal_82 raw_83 prespace_84 literal_85 raw_86}
{rank=same; prespace_81 literal_82 raw_83 prespace_84 literal_85 raw_86}

prespace_81 [label="prespace"]

literal_82 [label="literal"]

raw_83 [label="raw"]

prespace_84 [label="prespace"]

literal_85 [label="literal"]

raw_86 [label="raw"]


// END RANK prose_38

prespace_81 -> leaf_87
leaf_87  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_81

literal_82 -> leaf_88
leaf_88  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_82

raw_83 -> leaf_89
leaf_89  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" takes care of system-level housekeeping: opening files
and sockets, keeping command history, fuzzy completion, and has its own eval
loop off the main track.  For evaluating lines, it will call a small executor,
so that in a little while we can put the user program in its own"]
// END RANK raw_83

prespace_84 -> leaf_90
leaf_90  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_84

literal_85 -> leaf_91
leaf_91  [color=Gray,shape=rectangle,fontname=Inconsolata,label="LuaL_state"]
// END RANK literal_85

raw_86 -> leaf_92
leaf_92  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_86

prose_39 -> { raw_93 prespace_94 literal_95 raw_96}
{rank=same; raw_93 prespace_94 literal_95 raw_96}

raw_93 [label="raw"]

prespace_94 [label="prespace"]

literal_95 [label="literal"]

raw_96 [label="raw"]


// END RANK prose_39

raw_93 -> leaf_97
leaf_97  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This is both good practice, and absolutely necessary if we are to REPL other"]
// END RANK raw_93

prespace_94 -> leaf_98
leaf_98  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_94

literal_95 -> leaf_99
leaf_99  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bridge"]
// END RANK literal_95

raw_96 -> leaf_100
leaf_100  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" programs, each of which has its own event loop.
"]
// END RANK raw_96

prose_40 -> { raw_101 prespace_102 literal_103 raw_104}
{rank=same; raw_101 prespace_102 literal_103 raw_104}

raw_101 [label="raw"]

prespace_102 [label="prespace"]

literal_103 [label="literal"]

raw_104 [label="raw"]


// END RANK prose_40

raw_101 -> leaf_105
leaf_105  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The implementation is essentially a VM.  Category and value are
successively looked up in jump tables and the method applied with the"]
// END RANK raw_101

prespace_102 -> leaf_106
leaf_106  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_102

literal_103 -> leaf_107
leaf_107  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeS"]
// END RANK literal_103

raw_104 -> leaf_108
leaf_108  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
instance as the first argument.
"]
// END RANK raw_104

prose_41 -> { raw_109}
{rank=same; raw_109}

raw_109 [label="raw"]


// END RANK prose_41

raw_109 -> leaf_110
leaf_110  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The state machine has to represent two sorts of state: the mode we're
operating in, and a buffer of commands.  Our mode engine is modeled after
emacs: rather than have some kind of flag that can be set to \"insert\",
\"navigate\", \"command\", or \"visual\", these will be modeled as swiching the
pointer to jump tables.  If a command needs to know which mode it's in, this
can be done with pointer comparison.
"]
// END RANK raw_109

prose_42 -> { raw_111 prespace_112 literal_113 raw_114 prespace_115 literal_116 raw_117 prespace_118 literal_119 raw_120 prespace_121 literal_122 raw_123}
{rank=same; raw_111 prespace_112 literal_113 raw_114 prespace_115 literal_116 raw_117 prespace_118 literal_119 raw_120 prespace_121 literal_122 raw_123}

raw_111 [label="raw"]

prespace_112 [label="prespace"]

literal_113 [label="literal"]

raw_114 [label="raw"]

prespace_115 [label="prespace"]

literal_116 [label="literal"]

raw_117 [label="raw"]

prespace_118 [label="prespace"]

literal_119 [label="literal"]

raw_120 [label="raw"]

prespace_121 [label="prespace"]

literal_122 [label="literal"]

raw_123 [label="raw"]


// END RANK prose_42

raw_111 -> leaf_124
leaf_124  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We're starting with"]
// END RANK raw_111

prespace_112 -> leaf_125
leaf_125  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_112

literal_113 -> leaf_126
leaf_126  [color=Gray,shape=rectangle,fontname=Inconsolata,label="vi"]
// END RANK literal_113

raw_114 -> leaf_127
leaf_127  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" mode and"]
// END RANK raw_114

prespace_115 -> leaf_128
leaf_128  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_115

literal_116 -> leaf_129
leaf_129  [color=Gray,shape=rectangle,fontname=Inconsolata,label="nerf"]
// END RANK literal_116

raw_117 -> leaf_130
leaf_130  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" mode, which is a lightweight"]
// END RANK raw_117

prespace_118 -> leaf_131
leaf_131  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_118

literal_119 -> leaf_132
leaf_132  [color=Gray,shape=rectangle,fontname=Inconsolata,label="readline"]
// END RANK literal_119

raw_120 -> leaf_133
leaf_133  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" implementation that won't use the command buffer.  Issuing a
command like"]
// END RANK raw_120

prespace_121 -> leaf_134
leaf_134  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_121

literal_122 -> leaf_135
leaf_135  [color=Gray,shape=rectangle,fontname=Inconsolata,label="d3w"]
// END RANK literal_122

raw_123 -> leaf_136
leaf_136  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" requires a simple command buffer.
"]
// END RANK raw_123

prose_43 -> { raw_137 prespace_138 literal_139 raw_140 prespace_141 literal_142 raw_143}
{rank=same; raw_137 prespace_138 literal_139 raw_140 prespace_141 literal_142 raw_143}

raw_137 [label="raw"]

prespace_138 [label="prespace"]

literal_139 [label="literal"]

raw_140 [label="raw"]

prespace_141 [label="prespace"]

literal_142 [label="literal"]

raw_143 [label="raw"]


// END RANK prose_43

raw_137 -> leaf_144
leaf_144  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The syntax can't be tied to the semantics in any tighly-coupled way. I intend
to support"]
// END RANK raw_137

prespace_138 -> leaf_145
leaf_145  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_138

literal_139 -> leaf_146
leaf_146  [color=Gray,shape=rectangle,fontname=Inconsolata,label="kakoune"]
// END RANK literal_139

raw_140 -> leaf_147
leaf_147  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" syntax as soon as possible; there you would say"]
// END RANK raw_140

prespace_141 -> leaf_148
leaf_148  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_141

literal_142 -> leaf_149
leaf_149  [color=Gray,shape=rectangle,fontname=Inconsolata,label="w3d"]
// END RANK literal_142

raw_143 -> leaf_150
leaf_150  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_143

prose_44 -> { raw_151 prespace_152 literal_153 raw_154 prespace_155 literal_156 raw_157}
{rank=same; raw_151 prespace_152 literal_153 raw_154 prespace_155 literal_156 raw_157}

raw_151 [label="raw"]

prespace_152 [label="prespace"]

literal_153 [label="literal"]

raw_154 [label="raw"]

prespace_155 [label="prespace"]

literal_156 [label="literal"]

raw_157 [label="raw"]


// END RANK prose_44

raw_151 -> leaf_158
leaf_158  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This implies that the commands can't be aware of the buffer; because"]
// END RANK raw_151

prespace_152 -> leaf_159
leaf_159  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_152

literal_153 -> leaf_160
leaf_160  [color=Gray,shape=rectangle,fontname=Inconsolata,label="d3w"]
// END RANK literal_153

raw_154 -> leaf_161
leaf_161  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
and"]
// END RANK raw_154

prespace_155 -> leaf_162
leaf_162  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_155

literal_156 -> leaf_163
leaf_163  [color=Gray,shape=rectangle,fontname=Inconsolata,label="w3d"]
// END RANK literal_156

raw_157 -> leaf_164
leaf_164  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" are two ways of saying the same thing, they should end in an
identical method call.
"]
// END RANK raw_157

prose_45 -> { raw_165}
{rank=same; raw_165}

raw_165 [label="raw"]


// END RANK prose_45

raw_165 -> leaf_166
leaf_166  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This means when the time comes we handle it with a secondary dispatch layer.
"]
// END RANK raw_165

prose_46 -> { raw_167}
{rank=same; raw_167}

raw_167 [label="raw"]


// END RANK prose_46

raw_167 -> leaf_168
leaf_168  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
There really are effectively arbitrary levels of indirection possible in an
editor.  This is why we must be absolutely consistent about everything
receiving the same tuple (modeS, category, value).
"]
// END RANK raw_167

prose_47 -> { raw_169 prespace_170 literal_171 raw_172 prespace_173 literal_174 raw_175 prespace_176 literal_177 raw_178}
{rank=same; raw_169 prespace_170 literal_171 raw_172 prespace_173 literal_174 raw_175 prespace_176 literal_177 raw_178}

raw_169 [label="raw"]

prespace_170 [label="prespace"]

literal_171 [label="literal"]

raw_172 [label="raw"]

prespace_173 [label="prespace"]

literal_174 [label="literal"]

raw_175 [label="raw"]

prespace_176 [label="prespace"]

literal_177 [label="literal"]

raw_178 [label="raw"]


// END RANK prose_47

raw_169 -> leaf_179
leaf_179  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
They must also have the same return type, with is either"]
// END RANK raw_169

prespace_170 -> leaf_180
leaf_180  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_170

literal_171 -> leaf_181
leaf_181  [color=Gray,shape=rectangle,fontname=Inconsolata,label="true"]
// END RANK literal_171

raw_172 -> leaf_182
leaf_182  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" or"]
// END RANK raw_172

prespace_173 -> leaf_183
leaf_183  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_173

literal_174 -> leaf_184
leaf_184  [color=Gray,shape=rectangle,fontname=Inconsolata,label="false, err"]
// END RANK literal_174

raw_175 -> leaf_185
leaf_185  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  where"]
// END RANK raw_175

prespace_176 -> leaf_186
leaf_186  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_176

literal_177 -> leaf_187
leaf_187  [color=Gray,shape=rectangle,fontname=Inconsolata,label="err"]
// END RANK literal_177

raw_178 -> leaf_188
leaf_188  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is an error object which may be a primitive string.
"]
// END RANK raw_178

prose_48 -> { prespace_189 literal_190 raw_191 prespace_192 literal_193 raw_194 prespace_195 literal_196 raw_197 prespace_198 literal_199 raw_200 prespace_201 literal_202 raw_203 prespace_204 literal_205 raw_206}
{rank=same; prespace_189 literal_190 raw_191 prespace_192 literal_193 raw_194 prespace_195 literal_196 raw_197 prespace_198 literal_199 raw_200 prespace_201 literal_202 raw_203 prespace_204 literal_205 raw_206}

prespace_189 [label="prespace"]

literal_190 [label="literal"]

raw_191 [label="raw"]

prespace_192 [label="prespace"]

literal_193 [label="literal"]

raw_194 [label="raw"]

prespace_195 [label="prespace"]

literal_196 [label="literal"]

raw_197 [label="raw"]

prespace_198 [label="prespace"]

literal_199 [label="literal"]

raw_200 [label="raw"]

prespace_201 [label="prespace"]

literal_202 [label="literal"]

raw_203 [label="raw"]

prespace_204 [label="prespace"]

literal_205 [label="literal"]

raw_206 [label="raw"]


// END RANK prose_48

prespace_189 -> leaf_207
leaf_207  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_189

literal_190 -> leaf_208
leaf_208  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_190

raw_191 -> leaf_209
leaf_209  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" passes any edit or movement commands to an internally-owned"]
// END RANK raw_191

prespace_192 -> leaf_210
leaf_210  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_192

literal_193 -> leaf_211
leaf_211  [color=Gray,shape=rectangle,fontname=Inconsolata,label="txtbuf"]
// END RANK literal_193

raw_194 -> leaf_212
leaf_212  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", which keeps all modeling of the line. "]
// END RANK raw_194

prespace_195 -> leaf_213
leaf_213  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_195

literal_196 -> leaf_214
leaf_214  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_196

raw_197 -> leaf_215
leaf_215  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" decides when
to repaint the screen, calling"]
// END RANK raw_197

prespace_198 -> leaf_216
leaf_216  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_198

literal_199 -> leaf_217
leaf_217  [color=Gray,shape=rectangle,fontname=Inconsolata,label="rainbuf"]
// END RANK literal_199

raw_200 -> leaf_218
leaf_218  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" (currently just"]
// END RANK raw_200

prespace_201 -> leaf_219
leaf_219  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_201

literal_202 -> leaf_220
leaf_220  [color=Gray,shape=rectangle,fontname=Inconsolata,label="lex"]
// END RANK literal_202

raw_203 -> leaf_221
leaf_221  [color=Gray,shape=rectangle,fontname=Inconsolata,label=") with a region
of"]
// END RANK raw_203

prespace_204 -> leaf_222
leaf_222  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_204

literal_205 -> leaf_223
leaf_223  [color=Gray,shape=rectangle,fontname=Inconsolata,label="txtbuf"]
// END RANK literal_205

raw_206 -> leaf_224
leaf_224  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and instructions as to how to paint it.
"]
// END RANK raw_206

prose_49 -> { raw_225 prespace_226 literal_227 raw_228 prespace_229 literal_230 raw_231 prespace_232 literal_233 raw_234}
{rank=same; raw_225 prespace_226 literal_227 raw_228 prespace_229 literal_230 raw_231 prespace_232 literal_233 raw_234}

raw_225 [label="raw"]

prespace_226 [label="prespace"]

literal_227 [label="literal"]

raw_228 [label="raw"]

prespace_229 [label="prespace"]

literal_230 [label="literal"]

raw_231 [label="raw"]

prespace_232 [label="prespace"]

literal_233 [label="literal"]

raw_234 [label="raw"]


// END RANK prose_49

raw_225 -> leaf_235
leaf_235  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
There is one"]
// END RANK raw_225

prespace_226 -> leaf_236
leaf_236  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_226

literal_227 -> leaf_237
leaf_237  [color=Gray,shape=rectangle,fontname=Inconsolata,label="deck"]
// END RANK literal_227

raw_228 -> leaf_238
leaf_238  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" instance member per screen, which tiles the available
space. "]
// END RANK raw_228

prespace_229 -> leaf_239
leaf_239  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_229

literal_230 -> leaf_240
leaf_240  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_230

raw_231 -> leaf_241
leaf_241  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is the writer, and"]
// END RANK raw_231

prespace_232 -> leaf_242
leaf_242  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_232

literal_233 -> leaf_243
leaf_243  [color=Gray,shape=rectangle,fontname=Inconsolata,label="rainbuf"]
// END RANK literal_233

raw_234 -> leaf_244
leaf_244  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" holds a pointer to the
table for read access.
"]
// END RANK raw_234

prose_50 -> { raw_245 prespace_246 literal_247 raw_248 prespace_249 literal_250 raw_251}
{rank=same; raw_245 prespace_246 literal_247 raw_248 prespace_249 literal_250 raw_251}

raw_245 [label="raw"]

prespace_246 [label="prespace"]

literal_247 [label="literal"]

raw_248 [label="raw"]

prespace_249 [label="prespace"]

literal_250 [label="literal"]

raw_251 [label="raw"]


// END RANK prose_50

raw_245 -> leaf_252
leaf_252  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
When we have our fancy parse engine and quipu structure, txtbuf will call"]
// END RANK raw_245

prespace_246 -> leaf_253
leaf_253  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_246

literal_247 -> leaf_254
leaf_254  [color=Gray,shape=rectangle,fontname=Inconsolata,label="comb"]
// END RANK literal_247

raw_248 -> leaf_255
leaf_255  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" to redecorate the syntax tree before passing it to"]
// END RANK raw_248

prespace_249 -> leaf_256
leaf_256  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_249

literal_250 -> leaf_257
leaf_257  [color=Gray,shape=rectangle,fontname=Inconsolata,label="rainbuf"]
// END RANK literal_250

raw_251 -> leaf_258
leaf_258  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" for
markup.  At the moment I'm just going to write some crude lexers, which
will be more than enough for Clu and Lua, which have straightforward syntax.
"]
// END RANK raw_251

prose_51 -> { raw_259 prespace_260 literal_261 raw_262 prespace_263 literal_264 raw_265}
{rank=same; raw_259 prespace_260 literal_261 raw_262 prespace_263 literal_264 raw_265}

raw_259 [label="raw"]

prespace_260 [label="prespace"]

literal_261 [label="literal"]

raw_262 [label="raw"]

prespace_263 [label="prespace"]

literal_264 [label="literal"]

raw_265 [label="raw"]


// END RANK prose_51

raw_259 -> leaf_266
leaf_266  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
An intermediate step could just squeeze the txtbuf into a string, parse it
with"]
// END RANK raw_259

prespace_260 -> leaf_267
leaf_267  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_260

literal_261 -> leaf_268
leaf_268  [color=Gray,shape=rectangle,fontname=Inconsolata,label="espalier"]
// END RANK literal_261

raw_262 -> leaf_269
leaf_269  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and emit a"]
// END RANK raw_262

prespace_263 -> leaf_270
leaf_270  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_263

literal_264 -> leaf_271
leaf_271  [color=Gray,shape=rectangle,fontname=Inconsolata,label="rainbuf"]
// END RANK literal_264

raw_265 -> leaf_272
leaf_272  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" through the usual recursive method
lookup.  The problem isn't speed, not for a REPL, it's not having error
recovery parsing available.
"]
// END RANK raw_265

prose_52 -> { raw_273 prespace_274 literal_275 raw_276}
{rank=same; raw_273 prespace_274 literal_275 raw_276}

raw_273 [label="raw"]

prespace_274 [label="prespace"]

literal_275 [label="literal"]

raw_276 [label="raw"]


// END RANK prose_52

raw_273 -> leaf_277
leaf_277  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I will likely content myself with a grammar that kicks in when the user
presses return.  I'll want that to perform rewrites (such as removing
outer-level"]
// END RANK raw_273

prespace_274 -> leaf_278
leaf_278  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_274

literal_275 -> leaf_279
leaf_279  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local"]
// END RANK literal_275

raw_276 -> leaf_280
leaf_280  [color=Gray,shape=rectangle,fontname=Inconsolata,label="s to facilicate copy-pasting) and keep the readline
grammar from becoming too ad-hoc.

"]
// END RANK raw_276

section_53 -> { header_281 prose_282 codeblock_283}
{rank=same; header_281 prose_282 codeblock_283}

header_281 [label="4 : asserts"]

prose_282 [label="prose"]

codeblock_283 [label="code block 89-93"]


// END RANK section_53

header_281 -> leaf_284
leaf_284  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** asserts"]
// END RANK header_281

prose_282 -> { raw_285 prespace_286 literal_287 raw_288 prespace_289 literal_290 raw_291}
{rank=same; raw_285 prespace_286 literal_287 raw_288 prespace_289 literal_290 raw_291}

raw_285 [label="raw"]

prespace_286 [label="prespace"]

literal_287 [label="literal"]

raw_288 [label="raw"]

prespace_289 [label="prespace"]

literal_290 [label="literal"]

raw_291 [label="raw"]


// END RANK prose_282

raw_285 -> leaf_292
leaf_292  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  There is little sense running"]
// END RANK raw_285

prespace_286 -> leaf_293
leaf_293  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_286

literal_287 -> leaf_294
leaf_294  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_287

raw_288 -> leaf_295
leaf_295  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" outside of the"]
// END RANK raw_288

prespace_289 -> leaf_296
leaf_296  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_289

literal_290 -> leaf_297
leaf_297  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bridge"]
// END RANK literal_290

raw_291 -> leaf_298
leaf_298  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
environment.
"]
// END RANK raw_291

codeblock_283 -> leaf_299
leaf_299  [color=Gray,shape=rectangle,fontname=Inconsolata,label="assert(meta, \"must have meta in _G\")
assert(write, \"must have write in _G\")
assert(ts, \"must have ts in _G\")"]
// END RANK codeblock_283

section_54 -> { header_300 prose_301 prose_302 codeblock_303 codeblock_304}
{rank=same; header_300 prose_301 prose_302 codeblock_303 codeblock_304}

header_300 [label="4 : includes"]

prose_301 [label="prose"]

prose_302 [label="prose"]

codeblock_303 [label="code block 102-112"]

codeblock_304 [label="code block 114-116"]


// END RANK section_54

header_300 -> leaf_305
leaf_305  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** includes"]
// END RANK header_300

prose_301 -> { raw_306}
{rank=same; raw_306}

raw_306 [label="raw"]


// END RANK prose_301

raw_306 -> leaf_307
leaf_307  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The easiest way to go mad in concurrent environments is to share memory.
"]
// END RANK raw_306

prose_302 -> { prespace_308 literal_309 raw_310}
{rank=same; prespace_308 literal_309 raw_310}

prespace_308 [label="prespace"]

literal_309 [label="literal"]

raw_310 [label="raw"]


// END RANK prose_302

prespace_308 -> leaf_311
leaf_311  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_308

literal_309 -> leaf_312
leaf_312  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_309

raw_310 -> leaf_313
leaf_313  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" will own txtbuf, historian, and the entire screen.
"]
// END RANK raw_310

codeblock_303 -> leaf_314
leaf_314  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Txtbuf   = require \"txtbuf\"
local Resbuf    = require \"resbuf\" -- Not currently used...
local Historian = require \"historian\"
local Lex       = require \"lex\"

local concat         = assert(table.concat)
local sub, gsub, rep = assert(string.sub),
                       assert(string.gsub),
                       assert(string.rep)"]
// END RANK codeblock_303

codeblock_304 -> leaf_315
leaf_315  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local ModeS = meta()"]
// END RANK codeblock_304

section_55 -> { header_316 prose_317 codeblock_318 prose_319 prose_320 prose_321 prose_322 prose_323 codeblock_324 prose_325 codeblock_326 prose_327 codeblock_328 prose_329 codeblock_330}
{rank=same; header_316 prose_317 codeblock_318 prose_319 prose_320 prose_321 prose_322 prose_323 codeblock_324 prose_325 codeblock_326 prose_327 codeblock_328 prose_329 codeblock_330}

header_316 [label="3 : Categories"]

prose_317 [label="prose"]

codeblock_318 [label="code block 123-131"]

prose_319 [label="prose"]

prose_320 [label="prose"]

prose_321 [label="prose"]

prose_322 [label="prose"]

prose_323 [label="prose"]

codeblock_324 [label="code block 152-159"]

prose_325 [label="prose"]

codeblock_326 [label="code block 163-165"]

prose_327 [label="prose"]

codeblock_328 [label="code block 170-172"]

prose_329 [label="prose"]

codeblock_330 [label="code block 176-180"]


// END RANK section_55

header_316 -> leaf_331
leaf_331  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Categories"]
// END RANK header_316

prose_317 -> { raw_332}
{rank=same; raw_332}

raw_332 [label="raw"]


// END RANK prose_317

raw_332 -> leaf_333
leaf_333  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

These are the broad types of event.
"]
// END RANK raw_332

codeblock_318 -> leaf_334
leaf_334  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local ASCII  = meta {}
local NAV    = {}
local CTRL   = {}
local ALT    = {}
local FN     = {}
local MOUSE  = {}
local NYI    = {}"]
// END RANK codeblock_318

prose_319 -> { raw_335 prespace_336 literal_337 raw_338}
{rank=same; raw_335 prespace_336 literal_337 raw_338}

raw_335 [label="raw"]

prespace_336 [label="prespace"]

literal_337 [label="literal"]

raw_338 [label="raw"]


// END RANK prose_319

raw_335 -> leaf_339
leaf_339  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Color schemes are supposed to be one-and-done, and I strongly suspect we
have a"]
// END RANK raw_335

prespace_336 -> leaf_340
leaf_340  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_336

literal_337 -> leaf_341
leaf_341  [color=Gray,shape=rectangle,fontname=Inconsolata,label="__concat"]
// END RANK literal_337

raw_338 -> leaf_342
leaf_342  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" dominated workflow, although I have yet to turn on the
profiler.
"]
// END RANK raw_338

prose_320 -> { raw_343 prespace_344 literal_345 raw_346 prespace_347 literal_348 raw_349}
{rank=same; raw_343 prespace_344 literal_345 raw_346 prespace_347 literal_348 raw_349}

raw_343 [label="raw"]

prespace_344 [label="prespace"]

literal_345 [label="literal"]

raw_346 [label="raw"]

prespace_347 [label="prespace"]

literal_348 [label="literal"]

raw_349 [label="raw"]


// END RANK prose_320

raw_343 -> leaf_350
leaf_350  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Therefore we use reference equality for the"]
// END RANK raw_343

prespace_344 -> leaf_351
leaf_351  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_344

literal_345 -> leaf_352
leaf_352  [color=Gray,shape=rectangle,fontname=Inconsolata,label="color"]
// END RANK literal_345

raw_346 -> leaf_353
leaf_353  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_346

prespace_347 -> leaf_354
leaf_354  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_347

literal_348 -> leaf_355
leaf_355  [color=Gray,shape=rectangle,fontname=Inconsolata,label="hints"]
// END RANK literal_348

raw_349 -> leaf_356
leaf_356  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" tables.
Switching themes is a matter of repopulating those tables.  I intend to
isolate this within an instance so that multiple terminals can each run their
own theme, through a simple 'fat inheritance' method.
"]
// END RANK raw_349

prose_321 -> { prespace_357 literal_358 raw_359 prespace_360 italic_361 raw_362}
{rank=same; prespace_357 literal_358 raw_359 prespace_360 italic_361 raw_362}

prespace_357 [label="prespace"]

literal_358 [label="literal"]

raw_359 [label="raw"]

prespace_360 [label="prespace"]

italic_361 [label="italic"]

raw_362 [label="raw"]


// END RANK prose_321

prespace_357 -> leaf_363
leaf_363  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_357

literal_358 -> leaf_364
leaf_364  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_358

raw_359 -> leaf_365
leaf_365  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is what you might call hypermodal. Everything is isolated in
its own lookup, that is, we use"]
// END RANK raw_359

prespace_360 -> leaf_366
leaf_366  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_360

italic_361 -> leaf_367
leaf_367  [color=Gray,shape=rectangle,fontname=Inconsolata,label="value"]
// END RANK italic_361

raw_362 -> leaf_368
leaf_368  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" equality.  This lets us pass strings
as messages and use jump tables to resolve most things.
"]
// END RANK raw_362

prose_322 -> { raw_369}
{rank=same; raw_369}

raw_369 [label="raw"]


// END RANK prose_322

raw_369 -> leaf_370
leaf_370  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It typically runs at the speed of human fingers and can afford to be much less
efficient than it will be, even before the JIT gets involved.
"]
// END RANK raw_369

prose_323 -> { raw_371 prespace_372 literal_373 raw_374}
{rank=same; raw_371 prespace_372 literal_373 raw_374}

raw_371 [label="raw"]

prespace_372 [label="prespace"]

literal_373 [label="literal"]

raw_374 [label="raw"]


// END RANK prose_323

raw_371 -> leaf_375
leaf_375  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Note also that everything is a method, our dispatch pattern will always
include the"]
// END RANK raw_371

prespace_372 -> leaf_376
leaf_376  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_372

literal_373 -> leaf_377
leaf_377  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeS"]
// END RANK literal_373

raw_374 -> leaf_378
leaf_378  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" instance as the first argument.
"]
// END RANK raw_374

codeblock_324 -> leaf_379
leaf_379  [color=Gray,shape=rectangle,fontname=Inconsolata,label="ModeS.modes = { ASCII  = ASCII,
                NAV    = NAV,
                CTRL   = CTRL,
                ALT    = ALT,
                MOUSE  = MOUSE,
                NYI    = NYI }"]
// END RANK codeblock_324

prose_325 -> { raw_380}
{rank=same; raw_380}

raw_380 [label="raw"]


// END RANK prose_325

raw_380 -> leaf_381
leaf_381  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
With some semi-constants:
"]
// END RANK raw_380

codeblock_326 -> leaf_382
leaf_382  [color=Gray,shape=rectangle,fontname=Inconsolata,label="ModeS.REPL_LINE = 2"]
// END RANK codeblock_326

prose_327 -> { raw_383 prespace_384 literal_385 raw_386}
{rank=same; raw_383 prespace_384 literal_385 raw_386}

raw_383 [label="raw"]

prespace_384 [label="prespace"]

literal_385 [label="literal"]

raw_386 [label="raw"]


// END RANK prose_327

raw_383 -> leaf_387
leaf_387  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Sometimes its useful to briefly override handlers, so we check values
against"]
// END RANK raw_383

prespace_384 -> leaf_388
leaf_388  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_384

literal_385 -> leaf_389
leaf_389  [color=Gray,shape=rectangle,fontname=Inconsolata,label="special"]
// END RANK literal_385

raw_386 -> leaf_390
leaf_390  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" first:
"]
// END RANK raw_386

codeblock_328 -> leaf_391
leaf_391  [color=Gray,shape=rectangle,fontname=Inconsolata,label="ModeS.special = {}"]
// END RANK codeblock_328

prose_329 -> { raw_392}
{rank=same; raw_392}

raw_392 [label="raw"]


// END RANK prose_329

raw_392 -> leaf_393
leaf_393  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A simple pass-through so we can see what we're missing.
"]
// END RANK raw_392

codeblock_330 -> leaf_394
leaf_394  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function ModeS.default(modeS, category, value)
    return write(ts(value))
end"]
// END RANK codeblock_330

section_56 -> { header_395 prose_396 codeblock_397}
{rank=same; header_395 prose_396 codeblock_397}

header_395 [label="3 : self-insert(modeS, category, value)"]

prose_396 [label="prose"]

codeblock_397 [label="code block 187-191"]


// END RANK section_56

header_395 -> leaf_398
leaf_398  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** self-insert(modeS, category, value)"]
// END RANK header_395

prose_396 -> { raw_399}
{rank=same; raw_399}

raw_399 [label="raw"]


// END RANK prose_396

raw_399 -> leaf_400
leaf_400  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Inserts the value into the txtbuf at cursor.
"]
// END RANK raw_399

codeblock_397 -> leaf_401
leaf_401  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function ModeS.insert(modeS, category, value)
    local success =  modeS.txtbuf:insert(value)
end"]
// END RANK codeblock_397

section_57 -> { header_402 prose_403 prose_404 section_405}
{rank=same; header_402 prose_403 prose_404 section_405}

header_402 [label="3 : status painter (colwrite)"]

prose_403 [label="prose"]

prose_404 [label="prose"]

section_405 [label="section: 201-287"]


// END RANK section_57

header_402 -> leaf_406
leaf_406  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** status painter (colwrite)"]
// END RANK header_402

prose_403 -> { raw_407}
{rank=same; raw_407}

raw_407 [label="raw"]


// END RANK prose_403

raw_407 -> leaf_408
leaf_408  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This is a grab-bag with many traces of the bootstrap process.
"]
// END RANK raw_407

prose_404 -> { raw_409}
{rank=same; raw_409}

raw_409 [label="raw"]


// END RANK prose_404

raw_409 -> leaf_410
leaf_410  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It also contains the state-of-the-art renderers.

"]
// END RANK raw_409

section_405 -> { header_411 prose_412 prose_413 codeblock_414 codeblock_415}
{rank=same; header_411 prose_412 prose_413 codeblock_414 codeblock_415}

header_411 [label="4 : bootstrappers"]

prose_412 [label="prose"]

prose_413 [label="prose"]

codeblock_414 [label="code block 208-274"]

codeblock_415 [label="code block 277-285"]


// END RANK section_405

header_411 -> leaf_416
leaf_416  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** bootstrappers"]
// END RANK header_411

prose_412 -> { raw_417}
{rank=same; raw_417}

raw_417 [label="raw"]


// END RANK prose_412

raw_417 -> leaf_418
leaf_418  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

A lot of this just paints mouse events, which we aren't using and won't be
able to use until we rigorously keep track of what's printed where.
"]
// END RANK raw_417

prose_413 -> { raw_419}
{rank=same; raw_419}

raw_419 [label="raw"]


// END RANK prose_413

raw_419 -> leaf_420
leaf_420  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Which is painstaking and annoying, but we'll get there...
"]
// END RANK raw_419

codeblock_414 -> leaf_421
leaf_421  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local STATCOL = 81
local STAT_TOP = 1
local STAT_RUN = 2

local function colwrite(str, col, row)
   col = col or STATCOL
   row = row or STAT_TOP
   local dash = a.stash()
             .. a.cursor.hide()
             .. a.jump(row, col)
             .. a.erase.right()
             .. str
             .. a.pop()
             .. a.cursor.show()
   write(dash)
end

local STAT_ICON = \"◉ \"

local function tf(bool)
   if bool then
      return ts(\"t\", \"true\")
   else
      return ts(\"f\", \"false\")
   end
end

local function pr_mouse(m)
   return a.magenta(m.button) .. \": \"
      .. a.bright(m.kind) .. \" \"
      .. tf(m.shift) .. \" \"
      .. tf(m.meta) .. \" \"
      .. tf(m.ctrl) .. \" \"
      .. tf(m.moving) .. \" \"
      .. tf(m.scrolling) .. \" \"
      .. a.cyan(m.col) .. \",\" .. a.cyan(m.row)
end

local function mk_paint(fragment, shade)
   return function(category, action)
      return shade(category .. fragment .. action)
   end
end

local act_map = { MOUSE  = pr_mouse,
                  NAV    = mk_paint(\": \", a.italic),
                  CTRL   = mk_paint(\": \", c.field),
                  ALT    = mk_paint(\": \", a.underscore),
                  ASCII  = mk_paint(\": \", c.table),
                  NYI    = mk_paint(\": \", a.red)}

local icon_map = { MOUSE = mk_paint(STAT_ICON, c.userdata),
                   NAV   = mk_paint(STAT_ICON, a.magenta),
                   CTRL  = mk_paint(STAT_ICON, a.blue),
                   ALT   = mk_paint(STAT_ICON, c[\"function\"]),
                   ASCII = mk_paint(STAT_ICON, a.green),
                   NYI   = mk_paint(STAT_ICON .. \"! \", a.red) }

local function icon_paint(category, value)
   assert(icon_map[category], \"icon_paint NYI:\" .. category)
   if category == \"MOUSE\" then
      return colwrite(icon_map[category](\"\", pr_mouse(value)))
   end
   return colwrite(icon_map[category](\"\", ts(value)))
end"]
// END RANK codeblock_414

codeblock_415 -> leaf_422
leaf_422  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function ModeS.cur_col(modeS)
   return modeS.txtbuf.cursor + modeS.l_margin - 1
end

function ModeS.nl(modeS)
   write(a.col(modeS.l_margin).. a.jump.down(1))
end"]
// END RANK codeblock_415

section_58 -> { header_423 prose_424 prose_425 codeblock_426}
{rank=same; header_423 prose_424 prose_425 codeblock_426}

header_423 [label="3 : ModeS:write(str)"]

prose_424 [label="prose"]

prose_425 [label="prose"]

codeblock_426 [label="code block 294-303"]


// END RANK section_58

header_423 -> leaf_427
leaf_427  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** ModeS:write(str)"]
// END RANK header_423

prose_424 -> { raw_428}
{rank=same; raw_428}

raw_428 [label="raw"]


// END RANK prose_424

raw_428 -> leaf_429
leaf_429  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This writes to the results window, and the results window only.
"]
// END RANK raw_428

prose_425 -> { raw_430 prespace_431 literal_432 raw_433}
{rank=same; raw_430 prespace_431 literal_432 raw_433}

raw_430 [label="raw"]

prespace_431 [label="prespace"]

literal_432 [label="literal"]

raw_433 [label="raw"]


// END RANK prose_425

raw_430 -> leaf_434
leaf_434  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It should therefore be called"]
// END RANK raw_430

prespace_431 -> leaf_435
leaf_435  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_431

literal_432 -> leaf_436
leaf_436  [color=Gray,shape=rectangle,fontname=Inconsolata,label="writeResults"]
// END RANK literal_432

raw_433 -> leaf_437
leaf_437  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" or something.
"]
// END RANK raw_433

codeblock_426 -> leaf_438
leaf_438  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function ModeS.write(modeS, str)
   local nl = a.col(modeS.l_margin) .. a.jump.down(1)
   local phrase, num_subs
   phrase, num_subs = gsub(str, \"\\n\", nl)
   write(a.cursor.hide())
   write(phrase)
   write(a.cursor.show())
end"]
// END RANK codeblock_426

section_59 -> { header_439 prose_440 codeblock_441 codeblock_442 codeblock_443 codeblock_444}
{rank=same; header_439 prose_440 codeblock_441 codeblock_442 codeblock_443 codeblock_444}

header_439 [label="3 : ModeS:paint_txtbuf()"]

prose_440 [label="prose"]

codeblock_441 [label="code block 311-322"]

codeblock_442 [label="code block 324-328"]

codeblock_443 [label="code block 329-346"]

codeblock_444 [label="code block 348-352"]


// END RANK section_59

header_439 -> leaf_445
leaf_445  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** ModeS:paint_txtbuf()"]
// END RANK header_439

prose_440 -> { raw_446}
{rank=same; raw_446}

raw_446 [label="raw"]


// END RANK prose_440

raw_446 -> leaf_447
leaf_447  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This renders our txtbuf,
"]
// END RANK raw_446

codeblock_441 -> leaf_448
leaf_448  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function ModeS.paint_txtbuf(modeS)
   local lb = Lex.lua_thor(tostring(modeS.txtbuf))
   write(a.cursor.hide())
   write(a.erase.box(modeS.repl_top, modeS.l_margin,
                     modeS:replLine(), modeS.r_margin))
   write(a.jump(modeS.repl_top, modeS.l_margin))
   modeS:write(concat(lb))
   write(a.rc(modeS.txtbuf.cur_row + modeS.repl_top - 1, modeS:cur_col()))
   write(a.cursor.show())
end"]
// END RANK codeblock_441

codeblock_442 -> leaf_449
leaf_449  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function ModeS.replLine(modeS)
   return modeS.repl_top + #modeS.txtbuf.lines - 1
end"]
// END RANK codeblock_442

codeblock_443 -> leaf_450
leaf_450  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function ModeS.printResults(modeS, results, new)
   local rainbuf = {}
   write(a.cursor.hide())
   modeS:clearResults()
   local row = new and modeS.repl_top + 1 or modeS:replLine() + 1
   modeS:write(a.rc(row, modeS.l_margin))
   for i = 1, results.n do
      if results.frozen then
         rainbuf[i] = results[i]
      else
         rainbuf[i] = ts(results[i])
      end
   end
   modeS:write(concat(rainbuf, '   '))
   write(a.cursor.show())
end"]
// END RANK codeblock_443

codeblock_444 -> leaf_451
leaf_451  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function ModeS.prompt(modeS)
   write(a.jump(modeS.repl_top, 1) .. \"👉 \")
end"]
// END RANK codeblock_444

section_6 -> { header_452 prose_453 prose_454 codeblock_455 prose_456 codeblock_457 section_458 section_459 section_460 section_461}
{rank=same; header_452 prose_453 prose_454 codeblock_455 prose_456 codeblock_457 section_458 section_459 section_460 section_461}

header_452 [label="2 : act"]

prose_453 [label="prose"]

prose_454 [label="prose"]

codeblock_455 [label="code block 365-397"]

prose_456 [label="prose"]

codeblock_457 [label="code block 401-405"]

section_458 [label="section: 408-414"]

section_459 [label="section: 415-496"]

section_460 [label="section: 497-517"]

section_461 [label="section: 518-587"]


// END RANK section_6

header_452 -> leaf_462
leaf_462  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** act"]
// END RANK header_452

prose_453 -> { raw_463 prespace_464 literal_465 raw_466 prespace_467 literal_468 raw_469 prespace_470 literal_471 raw_472 prespace_473 literal_474 raw_475}
{rank=same; raw_463 prespace_464 literal_465 raw_466 prespace_467 literal_468 raw_469 prespace_470 literal_471 raw_472 prespace_473 literal_474 raw_475}

raw_463 [label="raw"]

prespace_464 [label="prespace"]

literal_465 [label="literal"]

raw_466 [label="raw"]

prespace_467 [label="prespace"]

literal_468 [label="literal"]

raw_469 [label="raw"]

prespace_470 [label="prespace"]

literal_471 [label="literal"]

raw_472 [label="raw"]

prespace_473 [label="prespace"]

literal_474 [label="literal"]

raw_475 [label="raw"]


// END RANK prose_453

raw_463 -> leaf_476
leaf_476  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

 "]
// END RANK raw_463

prespace_464 -> leaf_477
leaf_477  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_464

literal_465 -> leaf_478
leaf_478  [color=Gray,shape=rectangle,fontname=Inconsolata,label="act"]
// END RANK literal_465

raw_466 -> leaf_479
leaf_479  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" simply dispatches. Note that our common interfaces is"]
// END RANK raw_466

prespace_467 -> leaf_480
leaf_480  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_467

literal_468 -> leaf_481
leaf_481  [color=Gray,shape=rectangle,fontname=Inconsolata,label="method(modeS, category, value)"]
// END RANK literal_468

raw_469 -> leaf_482
leaf_482  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", we need to distinguish betwen the tuple"]
// END RANK raw_469

prespace_470 -> leaf_483
leaf_483  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_470

literal_471 -> leaf_484
leaf_484  [color=Gray,shape=rectangle,fontname=Inconsolata,label="(\"INSERT\", \"SHIFT-LEFT\")"]
// END RANK literal_471

raw_472 -> leaf_485
leaf_485  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" (which could arrive from copy-paste) and"]
// END RANK raw_472

prespace_473 -> leaf_486
leaf_486  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_473

literal_474 -> leaf_487
leaf_487  [color=Gray,shape=rectangle,fontname=Inconsolata,label="(\"NAV\", \"SHIFT-LEFT\")"]
// END RANK literal_474

raw_475 -> leaf_488
leaf_488  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and preserve information for our fall-through method.
"]
// END RANK raw_475

prose_454 -> { prespace_489 literal_490 raw_491}
{rank=same; prespace_489 literal_490 raw_491}

prespace_489 [label="prespace"]

literal_490 [label="literal"]

raw_491 [label="raw"]


// END RANK prose_454

prespace_489 -> leaf_492
leaf_492  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_489

literal_490 -> leaf_493
leaf_493  [color=Gray,shape=rectangle,fontname=Inconsolata,label="act"]
// END RANK literal_490

raw_491 -> leaf_494
leaf_494  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" always succeeds, meaning we need some metatable action to absorb and
log anything unexpected.
"]
// END RANK raw_491

codeblock_455 -> leaf_495
leaf_495  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local assertfmt = assert(core.assertfmt)

function ModeS.act(modeS, category, value)
   assertfmt(modeS.modes[category], \"no category %s in modeS\", category)
   -- catch special handlers first
   if modeS.special[value] then
      return modeS.special[value](modeS, category, value)
   end
   icon_paint(category, value)

   -- Dispatch on value if possible
   if modeS.modes[category][value] then
      modeS.modes[category][value](modeS, category, value)

   -- otherwise fall back:
   elseif category == \"ASCII\" then
      -- hard coded for now
      modeS:insert(category, value)
   elseif category == \"NAV\" then
      if modeS.modes.NAV[value] then
         modeS.modes.NAV[value](modeS, category, value)
      else
         icon_paint(\"NYI\", \"NAV::\" .. value)
      end
   elseif category == \"MOUSE\" then
      colwrite(pr_mouse(value), STATCOL, STAT_RUN)
   else
      icon_paint(\"NYI\", category .. \":\" .. value)
   end
   return modeS:paint_txtbuf()
end"]
// END RANK codeblock_455

prose_456 -> { raw_496 prespace_497 literal_498 raw_499}
{rank=same; raw_496 prespace_497 literal_498 raw_499}

raw_496 [label="raw"]

prespace_497 [label="prespace"]

literal_498 [label="literal"]

raw_499 [label="raw"]


// END RANK prose_456

raw_496 -> leaf_500
leaf_500  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
To keep"]
// END RANK raw_496

prespace_497 -> leaf_501
leaf_501  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_497

literal_498 -> leaf_502
leaf_502  [color=Gray,shape=rectangle,fontname=Inconsolata,label="act"]
// END RANK literal_498

raw_499 -> leaf_503
leaf_503  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" itself replaceable, we look it up on each call:
"]
// END RANK raw_499

codeblock_457 -> leaf_504
leaf_504  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function ModeS.__call(modeS, category, value)
  return modeS:act(category, value)
end"]
// END RANK codeblock_457

section_458 -> { header_505 prose_506 prose_507}
{rank=same; header_505 prose_506 prose_507}

header_505 [label="3 : ASCII"]

prose_506 [label="prose"]

prose_507 [label="prose"]


// END RANK section_458

header_505 -> leaf_508
leaf_508  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** ASCII"]
// END RANK header_505

prose_506 -> { raw_509}
{rank=same; raw_509}

raw_509 [label="raw"]


// END RANK prose_506

raw_509 -> leaf_510
leaf_510  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Any printable 7 bit utf-8 sequence.
"]
// END RANK raw_509

prose_507 -> { raw_511}
{rank=same; raw_511}

raw_511 [label="raw"]


// END RANK prose_507

raw_511 -> leaf_512
leaf_512  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Currently just self-inserts, but watch this space...

"]
// END RANK raw_511

section_459 -> { header_513 prose_514 codeblock_515}
{rank=same; header_513 prose_514 codeblock_515}

header_513 [label="3 : NAV"]

prose_514 [label="prose"]

codeblock_515 [label="code block 417-494"]


// END RANK section_459

header_513 -> leaf_516
leaf_516  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** NAV"]
// END RANK header_513

prose_514 -> { raw_517}
{rank=same; raw_517}

raw_517 [label="raw"]


// END RANK prose_514

raw_517 -> leaf_518
leaf_518  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_517

codeblock_515 -> leaf_519
leaf_519  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local up1, down1 = a.jump.up(), a.jump.down()

function NAV.UP(modeS, category, value)
   local inline = modeS.txtbuf:up()
   if not inline then
      local prev_result, linestash
      if tostring(modeS.txtbuf) ~= \"\"
         and modeS.hist.cursor > #modeS.hist then
         linestash = modeS.txtbuf
      end
      modeS.txtbuf, prev_result = modeS.hist:prev()
      if linestash then
         modeS.hist:append(linestash)
      end
      modeS:clearResults()
      if prev_result then
         modeS:printResults(prev_result)
      end
   else
      write(up1)
   end
   return modeS
end

function NAV.DOWN(modeS, category, value)
   local inline = modeS.txtbuf:down()
   if not inline then
      local next_p, next_result
      modeS.txtbuf, next_result, next_p = modeS.hist:next()
      if next_p then
         modeS.txtbuf = Txtbuf()
      end
      modeS:clearResults()
      if next_result then
         modeS:printResults(next_result)
      end
   else
      write(down1)
   end
   return modeS
end

function NAV.LEFT(modeS, category, value)
   return modeS.txtbuf:left()
end

function NAV.RIGHT(modeS, category, value)
   return modeS.txtbuf:right()
end

function NAV.RETURN(modeS, category, value)
   -- eval or split line
   local eval = modeS.txtbuf:nl()
   if eval then
     modeS:nl()
     local more = modeS:eval()
     if not more then
       modeS.txtbuf = Txtbuf()
     end
     modeS.hist.cursor = modeS.hist.cursor + 1
   end
end

function NAV.BACKSPACE(modeS, category, value)
   local shrunk =  modeS.txtbuf:d_back()
   if shrunk then
      write(a.stash())
      write(a.rc(modeS:replLine() + 1, 1))
      write(a.erase.line())
      write(a.pop())
   end
end

function NAV.DELETE(modeS, category, value)
   return modeS.txtbuf:d_fwd()
end"]
// END RANK codeblock_515

section_460 -> { header_520 prose_521 prose_522 codeblock_523}
{rank=same; header_520 prose_521 prose_522 codeblock_523}

header_520 [label="3 : CTRL"]

prose_521 [label="prose"]

prose_522 [label="prose"]

codeblock_523 [label="code block 503-515"]


// END RANK section_460

header_520 -> leaf_524
leaf_524  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** CTRL"]
// END RANK header_520

prose_521 -> { raw_525}
{rank=same; raw_525}

raw_525 [label="raw"]


// END RANK prose_521

raw_525 -> leaf_526
leaf_526  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Many/most of these will be re-used as e.g. \"^\" and \"$\" in vim mode.
"]
// END RANK raw_525

prose_522 -> { raw_527}
{rank=same; raw_527}

raw_527 [label="raw"]


// END RANK prose_522

raw_527 -> leaf_528
leaf_528  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Thus we will declare them as bare functions and assign them to slots.
"]
// END RANK raw_527

codeblock_523 -> leaf_529
leaf_529  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function cursor_begin(modeS, category, value)
   modeS.txtbuf.cursor = 1
end

CTRL[\"^A\"] = cursor_begin

local function cursor_end(modeS, category, value)
   modeS.txtbuf.cursor = #modeS.txtbuf.lines[modeS.txtbuf.cur_row] + 1
end

CTRL[\"^E\"] = cursor_end"]
// END RANK codeblock_523

section_461 -> { header_530 prose_531 codeblock_532 codeblock_533 codeblock_534}
{rank=same; header_530 prose_531 codeblock_532 codeblock_533 codeblock_534}

header_530 [label="3 : ModeS:eval()"]

prose_531 [label="prose"]

codeblock_532 [label="code block 521-526"]

codeblock_533 [label="code block 528-532"]

codeblock_534 [label="code block 534-585"]


// END RANK section_461

header_530 -> leaf_535
leaf_535  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** ModeS:eval()"]
// END RANK header_530

prose_531 -> { raw_536}
{rank=same; raw_536}

raw_536 [label="raw"]


// END RANK prose_531

raw_536 -> leaf_537
leaf_537  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

"]
// END RANK raw_536

codeblock_532 -> leaf_538
leaf_538  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function gatherResults(success, ...)
  local n = select('#', ...)
  return success, { n = n, ... }
end"]
// END RANK codeblock_532

codeblock_533 -> leaf_539
leaf_539  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function ModeS.clearResults(modeS)
   write(a.erase.box(modeS.repl_top + 1, 1, modeS.max_row, modeS.r_margin))
end"]
// END RANK codeblock_533

codeblock_534 -> leaf_540
leaf_540  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function ModeS.eval(modeS)
   local chunk = tostring(modeS.txtbuf)

   local success, results
   -- first we prefix return
   local f, err = loadstring('return ' .. chunk, 'REPL')

   if not f then
      -- try again without return
      f, err = loadstring(chunk, 'REPL')
   end
   if not f then
      local head = sub(chunk, 1, 1)
      if head == \"=\" then -- take pity on old-school Lua hackers
         f, err = loadstring('return ' .. sub(chunk,2), 'REPL')
      end -- more special REPL prefix soon: /, ?, >(?)
   end
   if f then
      success, results = gatherResults(xpcall(f, debug.traceback))
      if success then
      -- successful call
         if results.n > 0 then
            modeS:printResults(results)
         else
            modeS:clearResults()
         end
      else
      -- error
         write(a.cursor.hide())
         modeS:clearResults()
         modeS:write(results[1])
      end
   else
      if err:match \"'<eof>'$\" then
         -- Lua expects some more input, advance the txtbuf
         modeS.txtbuf:advance()
         write(a.col(1) .. \"...\")
         return true
      else
         modeS:clearResults()
         modeS:write(err)
         -- pass through to default.
      end
   end

   modeS.hist:append(modeS.txtbuf, results, success)
   modeS.hist.cursor = #modeS.hist
   if success then modeS.hist.results[modeS.txtbuf] = results end
   modeS:prompt()
end"]
// END RANK codeblock_534

section_7 -> { header_541 prose_542 codeblock_543 codeblock_544}
{rank=same; header_541 prose_542 codeblock_543 codeblock_544}

header_541 [label="2 : new"]

prose_542 [label="prose"]

codeblock_543 [label="code block 592-607"]

codeblock_544 [label="code block 609-611"]


// END RANK section_7

header_541 -> leaf_545
leaf_545  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** new"]
// END RANK header_541

prose_542 -> { raw_546 prespace_547 literal_548 raw_549}
{rank=same; raw_546 prespace_547 literal_548 raw_549}

raw_546 [label="raw"]

prespace_547 [label="prespace"]

literal_548 [label="literal"]

raw_549 [label="raw"]


// END RANK prose_542

raw_546 -> leaf_550
leaf_550  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This should be configurable via"]
// END RANK raw_546

prespace_547 -> leaf_551
leaf_551  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_547

literal_548 -> leaf_552
leaf_552  [color=Gray,shape=rectangle,fontname=Inconsolata,label="cfg"]
// END RANK literal_548

raw_549 -> leaf_553
leaf_553  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_549

codeblock_543 -> leaf_554
leaf_554  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function new(cfg)
  local modeS = meta(ModeS)
  modeS.txtbuf = Txtbuf()
  modeS.hist  = Historian()
  modeS.hist.cursor = #modeS.hist + 1
  -- this will be more complex but
  modeS.l_margin = 4
  modeS.r_margin = 80
  modeS.row = 2
  modeS.repl_top  = ModeS.REPL_LINE
  return modeS
end

ModeS.idEst = new"]
// END RANK codeblock_543

codeblock_544 -> leaf_555
leaf_555  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return new"]
// END RANK codeblock_544


}
