digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 615"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-566"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 section_5 section_6 section_7}
{rank=same; header_2 prose_3 prose_4 section_5 section_6 section_7}

header_2 [label="1 : Modeselektor"]

prose_3 [label="prose"]

prose_4 [label="prose"]

section_5 [label="section: 12-282"]

section_6 [label="section: 341-495"]

section_7 [label="section: 567-615"]


// END RANK section_1

header_2 -> leaf_8
leaf_8  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Modeselektor"]
// END RANK header_2

prose_3 -> { raw_9 prespace_10 literal_11 raw_12}
{rank=same; raw_9 prespace_10 literal_11 raw_12}

raw_9 [label="raw"]

prespace_10 [label="prespace"]

literal_11 [label="literal"]

raw_12 [label="raw"]


// END RANK prose_3

raw_9 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK raw_9

prespace_10 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_10

literal_11 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label="femto"]
// END RANK literal_11

raw_12 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" will hold all state for an terminal session, including setup of io,
the main event loop, teardown and exuent.  Soon, we will encapsulate that,
making the library re-entrant.
"]
// END RANK raw_12

prose_4 -> { prespace_17 literal_18 raw_19 prespace_20 literal_21 raw_22 prespace_23 literal_24 raw_25}
{rank=same; prespace_17 literal_18 raw_19 prespace_20 literal_21 raw_22 prespace_23 literal_24 raw_25}

prespace_17 [label="prespace"]

literal_18 [label="literal"]

raw_19 [label="raw"]

prespace_20 [label="prespace"]

literal_21 [label="literal"]

raw_22 [label="raw"]

prespace_23 [label="prespace"]

literal_24 [label="literal"]

raw_25 [label="raw"]


// END RANK prose_4

prespace_17 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_17

literal_18 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_18

raw_19 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is the modal interpreter for the repl language, which becomes
the core of"]
// END RANK raw_19

prespace_20 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_20

literal_21 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label="ed"]
// END RANK literal_21

raw_22 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  This is a glorified lookup table with a state switch and
a pointer to the"]
// END RANK raw_22

prespace_23 -> leaf_32
leaf_32  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_23

literal_24 -> leaf_33
leaf_33  [color=Gray,shape=rectangle,fontname=Inconsolata,label="femto"]
// END RANK literal_24

raw_25 -> leaf_34
leaf_34  [color=Gray,shape=rectangle,fontname=Inconsolata,label="cell we're operating on.

"]
// END RANK raw_25

section_5 -> { header_35 prose_36 prose_37 prose_38 prose_39 prose_40 prose_41 prose_42 prose_43 prose_44 prose_45 prose_46 prose_47 prose_48 prose_49 prose_50 prose_51 prose_52 section_53 section_54 section_55 section_56 section_57 section_58 section_59}
{rank=same; header_35 prose_36 prose_37 prose_38 prose_39 prose_40 prose_41 prose_42 prose_43 prose_44 prose_45 prose_46 prose_47 prose_48 prose_49 prose_50 prose_51 prose_52 section_53 section_54 section_55 section_56 section_57 section_58 section_59}

header_35 [label="2 : Design"]

prose_36 [label="prose"]

prose_37 [label="prose"]

prose_38 [label="prose"]

prose_39 [label="prose"]

prose_40 [label="prose"]

prose_41 [label="prose"]

prose_42 [label="prose"]

prose_43 [label="prose"]

prose_44 [label="prose"]

prose_45 [label="prose"]

prose_46 [label="prose"]

prose_47 [label="prose"]

prose_48 [label="prose"]

prose_49 [label="prose"]

prose_50 [label="prose"]

prose_51 [label="prose"]

prose_52 [label="prose"]

section_53 [label="section: 84-95"]

section_54 [label="section: 96-119"]

section_55 [label="section: 120-183"]

section_56 [label="section: 184-194"]

section_57 [label="section: 195-267"]

section_58 [label="section: 268-282"]

section_59 [label="section: 283-340"]


// END RANK section_5

header_35 -> leaf_60
leaf_60  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Design"]
// END RANK header_35

prose_36 -> { raw_61 prespace_62 literal_63 raw_64 prespace_65 literal_66 raw_67}
{rank=same; raw_61 prespace_62 literal_63 raw_64 prespace_65 literal_66 raw_67}

raw_61 [label="raw"]

prespace_62 [label="prespace"]

literal_63 [label="literal"]

raw_64 [label="raw"]

prespace_65 [label="prespace"]

literal_66 [label="literal"]

raw_67 [label="raw"]


// END RANK prose_36

raw_61 -> leaf_68
leaf_68  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

 "]
// END RANK raw_61

prespace_62 -> leaf_69
leaf_69  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_62

literal_63 -> leaf_70
leaf_70  [color=Gray,shape=rectangle,fontname=Inconsolata,label="femto"]
// END RANK literal_63

raw_64 -> leaf_71
leaf_71  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" passes keystrokes as messages to"]
// END RANK raw_64

prespace_65 -> leaf_72
leaf_72  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_65

literal_66 -> leaf_73
leaf_73  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_66

raw_67 -> leaf_74
leaf_74  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  It does no writes
to stdout at all.  It is smart enough to categorize and parse various device
reports, but has no knowledge of why those reports were requested.
"]
// END RANK raw_67

prose_37 -> { prespace_75 literal_76 raw_77}
{rank=same; prespace_75 literal_76 raw_77}

prespace_75 [label="prespace"]

literal_76 [label="literal"]

raw_77 [label="raw"]


// END RANK prose_37

prespace_75 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_75

literal_76 -> leaf_79
leaf_79  [color=Gray,shape=rectangle,fontname=Inconsolata,label="femto"]
// END RANK literal_76

raw_77 -> leaf_80
leaf_80  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" runs the event loop, so all other members are pulled in as modules.
"]
// END RANK raw_77

prose_38 -> { prespace_81 literal_82 raw_83 prespace_84 literal_85 raw_86}
{rank=same; prespace_81 literal_82 raw_83 prespace_84 literal_85 raw_86}

prespace_81 [label="prespace"]

literal_82 [label="literal"]

raw_83 [label="raw"]

prespace_84 [label="prespace"]

literal_85 [label="literal"]

raw_86 [label="raw"]


// END RANK prose_38

prespace_81 -> leaf_87
leaf_87  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_81

literal_82 -> leaf_88
leaf_88  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_82

raw_83 -> leaf_89
leaf_89  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" takes care of system-level housekeeping: opening files
and sockets, keeping command history, fuzzy completion, and has its own eval
loop off the main track.  For evaluating lines, it will call a small executor,
so that in a little while we can put the user program in its own"]
// END RANK raw_83

prespace_84 -> leaf_90
leaf_90  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_84

literal_85 -> leaf_91
leaf_91  [color=Gray,shape=rectangle,fontname=Inconsolata,label="LuaL_state"]
// END RANK literal_85

raw_86 -> leaf_92
leaf_92  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_86

prose_39 -> { raw_93 prespace_94 literal_95 raw_96}
{rank=same; raw_93 prespace_94 literal_95 raw_96}

raw_93 [label="raw"]

prespace_94 [label="prespace"]

literal_95 [label="literal"]

raw_96 [label="raw"]


// END RANK prose_39

raw_93 -> leaf_97
leaf_97  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This is both good practice, and absolutely necessary if we are to REPL other"]
// END RANK raw_93

prespace_94 -> leaf_98
leaf_98  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_94

literal_95 -> leaf_99
leaf_99  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bridge"]
// END RANK literal_95

raw_96 -> leaf_100
leaf_100  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" programs, each of which has its own event loop.
"]
// END RANK raw_96

prose_40 -> { raw_101 prespace_102 literal_103 raw_104}
{rank=same; raw_101 prespace_102 literal_103 raw_104}

raw_101 [label="raw"]

prespace_102 [label="prespace"]

literal_103 [label="literal"]

raw_104 [label="raw"]


// END RANK prose_40

raw_101 -> leaf_105
leaf_105  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The implementation is essentially a VM.  Category and value are
successively looked up in jump tables and the method applied with the"]
// END RANK raw_101

prespace_102 -> leaf_106
leaf_106  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_102

literal_103 -> leaf_107
leaf_107  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeS"]
// END RANK literal_103

raw_104 -> leaf_108
leaf_108  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
instance as the first argument.
"]
// END RANK raw_104

prose_41 -> { raw_109}
{rank=same; raw_109}

raw_109 [label="raw"]


// END RANK prose_41

raw_109 -> leaf_110
leaf_110  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The state machine has to represent two sorts of state: the mode we're
operating in, and a buffer of commands.  Our mode engine is modeled after
emacs: rather than have some kind of flag that can be set to \"insert\",
\"navigate\", \"command\", or \"visual\", these will be modeled as swiching the
pointer to jump tables.  If a command needs to know which mode it's in, this
can be done with pointer comparison.
"]
// END RANK raw_109

prose_42 -> { raw_111 prespace_112 literal_113 raw_114 prespace_115 literal_116 raw_117 prespace_118 literal_119 raw_120 prespace_121 literal_122 raw_123}
{rank=same; raw_111 prespace_112 literal_113 raw_114 prespace_115 literal_116 raw_117 prespace_118 literal_119 raw_120 prespace_121 literal_122 raw_123}

raw_111 [label="raw"]

prespace_112 [label="prespace"]

literal_113 [label="literal"]

raw_114 [label="raw"]

prespace_115 [label="prespace"]

literal_116 [label="literal"]

raw_117 [label="raw"]

prespace_118 [label="prespace"]

literal_119 [label="literal"]

raw_120 [label="raw"]

prespace_121 [label="prespace"]

literal_122 [label="literal"]

raw_123 [label="raw"]


// END RANK prose_42

raw_111 -> leaf_124
leaf_124  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We're starting with"]
// END RANK raw_111

prespace_112 -> leaf_125
leaf_125  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_112

literal_113 -> leaf_126
leaf_126  [color=Gray,shape=rectangle,fontname=Inconsolata,label="vi"]
// END RANK literal_113

raw_114 -> leaf_127
leaf_127  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" mode and"]
// END RANK raw_114

prespace_115 -> leaf_128
leaf_128  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_115

literal_116 -> leaf_129
leaf_129  [color=Gray,shape=rectangle,fontname=Inconsolata,label="nerf"]
// END RANK literal_116

raw_117 -> leaf_130
leaf_130  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" mode, which is a lightweight"]
// END RANK raw_117

prespace_118 -> leaf_131
leaf_131  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_118

literal_119 -> leaf_132
leaf_132  [color=Gray,shape=rectangle,fontname=Inconsolata,label="readline"]
// END RANK literal_119

raw_120 -> leaf_133
leaf_133  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" implementation that won't use the command buffer.  Issuing a
command like"]
// END RANK raw_120

prespace_121 -> leaf_134
leaf_134  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_121

literal_122 -> leaf_135
leaf_135  [color=Gray,shape=rectangle,fontname=Inconsolata,label="d3w"]
// END RANK literal_122

raw_123 -> leaf_136
leaf_136  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" requires a simple command buffer.
"]
// END RANK raw_123

prose_43 -> { raw_137 prespace_138 literal_139 raw_140 prespace_141 literal_142 raw_143}
{rank=same; raw_137 prespace_138 literal_139 raw_140 prespace_141 literal_142 raw_143}

raw_137 [label="raw"]

prespace_138 [label="prespace"]

literal_139 [label="literal"]

raw_140 [label="raw"]

prespace_141 [label="prespace"]

literal_142 [label="literal"]

raw_143 [label="raw"]


// END RANK prose_43

raw_137 -> leaf_144
leaf_144  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The syntax can't be tied to the semantics in any tighly-coupled way. I intend
to support"]
// END RANK raw_137

prespace_138 -> leaf_145
leaf_145  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_138

literal_139 -> leaf_146
leaf_146  [color=Gray,shape=rectangle,fontname=Inconsolata,label="kakoune"]
// END RANK literal_139

raw_140 -> leaf_147
leaf_147  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" syntax as soon as possible; there you would say"]
// END RANK raw_140

prespace_141 -> leaf_148
leaf_148  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_141

literal_142 -> leaf_149
leaf_149  [color=Gray,shape=rectangle,fontname=Inconsolata,label="w3d"]
// END RANK literal_142

raw_143 -> leaf_150
leaf_150  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_143

prose_44 -> { raw_151 prespace_152 literal_153 raw_154 prespace_155 literal_156 raw_157}
{rank=same; raw_151 prespace_152 literal_153 raw_154 prespace_155 literal_156 raw_157}

raw_151 [label="raw"]

prespace_152 [label="prespace"]

literal_153 [label="literal"]

raw_154 [label="raw"]

prespace_155 [label="prespace"]

literal_156 [label="literal"]

raw_157 [label="raw"]


// END RANK prose_44

raw_151 -> leaf_158
leaf_158  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This implies that the commands can't be aware of the buffer; because"]
// END RANK raw_151

prespace_152 -> leaf_159
leaf_159  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_152

literal_153 -> leaf_160
leaf_160  [color=Gray,shape=rectangle,fontname=Inconsolata,label="d3w"]
// END RANK literal_153

raw_154 -> leaf_161
leaf_161  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
and"]
// END RANK raw_154

prespace_155 -> leaf_162
leaf_162  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_155

literal_156 -> leaf_163
leaf_163  [color=Gray,shape=rectangle,fontname=Inconsolata,label="w3d"]
// END RANK literal_156

raw_157 -> leaf_164
leaf_164  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" are two ways of saying the same thing, they should end in an
identical method call.
"]
// END RANK raw_157

prose_45 -> { raw_165}
{rank=same; raw_165}

raw_165 [label="raw"]


// END RANK prose_45

raw_165 -> leaf_166
leaf_166  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This means when the time comes we handle it with a secondary dispatch layer.
"]
// END RANK raw_165

prose_46 -> { raw_167}
{rank=same; raw_167}

raw_167 [label="raw"]


// END RANK prose_46

raw_167 -> leaf_168
leaf_168  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
There really are effectively arbitrary levels of indirection possible in an
editor.  This is why we must be absolutely consistent about everything
receiving the same tuple (modeS, category, value).
"]
// END RANK raw_167

prose_47 -> { raw_169 prespace_170 literal_171 raw_172 prespace_173 literal_174 raw_175 prespace_176 literal_177 raw_178}
{rank=same; raw_169 prespace_170 literal_171 raw_172 prespace_173 literal_174 raw_175 prespace_176 literal_177 raw_178}

raw_169 [label="raw"]

prespace_170 [label="prespace"]

literal_171 [label="literal"]

raw_172 [label="raw"]

prespace_173 [label="prespace"]

literal_174 [label="literal"]

raw_175 [label="raw"]

prespace_176 [label="prespace"]

literal_177 [label="literal"]

raw_178 [label="raw"]


// END RANK prose_47

raw_169 -> leaf_179
leaf_179  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
They must also have the same return type, with is either"]
// END RANK raw_169

prespace_170 -> leaf_180
leaf_180  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_170

literal_171 -> leaf_181
leaf_181  [color=Gray,shape=rectangle,fontname=Inconsolata,label="true"]
// END RANK literal_171

raw_172 -> leaf_182
leaf_182  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" or"]
// END RANK raw_172

prespace_173 -> leaf_183
leaf_183  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_173

literal_174 -> leaf_184
leaf_184  [color=Gray,shape=rectangle,fontname=Inconsolata,label="false, err"]
// END RANK literal_174

raw_175 -> leaf_185
leaf_185  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  where"]
// END RANK raw_175

prespace_176 -> leaf_186
leaf_186  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_176

literal_177 -> leaf_187
leaf_187  [color=Gray,shape=rectangle,fontname=Inconsolata,label="err"]
// END RANK literal_177

raw_178 -> leaf_188
leaf_188  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is an error object which may be a primitive string.
"]
// END RANK raw_178

prose_48 -> { prespace_189 literal_190 raw_191 prespace_192 literal_193 raw_194 prespace_195 literal_196 raw_197 prespace_198 literal_199 raw_200 prespace_201 literal_202 raw_203}
{rank=same; prespace_189 literal_190 raw_191 prespace_192 literal_193 raw_194 prespace_195 literal_196 raw_197 prespace_198 literal_199 raw_200 prespace_201 literal_202 raw_203}

prespace_189 [label="prespace"]

literal_190 [label="literal"]

raw_191 [label="raw"]

prespace_192 [label="prespace"]

literal_193 [label="literal"]

raw_194 [label="raw"]

prespace_195 [label="prespace"]

literal_196 [label="literal"]

raw_197 [label="raw"]

prespace_198 [label="prespace"]

literal_199 [label="literal"]

raw_200 [label="raw"]

prespace_201 [label="prespace"]

literal_202 [label="literal"]

raw_203 [label="raw"]


// END RANK prose_48

prespace_189 -> leaf_204
leaf_204  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_189

literal_190 -> leaf_205
leaf_205  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_190

raw_191 -> leaf_206
leaf_206  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" passes any edit or movement commands to an internally-owned"]
// END RANK raw_191

prespace_192 -> leaf_207
leaf_207  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_192

literal_193 -> leaf_208
leaf_208  [color=Gray,shape=rectangle,fontname=Inconsolata,label="txtbuf"]
// END RANK literal_193

raw_194 -> leaf_209
leaf_209  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", which keeps all modeling of the line. "]
// END RANK raw_194

prespace_195 -> leaf_210
leaf_210  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_195

literal_196 -> leaf_211
leaf_211  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_196

raw_197 -> leaf_212
leaf_212  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" decides when
to repaint the screen, calling"]
// END RANK raw_197

prespace_198 -> leaf_213
leaf_213  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_198

literal_199 -> leaf_214
leaf_214  [color=Gray,shape=rectangle,fontname=Inconsolata,label="rainbuf"]
// END RANK literal_199

raw_200 -> leaf_215
leaf_215  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" with a region of"]
// END RANK raw_200

prespace_201 -> leaf_216
leaf_216  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_201

literal_202 -> leaf_217
leaf_217  [color=Gray,shape=rectangle,fontname=Inconsolata,label="txtbuf"]
// END RANK literal_202

raw_203 -> leaf_218
leaf_218  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and
instructions as to how to paint it.
"]
// END RANK raw_203

prose_49 -> { raw_219 prespace_220 literal_221 raw_222 prespace_223 literal_224 raw_225 prespace_226 literal_227 raw_228}
{rank=same; raw_219 prespace_220 literal_221 raw_222 prespace_223 literal_224 raw_225 prespace_226 literal_227 raw_228}

raw_219 [label="raw"]

prespace_220 [label="prespace"]

literal_221 [label="literal"]

raw_222 [label="raw"]

prespace_223 [label="prespace"]

literal_224 [label="literal"]

raw_225 [label="raw"]

prespace_226 [label="prespace"]

literal_227 [label="literal"]

raw_228 [label="raw"]


// END RANK prose_49

raw_219 -> leaf_229
leaf_229  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
There is one"]
// END RANK raw_219

prespace_220 -> leaf_230
leaf_230  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_220

literal_221 -> leaf_231
leaf_231  [color=Gray,shape=rectangle,fontname=Inconsolata,label="deck"]
// END RANK literal_221

raw_222 -> leaf_232
leaf_232  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" instance member per screen, which tiles the available
space. "]
// END RANK raw_222

prespace_223 -> leaf_233
leaf_233  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_223

literal_224 -> leaf_234
leaf_234  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_224

raw_225 -> leaf_235
leaf_235  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is the writer, and"]
// END RANK raw_225

prespace_226 -> leaf_236
leaf_236  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_226

literal_227 -> leaf_237
leaf_237  [color=Gray,shape=rectangle,fontname=Inconsolata,label="rainbuf"]
// END RANK literal_227

raw_228 -> leaf_238
leaf_238  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" holds a pointer to the
table for read access.
"]
// END RANK raw_228

prose_50 -> { raw_239 prespace_240 literal_241 raw_242 prespace_243 literal_244 raw_245}
{rank=same; raw_239 prespace_240 literal_241 raw_242 prespace_243 literal_244 raw_245}

raw_239 [label="raw"]

prespace_240 [label="prespace"]

literal_241 [label="literal"]

raw_242 [label="raw"]

prespace_243 [label="prespace"]

literal_244 [label="literal"]

raw_245 [label="raw"]


// END RANK prose_50

raw_239 -> leaf_246
leaf_246  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
When we have our fancy parse engine and quipu structure, txtbuf will call"]
// END RANK raw_239

prespace_240 -> leaf_247
leaf_247  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_240

literal_241 -> leaf_248
leaf_248  [color=Gray,shape=rectangle,fontname=Inconsolata,label="comb"]
// END RANK literal_241

raw_242 -> leaf_249
leaf_249  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" to redecorate the syntax tree before passing it to"]
// END RANK raw_242

prespace_243 -> leaf_250
leaf_250  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_243

literal_244 -> leaf_251
leaf_251  [color=Gray,shape=rectangle,fontname=Inconsolata,label="rainbuf"]
// END RANK literal_244

raw_245 -> leaf_252
leaf_252  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" for
markup.  At the moment I'm just going to write some crude lexers, which
will be more than enough for Clu and Lua, which have straightforward syntax.
"]
// END RANK raw_245

prose_51 -> { raw_253 prespace_254 literal_255 raw_256 prespace_257 literal_258 raw_259}
{rank=same; raw_253 prespace_254 literal_255 raw_256 prespace_257 literal_258 raw_259}

raw_253 [label="raw"]

prespace_254 [label="prespace"]

literal_255 [label="literal"]

raw_256 [label="raw"]

prespace_257 [label="prespace"]

literal_258 [label="literal"]

raw_259 [label="raw"]


// END RANK prose_51

raw_253 -> leaf_260
leaf_260  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
An intermediate step could just squeeze the txtbuf into a string, parse it
with"]
// END RANK raw_253

prespace_254 -> leaf_261
leaf_261  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_254

literal_255 -> leaf_262
leaf_262  [color=Gray,shape=rectangle,fontname=Inconsolata,label="esplalier"]
// END RANK literal_255

raw_256 -> leaf_263
leaf_263  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and emit a"]
// END RANK raw_256

prespace_257 -> leaf_264
leaf_264  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_257

literal_258 -> leaf_265
leaf_265  [color=Gray,shape=rectangle,fontname=Inconsolata,label="rainbuf"]
// END RANK literal_258

raw_259 -> leaf_266
leaf_266  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" through the usual recursive method
lookup.  The problem isn't speed, not for a REPL, it's not having error
recovery parsing available.
"]
// END RANK raw_259

prose_52 -> { raw_267 prespace_268 literal_269 raw_270}
{rank=same; raw_267 prespace_268 literal_269 raw_270}

raw_267 [label="raw"]

prespace_268 [label="prespace"]

literal_269 [label="literal"]

raw_270 [label="raw"]


// END RANK prose_52

raw_267 -> leaf_271
leaf_271  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I will likely content myself with a grammar that kicks in when the user
presses return.  I'll want that to perform rewrites (such as removing
outer-level"]
// END RANK raw_267

prespace_268 -> leaf_272
leaf_272  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_268

literal_269 -> leaf_273
leaf_273  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local"]
// END RANK literal_269

raw_270 -> leaf_274
leaf_274  [color=Gray,shape=rectangle,fontname=Inconsolata,label="s to facilicate copy-pasting) and keep the readline
grammar from becoming too ad-hoc.

"]
// END RANK raw_270

section_53 -> { header_275 prose_276 codeblock_277}
{rank=same; header_275 prose_276 codeblock_277}

header_275 [label="4 : asserts"]

prose_276 [label="prose"]

codeblock_277 [label="code block 89-93"]


// END RANK section_53

header_275 -> leaf_278
leaf_278  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** asserts"]
// END RANK header_275

prose_276 -> { raw_279 prespace_280 literal_281 raw_282 prespace_283 literal_284 raw_285}
{rank=same; raw_279 prespace_280 literal_281 raw_282 prespace_283 literal_284 raw_285}

raw_279 [label="raw"]

prespace_280 [label="prespace"]

literal_281 [label="literal"]

raw_282 [label="raw"]

prespace_283 [label="prespace"]

literal_284 [label="literal"]

raw_285 [label="raw"]


// END RANK prose_276

raw_279 -> leaf_286
leaf_286  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  There is little sense running"]
// END RANK raw_279

prespace_280 -> leaf_287
leaf_287  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_280

literal_281 -> leaf_288
leaf_288  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_281

raw_282 -> leaf_289
leaf_289  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" outside of the"]
// END RANK raw_282

prespace_283 -> leaf_290
leaf_290  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_283

literal_284 -> leaf_291
leaf_291  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bridge"]
// END RANK literal_284

raw_285 -> leaf_292
leaf_292  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
environment.
"]
// END RANK raw_285

codeblock_277 -> leaf_293
leaf_293  [color=Gray,shape=rectangle,fontname=Inconsolata,label="assert(meta, \"must have meta in _G\")
assert(write, \"must have write in _G\")
assert(ts, \"must have ts in _G\")"]
// END RANK codeblock_277

section_54 -> { header_294 prose_295 prose_296 codeblock_297 codeblock_298}
{rank=same; header_294 prose_295 prose_296 codeblock_297 codeblock_298}

header_294 [label="4 : includes"]

prose_295 [label="prose"]

prose_296 [label="prose"]

codeblock_297 [label="code block 103-113"]

codeblock_298 [label="code block 115-117"]


// END RANK section_54

header_294 -> leaf_299
leaf_299  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** includes"]
// END RANK header_294

prose_295 -> { raw_300}
{rank=same; raw_300}

raw_300 [label="raw"]


// END RANK prose_295

raw_300 -> leaf_301
leaf_301  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The easiest way to go mad in concurrent environments is to share memory.
"]
// END RANK raw_300

prose_296 -> { prespace_302 literal_303 raw_304}
{rank=same; prespace_302 literal_303 raw_304}

prespace_302 [label="prespace"]

literal_303 [label="literal"]

raw_304 [label="raw"]


// END RANK prose_296

prespace_302 -> leaf_305
leaf_305  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_302

literal_303 -> leaf_306
leaf_306  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_303

raw_304 -> leaf_307
leaf_307  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" will own txtbuf, and eventually txtbuf, unless I come up with
a better idea.
"]
// END RANK raw_304

codeblock_297 -> leaf_308
leaf_308  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Txtbuf   = require \"txtbuf\"
local Resbuf    = require \"resbuf\"
local Historian = require \"historian\"
local Lex       = require \"lex\"

local concat         = assert(table.concat)
local sub, gsub, rep = assert(string.sub),
                       assert(string.gsub),
                       assert(string.rep)"]
// END RANK codeblock_297

codeblock_298 -> leaf_309
leaf_309  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local ModeS = meta()"]
// END RANK codeblock_298

section_55 -> { header_310 prose_311 codeblock_312 prose_313 prose_314 prose_315 prose_316 prose_317 codeblock_318 prose_319 codeblock_320 prose_321 codeblock_322 prose_323 codeblock_324}
{rank=same; header_310 prose_311 codeblock_312 prose_313 prose_314 prose_315 prose_316 prose_317 codeblock_318 prose_319 codeblock_320 prose_321 codeblock_322 prose_323 codeblock_324}

header_310 [label="3 : Categories"]

prose_311 [label="prose"]

codeblock_312 [label="code block 124-132"]

prose_313 [label="prose"]

prose_314 [label="prose"]

prose_315 [label="prose"]

prose_316 [label="prose"]

prose_317 [label="prose"]

codeblock_318 [label="code block 153-160"]

prose_319 [label="prose"]

codeblock_320 [label="code block 164-166"]

prose_321 [label="prose"]

codeblock_322 [label="code block 171-173"]

prose_323 [label="prose"]

codeblock_324 [label="code block 177-181"]


// END RANK section_55

header_310 -> leaf_325
leaf_325  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Categories"]
// END RANK header_310

prose_311 -> { raw_326}
{rank=same; raw_326}

raw_326 [label="raw"]


// END RANK prose_311

raw_326 -> leaf_327
leaf_327  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

These are the broad types of event.
"]
// END RANK raw_326

codeblock_312 -> leaf_328
leaf_328  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local ASCII  = meta {}
local NAV    = {}
local CTRL   = {}
local ALT    = {}
local FN     = {}
local MOUSE  = {}
local NYI    = {}"]
// END RANK codeblock_312

prose_313 -> { raw_329 prespace_330 literal_331 raw_332}
{rank=same; raw_329 prespace_330 literal_331 raw_332}

raw_329 [label="raw"]

prespace_330 [label="prespace"]

literal_331 [label="literal"]

raw_332 [label="raw"]


// END RANK prose_313

raw_329 -> leaf_333
leaf_333  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Color schemes are supposed to be one-and-done, and I strongly suspect we
have a"]
// END RANK raw_329

prespace_330 -> leaf_334
leaf_334  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_330

literal_331 -> leaf_335
leaf_335  [color=Gray,shape=rectangle,fontname=Inconsolata,label="__concat"]
// END RANK literal_331

raw_332 -> leaf_336
leaf_336  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" dominated workflow, although I have yet to turn on the
profiler.
"]
// END RANK raw_332

prose_314 -> { raw_337 prespace_338 literal_339 raw_340 prespace_341 literal_342 raw_343}
{rank=same; raw_337 prespace_338 literal_339 raw_340 prespace_341 literal_342 raw_343}

raw_337 [label="raw"]

prespace_338 [label="prespace"]

literal_339 [label="literal"]

raw_340 [label="raw"]

prespace_341 [label="prespace"]

literal_342 [label="literal"]

raw_343 [label="raw"]


// END RANK prose_314

raw_337 -> leaf_344
leaf_344  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Therefore we use reference equality for the"]
// END RANK raw_337

prespace_338 -> leaf_345
leaf_345  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_338

literal_339 -> leaf_346
leaf_346  [color=Gray,shape=rectangle,fontname=Inconsolata,label="color"]
// END RANK literal_339

raw_340 -> leaf_347
leaf_347  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_340

prespace_341 -> leaf_348
leaf_348  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_341

literal_342 -> leaf_349
leaf_349  [color=Gray,shape=rectangle,fontname=Inconsolata,label="hints"]
// END RANK literal_342

raw_343 -> leaf_350
leaf_350  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" tables.
Switching themes is a matter of repopulating those tables.  I intend to
isolate this within an instance so that multiple terminals can each run their
own theme, through a simple 'fat inheritance' method.
"]
// END RANK raw_343

prose_315 -> { prespace_351 literal_352 raw_353 prespace_354 italic_355 raw_356}
{rank=same; prespace_351 literal_352 raw_353 prespace_354 italic_355 raw_356}

prespace_351 [label="prespace"]

literal_352 [label="literal"]

raw_353 [label="raw"]

prespace_354 [label="prespace"]

italic_355 [label="italic"]

raw_356 [label="raw"]


// END RANK prose_315

prespace_351 -> leaf_357
leaf_357  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_351

literal_352 -> leaf_358
leaf_358  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_352

raw_353 -> leaf_359
leaf_359  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is what you might call hypermodal. Everything is isolated in
its own lookup, that is, we use"]
// END RANK raw_353

prespace_354 -> leaf_360
leaf_360  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_354

italic_355 -> leaf_361
leaf_361  [color=Gray,shape=rectangle,fontname=Inconsolata,label="value"]
// END RANK italic_355

raw_356 -> leaf_362
leaf_362  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" equality.  This lets us pass strings
as messages and use jump tables to resolve most things.
"]
// END RANK raw_356

prose_316 -> { raw_363}
{rank=same; raw_363}

raw_363 [label="raw"]


// END RANK prose_316

raw_363 -> leaf_364
leaf_364  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It typically runs at the speed of human fingers and can afford to be much less
efficient than it will be, even before the JIT gets involved.
"]
// END RANK raw_363

prose_317 -> { raw_365 prespace_366 literal_367 raw_368}
{rank=same; raw_365 prespace_366 literal_367 raw_368}

raw_365 [label="raw"]

prespace_366 [label="prespace"]

literal_367 [label="literal"]

raw_368 [label="raw"]


// END RANK prose_317

raw_365 -> leaf_369
leaf_369  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Note also that everything is a method, our dispatch pattern will always
include the"]
// END RANK raw_365

prespace_366 -> leaf_370
leaf_370  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_366

literal_367 -> leaf_371
leaf_371  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeS"]
// END RANK literal_367

raw_368 -> leaf_372
leaf_372  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" instance as the first argument.
"]
// END RANK raw_368

codeblock_318 -> leaf_373
leaf_373  [color=Gray,shape=rectangle,fontname=Inconsolata,label="ModeS.modes = { ASCII  = ASCII,
                NAV    = NAV,
                CTRL   = CTRL,
                ALT    = ALT,
                MOUSE  = MOUSE,
                NYI    = NYI }"]
// END RANK codeblock_318

prose_319 -> { raw_374}
{rank=same; raw_374}

raw_374 [label="raw"]


// END RANK prose_319

raw_374 -> leaf_375
leaf_375  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
With some semi-constants:
"]
// END RANK raw_374

codeblock_320 -> leaf_376
leaf_376  [color=Gray,shape=rectangle,fontname=Inconsolata,label="ModeS.REPL_LINE = 2"]
// END RANK codeblock_320

prose_321 -> { raw_377 prespace_378 literal_379 raw_380}
{rank=same; raw_377 prespace_378 literal_379 raw_380}

raw_377 [label="raw"]

prespace_378 [label="prespace"]

literal_379 [label="literal"]

raw_380 [label="raw"]


// END RANK prose_321

raw_377 -> leaf_381
leaf_381  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Sometimes its useful to briefly override handlers, so we check values
against"]
// END RANK raw_377

prespace_378 -> leaf_382
leaf_382  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_378

literal_379 -> leaf_383
leaf_383  [color=Gray,shape=rectangle,fontname=Inconsolata,label="special"]
// END RANK literal_379

raw_380 -> leaf_384
leaf_384  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" first:
"]
// END RANK raw_380

codeblock_322 -> leaf_385
leaf_385  [color=Gray,shape=rectangle,fontname=Inconsolata,label="ModeS.special = {}"]
// END RANK codeblock_322

prose_323 -> { raw_386}
{rank=same; raw_386}

raw_386 [label="raw"]


// END RANK prose_323

raw_386 -> leaf_387
leaf_387  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A simple pass-through so we can see what we're missing.
"]
// END RANK raw_386

codeblock_324 -> leaf_388
leaf_388  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function ModeS.default(modeS, category, value)
    return write(ts(value))
end"]
// END RANK codeblock_324

section_56 -> { header_389 prose_390 codeblock_391}
{rank=same; header_389 prose_390 codeblock_391}

header_389 [label="3 : self-insert(modeS, category, value)"]

prose_390 [label="prose"]

codeblock_391 [label="code block 188-192"]


// END RANK section_56

header_389 -> leaf_392
leaf_392  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** self-insert(modeS, category, value)"]
// END RANK header_389

prose_390 -> { raw_393}
{rank=same; raw_393}

raw_393 [label="raw"]


// END RANK prose_390

raw_393 -> leaf_394
leaf_394  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Inserts the value into the txtbuf at cursor.
"]
// END RANK raw_393

codeblock_391 -> leaf_395
leaf_395  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function ModeS.insert(modeS, category, value)
    local success =  modeS.txtbuf:insert(value)
end"]
// END RANK codeblock_391

section_57 -> { header_396 prose_397 codeblock_398}
{rank=same; header_396 prose_397 codeblock_398}

header_396 [label="3 : status painter (colwrite)"]

prose_397 [label="prose"]

codeblock_398 [label="code block 199-265"]


// END RANK section_57

header_396 -> leaf_399
leaf_399  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** status painter (colwrite)"]
// END RANK header_396

prose_397 -> { raw_400}
{rank=same; raw_400}

raw_400 [label="raw"]


// END RANK prose_397

raw_400 -> leaf_401
leaf_401  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This is migrating to the paint module
"]
// END RANK raw_400

codeblock_398 -> leaf_402
leaf_402  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local STATCOL = 81
local STAT_TOP = 1
local STAT_RUN = 2

local function colwrite(str, col, row)
   col = col or STATCOL
   row = row or STAT_TOP
   local dash = a.stash()
             .. a.cursor.hide()
             .. a.jump(row, col)
             .. a.erase.right()
             .. str
             .. a.pop()
             .. a.cursor.show()
   write(dash)
end

local STAT_ICON = \"◉ \"

local function tf(bool)
   if bool then
      return ts(\"t\", \"true\")
   else
      return ts(\"f\", \"false\")
   end
end

local function pr_mouse(m)
   return a.magenta(m.button) .. \": \"
      .. a.bright(m.kind) .. \" \"
      .. tf(m.shift) .. \" \"
      .. tf(m.meta) .. \" \"
      .. tf(m.ctrl) .. \" \"
      .. tf(m.moving) .. \" \"
      .. tf(m.scrolling) .. \" \"
      .. a.cyan(m.col) .. \",\" .. a.cyan(m.row)
end

local function mk_paint(fragment, shade)
   return function(category, action)
      return shade(category .. fragment .. action)
   end
end

local act_map = { MOUSE  = pr_mouse,
                  NAV    = mk_paint(\": \", a.italic),
                  CTRL   = mk_paint(\": \", c.field),
                  ALT    = mk_paint(\": \", a.underscore),
                  ASCII  = mk_paint(\": \", c.table),
                  NYI    = mk_paint(\": \", a.red)}

local icon_map = { MOUSE = mk_paint(STAT_ICON, c.userdata),
                   NAV   = mk_paint(STAT_ICON, a.magenta),
                   CTRL  = mk_paint(STAT_ICON, a.blue),
                   ALT   = mk_paint(STAT_ICON, c[\"function\"]),
                   ASCII = mk_paint(STAT_ICON, a.green),
                   NYI   = mk_paint(STAT_ICON .. \"! \", a.red) }

local function icon_paint(category, value)
   assert(icon_map[category], \"icon_paint NYI:\" .. category)
   if category == \"MOUSE\" then
      return colwrite(icon_map[category](\"\", pr_mouse(value)))
   end
   return colwrite(icon_map[category](\"\", ts(value)))
end"]
// END RANK codeblock_398

section_58 -> { header_403 prose_404 codeblock_405}
{rank=same; header_403 prose_404 codeblock_405}

header_403 [label="3 : ModeS:paint_row()"]

prose_404 [label="prose"]

codeblock_405 [label="code block 272-280"]


// END RANK section_58

header_403 -> leaf_406
leaf_406  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** ModeS:paint_row()"]
// END RANK header_403

prose_404 -> { raw_407}
{rank=same; raw_407}

raw_407 [label="raw"]


// END RANK prose_404

raw_407 -> leaf_408
leaf_408  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Does what it says on the label.
"]
// END RANK raw_407

codeblock_405 -> leaf_409
leaf_409  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function ModeS.cur_col(modeS)
   return modeS.txtbuf.cursor + modeS.l_margin - 1
end

function ModeS.nl(modeS)
   write(a.col(modeS.l_margin).. a.jump.down(1))
end"]
// END RANK codeblock_405

section_59 -> { header_410 prose_411 codeblock_412 codeblock_413 codeblock_414 codeblock_415 codeblock_416}
{rank=same; header_410 prose_411 codeblock_412 codeblock_413 codeblock_414 codeblock_415 codeblock_416}

header_410 [label="3 : ModeS:write(str)"]

prose_411 [label="prose"]

codeblock_412 [label="code block 288-297"]

codeblock_413 [label="code block 300-311"]

codeblock_414 [label="code block 313-317"]

codeblock_415 [label="code block 318-332"]

codeblock_416 [label="code block 334-338"]


// END RANK section_59

header_410 -> leaf_417
leaf_417  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** ModeS:write(str)"]
// END RANK header_410

prose_411 -> { raw_418}
{rank=same; raw_418}

raw_418 [label="raw"]


// END RANK prose_411

raw_418 -> leaf_419
leaf_419  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  This will let us phase out the colwrite business in favor of actual tiles in
the terminal.
"]
// END RANK raw_418

codeblock_412 -> leaf_420
leaf_420  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function ModeS.write(modeS, str)
   local nl = a.col(modeS.l_margin) .. a.jump.down(1)
   local phrase, num_subs
   phrase, num_subs = gsub(str, \"\\n\", nl)
   write(a.cursor.hide())
   write(phrase)
   write(a.cursor.show())
end"]
// END RANK codeblock_412

codeblock_413 -> leaf_421
leaf_421  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function ModeS.paint_row(modeS)
   local lb = Lex.lua_thor(tostring(modeS.txtbuf))
   write(a.cursor.hide())
   write(a.erase.box(modeS.repl_top, modeS.l_margin,
                     modeS.repl_line, modeS.r_margin))
   write(a.jump(modeS.repl_top, modeS.l_margin))
   modeS:write(concat(lb))
   write(a.rc(modeS.txtbuf.cur_row + modeS.repl_top - 1, modeS:cur_col()))
   write(a.cursor.show())
end"]
// END RANK codeblock_413

codeblock_414 -> leaf_422
leaf_422  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function ModeS.replLine(modeS)
   return modeS.repl_top + #modeS.txtbuf.lines - 1
end"]
// END RANK codeblock_414

codeblock_415 -> leaf_423
leaf_423  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function ModeS.printResults(modeS, results, new)
   local rainbuf = {}
   local row = new and modeS.repl_top + 1 or modeS:replLine() + 1
   modeS:write(a.rc(row, modeS.l_margin))
   for i = 1, results.n do
      if results.frozen then
         rainbuf[i] = results[i]
      else
         rainbuf[i] = ts(results[i])
      end
   end
   modeS:write(concat(rainbuf, '   '))
end"]
// END RANK codeblock_415

codeblock_416 -> leaf_424
leaf_424  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function ModeS.prompt(modeS)
   write(a.jump(modeS.repl_top, 1) .. \"👉 \")
end"]
// END RANK codeblock_416

section_6 -> { header_425 prose_426 prose_427 codeblock_428 prose_429 codeblock_430 section_431 section_432 section_433 section_434}
{rank=same; header_425 prose_426 prose_427 codeblock_428 prose_429 codeblock_430 section_431 section_432 section_433 section_434}

header_425 [label="2 : act"]

prose_426 [label="prose"]

prose_427 [label="prose"]

codeblock_428 [label="code block 351-383"]

prose_429 [label="prose"]

codeblock_430 [label="code block 387-391"]

section_431 [label="section: 394-400"]

section_432 [label="section: 401-474"]

section_433 [label="section: 475-495"]

section_434 [label="section: 496-566"]


// END RANK section_6

header_425 -> leaf_435
leaf_435  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** act"]
// END RANK header_425

prose_426 -> { raw_436 prespace_437 literal_438 raw_439 prespace_440 literal_441 raw_442 prespace_443 literal_444 raw_445 prespace_446 literal_447 raw_448}
{rank=same; raw_436 prespace_437 literal_438 raw_439 prespace_440 literal_441 raw_442 prespace_443 literal_444 raw_445 prespace_446 literal_447 raw_448}

raw_436 [label="raw"]

prespace_437 [label="prespace"]

literal_438 [label="literal"]

raw_439 [label="raw"]

prespace_440 [label="prespace"]

literal_441 [label="literal"]

raw_442 [label="raw"]

prespace_443 [label="prespace"]

literal_444 [label="literal"]

raw_445 [label="raw"]

prespace_446 [label="prespace"]

literal_447 [label="literal"]

raw_448 [label="raw"]


// END RANK prose_426

raw_436 -> leaf_449
leaf_449  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

 "]
// END RANK raw_436

prespace_437 -> leaf_450
leaf_450  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_437

literal_438 -> leaf_451
leaf_451  [color=Gray,shape=rectangle,fontname=Inconsolata,label="act"]
// END RANK literal_438

raw_439 -> leaf_452
leaf_452  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" simply dispatches. Note that our common interfaces is"]
// END RANK raw_439

prespace_440 -> leaf_453
leaf_453  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_440

literal_441 -> leaf_454
leaf_454  [color=Gray,shape=rectangle,fontname=Inconsolata,label="method(modeS, category, value)"]
// END RANK literal_441

raw_442 -> leaf_455
leaf_455  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", we need to distinguish betwen the tuple"]
// END RANK raw_442

prespace_443 -> leaf_456
leaf_456  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_443

literal_444 -> leaf_457
leaf_457  [color=Gray,shape=rectangle,fontname=Inconsolata,label="(\"INSERT\", \"SHIFT-LEFT\")"]
// END RANK literal_444

raw_445 -> leaf_458
leaf_458  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" (which could arrive from copy-paste) and"]
// END RANK raw_445

prespace_446 -> leaf_459
leaf_459  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_446

literal_447 -> leaf_460
leaf_460  [color=Gray,shape=rectangle,fontname=Inconsolata,label="(\"NAV\", \"SHIFT-LEFT\")"]
// END RANK literal_447

raw_448 -> leaf_461
leaf_461  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and preserve information for our fall-through method.
"]
// END RANK raw_448

prose_427 -> { prespace_462 literal_463 raw_464}
{rank=same; prespace_462 literal_463 raw_464}

prespace_462 [label="prespace"]

literal_463 [label="literal"]

raw_464 [label="raw"]


// END RANK prose_427

prespace_462 -> leaf_465
leaf_465  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_462

literal_463 -> leaf_466
leaf_466  [color=Gray,shape=rectangle,fontname=Inconsolata,label="act"]
// END RANK literal_463

raw_464 -> leaf_467
leaf_467  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" always succeeds, meaning we need some metatable action to absorb and
log anything unexpected.
"]
// END RANK raw_464

codeblock_428 -> leaf_468
leaf_468  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local assertfmt = assert(core.assertfmt)

function ModeS.act(modeS, category, value)
   assertfmt(modeS.modes[category], \"no category %s in modeS\", category)
   -- catch special handlers first
   if modeS.special[value] then
      return modeS.special[value](modeS, category, value)
   end
   icon_paint(category, value)

   -- Dispatch on value if possible
   if modeS.modes[category][value] then
      modeS.modes[category][value](modeS, category, value)

   -- otherwise fall back:
   elseif category == \"ASCII\" then
      -- hard coded for now
      modeS:insert(category, value)
   elseif category == \"NAV\" then
      if modeS.modes.NAV[value] then
         modeS.modes.NAV[value](modeS, category, value)
      else
         icon_paint(\"NYI\", \"NAV::\" .. value)
      end
   elseif category == \"MOUSE\" then
      colwrite(pr_mouse(value), STATCOL, STAT_RUN)
   else
      icon_paint(\"NYI\", category .. \":\" .. value)
   end
   return modeS:paint_row()
end"]
// END RANK codeblock_428

prose_429 -> { raw_469 prespace_470 literal_471 raw_472}
{rank=same; raw_469 prespace_470 literal_471 raw_472}

raw_469 [label="raw"]

prespace_470 [label="prespace"]

literal_471 [label="literal"]

raw_472 [label="raw"]


// END RANK prose_429

raw_469 -> leaf_473
leaf_473  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
To keep"]
// END RANK raw_469

prespace_470 -> leaf_474
leaf_474  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_470

literal_471 -> leaf_475
leaf_475  [color=Gray,shape=rectangle,fontname=Inconsolata,label="act"]
// END RANK literal_471

raw_472 -> leaf_476
leaf_476  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" itself replaceable, we look it up on each call:
"]
// END RANK raw_472

codeblock_430 -> leaf_477
leaf_477  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function ModeS.__call(modeS, category, value)
  return modeS:act(category, value)
end"]
// END RANK codeblock_430

section_431 -> { header_478 prose_479 prose_480}
{rank=same; header_478 prose_479 prose_480}

header_478 [label="3 : ASCII"]

prose_479 [label="prose"]

prose_480 [label="prose"]


// END RANK section_431

header_478 -> leaf_481
leaf_481  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** ASCII"]
// END RANK header_478

prose_479 -> { raw_482}
{rank=same; raw_482}

raw_482 [label="raw"]


// END RANK prose_479

raw_482 -> leaf_483
leaf_483  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Any printable 7 bit utf-8 sequence.
"]
// END RANK raw_482

prose_480 -> { raw_484}
{rank=same; raw_484}

raw_484 [label="raw"]


// END RANK prose_480

raw_484 -> leaf_485
leaf_485  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Currently just self-inserts, but watch this space...

"]
// END RANK raw_484

section_432 -> { header_486 prose_487 codeblock_488}
{rank=same; header_486 prose_487 codeblock_488}

header_486 [label="3 : NAV"]

prose_487 [label="prose"]

codeblock_488 [label="code block 403-472"]


// END RANK section_432

header_486 -> leaf_489
leaf_489  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** NAV"]
// END RANK header_486

prose_487 -> { raw_490}
{rank=same; raw_490}

raw_490 [label="raw"]


// END RANK prose_487

raw_490 -> leaf_491
leaf_491  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_490

codeblock_488 -> leaf_492
leaf_492  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local up1, down1 = a.jump.up(), a.jump.down()

function NAV.UP(modeS, category, value)
   local inline = modeS.txtbuf:up()
   if not inline then
      local prev_result, linestash
      if tostring(modeS.txtbuf) ~= \"\"
         and modeS.hist.cursor > #modeS.hist then
         linestash = modeS.txtbuf
      end
      modeS.txtbuf, prev_result = modeS.hist:prev()
      if linestash then
         modeS.hist:append(linestash)
      end
      modeS:clearResult()
      if prev_result then
         modeS:printResults(prev_result)
      end
   else
      write(up1)
   end
   return modeS
end

function NAV.DOWN(modeS, category, value)
   local inline = modeS.txtbuf:down()
   if not inline then
      local next_p, next_result
      modeS.txtbuf, next_result, next_p = modeS.hist:next()
      if next_p then
         modeS.txtbuf = Txtbuf()
      end
      modeS:clearResult()
      if next_result then
         modeS:printResults(next_result)
      end
   else
      write(down1)
   end
   return modeS
end

function NAV.LEFT(modeS, category, value)
   return modeS.txtbuf:left()
end

function NAV.RIGHT(modeS, category, value)
   return modeS.txtbuf:right()
end

function NAV.RETURN(modeS, category, value)
   -- eval etc.
   modeS:nl()
   local more = modeS:eval()
   if not more then
     modeS.txtbuf = Txtbuf()
   end
   -- Question: is this wrong for an error?
   modeS.hist.cursor = modeS.hist.cursor + 1
end

function NAV.BACKSPACE(modeS, category, value)
   return modeS.txtbuf:d_back()
end

function NAV.DELETE(modeS, category, value)
   return modeS.txtbuf:d_fwd()
end"]
// END RANK codeblock_488

section_433 -> { header_493 prose_494 prose_495 codeblock_496}
{rank=same; header_493 prose_494 prose_495 codeblock_496}

header_493 [label="3 : CTRL"]

prose_494 [label="prose"]

prose_495 [label="prose"]

codeblock_496 [label="code block 481-493"]


// END RANK section_433

header_493 -> leaf_497
leaf_497  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** CTRL"]
// END RANK header_493

prose_494 -> { raw_498}
{rank=same; raw_498}

raw_498 [label="raw"]


// END RANK prose_494

raw_498 -> leaf_499
leaf_499  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Many/most of these will be re-used as e.g. \"^\" and \"$\" in vim mode.
"]
// END RANK raw_498

prose_495 -> { raw_500}
{rank=same; raw_500}

raw_500 [label="raw"]


// END RANK prose_495

raw_500 -> leaf_501
leaf_501  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Thus we will declare them as bare functions and assign them to slots.
"]
// END RANK raw_500

codeblock_496 -> leaf_502
leaf_502  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function cursor_begin(modeS, category, value)
   modeS.txtbuf.cursor = 1
end

CTRL[\"^A\"] = cursor_begin

local function cursor_end(modeS, category, value)
   modeS.txtbuf.cursor = #modeS.txtbuf.lines[modeS.txtbuf.cur_row] + 1
end

CTRL[\"^E\"] = cursor_end"]
// END RANK codeblock_496

section_434 -> { header_503 prose_504 codeblock_505 codeblock_506 codeblock_507}
{rank=same; header_503 prose_504 codeblock_505 codeblock_506 codeblock_507}

header_503 [label="3 : ModeS:eval()"]

prose_504 [label="prose"]

codeblock_505 [label="code block 499-504"]

codeblock_506 [label="code block 506-510"]

codeblock_507 [label="code block 512-564"]


// END RANK section_434

header_503 -> leaf_508
leaf_508  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** ModeS:eval()"]
// END RANK header_503

prose_504 -> { raw_509}
{rank=same; raw_509}

raw_509 [label="raw"]


// END RANK prose_504

raw_509 -> leaf_510
leaf_510  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

"]
// END RANK raw_509

codeblock_505 -> leaf_511
leaf_511  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function gatherResults(success, ...)
  local n = select('#', ...)
  return success, { n = n, ... }
end"]
// END RANK codeblock_505

codeblock_506 -> leaf_512
leaf_512  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function ModeS.clearResult(modeS)
   write(a.erase.box(3, 1, modeS.max_row, modeS.r_margin))
end"]
// END RANK codeblock_506

codeblock_507 -> leaf_513
leaf_513  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function ModeS.eval(modeS)
   local chunk = tostring(modeS.txtbuf)

   local success, results
   -- first we prefix return
   local f, err = loadstring('return ' .. chunk, 'REPL')

   if not f then
      -- try again without return
      f, err = loadstring(chunk, 'REPL')
   end
   if not f then
      local head = sub(chunk, 1, 1)
      if head == \"=\" then -- take pity on old-school Lua hackers
         f, err = loadstring('return ' .. sub(chunk,2), 'REPL')
      end -- more special REPL prefix soon: /, ?, >(?)
   end
   if f then
      modeS.repl_line = modeS.REPL_LINE
      success, results = gatherResults(xpcall(f, debug.traceback))
      if success then
      -- successful call
         modeS:clearResult()
         if results.n > 0 then
            modeS:printResults(results, success)
         end
      else
      -- error
         modeS:clearResult()
         modeS:write(results[1])
      end
   else
      if err:match \"'<eof>'$\" then
         -- Lua expects some more input, advance the txtbuf
         modeS.txtbuf:advance()
         modeS.repl_line = modeS.repl_line + 1
         write(a.col(1) .. \"...\")
         return true
      else
         modeS.repl_line = modeS.REPL_LINE
         modeS:clearResult()
         modeS:write(err)
         -- pass through to default.
      end
   end

   modeS.hist:append(modeS.txtbuf, results, success)
   modeS.hist.cursor = #modeS.hist
   if success then modeS.hist.results[modeS.txtbuf] = results end
   modeS:prompt()
end"]
// END RANK codeblock_507

section_7 -> { header_514 prose_515 codeblock_516 codeblock_517}
{rank=same; header_514 prose_515 codeblock_516 codeblock_517}

header_514 [label="2 : new"]

prose_515 [label="prose"]

codeblock_516 [label="code block 571-587"]

codeblock_517 [label="code block 589-591"]


// END RANK section_7

header_514 -> leaf_518
leaf_518  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** new"]
// END RANK header_514

prose_515 -> { raw_519 prespace_520 literal_521 raw_522}
{rank=same; raw_519 prespace_520 literal_521 raw_522}

raw_519 [label="raw"]

prespace_520 [label="prespace"]

literal_521 [label="literal"]

raw_522 [label="raw"]


// END RANK prose_515

raw_519 -> leaf_523
leaf_523  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This should be configurable via"]
// END RANK raw_519

prespace_520 -> leaf_524
leaf_524  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_520

literal_521 -> leaf_525
leaf_525  [color=Gray,shape=rectangle,fontname=Inconsolata,label="cfg"]
// END RANK literal_521

raw_522 -> leaf_526
leaf_526  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_522

codeblock_516 -> leaf_527
leaf_527  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function new(cfg)
  local modeS = meta(ModeS)
  modeS.txtbuf = Txtbuf()
  modeS.hist  = Historian()
  modeS.hist.cursor = #modeS.hist + 1
  -- this will be more complex but
  modeS.l_margin = 4
  modeS.r_margin = 80
  modeS.row = 2
  modeS.repl_line = ModeS.REPL_LINE
  modeS.repl_top  = ModeS.REPL_LINE
  return modeS
end

ModeS.idEst = new"]
// END RANK codeblock_516

codeblock_517 -> leaf_528
leaf_528  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return new"]
// END RANK codeblock_517


}
