digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 650"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-595"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 section_5 section_6 section_7}
{rank=same; header_2 prose_3 prose_4 section_5 section_6 section_7}

header_2 [label="1 : Modeselektor"]

prose_3 [label="prose"]

prose_4 [label="prose"]

section_5 [label="section: 12-363"]

section_6 [label="section: 428-517"]

section_7 [label="section: 596-650"]


// END RANK section_1

header_2 -> leaf_8
leaf_8  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Modeselektor"]
// END RANK header_2

prose_3 -> { raw_9 prespace_10 literal_11 raw_12}
{rank=same; raw_9 prespace_10 literal_11 raw_12}

raw_9 [label="raw"]

prespace_10 [label="prespace"]

literal_11 [label="literal"]

raw_12 [label="raw"]


// END RANK prose_3

raw_9 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK raw_9

prespace_10 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_10

literal_11 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label="femto"]
// END RANK literal_11

raw_12 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" will hold all state for an terminal session, including setup of io,
the main event loop, teardown and exuent.  Soon, we will encapsulate that,
making the library re-entrant.
"]
// END RANK raw_12

prose_4 -> { prespace_17 literal_18 raw_19 prespace_20 literal_21 raw_22 prespace_23 literal_24 raw_25}
{rank=same; prespace_17 literal_18 raw_19 prespace_20 literal_21 raw_22 prespace_23 literal_24 raw_25}

prespace_17 [label="prespace"]

literal_18 [label="literal"]

raw_19 [label="raw"]

prespace_20 [label="prespace"]

literal_21 [label="literal"]

raw_22 [label="raw"]

prespace_23 [label="prespace"]

literal_24 [label="literal"]

raw_25 [label="raw"]


// END RANK prose_4

prespace_17 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_17

literal_18 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_18

raw_19 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is the modal interpreter for the repl language, which becomes
the core of"]
// END RANK raw_19

prespace_20 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_20

literal_21 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label="ed"]
// END RANK literal_21

raw_22 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  This is a glorified lookup table with a state switch and
a pointer to the"]
// END RANK raw_22

prespace_23 -> leaf_32
leaf_32  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_23

literal_24 -> leaf_33
leaf_33  [color=Gray,shape=rectangle,fontname=Inconsolata,label="femto"]
// END RANK literal_24

raw_25 -> leaf_34
leaf_34  [color=Gray,shape=rectangle,fontname=Inconsolata,label="cell we're operating on.

"]
// END RANK raw_25

section_5 -> { header_35 prose_36 prose_37 prose_38 prose_39 prose_40 prose_41 prose_42 prose_43 prose_44 prose_45 prose_46 prose_47 prose_48 prose_49 prose_50 prose_51 prose_52 section_53 section_54 section_55 section_56 section_57 section_58 section_59 section_60 section_61}
{rank=same; header_35 prose_36 prose_37 prose_38 prose_39 prose_40 prose_41 prose_42 prose_43 prose_44 prose_45 prose_46 prose_47 prose_48 prose_49 prose_50 prose_51 prose_52 section_53 section_54 section_55 section_56 section_57 section_58 section_59 section_60 section_61}

header_35 [label="2 : Design"]

prose_36 [label="prose"]

prose_37 [label="prose"]

prose_38 [label="prose"]

prose_39 [label="prose"]

prose_40 [label="prose"]

prose_41 [label="prose"]

prose_42 [label="prose"]

prose_43 [label="prose"]

prose_44 [label="prose"]

prose_45 [label="prose"]

prose_46 [label="prose"]

prose_47 [label="prose"]

prose_48 [label="prose"]

prose_49 [label="prose"]

prose_50 [label="prose"]

prose_51 [label="prose"]

prose_52 [label="prose"]

section_53 [label="section: 84-95"]

section_54 [label="section: 96-177"]

section_55 [label="section: 178-188"]

section_56 [label="section: 189-257"]

section_57 [label="section: 281-293"]

section_58 [label="section: 294-308"]

section_59 [label="section: 309-317"]

section_60 [label="section: 318-347"]

section_61 [label="section: 364-407"]


// END RANK section_5

header_35 -> leaf_62
leaf_62  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Design"]
// END RANK header_35

prose_36 -> { raw_63 prespace_64 literal_65 raw_66 prespace_67 literal_68 raw_69}
{rank=same; raw_63 prespace_64 literal_65 raw_66 prespace_67 literal_68 raw_69}

raw_63 [label="raw"]

prespace_64 [label="prespace"]

literal_65 [label="literal"]

raw_66 [label="raw"]

prespace_67 [label="prespace"]

literal_68 [label="literal"]

raw_69 [label="raw"]


// END RANK prose_36

raw_63 -> leaf_70
leaf_70  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

 "]
// END RANK raw_63

prespace_64 -> leaf_71
leaf_71  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_64

literal_65 -> leaf_72
leaf_72  [color=Gray,shape=rectangle,fontname=Inconsolata,label="femto"]
// END RANK literal_65

raw_66 -> leaf_73
leaf_73  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" passes keystrokes as messages to"]
// END RANK raw_66

prespace_67 -> leaf_74
leaf_74  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_67

literal_68 -> leaf_75
leaf_75  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_68

raw_69 -> leaf_76
leaf_76  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  It does no writes
to stdout at all.  It is smart enough to categorize and parse various device
reports, but has no knowledge of why those reports were requested.
"]
// END RANK raw_69

prose_37 -> { prespace_77 literal_78 raw_79}
{rank=same; prespace_77 literal_78 raw_79}

prespace_77 [label="prespace"]

literal_78 [label="literal"]

raw_79 [label="raw"]


// END RANK prose_37

prespace_77 -> leaf_80
leaf_80  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_77

literal_78 -> leaf_81
leaf_81  [color=Gray,shape=rectangle,fontname=Inconsolata,label="femto"]
// END RANK literal_78

raw_79 -> leaf_82
leaf_82  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" runs the event loop, so all other members are pulled in as modules.
"]
// END RANK raw_79

prose_38 -> { prespace_83 literal_84 raw_85 prespace_86 literal_87 raw_88}
{rank=same; prespace_83 literal_84 raw_85 prespace_86 literal_87 raw_88}

prespace_83 [label="prespace"]

literal_84 [label="literal"]

raw_85 [label="raw"]

prespace_86 [label="prespace"]

literal_87 [label="literal"]

raw_88 [label="raw"]


// END RANK prose_38

prespace_83 -> leaf_89
leaf_89  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_83

literal_84 -> leaf_90
leaf_90  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_84

raw_85 -> leaf_91
leaf_91  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" takes care of system-level housekeeping: opening files
and sockets, keeping command history, fuzzy completion, and has its own eval
loop off the main track.  For evaluating lines, it will call a small executor,
so that in a little while we can put the user program in its own"]
// END RANK raw_85

prespace_86 -> leaf_92
leaf_92  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_86

literal_87 -> leaf_93
leaf_93  [color=Gray,shape=rectangle,fontname=Inconsolata,label="LuaL_state"]
// END RANK literal_87

raw_88 -> leaf_94
leaf_94  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_88

prose_39 -> { raw_95 prespace_96 literal_97 raw_98}
{rank=same; raw_95 prespace_96 literal_97 raw_98}

raw_95 [label="raw"]

prespace_96 [label="prespace"]

literal_97 [label="literal"]

raw_98 [label="raw"]


// END RANK prose_39

raw_95 -> leaf_99
leaf_99  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This is both good practice, and absolutely necessary if we are to REPL other"]
// END RANK raw_95

prespace_96 -> leaf_100
leaf_100  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_96

literal_97 -> leaf_101
leaf_101  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bridge"]
// END RANK literal_97

raw_98 -> leaf_102
leaf_102  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" programs, each of which has its own event loop.
"]
// END RANK raw_98

prose_40 -> { raw_103 prespace_104 literal_105 raw_106}
{rank=same; raw_103 prespace_104 literal_105 raw_106}

raw_103 [label="raw"]

prespace_104 [label="prespace"]

literal_105 [label="literal"]

raw_106 [label="raw"]


// END RANK prose_40

raw_103 -> leaf_107
leaf_107  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The implementation is essentially a VM.  Category and value are
successively looked up in jump tables and the method applied with the"]
// END RANK raw_103

prespace_104 -> leaf_108
leaf_108  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_104

literal_105 -> leaf_109
leaf_109  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeS"]
// END RANK literal_105

raw_106 -> leaf_110
leaf_110  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
instance as the first argument.
"]
// END RANK raw_106

prose_41 -> { raw_111}
{rank=same; raw_111}

raw_111 [label="raw"]


// END RANK prose_41

raw_111 -> leaf_112
leaf_112  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The state machine has to represent two sorts of state: the mode we're
operating in, and a buffer of commands.  Our mode engine is modeled after
emacs: rather than have some kind of flag that can be set to \"insert\",
\"navigate\", \"command\", or \"visual\", these will be modeled as swiching the
pointer to jump tables.  If a command needs to know which mode it's in, this
can be done with pointer comparison.
"]
// END RANK raw_111

prose_42 -> { raw_113 prespace_114 literal_115 raw_116 prespace_117 literal_118 raw_119 prespace_120 literal_121 raw_122 prespace_123 literal_124 raw_125}
{rank=same; raw_113 prespace_114 literal_115 raw_116 prespace_117 literal_118 raw_119 prespace_120 literal_121 raw_122 prespace_123 literal_124 raw_125}

raw_113 [label="raw"]

prespace_114 [label="prespace"]

literal_115 [label="literal"]

raw_116 [label="raw"]

prespace_117 [label="prespace"]

literal_118 [label="literal"]

raw_119 [label="raw"]

prespace_120 [label="prespace"]

literal_121 [label="literal"]

raw_122 [label="raw"]

prespace_123 [label="prespace"]

literal_124 [label="literal"]

raw_125 [label="raw"]


// END RANK prose_42

raw_113 -> leaf_126
leaf_126  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We're starting with"]
// END RANK raw_113

prespace_114 -> leaf_127
leaf_127  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_114

literal_115 -> leaf_128
leaf_128  [color=Gray,shape=rectangle,fontname=Inconsolata,label="vi"]
// END RANK literal_115

raw_116 -> leaf_129
leaf_129  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" mode and"]
// END RANK raw_116

prespace_117 -> leaf_130
leaf_130  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_117

literal_118 -> leaf_131
leaf_131  [color=Gray,shape=rectangle,fontname=Inconsolata,label="nerf"]
// END RANK literal_118

raw_119 -> leaf_132
leaf_132  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" mode, which is a lightweight"]
// END RANK raw_119

prespace_120 -> leaf_133
leaf_133  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_120

literal_121 -> leaf_134
leaf_134  [color=Gray,shape=rectangle,fontname=Inconsolata,label="readline"]
// END RANK literal_121

raw_122 -> leaf_135
leaf_135  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" implementation that won't use the command buffer.  Issuing a
command like"]
// END RANK raw_122

prespace_123 -> leaf_136
leaf_136  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_123

literal_124 -> leaf_137
leaf_137  [color=Gray,shape=rectangle,fontname=Inconsolata,label="d3w"]
// END RANK literal_124

raw_125 -> leaf_138
leaf_138  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" requires a simple command buffer.
"]
// END RANK raw_125

prose_43 -> { raw_139 prespace_140 literal_141 raw_142 prespace_143 literal_144 raw_145}
{rank=same; raw_139 prespace_140 literal_141 raw_142 prespace_143 literal_144 raw_145}

raw_139 [label="raw"]

prespace_140 [label="prespace"]

literal_141 [label="literal"]

raw_142 [label="raw"]

prespace_143 [label="prespace"]

literal_144 [label="literal"]

raw_145 [label="raw"]


// END RANK prose_43

raw_139 -> leaf_146
leaf_146  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The syntax can't be tied to the semantics in any tighly-coupled way. I intend
to support"]
// END RANK raw_139

prespace_140 -> leaf_147
leaf_147  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_140

literal_141 -> leaf_148
leaf_148  [color=Gray,shape=rectangle,fontname=Inconsolata,label="kakoune"]
// END RANK literal_141

raw_142 -> leaf_149
leaf_149  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" syntax as soon as possible; there you would say"]
// END RANK raw_142

prespace_143 -> leaf_150
leaf_150  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_143

literal_144 -> leaf_151
leaf_151  [color=Gray,shape=rectangle,fontname=Inconsolata,label="w3d"]
// END RANK literal_144

raw_145 -> leaf_152
leaf_152  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_145

prose_44 -> { raw_153 prespace_154 literal_155 raw_156 prespace_157 literal_158 raw_159}
{rank=same; raw_153 prespace_154 literal_155 raw_156 prespace_157 literal_158 raw_159}

raw_153 [label="raw"]

prespace_154 [label="prespace"]

literal_155 [label="literal"]

raw_156 [label="raw"]

prespace_157 [label="prespace"]

literal_158 [label="literal"]

raw_159 [label="raw"]


// END RANK prose_44

raw_153 -> leaf_160
leaf_160  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This implies that the commands can't be aware of the buffer; because"]
// END RANK raw_153

prespace_154 -> leaf_161
leaf_161  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_154

literal_155 -> leaf_162
leaf_162  [color=Gray,shape=rectangle,fontname=Inconsolata,label="d3w"]
// END RANK literal_155

raw_156 -> leaf_163
leaf_163  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
and"]
// END RANK raw_156

prespace_157 -> leaf_164
leaf_164  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_157

literal_158 -> leaf_165
leaf_165  [color=Gray,shape=rectangle,fontname=Inconsolata,label="w3d"]
// END RANK literal_158

raw_159 -> leaf_166
leaf_166  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" are two ways of saying the same thing, they should end in an
identical method call.
"]
// END RANK raw_159

prose_45 -> { raw_167}
{rank=same; raw_167}

raw_167 [label="raw"]


// END RANK prose_45

raw_167 -> leaf_168
leaf_168  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This means when the time comes we handle it with a secondary dispatch layer.
"]
// END RANK raw_167

prose_46 -> { raw_169}
{rank=same; raw_169}

raw_169 [label="raw"]


// END RANK prose_46

raw_169 -> leaf_170
leaf_170  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
There really are effectively arbitrary levels of indirection possible in an
editor.  This is why we must be absolutely consistent about everything
receiving the same tuple (modeS, category, value).
"]
// END RANK raw_169

prose_47 -> { raw_171 prespace_172 literal_173 raw_174 prespace_175 literal_176 raw_177 prespace_178 literal_179 raw_180}
{rank=same; raw_171 prespace_172 literal_173 raw_174 prespace_175 literal_176 raw_177 prespace_178 literal_179 raw_180}

raw_171 [label="raw"]

prespace_172 [label="prespace"]

literal_173 [label="literal"]

raw_174 [label="raw"]

prespace_175 [label="prespace"]

literal_176 [label="literal"]

raw_177 [label="raw"]

prespace_178 [label="prespace"]

literal_179 [label="literal"]

raw_180 [label="raw"]


// END RANK prose_47

raw_171 -> leaf_181
leaf_181  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
They must also have the same return type, with is either"]
// END RANK raw_171

prespace_172 -> leaf_182
leaf_182  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_172

literal_173 -> leaf_183
leaf_183  [color=Gray,shape=rectangle,fontname=Inconsolata,label="true"]
// END RANK literal_173

raw_174 -> leaf_184
leaf_184  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" or"]
// END RANK raw_174

prespace_175 -> leaf_185
leaf_185  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_175

literal_176 -> leaf_186
leaf_186  [color=Gray,shape=rectangle,fontname=Inconsolata,label="false, err"]
// END RANK literal_176

raw_177 -> leaf_187
leaf_187  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  where"]
// END RANK raw_177

prespace_178 -> leaf_188
leaf_188  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_178

literal_179 -> leaf_189
leaf_189  [color=Gray,shape=rectangle,fontname=Inconsolata,label="err"]
// END RANK literal_179

raw_180 -> leaf_190
leaf_190  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is an error object which may be a primitive string.
"]
// END RANK raw_180

prose_48 -> { prespace_191 literal_192 raw_193 prespace_194 literal_195 raw_196 prespace_197 literal_198 raw_199 prespace_200 literal_201 raw_202 prespace_203 literal_204 raw_205 prespace_206 literal_207 raw_208}
{rank=same; prespace_191 literal_192 raw_193 prespace_194 literal_195 raw_196 prespace_197 literal_198 raw_199 prespace_200 literal_201 raw_202 prespace_203 literal_204 raw_205 prespace_206 literal_207 raw_208}

prespace_191 [label="prespace"]

literal_192 [label="literal"]

raw_193 [label="raw"]

prespace_194 [label="prespace"]

literal_195 [label="literal"]

raw_196 [label="raw"]

prespace_197 [label="prespace"]

literal_198 [label="literal"]

raw_199 [label="raw"]

prespace_200 [label="prespace"]

literal_201 [label="literal"]

raw_202 [label="raw"]

prespace_203 [label="prespace"]

literal_204 [label="literal"]

raw_205 [label="raw"]

prespace_206 [label="prespace"]

literal_207 [label="literal"]

raw_208 [label="raw"]


// END RANK prose_48

prespace_191 -> leaf_209
leaf_209  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_191

literal_192 -> leaf_210
leaf_210  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_192

raw_193 -> leaf_211
leaf_211  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" passes any edit or movement commands to an internally-owned"]
// END RANK raw_193

prespace_194 -> leaf_212
leaf_212  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_194

literal_195 -> leaf_213
leaf_213  [color=Gray,shape=rectangle,fontname=Inconsolata,label="txtbuf"]
// END RANK literal_195

raw_196 -> leaf_214
leaf_214  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", which keeps all modeling of the line. "]
// END RANK raw_196

prespace_197 -> leaf_215
leaf_215  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_197

literal_198 -> leaf_216
leaf_216  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_198

raw_199 -> leaf_217
leaf_217  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" decides when
to repaint the screen, calling"]
// END RANK raw_199

prespace_200 -> leaf_218
leaf_218  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_200

literal_201 -> leaf_219
leaf_219  [color=Gray,shape=rectangle,fontname=Inconsolata,label="rainbuf"]
// END RANK literal_201

raw_202 -> leaf_220
leaf_220  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" (currently just"]
// END RANK raw_202

prespace_203 -> leaf_221
leaf_221  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_203

literal_204 -> leaf_222
leaf_222  [color=Gray,shape=rectangle,fontname=Inconsolata,label="lex"]
// END RANK literal_204

raw_205 -> leaf_223
leaf_223  [color=Gray,shape=rectangle,fontname=Inconsolata,label=") with a region
of"]
// END RANK raw_205

prespace_206 -> leaf_224
leaf_224  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_206

literal_207 -> leaf_225
leaf_225  [color=Gray,shape=rectangle,fontname=Inconsolata,label="txtbuf"]
// END RANK literal_207

raw_208 -> leaf_226
leaf_226  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and instructions as to how to paint it.
"]
// END RANK raw_208

prose_49 -> { raw_227 prespace_228 literal_229 raw_230 prespace_231 literal_232 raw_233 prespace_234 literal_235 raw_236}
{rank=same; raw_227 prespace_228 literal_229 raw_230 prespace_231 literal_232 raw_233 prespace_234 literal_235 raw_236}

raw_227 [label="raw"]

prespace_228 [label="prespace"]

literal_229 [label="literal"]

raw_230 [label="raw"]

prespace_231 [label="prespace"]

literal_232 [label="literal"]

raw_233 [label="raw"]

prespace_234 [label="prespace"]

literal_235 [label="literal"]

raw_236 [label="raw"]


// END RANK prose_49

raw_227 -> leaf_237
leaf_237  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
There is one"]
// END RANK raw_227

prespace_228 -> leaf_238
leaf_238  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_228

literal_229 -> leaf_239
leaf_239  [color=Gray,shape=rectangle,fontname=Inconsolata,label="deck"]
// END RANK literal_229

raw_230 -> leaf_240
leaf_240  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" instance member per screen, which tiles the available
space. "]
// END RANK raw_230

prespace_231 -> leaf_241
leaf_241  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_231

literal_232 -> leaf_242
leaf_242  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_232

raw_233 -> leaf_243
leaf_243  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is the writer, and"]
// END RANK raw_233

prespace_234 -> leaf_244
leaf_244  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_234

literal_235 -> leaf_245
leaf_245  [color=Gray,shape=rectangle,fontname=Inconsolata,label="rainbuf"]
// END RANK literal_235

raw_236 -> leaf_246
leaf_246  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" holds a pointer to the
table for read access.
"]
// END RANK raw_236

prose_50 -> { raw_247 prespace_248 literal_249 raw_250 prespace_251 literal_252 raw_253}
{rank=same; raw_247 prespace_248 literal_249 raw_250 prespace_251 literal_252 raw_253}

raw_247 [label="raw"]

prespace_248 [label="prespace"]

literal_249 [label="literal"]

raw_250 [label="raw"]

prespace_251 [label="prespace"]

literal_252 [label="literal"]

raw_253 [label="raw"]


// END RANK prose_50

raw_247 -> leaf_254
leaf_254  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
When we have our fancy parse engine and quipu structure, txtbuf will call"]
// END RANK raw_247

prespace_248 -> leaf_255
leaf_255  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_248

literal_249 -> leaf_256
leaf_256  [color=Gray,shape=rectangle,fontname=Inconsolata,label="comb"]
// END RANK literal_249

raw_250 -> leaf_257
leaf_257  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" to redecorate the syntax tree before passing it to"]
// END RANK raw_250

prespace_251 -> leaf_258
leaf_258  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_251

literal_252 -> leaf_259
leaf_259  [color=Gray,shape=rectangle,fontname=Inconsolata,label="rainbuf"]
// END RANK literal_252

raw_253 -> leaf_260
leaf_260  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" for
markup.  At the moment I'm just going to write some crude lexers, which
will be more than enough for Clu and Lua, which have straightforward syntax.
"]
// END RANK raw_253

prose_51 -> { raw_261 prespace_262 literal_263 raw_264 prespace_265 literal_266 raw_267}
{rank=same; raw_261 prespace_262 literal_263 raw_264 prespace_265 literal_266 raw_267}

raw_261 [label="raw"]

prespace_262 [label="prespace"]

literal_263 [label="literal"]

raw_264 [label="raw"]

prespace_265 [label="prespace"]

literal_266 [label="literal"]

raw_267 [label="raw"]


// END RANK prose_51

raw_261 -> leaf_268
leaf_268  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
An intermediate step could just squeeze the txtbuf into a string, parse it
with"]
// END RANK raw_261

prespace_262 -> leaf_269
leaf_269  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_262

literal_263 -> leaf_270
leaf_270  [color=Gray,shape=rectangle,fontname=Inconsolata,label="espalier"]
// END RANK literal_263

raw_264 -> leaf_271
leaf_271  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and emit a"]
// END RANK raw_264

prespace_265 -> leaf_272
leaf_272  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_265

literal_266 -> leaf_273
leaf_273  [color=Gray,shape=rectangle,fontname=Inconsolata,label="rainbuf"]
// END RANK literal_266

raw_267 -> leaf_274
leaf_274  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" through the usual recursive method
lookup.  The problem isn't speed, not for a REPL, it's not having error
recovery parsing available.
"]
// END RANK raw_267

prose_52 -> { raw_275 prespace_276 literal_277 raw_278}
{rank=same; raw_275 prespace_276 literal_277 raw_278}

raw_275 [label="raw"]

prespace_276 [label="prespace"]

literal_277 [label="literal"]

raw_278 [label="raw"]


// END RANK prose_52

raw_275 -> leaf_279
leaf_279  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I will likely content myself with a grammar that kicks in when the user
presses return.  I'll want that to perform rewrites (such as removing
outer-level"]
// END RANK raw_275

prespace_276 -> leaf_280
leaf_280  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_276

literal_277 -> leaf_281
leaf_281  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local"]
// END RANK literal_277

raw_278 -> leaf_282
leaf_282  [color=Gray,shape=rectangle,fontname=Inconsolata,label="s to facilicate copy-pasting) and keep the readline
grammar from becoming too ad-hoc.

"]
// END RANK raw_278

section_53 -> { header_283 prose_284 codeblock_285}
{rank=same; header_283 prose_284 codeblock_285}

header_283 [label="4 : asserts"]

prose_284 [label="prose"]

codeblock_285 [label="code block 89-93"]


// END RANK section_53

header_283 -> leaf_286
leaf_286  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** asserts"]
// END RANK header_283

prose_284 -> { raw_287 prespace_288 literal_289 raw_290 prespace_291 literal_292 raw_293}
{rank=same; raw_287 prespace_288 literal_289 raw_290 prespace_291 literal_292 raw_293}

raw_287 [label="raw"]

prespace_288 [label="prespace"]

literal_289 [label="literal"]

raw_290 [label="raw"]

prespace_291 [label="prespace"]

literal_292 [label="literal"]

raw_293 [label="raw"]


// END RANK prose_284

raw_287 -> leaf_294
leaf_294  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  There is little sense running"]
// END RANK raw_287

prespace_288 -> leaf_295
leaf_295  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_288

literal_289 -> leaf_296
leaf_296  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_289

raw_290 -> leaf_297
leaf_297  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" outside of the"]
// END RANK raw_290

prespace_291 -> leaf_298
leaf_298  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_291

literal_292 -> leaf_299
leaf_299  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bridge"]
// END RANK literal_292

raw_293 -> leaf_300
leaf_300  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
environment.
"]
// END RANK raw_293

codeblock_285 -> leaf_301
leaf_301  [color=Gray,shape=rectangle,fontname=Inconsolata,label="assert(meta, \"must have meta in _G\")
assert(write, \"must have write in _G\")
assert(ts, \"must have ts in _G\")"]
// END RANK codeblock_285

section_54 -> { header_302 prose_303 prose_304 codeblock_305 codeblock_306 prose_307 prose_308 prose_309 prose_310 prose_311 codeblock_312 prose_313 codeblock_314 prose_315 codeblock_316 prose_317 codeblock_318}
{rank=same; header_302 prose_303 prose_304 codeblock_305 codeblock_306 prose_307 prose_308 prose_309 prose_310 prose_311 codeblock_312 prose_313 codeblock_314 prose_315 codeblock_316 prose_317 codeblock_318}

header_302 [label="4 : includes"]

prose_303 [label="prose"]

prose_304 [label="prose"]

codeblock_305 [label="code block 102-124"]

codeblock_306 [label="code block 126-128"]

prose_307 [label="prose"]

prose_308 [label="prose"]

prose_309 [label="prose"]

prose_310 [label="prose"]

prose_311 [label="prose"]

codeblock_312 [label="code block 151-153"]

prose_313 [label="prose"]

codeblock_314 [label="code block 157-159"]

prose_315 [label="prose"]

codeblock_316 [label="code block 164-166"]

prose_317 [label="prose"]

codeblock_318 [label="code block 171-175"]


// END RANK section_54

header_302 -> leaf_319
leaf_319  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** includes"]
// END RANK header_302

prose_303 -> { raw_320}
{rank=same; raw_320}

raw_320 [label="raw"]


// END RANK prose_303

raw_320 -> leaf_321
leaf_321  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The easiest way to go mad in concurrent environments is to share memory.
"]
// END RANK raw_320

prose_304 -> { prespace_322 literal_323 raw_324}
{rank=same; prespace_322 literal_323 raw_324}

prespace_322 [label="prespace"]

literal_323 [label="literal"]

raw_324 [label="raw"]


// END RANK prose_304

prespace_322 -> leaf_325
leaf_325  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_322

literal_323 -> leaf_326
leaf_326  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_323

raw_324 -> leaf_327
leaf_327  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" will own txtbuf, historian, and the entire screen.
"]
// END RANK raw_324

codeblock_305 -> leaf_328
leaf_328  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local stacktrace = require \"stacktrace\" . stacktrace

local Txtbuf    = require \"txtbuf\"
local Resbuf    = require \"resbuf\" -- Not currently used...
local Rainbuf   = require \"rainbuf\"
local Historian = require \"historian\"
local Lex       = require \"lex\"
local Zoneherd  = require \"zone\"
local repr      = require \"repr\"

local Nerf   = require \"nerf\"
local Search = require \"search\"

local concat               = assert(table.concat)
local sub, gsub, rep, find = assert(string.sub),
                             assert(string.gsub),
                             assert(string.rep),
                             assert(string.find)

local ts = repr.ts
"]
// END RANK codeblock_305

codeblock_306 -> leaf_329
leaf_329  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local ModeS = meta()"]
// END RANK codeblock_306

prose_307 -> { raw_330 prespace_331 literal_332 raw_333}
{rank=same; raw_330 prespace_331 literal_332 raw_333}

raw_330 [label="raw"]

prespace_331 [label="prespace"]

literal_332 [label="literal"]

raw_333 [label="raw"]


// END RANK prose_307

raw_330 -> leaf_334
leaf_334  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Color schemes are supposed to be one-and-done, and I strongly suspect we
have a"]
// END RANK raw_330

prespace_331 -> leaf_335
leaf_335  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_331

literal_332 -> leaf_336
leaf_336  [color=Gray,shape=rectangle,fontname=Inconsolata,label="__concat"]
// END RANK literal_332

raw_333 -> leaf_337
leaf_337  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" dominated workflow, although I have yet to turn on the
profiler.
"]
// END RANK raw_333

prose_308 -> { raw_338 prespace_339 literal_340 raw_341 prespace_342 literal_343 raw_344}
{rank=same; raw_338 prespace_339 literal_340 raw_341 prespace_342 literal_343 raw_344}

raw_338 [label="raw"]

prespace_339 [label="prespace"]

literal_340 [label="literal"]

raw_341 [label="raw"]

prespace_342 [label="prespace"]

literal_343 [label="literal"]

raw_344 [label="raw"]


// END RANK prose_308

raw_338 -> leaf_345
leaf_345  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Therefore we use reference equality for the"]
// END RANK raw_338

prespace_339 -> leaf_346
leaf_346  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_339

literal_340 -> leaf_347
leaf_347  [color=Gray,shape=rectangle,fontname=Inconsolata,label="color"]
// END RANK literal_340

raw_341 -> leaf_348
leaf_348  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_341

prespace_342 -> leaf_349
leaf_349  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_342

literal_343 -> leaf_350
leaf_350  [color=Gray,shape=rectangle,fontname=Inconsolata,label="hints"]
// END RANK literal_343

raw_344 -> leaf_351
leaf_351  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" tables.
Switching themes is a matter of repopulating those tables.  I intend to
isolate this within an instance so that multiple terminals can each run their
own theme, through a simple 'fat inheritance' method.
"]
// END RANK raw_344

prose_309 -> { prespace_352 literal_353 raw_354 prespace_355 italic_356 raw_357}
{rank=same; prespace_352 literal_353 raw_354 prespace_355 italic_356 raw_357}

prespace_352 [label="prespace"]

literal_353 [label="literal"]

raw_354 [label="raw"]

prespace_355 [label="prespace"]

italic_356 [label="italic"]

raw_357 [label="raw"]


// END RANK prose_309

prespace_352 -> leaf_358
leaf_358  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_352

literal_353 -> leaf_359
leaf_359  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_353

raw_354 -> leaf_360
leaf_360  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is what you might call hypermodal. Everything is isolated in
its own lookup, that is, we use"]
// END RANK raw_354

prespace_355 -> leaf_361
leaf_361  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_355

italic_356 -> leaf_362
leaf_362  [color=Gray,shape=rectangle,fontname=Inconsolata,label="value"]
// END RANK italic_356

raw_357 -> leaf_363
leaf_363  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" equality.  This lets us pass strings
as messages and use jump tables to resolve most things.
"]
// END RANK raw_357

prose_310 -> { raw_364}
{rank=same; raw_364}

raw_364 [label="raw"]


// END RANK prose_310

raw_364 -> leaf_365
leaf_365  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It typically runs at the speed of human fingers and can afford to be much less
efficient than it will be, even before the JIT gets involved.
"]
// END RANK raw_364

prose_311 -> { raw_366 prespace_367 literal_368 raw_369}
{rank=same; raw_366 prespace_367 literal_368 raw_369}

raw_366 [label="raw"]

prespace_367 [label="prespace"]

literal_368 [label="literal"]

raw_369 [label="raw"]


// END RANK prose_311

raw_366 -> leaf_370
leaf_370  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Note also that everything is a method, our dispatch pattern will always
include the"]
// END RANK raw_366

prespace_367 -> leaf_371
leaf_371  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_367

literal_368 -> leaf_372
leaf_372  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeS"]
// END RANK literal_368

raw_369 -> leaf_373
leaf_373  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" instance as the first argument.
"]
// END RANK raw_369

codeblock_312 -> leaf_374
leaf_374  [color=Gray,shape=rectangle,fontname=Inconsolata,label="ModeS.modes = Nerf"]
// END RANK codeblock_312

prose_313 -> { raw_375}
{rank=same; raw_375}

raw_375 [label="raw"]


// END RANK prose_313

raw_375 -> leaf_376
leaf_376  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
With some semi-constants:
"]
// END RANK raw_375

codeblock_314 -> leaf_377
leaf_377  [color=Gray,shape=rectangle,fontname=Inconsolata,label="ModeS.REPL_LINE = 2"]
// END RANK codeblock_314

prose_315 -> { raw_378 prespace_379 literal_380 raw_381}
{rank=same; raw_378 prespace_379 literal_380 raw_381}

raw_378 [label="raw"]

prespace_379 [label="prespace"]

literal_380 [label="literal"]

raw_381 [label="raw"]


// END RANK prose_315

raw_378 -> leaf_382
leaf_382  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Sometimes its useful to briefly override handlers, so we check values
against"]
// END RANK raw_378

prespace_379 -> leaf_383
leaf_383  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_379

literal_380 -> leaf_384
leaf_384  [color=Gray,shape=rectangle,fontname=Inconsolata,label="special"]
// END RANK literal_380

raw_381 -> leaf_385
leaf_385  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" first:
"]
// END RANK raw_381

codeblock_316 -> leaf_386
leaf_386  [color=Gray,shape=rectangle,fontname=Inconsolata,label="ModeS.special = {}"]
// END RANK codeblock_316

prose_317 -> { raw_387}
{rank=same; raw_387}

raw_387 [label="raw"]


// END RANK prose_317

raw_387 -> leaf_388
leaf_388  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A simple pass-through so we can see what we're missing.
"]
// END RANK raw_387

codeblock_318 -> leaf_389
leaf_389  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function ModeS.default(modeS, category, value)
    return write(ts(value))
end"]
// END RANK codeblock_318

section_55 -> { header_390 prose_391 codeblock_392}
{rank=same; header_390 prose_391 codeblock_392}

header_390 [label="3 : self-insert(modeS, category, value)"]

prose_391 [label="prose"]

codeblock_392 [label="code block 182-186"]


// END RANK section_55

header_390 -> leaf_393
leaf_393  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** self-insert(modeS, category, value)"]
// END RANK header_390

prose_391 -> { raw_394}
{rank=same; raw_394}

raw_394 [label="raw"]


// END RANK prose_391

raw_394 -> leaf_395
leaf_395  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Inserts the value into the txtbuf at cursor.
"]
// END RANK raw_394

codeblock_392 -> leaf_396
leaf_396  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function ModeS.insert(modeS, category, value)
    local success =  modeS.txtbuf:insert(value)
end"]
// END RANK codeblock_392

section_56 -> { header_397 prose_398 prose_399 section_400 section_401}
{rank=same; header_397 prose_398 prose_399 section_400 section_401}

header_397 [label="3 : status painter (colwrite)"]

prose_398 [label="prose"]

prose_399 [label="prose"]

section_400 [label="section: 196-257"]

section_401 [label="section: 258-280"]


// END RANK section_56

header_397 -> leaf_402
leaf_402  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** status painter (colwrite)"]
// END RANK header_397

prose_398 -> { raw_403}
{rank=same; raw_403}

raw_403 [label="raw"]


// END RANK prose_398

raw_403 -> leaf_404
leaf_404  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This is a grab-bag with many traces of the bootstrap process.
"]
// END RANK raw_403

prose_399 -> { raw_405}
{rank=same; raw_405}

raw_405 [label="raw"]


// END RANK prose_399

raw_405 -> leaf_406
leaf_406  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It also contains the state-of-the-art renderers.

"]
// END RANK raw_405

section_400 -> { header_407 prose_408 prose_409 prose_410 codeblock_411}
{rank=same; header_407 prose_408 prose_409 prose_410 codeblock_411}

header_407 [label="4 : bootstrappers"]

prose_408 [label="prose"]

prose_409 [label="prose"]

prose_410 [label="prose"]

codeblock_411 [label="code block 205-256"]


// END RANK section_400

header_407 -> leaf_412
leaf_412  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** bootstrappers"]
// END RANK header_407

prose_408 -> { raw_413}
{rank=same; raw_413}

raw_413 [label="raw"]


// END RANK prose_408

raw_413 -> leaf_414
leaf_414  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

A lot of this just paints mouse events, which we aren't using and won't be
able to use until we rigorously keep track of what's printed where.
"]
// END RANK raw_413

prose_409 -> { raw_415}
{rank=same; raw_415}

raw_415 [label="raw"]


// END RANK prose_409

raw_415 -> leaf_416
leaf_416  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Which is painstaking and annoying, but we'll get there...
"]
// END RANK raw_415

prose_410 -> { raw_417}
{rank=same; raw_417}

raw_417 [label="raw"]


// END RANK prose_410

raw_417 -> leaf_418
leaf_418  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This will continue to exist for awhile.
"]
// END RANK raw_417

codeblock_411 -> leaf_419
leaf_419  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local STAT_ICON = \"◉ \"

local function tf(bool)
   if bool then
      return ts(\"t\", \"true\")
   else
      return ts(\"f\", \"false\")
   end
end

local function pr_mouse(m)
   return a.magenta(m.button) .. \": \"
      .. a.bright(m.kind) .. \" \"
      .. tf(m.shift) .. \" \"
      .. tf(m.meta) .. \" \"
      .. tf(m.ctrl) .. \" \"
      .. tf(m.moving) .. \" \"
      .. tf(m.scrolling) .. \" \"
      .. a.cyan(m.col) .. \",\" .. a.cyan(m.row)
end

local function mk_paint(fragment, shade)
   return function(category, action)
      return shade(category .. fragment .. action)
   end
end

local act_map = { MOUSE  = pr_mouse,
                  NAV    = mk_paint(\": \", a.italic),
                  CTRL   = mk_paint(\": \", c.field),
                  ALT    = mk_paint(\": \", a.underscore),
                  ASCII  = mk_paint(\": \", c.table),
                  NYI    = mk_paint(\": \", a.red)}

local icon_map = { MOUSE = mk_paint(STAT_ICON, c.userdata),
                   NAV   = mk_paint(STAT_ICON, a.magenta),
                   CTRL  = mk_paint(STAT_ICON, a.blue),
                   ALT   = mk_paint(STAT_ICON, c[\"function\"]),
                   ASCII = mk_paint(STAT_ICON, a.green),
                   NYI   = mk_paint(STAT_ICON .. \"! \", a.red) }

local function _make_icon(category, value)
   local icon = \"\"
   if category == \"MOUSE\" then
      phrase = icon_map[category](\"\", pr_mouse(value))
   else
      phrase = icon_map[category](\"\", ts(value))
   end
   return phrase
end"]
// END RANK codeblock_411

section_401 -> { header_420 prose_421 prose_422 codeblock_423 structure_424 codeblock_425}
{rank=same; header_420 prose_421 prose_422 codeblock_423 structure_424 codeblock_425}

header_420 [label="4 : dimensional getters"]

prose_421 [label="prose"]

prose_422 [label="prose"]

codeblock_423 [label="code block 266-270"]

structure_424 [label="structure"]

codeblock_425 [label="code block 275-279"]


// END RANK section_401

header_420 -> leaf_426
leaf_426  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** dimensional getters"]
// END RANK header_420

prose_421 -> { raw_427 prespace_428 literal_429 raw_430}
{rank=same; raw_427 prespace_428 literal_429 raw_430}

raw_427 [label="raw"]

prespace_428 [label="prespace"]

literal_429 [label="literal"]

raw_430 [label="raw"]


// END RANK prose_421

raw_427 -> leaf_431
leaf_431  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Any of this business needs to move to the"]
// END RANK raw_427

prespace_428 -> leaf_432
leaf_432  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_428

literal_429 -> leaf_433
leaf_433  [color=Gray,shape=rectangle,fontname=Inconsolata,label="zoneherd"]
// END RANK literal_429

raw_430 -> leaf_434
leaf_434  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_430

prose_422 -> { raw_435 prespace_436 literal_437 raw_438 prespace_439 literal_440 raw_441 prespace_442 literal_443 raw_444}
{rank=same; raw_435 prespace_436 literal_437 raw_438 prespace_439 literal_440 raw_441 prespace_442 literal_443 raw_444}

raw_435 [label="raw"]

prespace_436 [label="prespace"]

literal_437 [label="literal"]

raw_438 [label="raw"]

prespace_439 [label="prespace"]

literal_440 [label="literal"]

raw_441 [label="raw"]

prespace_442 [label="prespace"]

literal_443 [label="literal"]

raw_444 [label="raw"]


// END RANK prose_422

raw_435 -> leaf_445
leaf_445  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Ideally,"]
// END RANK raw_435

prespace_436 -> leaf_446
leaf_446  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_436

literal_437 -> leaf_447
leaf_447  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeS"]
// END RANK literal_437

raw_438 -> leaf_448
leaf_448  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" will hold values needed to reflow the"]
// END RANK raw_438

prespace_439 -> leaf_449
leaf_449  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_439

literal_440 -> leaf_450
leaf_450  [color=Gray,shape=rectangle,fontname=Inconsolata,label="zones"]
// END RANK literal_440

raw_441 -> leaf_451
leaf_451  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and everything
else will be both calculated and accessed (internally) from"]
// END RANK raw_441

prespace_442 -> leaf_452
leaf_452  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_442

literal_443 -> leaf_453
leaf_453  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeS.zones"]
// END RANK literal_443

raw_444 -> leaf_454
leaf_454  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_444

codeblock_423 -> leaf_455
leaf_455  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function ModeS.cur_col(modeS)
   return modeS.txtbuf.cursor + modeS.l_margin - 1
end"]
// END RANK codeblock_423

structure_424 -> { hashline_456}
{rank=same; hashline_456}

hashline_456 [label="hashline"]


// END RANK structure_424

hashline_456 -> { hashtag_457}
{rank=same; hashtag_457}

hashtag_457 [label="hashtag"]


// END RANK hashline_456

hashtag_457 -> leaf_458
leaf_458  [color=Gray,shape=rectangle,fontname=Inconsolata,label="deprecated"]
// END RANK hashtag_457

codeblock_425 -> leaf_459
leaf_459  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function ModeS.replLine(modeS)
   return modeS.repl_top + #modeS.txtbuf.lines - 1
end"]
// END RANK codeblock_425

section_57 -> { header_460 prose_461 codeblock_462}
{rank=same; header_460 prose_461 codeblock_462}

header_460 [label="3 : ModeS:placeCursor()"]

prose_461 [label="prose"]

codeblock_462 [label="code block 285-291"]


// END RANK section_57

header_460 -> leaf_463
leaf_463  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** ModeS:placeCursor()"]
// END RANK header_460

prose_461 -> { raw_464 prespace_465 literal_466 raw_467}
{rank=same; raw_464 prespace_465 literal_466 raw_467}

raw_464 [label="raw"]

prespace_465 [label="prespace"]

literal_466 [label="literal"]

raw_467 [label="raw"]


// END RANK prose_461

raw_464 -> leaf_468
leaf_468  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Places the cursor where it belongs within the"]
// END RANK raw_464

prespace_465 -> leaf_469
leaf_469  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_465

literal_466 -> leaf_470
leaf_470  [color=Gray,shape=rectangle,fontname=Inconsolata,label="command"]
// END RANK literal_466

raw_467 -> leaf_471
leaf_471  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" zone.
"]
// END RANK raw_467

codeblock_462 -> leaf_472
leaf_472  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function ModeS.placeCursor(modeS)
   local col = modeS.zones.command.tc + modeS.txtbuf.cursor - 1
   local row = modeS.zones.command.tr + modeS.txtbuf.cur_row - 1
   write(a.colrow(col, row))
end"]
// END RANK codeblock_462

section_58 -> { header_473 prose_474 prose_475 codeblock_476}
{rank=same; header_473 prose_474 prose_475 codeblock_476}

header_473 [label="3 : ModeS:paint()"]

prose_474 [label="prose"]

prose_475 [label="prose"]

codeblock_476 [label="code block 301-306"]


// END RANK section_58

header_473 -> leaf_477
leaf_477  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** ModeS:paint()"]
// END RANK header_473

prose_474 -> { raw_478}
{rank=same; raw_478}

raw_478 [label="raw"]


// END RANK prose_474

raw_478 -> leaf_479
leaf_479  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This simply calls the same method on the zoneherd.
"]
// END RANK raw_478

prose_475 -> { prespace_480 literal_481 raw_482 prespace_483 literal_484 raw_485 prespace_486 literal_487 raw_488}
{rank=same; prespace_480 literal_481 raw_482 prespace_483 literal_484 raw_485 prespace_486 literal_487 raw_488}

prespace_480 [label="prespace"]

literal_481 [label="literal"]

raw_482 [label="raw"]

prespace_483 [label="prespace"]

literal_484 [label="literal"]

raw_485 [label="raw"]

prespace_486 [label="prespace"]

literal_487 [label="literal"]

raw_488 [label="raw"]


// END RANK prose_475

prespace_480 -> leaf_489
leaf_489  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_480

literal_481 -> leaf_490
leaf_490  [color=Gray,shape=rectangle,fontname=Inconsolata,label="all"]
// END RANK literal_481

raw_482 -> leaf_491
leaf_491  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is a boolean which, if"]
// END RANK raw_482

prespace_483 -> leaf_492
leaf_492  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_483

literal_484 -> leaf_493
leaf_493  [color=Gray,shape=rectangle,fontname=Inconsolata,label="true"]
// END RANK literal_484

raw_485 -> leaf_494
leaf_494  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", repaints everything whether"]
// END RANK raw_485

prespace_486 -> leaf_495
leaf_495  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_486

literal_487 -> leaf_496
leaf_496  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".touched"]
// END RANK literal_487

raw_488 -> leaf_497
leaf_497  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
or no.
"]
// END RANK raw_488

codeblock_476 -> leaf_498
leaf_498  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function ModeS.paint(modeS, all)
   modeS.zones:paint(modeS, all)
   return modeS
end"]
// END RANK codeblock_476

section_59 -> { header_499 prose_500 codeblock_501}
{rank=same; header_499 prose_500 codeblock_501}

header_499 [label="3 : ModeS:reflow()"]

prose_500 [label="prose"]

codeblock_501 [label="code block 311-316"]


// END RANK section_59

header_499 -> leaf_502
leaf_502  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** ModeS:reflow()"]
// END RANK header_499

prose_500 -> { raw_503}
{rank=same; raw_503}

raw_503 [label="raw"]


// END RANK prose_500

raw_503 -> leaf_504
leaf_504  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_503

codeblock_501 -> leaf_505
leaf_505  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function ModeS.reflow(modeS)
   modeS.zones:reflow(modeS)
   modeS:paint(true)
end"]
// END RANK codeblock_501

section_60 -> { header_506 prose_507 prose_508 codeblock_509 prose_510 prose_511 prose_512 prose_513 prose_514 prose_515 section_516}
{rank=same; header_506 prose_507 prose_508 codeblock_509 prose_510 prose_511 prose_512 prose_513 prose_514 prose_515 section_516}

header_506 [label="3 : Prompts and modes / raga"]

prose_507 [label="prose"]

prose_508 [label="prose"]

codeblock_509 [label="code block 324-327"]

prose_510 [label="prose"]

prose_511 [label="prose"]

prose_512 [label="prose"]

prose_513 [label="prose"]

prose_514 [label="prose"]

prose_515 [label="prose"]

section_516 [label="section: 348-363"]


// END RANK section_60

header_506 -> leaf_517
leaf_517  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Prompts and modes / raga"]
// END RANK header_506

prose_507 -> { raw_518 prespace_519 literal_520 raw_521}
{rank=same; raw_518 prespace_519 literal_520 raw_521}

raw_518 [label="raw"]

prespace_519 [label="prespace"]

literal_520 [label="literal"]

raw_521 [label="raw"]


// END RANK prose_507

raw_518 -> leaf_522
leaf_522  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Time to add modes to the"]
// END RANK raw_518

prespace_519 -> leaf_523
leaf_523  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_519

literal_520 -> leaf_524
leaf_524  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_520

raw_521 -> leaf_525
leaf_525  [color=Gray,shape=rectangle,fontname=Inconsolata,label="!
"]
// END RANK raw_521

prose_508 -> { raw_526}
{rank=same; raw_526}

raw_526 [label="raw"]


// END RANK prose_508

raw_526 -> leaf_527
leaf_527  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Right now everything works on the default mode, \"insert\":
"]
// END RANK raw_526

codeblock_509 -> leaf_528
leaf_528  [color=Gray,shape=rectangle,fontname=Inconsolata,label="ModeS.raga = \"nerf\"
ModeS.raga_default = \"nerf\""]
// END RANK codeblock_509

prose_510 -> { raw_529 prespace_530 literal_531 raw_532 prespace_533 literal_534 raw_535 prespace_536 literal_537 raw_538 prespace_539 literal_540 raw_541}
{rank=same; raw_529 prespace_530 literal_531 raw_532 prespace_533 literal_534 raw_535 prespace_536 literal_537 raw_538 prespace_539 literal_540 raw_541}

raw_529 [label="raw"]

prespace_530 [label="prespace"]

literal_531 [label="literal"]

raw_532 [label="raw"]

prespace_533 [label="prespace"]

literal_534 [label="literal"]

raw_535 [label="raw"]

prespace_536 [label="prespace"]

literal_537 [label="literal"]

raw_538 [label="raw"]

prespace_539 [label="prespace"]

literal_540 [label="literal"]

raw_541 [label="raw"]


// END RANK prose_510

raw_529 -> leaf_542
leaf_542  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Yes, I'm calling it"]
// END RANK raw_529

prespace_530 -> leaf_543
leaf_543  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_530

literal_531 -> leaf_544
leaf_544  [color=Gray,shape=rectangle,fontname=Inconsolata,label="raga"]
// END RANK literal_531

raw_532 -> leaf_545
leaf_545  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and that's a bit precious, but we have a"]
// END RANK raw_532

prespace_533 -> leaf_546
leaf_546  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_533

literal_534 -> leaf_547
leaf_547  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modes"]
// END RANK literal_534

raw_535 -> leaf_548
leaf_548  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
table and use it heavily. "]
// END RANK raw_535

prespace_536 -> leaf_549
leaf_549  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_536

literal_537 -> leaf_550
leaf_550  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modes"]
// END RANK literal_537

raw_538 -> leaf_551
leaf_551  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is kind of short for"]
// END RANK raw_538

prespace_539 -> leaf_552
leaf_552  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_539

literal_540 -> leaf_553
leaf_553  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modal selector"]
// END RANK literal_540

raw_541 -> leaf_554
leaf_554  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_541

prose_511 -> { raw_555}
{rank=same; raw_555}

raw_555 [label="raw"]


// END RANK prose_511

raw_555 -> leaf_556
leaf_556  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We'll need several basic modes and some ways to do overlay, and we need a
single source of truth as to what mode we're in.
"]
// END RANK raw_555

prose_512 -> { raw_557 prespace_558 literal_559 raw_560 prespace_561 literal_562 raw_563 prespace_564 literal_565 raw_566}
{rank=same; raw_557 prespace_558 literal_559 raw_560 prespace_561 literal_562 raw_563 prespace_564 literal_565 raw_566}

raw_557 [label="raw"]

prespace_558 [label="prespace"]

literal_559 [label="literal"]

raw_560 [label="raw"]

prespace_561 [label="prespace"]

literal_562 [label="literal"]

raw_563 [label="raw"]

prespace_564 [label="prespace"]

literal_565 [label="literal"]

raw_566 [label="raw"]


// END RANK prose_512

raw_557 -> leaf_567
leaf_567  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The entrance for that should be a single function,"]
// END RANK raw_557

prespace_558 -> leaf_568
leaf_568  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_558

literal_559 -> leaf_569
leaf_569  [color=Gray,shape=rectangle,fontname=Inconsolata,label="ModeS:shiftMode(raga)"]
// END RANK literal_559

raw_560 -> leaf_570
leaf_570  [color=Gray,shape=rectangle,fontname=Inconsolata,label=",
which takes care of all stateful changes to"]
// END RANK raw_560

prespace_561 -> leaf_571
leaf_571  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_561

literal_562 -> leaf_572
leaf_572  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_562

raw_563 -> leaf_573
leaf_573  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" needed to enter
the mode.  One thing it will do is set the field"]
// END RANK raw_563

prespace_564 -> leaf_574
leaf_574  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_564

literal_565 -> leaf_575
leaf_575  [color=Gray,shape=rectangle,fontname=Inconsolata,label="raga"]
// END RANK literal_565

raw_566 -> leaf_576
leaf_576  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" to the parameter.
"]
// END RANK raw_566

prose_513 -> { raw_577 prespace_578 literal_579 raw_580}
{rank=same; raw_577 prespace_578 literal_579 raw_580}

raw_577 [label="raw"]

prespace_578 [label="prespace"]

literal_579 [label="literal"]

raw_580 [label="raw"]


// END RANK prose_513

raw_577 -> leaf_581
leaf_581  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
As a general rule, we want mode changes to work generically, by changing
the functions attached to"]
// END RANK raw_577

prespace_578 -> leaf_582
leaf_582  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_578

literal_579 -> leaf_583
leaf_583  [color=Gray,shape=rectangle,fontname=Inconsolata,label="(category, value)"]
// END RANK literal_579

raw_580 -> leaf_584
leaf_584  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" pairs.
"]
// END RANK raw_580

prose_514 -> { raw_585}
{rank=same; raw_585}

raw_585 [label="raw"]


// END RANK prose_514

raw_585 -> leaf_586
leaf_586  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
But sometimes we'll want a bit of logic that dispatches on the mode directly,
repainting is a good example of this.
"]
// END RANK raw_585

prose_515 -> { raw_587 prespace_588 literal_589 raw_590}
{rank=same; raw_587 prespace_588 literal_589 raw_590}

raw_587 [label="raw"]

prespace_588 [label="prespace"]

literal_589 [label="literal"]

raw_590 [label="raw"]


// END RANK prose_515

raw_587 -> leaf_591
leaf_591  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The next mode we're going to write is"]
// END RANK raw_587

prespace_588 -> leaf_592
leaf_592  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_588

literal_589 -> leaf_593
leaf_593  [color=Gray,shape=rectangle,fontname=Inconsolata,label="\"search\""]
// END RANK literal_589

raw_590 -> leaf_594
leaf_594  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".

"]
// END RANK raw_590

section_516 -> { header_595 prose_596 codeblock_597 codeblock_598}
{rank=same; header_595 prose_596 codeblock_597 codeblock_598}

header_595 [label="4 : Prompts"]

prose_596 [label="prose"]

codeblock_597 [label="code block 352-355"]

codeblock_598 [label="code block 357-361"]


// END RANK section_516

header_595 -> leaf_599
leaf_599  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Prompts"]
// END RANK header_595

prose_596 -> { raw_600}
{rank=same; raw_600}

raw_600 [label="raw"]


// END RANK prose_596

raw_600 -> leaf_601
leaf_601  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Let's add some:
"]
// END RANK raw_600

codeblock_597 -> leaf_602
leaf_602  [color=Gray,shape=rectangle,fontname=Inconsolata,label="ModeS.prompts = { nerf   = \"👉 \",
                  search = \"⁉️ \" }"]
// END RANK codeblock_597

codeblock_598 -> leaf_603
leaf_603  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function ModeS.prompt(modeS)
   modeS.zones.prompt:replace(modeS.prompts[modeS.raga])
end"]
// END RANK codeblock_598

section_61 -> { header_604 prose_605 prose_606 prose_607 section_608 section_609}
{rank=same; header_604 prose_605 prose_606 prose_607 section_608 section_609}

header_604 [label="3 : ModeS:shiftMode(raga)"]

prose_605 [label="prose"]

prose_606 [label="prose"]

prose_607 [label="prose"]

section_608 [label="section: 375-407"]

section_609 [label="section: 408-427"]


// END RANK section_61

header_604 -> leaf_610
leaf_610  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** ModeS:shiftMode(raga)"]
// END RANK header_604

prose_605 -> { raw_611 prespace_612 literal_613 raw_614 prespace_615 literal_616 raw_617}
{rank=same; raw_611 prespace_612 literal_613 raw_614 prespace_615 literal_616 raw_617}

raw_611 [label="raw"]

prespace_612 [label="prespace"]

literal_613 [label="literal"]

raw_614 [label="raw"]

prespace_615 [label="prespace"]

literal_616 [label="literal"]

raw_617 [label="raw"]


// END RANK prose_605

raw_611 -> leaf_618
leaf_618  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The"]
// END RANK raw_611

prespace_612 -> leaf_619
leaf_619  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_612

literal_613 -> leaf_620
leaf_620  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_613

raw_614 -> leaf_621
leaf_621  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", as described in the prelude, is a stateful and hypermodal"]
// END RANK raw_614

prespace_615 -> leaf_622
leaf_622  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_615

literal_616 -> leaf_623
leaf_623  [color=Gray,shape=rectangle,fontname=Inconsolata,label="repl"]
// END RANK literal_616

raw_617 -> leaf_624
leaf_624  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" environment.
"]
// END RANK raw_617

prose_606 -> { prespace_625 literal_626 raw_627}
{rank=same; prespace_625 literal_626 raw_627}

prespace_625 [label="prespace"]

literal_626 [label="literal"]

raw_627 [label="raw"]


// END RANK prose_606

prespace_625 -> leaf_628
leaf_628  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_625

literal_626 -> leaf_629
leaf_629  [color=Gray,shape=rectangle,fontname=Inconsolata,label="shiftMode"]
// END RANK literal_626

raw_627 -> leaf_630
leaf_630  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is the gear stick which drives the state. It encapsulates the
state changes needed to switch between them.
"]
// END RANK raw_627

prose_607 -> { raw_631 prespace_632 literal_633 raw_634}
{rank=same; raw_631 prespace_632 literal_633 raw_634}

raw_631 [label="raw"]

prespace_632 [label="prespace"]

literal_633 [label="literal"]

raw_634 [label="raw"]


// END RANK prose_607

raw_631 -> leaf_635
leaf_635  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I'm going to go ahead and weld on"]
// END RANK raw_631

prespace_632 -> leaf_636
leaf_636  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_632

literal_633 -> leaf_637
leaf_637  [color=Gray,shape=rectangle,fontname=Inconsolata,label="search"]
// END RANK literal_633

raw_634 -> leaf_638
leaf_638  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" before I start waxing eloquent.

"]
// END RANK raw_634

section_608 -> { header_639 prose_640 codeblock_641}
{rank=same; header_639 prose_640 codeblock_641}

header_639 [label="4 : ModeS.closet"]

prose_640 [label="prose"]

codeblock_641 [label="code block 380-406"]


// END RANK section_608

header_639 -> leaf_642
leaf_642  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** ModeS.closet"]
// END RANK header_639

prose_640 -> { raw_643}
{rank=same; raw_643}

raw_643 [label="raw"]


// END RANK prose_640

raw_643 -> leaf_644
leaf_644  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

A storage table for modes and other things we aren't using and need to
retrieve.
"]
// END RANK raw_643

codeblock_641 -> leaf_645
leaf_645  [color=Gray,shape=rectangle,fontname=Inconsolata,label="ModeS.closet = { nerf = { modes = Nerf,
                          lex   = Lex.lua_thor },
                 search = { modes = Search,
                            lex   = c.base } }

function ModeS.shiftMode(modeS, raga)
   if raga == \"search\" then
      -- stash current lexer
      -- #todo do this in a less dumb way
      modeS.closet[modeS.raga].lex = modeS.lex
      modeS.lex = modeS.closet.search.lex
      modeS.modes = modeS.closet.search.modes
   elseif raga == \"nerf\" then
      -- do default nerfy things
      modeS.lex = modeS.closet.nerf.lex
      modeS.modes = modeS.closet.nerf.modes
   elseif raga == \"vril-nav\" then
      -- do vimmy navigation
   elseif raga == \"vril-ins\" then
      -- do vimmy inserts
   end
   modeS.raga = raga
   modeS:prompt()
   return modeS
end"]
// END RANK codeblock_641

section_609 -> { header_646 prose_647 codeblock_648}
{rank=same; header_646 prose_647 codeblock_648}

header_646 [label="4 : _firstCharHandler"]

prose_647 [label="prose"]

codeblock_648 [label="code block 413-425"]


// END RANK section_609

header_646 -> leaf_649
leaf_649  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** _firstCharHandler"]
// END RANK header_646

prose_647 -> { raw_650 prespace_651 literal_652 raw_653}
{rank=same; raw_650 prespace_651 literal_652 raw_653}

raw_650 [label="raw"]

prespace_651 [label="prespace"]

literal_652 [label="literal"]

raw_653 [label="raw"]


// END RANK prose_647

raw_650 -> leaf_654
leaf_654  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Our first character can trigger mode switches, notably we want an initial"]
// END RANK raw_650

prespace_651 -> leaf_655
leaf_655  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_651

literal_652 -> leaf_656
leaf_656  [color=Gray,shape=rectangle,fontname=Inconsolata,label="/"]
// END RANK literal_652

raw_653 -> leaf_657
leaf_657  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" to trigger search mode.
"]
// END RANK raw_653

codeblock_648 -> leaf_658
leaf_658  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function _firstCharHandler(modeS, category, value)
   local shifted = false
   if category == \"ASCII\" then
      if value == \"/\" then
         modeS:shiftMode \"search\"
         shifted = true
      end
   end
   modeS.firstChar = false
   return shifted
end"]
// END RANK codeblock_648

section_6 -> { header_659 prose_660 prose_661 prose_662 codeblock_663 prose_664 codeblock_665 section_666 section_667}
{rank=same; header_659 prose_660 prose_661 prose_662 codeblock_663 prose_664 codeblock_665 section_666 section_667}

header_659 [label="2 : act"]

prose_660 [label="prose"]

prose_661 [label="prose"]

prose_662 [label="prose"]

codeblock_663 [label="code block 441-498"]

prose_664 [label="prose"]

codeblock_665 [label="code block 502-506"]

section_666 [label="section: 509-517"]

section_667 [label="section: 518-595"]


// END RANK section_6

header_659 -> leaf_668
leaf_668  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** act"]
// END RANK header_659

prose_660 -> { raw_669 prespace_670 literal_671 raw_672 prespace_673 literal_674 raw_675 prespace_676 literal_677 raw_678 prespace_679 literal_680 raw_681}
{rank=same; raw_669 prespace_670 literal_671 raw_672 prespace_673 literal_674 raw_675 prespace_676 literal_677 raw_678 prespace_679 literal_680 raw_681}

raw_669 [label="raw"]

prespace_670 [label="prespace"]

literal_671 [label="literal"]

raw_672 [label="raw"]

prespace_673 [label="prespace"]

literal_674 [label="literal"]

raw_675 [label="raw"]

prespace_676 [label="prespace"]

literal_677 [label="literal"]

raw_678 [label="raw"]

prespace_679 [label="prespace"]

literal_680 [label="literal"]

raw_681 [label="raw"]


// END RANK prose_660

raw_669 -> leaf_682
leaf_682  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

 "]
// END RANK raw_669

prespace_670 -> leaf_683
leaf_683  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_670

literal_671 -> leaf_684
leaf_684  [color=Gray,shape=rectangle,fontname=Inconsolata,label="act"]
// END RANK literal_671

raw_672 -> leaf_685
leaf_685  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" simply dispatches. Note that our common interfaces is"]
// END RANK raw_672

prespace_673 -> leaf_686
leaf_686  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_673

literal_674 -> leaf_687
leaf_687  [color=Gray,shape=rectangle,fontname=Inconsolata,label="method(modeS, category, value)"]
// END RANK literal_674

raw_675 -> leaf_688
leaf_688  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", we need to distinguish betwen the tuple"]
// END RANK raw_675

prespace_676 -> leaf_689
leaf_689  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_676

literal_677 -> leaf_690
leaf_690  [color=Gray,shape=rectangle,fontname=Inconsolata,label="(\"INSERT\", \"SHIFT-LEFT\")"]
// END RANK literal_677

raw_678 -> leaf_691
leaf_691  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" (which could arrive from copy-paste[*]) and"]
// END RANK raw_678

prespace_679 -> leaf_692
leaf_692  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_679

literal_680 -> leaf_693
leaf_693  [color=Gray,shape=rectangle,fontname=Inconsolata,label="(\"NAV\", \"SHIFT-LEFT\")"]
// END RANK literal_680

raw_681 -> leaf_694
leaf_694  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and preserve information for our fall-through method.
"]
// END RANK raw_681

prose_661 -> { raw_695 prespace_696 italic_697 raw_698}
{rank=same; raw_695 prespace_696 italic_697 raw_698}

raw_695 [label="raw"]

prespace_696 [label="prespace"]

italic_697 [label="italic"]

raw_698 [label="raw"]


// END RANK prose_661

raw_695 -> leaf_699
leaf_699  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
[*] We"]
// END RANK raw_695

prespace_696 -> leaf_700
leaf_700  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_696

italic_697 -> leaf_701
leaf_701  [color=Gray,shape=rectangle,fontname=Inconsolata,label="should"]
// END RANK italic_697

raw_698 -> leaf_702
leaf_702  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" split up paste events into constituent codepoints, but we
don't.
"]
// END RANK raw_698

prose_662 -> { prespace_703 literal_704 raw_705}
{rank=same; prespace_703 literal_704 raw_705}

prespace_703 [label="prespace"]

literal_704 [label="literal"]

raw_705 [label="raw"]


// END RANK prose_662

prespace_703 -> leaf_706
leaf_706  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_703

literal_704 -> leaf_707
leaf_707  [color=Gray,shape=rectangle,fontname=Inconsolata,label="act"]
// END RANK literal_704

raw_705 -> leaf_708
leaf_708  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" always succeeds, meaning we need some metatable action to absorb and
log anything unexpected.
"]
// END RANK raw_705

codeblock_663 -> leaf_709
leaf_709  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local assertfmt = assert(core.assertfmt)

function ModeS.act(modeS, category, value)
   assertfmt(modeS.modes[category], \"no category %s in modeS\", category)
   -- catch special handlers first
   if modeS.special[value] then
      return modeS.special[value](modeS, category, value)
   end
   local icon = _make_icon(category, value)
   -- Special first-character handling
   if modeS.firstChar and not (category == \"MOUSE\" or category == \"NAV\") then
      modeS.zones.results:replace \"\"
      local shifted = _firstCharHandler(modeS, category, value)
      if shifted then
        goto final
      end
   end
   -- Dispatch on value if possible
   if type(modeS.modes[category]) == \"table\"
      and modeS.modes[category][value] then
      modeS.modes[category][value](modeS, category, value)

   -- otherwise fall back:
   elseif category == \"ASCII\" then
      -- hard coded for now
      modeS:insert(category, value)
   elseif category == \"NAV\" then
      if modeS.modes.NAV[value] then
         modeS.modes.NAV[value](modeS, category, value)
      else
         icon = _make_icon(\"NYI\", \"NAV::\" .. value)
      end
   elseif category == \"MOUSE\" then
      -- do mouse stuff
      if modeS.modes.MOUSE then
         modeS.modes.MOUSE(modeS, category, value)
      end
   else
      icon = _make_icon(\"NYI\", category .. \":\" .. value)
   end

   ::final::
   if modeS.raga == \"search\" then
      -- we need to fake this into a 'result'
      local searchResult = Rainbuf()
      searchResult[1] = modeS.hist:search(tostring(modeS.txtbuf))
      searchResult.n = 1
      modeS.zones.results:replace(searchResult)
   end
   -- Replace zones
   modeS.zones.stat_col:replace(icon)
   modeS.zones.command:replace(modeS.txtbuf)
   modeS.zones:adjustCommand()
   modeS:paint()
   collectgarbage()
end"]
// END RANK codeblock_663

prose_664 -> { raw_710 prespace_711 literal_712 raw_713}
{rank=same; raw_710 prespace_711 literal_712 raw_713}

raw_710 [label="raw"]

prespace_711 [label="prespace"]

literal_712 [label="literal"]

raw_713 [label="raw"]


// END RANK prose_664

raw_710 -> leaf_714
leaf_714  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
To keep"]
// END RANK raw_710

prespace_711 -> leaf_715
leaf_715  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_711

literal_712 -> leaf_716
leaf_716  [color=Gray,shape=rectangle,fontname=Inconsolata,label="act"]
// END RANK literal_712

raw_713 -> leaf_717
leaf_717  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" itself replaceable, we look it up on each call:
"]
// END RANK raw_713

codeblock_665 -> leaf_718
leaf_718  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function ModeS.__call(modeS, category, value)
  return modeS:act(category, value)
end"]
// END RANK codeblock_665

section_666 -> { header_719 prose_720 prose_721}
{rank=same; header_719 prose_720 prose_721}

header_719 [label="3 : ASCII"]

prose_720 [label="prose"]

prose_721 [label="prose"]


// END RANK section_666

header_719 -> leaf_722
leaf_722  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** ASCII"]
// END RANK header_719

prose_720 -> { raw_723}
{rank=same; raw_723}

raw_723 [label="raw"]


// END RANK prose_720

raw_723 -> leaf_724
leaf_724  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Any printable 7 bit utf-8 sequence.
"]
// END RANK raw_723

prose_721 -> { raw_725}
{rank=same; raw_725}

raw_725 [label="raw"]


// END RANK prose_721

raw_725 -> leaf_726
leaf_726  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Currently just self-inserts, but watch this space...



"]
// END RANK raw_725

section_667 -> { header_727 prose_728 codeblock_729 codeblock_730 codeblock_731}
{rank=same; header_727 prose_728 codeblock_729 codeblock_730 codeblock_731}

header_727 [label="3 : ModeS:eval()"]

prose_728 [label="prose"]

codeblock_729 [label="code block 521-526"]

codeblock_730 [label="code block 528-532"]

codeblock_731 [label="code block 534-593"]


// END RANK section_667

header_727 -> leaf_732
leaf_732  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** ModeS:eval()"]
// END RANK header_727

prose_728 -> { raw_733}
{rank=same; raw_733}

raw_733 [label="raw"]


// END RANK prose_728

raw_733 -> leaf_734
leaf_734  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

"]
// END RANK raw_733

codeblock_729 -> leaf_735
leaf_735  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function gatherResults(success, ...)
  local n = select('#', ...)
  return success, { n = n, ... }
end"]
// END RANK codeblock_729

codeblock_730 -> leaf_736
leaf_736  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function ModeS.clearResults(modeS)
   write(a.erase.box(modeS.repl_top + 1, 1, modeS.max_row, modeS.r_margin))
end"]
// END RANK codeblock_730

codeblock_731 -> leaf_737
leaf_737  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function ModeS.eval(modeS)
   local chunk = tostring(modeS.txtbuf)

   local success, results
   -- first we prefix return
   local f, err = loadstring('return ' .. chunk, 'REPL')

   if not f then
      -- try again without return
      f, err = loadstring(chunk, 'REPL')
   end
   if not f then
      local head = sub(chunk, 1, 1)
      if head == \"=\" then -- take pity on old-school Lua hackers
         f, err = loadstring('return ' .. sub(chunk,2), 'REPL')
      end -- more special REPL prefix soon: /, ?, >(?)
   end
   if f then
      setfenv(f, _G)
      success, results = gatherResults(xpcall(f, debug.traceback))
      :: succession ::  -- yesssss the power of goto compels you
      if success then
      -- successful call
         if results.n > 0 then
            local rb = Rainbuf(results)
            modeS.zones.results:replace(rb)
         else
            modeS.zones.results:replace \"\"
         end
      elseif string.find(results[1], \"is not declared\") then
         -- let's try it with __G what could go wrong?
         setfenv(f, __G)
         success, results = gatherResults(xpcall(f, debug.traceback))
         goto succession
      else
         -- error
         results.frozen = true
         modeS.zones.results:replace(results)
      end
   else
      if err:match \"'<eof>'$\" then
         -- Lua expects some more input, advance the txtbuf
         modeS.txtbuf:advance()
         write(a.colrow(1, modeS.repl_top + 1) .. \"...\")
         return true
      else
         local to_err = { err.. \"\\n\" .. stacktrace(),
                          n = 1,
                          frozen = true}
         modeS.zones.results:replace(to_err)
         -- pass through to default.
      end
   end

   modeS.hist:append(modeS.txtbuf, results, success)
   modeS.hist.cursor = #modeS.hist
   -- modeS:prompt()
end"]
// END RANK codeblock_731

section_7 -> { header_738 prose_739 codeblock_740 codeblock_741}
{rank=same; header_738 prose_739 codeblock_740 codeblock_741}

header_738 [label="2 : new"]

prose_739 [label="prose"]

codeblock_740 [label="code block 599-622"]

codeblock_741 [label="code block 624-626"]


// END RANK section_7

header_738 -> leaf_742
leaf_742  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** new"]
// END RANK header_738

prose_739 -> { raw_743}
{rank=same; raw_743}

raw_743 [label="raw"]


// END RANK prose_739

raw_743 -> leaf_744
leaf_744  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

"]
// END RANK raw_743

codeblock_740 -> leaf_745
leaf_745  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function new(max_col, max_row)
  local modeS = meta(ModeS)
  modeS.txtbuf = Txtbuf()
  modeS.hist  = Historian()
  modeS.lex  = Lex.lua_thor
  modeS.hist.cursor = #modeS.hist + 1
  modeS.max_col = max_col
  modeS.max_row = max_row
  -- this will be replaced with Zones
  modeS.l_margin = 4
  modeS.r_margin = 80
  modeS.row = 2
  modeS.repl_top  = ModeS.REPL_LINE
  modeS.zones = Zoneherd(modeS, write)
  modeS.zones.status:replace \"an repl, plz reply uwu 👀\"
  modeS.zones.prompt:replace \"👉  \"
  -- initial state
  modeS.firstChar = true
  return modeS
end

ModeS.idEst = new"]
// END RANK codeblock_740

codeblock_741 -> leaf_746
leaf_746  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return new"]
// END RANK codeblock_741


}
