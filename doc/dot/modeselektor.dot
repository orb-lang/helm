digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 247"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-174"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 section_5 section_6}
{rank=same; header_2 prose_3 prose_4 section_5 section_6}

header_2 [label="1 : Modeselektor"]

prose_3 [label="prose"]

prose_4 [label="prose"]

section_5 [label="section: 11-125"]

section_6 [label="section: 175-247"]


// END RANK section_1

header_2 -> leaf_7
leaf_7  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Modeselektor"]
// END RANK header_2

prose_3 -> { raw_8 prespace_9 literal_10 raw_11}
{rank=same; raw_8 prespace_9 literal_10 raw_11}

raw_8 [label="raw"]

prespace_9 [label="prespace"]

literal_10 [label="literal"]

raw_11 [label="raw"]


// END RANK prose_3

raw_8 -> leaf_12
leaf_12  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK raw_8

prespace_9 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_9

literal_10 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label="femto"]
// END RANK literal_10

raw_11 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" will hold all state for an terminal session.  Soon, we will
encapsulate that, making the library re-entrant.
"]
// END RANK raw_11

prose_4 -> { prespace_16 literal_17 raw_18 prespace_19 literal_20 raw_21 prespace_22 literal_23 raw_24}
{rank=same; prespace_16 literal_17 raw_18 prespace_19 literal_20 raw_21 prespace_22 literal_23 raw_24}

prespace_16 [label="prespace"]

literal_17 [label="literal"]

raw_18 [label="raw"]

prespace_19 [label="prespace"]

literal_20 [label="literal"]

raw_21 [label="raw"]

prespace_22 [label="prespace"]

literal_23 [label="literal"]

raw_24 [label="raw"]


// END RANK prose_4

prespace_16 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_16

literal_17 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_17

raw_18 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is the modal interpreter for the repl language, which becomes
the core of"]
// END RANK raw_18

prespace_19 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_19

literal_20 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label="ed"]
// END RANK literal_20

raw_21 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  This is a glorified lookup table with a state switch and
a pointer to the"]
// END RANK raw_21

prespace_22 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_22

literal_23 -> leaf_32
leaf_32  [color=Gray,shape=rectangle,fontname=Inconsolata,label="femto"]
// END RANK literal_23

raw_24 -> leaf_33
leaf_33  [color=Gray,shape=rectangle,fontname=Inconsolata,label="cell we're operating on.

"]
// END RANK raw_24

section_5 -> { header_34 prose_35 prose_36 prose_37 prose_38 prose_39 prose_40 prose_41 prose_42 prose_43 section_44 section_45 section_46}
{rank=same; header_34 prose_35 prose_36 prose_37 prose_38 prose_39 prose_40 prose_41 prose_42 prose_43 section_44 section_45 section_46}

header_34 [label="2 : Design"]

prose_35 [label="prose"]

prose_36 [label="prose"]

prose_37 [label="prose"]

prose_38 [label="prose"]

prose_39 [label="prose"]

prose_40 [label="prose"]

prose_41 [label="prose"]

prose_42 [label="prose"]

prose_43 [label="prose"]

section_44 [label="section: 53-69"]

section_45 [label="section: 70-125"]

section_46 [label="section: 126-174"]


// END RANK section_5

header_34 -> leaf_47
leaf_47  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Design"]
// END RANK header_34

prose_35 -> { raw_48 prespace_49 literal_50 raw_51 prespace_52 literal_53 raw_54}
{rank=same; raw_48 prespace_49 literal_50 raw_51 prespace_52 literal_53 raw_54}

raw_48 [label="raw"]

prespace_49 [label="prespace"]

literal_50 [label="literal"]

raw_51 [label="raw"]

prespace_52 [label="prespace"]

literal_53 [label="literal"]

raw_54 [label="raw"]


// END RANK prose_35

raw_48 -> leaf_55
leaf_55  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK raw_48

prespace_49 -> leaf_56
leaf_56  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_49

literal_50 -> leaf_57
leaf_57  [color=Gray,shape=rectangle,fontname=Inconsolata,label="femto"]
// END RANK literal_50

raw_51 -> leaf_58
leaf_58  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" passes keystrokes as messages to"]
// END RANK raw_51

prespace_52 -> leaf_59
leaf_59  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_52

literal_53 -> leaf_60
leaf_60  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_53

raw_54 -> leaf_61
leaf_61  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  In final boss form,
it does no writes to stdout at all.  It is smart enough to categorize and
parse various device reports, but has no knowledge of why those reports were
requested.
"]
// END RANK raw_54

prose_36 -> { prespace_62 literal_63 raw_64}
{rank=same; prespace_62 literal_63 raw_64}

prespace_62 [label="prespace"]

literal_63 [label="literal"]

raw_64 [label="raw"]


// END RANK prose_36

prespace_62 -> leaf_65
leaf_65  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_62

literal_63 -> leaf_66
leaf_66  [color=Gray,shape=rectangle,fontname=Inconsolata,label="femto"]
// END RANK literal_63

raw_64 -> leaf_67
leaf_67  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" runs the event loop, so all other members are pulled in as modules.
"]
// END RANK raw_64

prose_37 -> { prespace_68 literal_69 raw_70 prespace_71 literal_72 raw_73}
{rank=same; prespace_68 literal_69 raw_70 prespace_71 literal_72 raw_73}

prespace_68 [label="prespace"]

literal_69 [label="literal"]

raw_70 [label="raw"]

prespace_71 [label="prespace"]

literal_72 [label="literal"]

raw_73 [label="raw"]


// END RANK prose_37

prespace_68 -> leaf_74
leaf_74  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_68

literal_69 -> leaf_75
leaf_75  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_69

raw_70 -> leaf_76
leaf_76  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" takes care of system-level housekeeping: opening files and
sockets, keeping command history, fuzzy completion, and has its own eval loop
off the main track.  For evaluating lines, it will call a small executor, so
that in a little while we can put the user program in its own"]
// END RANK raw_70

prespace_71 -> leaf_77
leaf_77  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_71

literal_72 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label="LuaL_state"]
// END RANK literal_72

raw_73 -> leaf_79
leaf_79  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_73

prose_38 -> { raw_80 prespace_81 literal_82 raw_83}
{rank=same; raw_80 prespace_81 literal_82 raw_83}

raw_80 [label="raw"]

prespace_81 [label="prespace"]

literal_82 [label="literal"]

raw_83 [label="raw"]


// END RANK prose_38

raw_80 -> leaf_84
leaf_84  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This is both good practice, and absolutely necessary if we are to REPL other"]
// END RANK raw_80

prespace_81 -> leaf_85
leaf_85  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_81

literal_82 -> leaf_86
leaf_86  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bridge"]
// END RANK literal_82

raw_83 -> leaf_87
leaf_87  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" programs, each of which has its own event loop.
"]
// END RANK raw_83

prose_39 -> { prespace_88 literal_89 raw_90 prespace_91 literal_92 raw_93 prespace_94 literal_95 raw_96 prespace_97 literal_98 raw_99 prespace_100 literal_101 raw_102}
{rank=same; prespace_88 literal_89 raw_90 prespace_91 literal_92 raw_93 prespace_94 literal_95 raw_96 prespace_97 literal_98 raw_99 prespace_100 literal_101 raw_102}

prespace_88 [label="prespace"]

literal_89 [label="literal"]

raw_90 [label="raw"]

prespace_91 [label="prespace"]

literal_92 [label="literal"]

raw_93 [label="raw"]

prespace_94 [label="prespace"]

literal_95 [label="literal"]

raw_96 [label="raw"]

prespace_97 [label="prespace"]

literal_98 [label="literal"]

raw_99 [label="raw"]

prespace_100 [label="prespace"]

literal_101 [label="literal"]

raw_102 [label="raw"]


// END RANK prose_39

prespace_88 -> leaf_103
leaf_103  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_88

literal_89 -> leaf_104
leaf_104  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_89

raw_90 -> leaf_105
leaf_105  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" passes any edit or movement commands to a"]
// END RANK raw_90

prespace_91 -> leaf_106
leaf_106  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_91

literal_92 -> leaf_107
leaf_107  [color=Gray,shape=rectangle,fontname=Inconsolata,label="linebuf"]
// END RANK literal_92

raw_93 -> leaf_108
leaf_108  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", which
keeps all modeling of the line. "]
// END RANK raw_93

prespace_94 -> leaf_109
leaf_109  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_94

literal_95 -> leaf_110
leaf_110  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_95

raw_96 -> leaf_111
leaf_111  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" decides when to repaint the
screen, calling"]
// END RANK raw_96

prespace_97 -> leaf_112
leaf_112  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_97

literal_98 -> leaf_113
leaf_113  [color=Gray,shape=rectangle,fontname=Inconsolata,label="rainbuf"]
// END RANK literal_98

raw_99 -> leaf_114
leaf_114  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" with a region of"]
// END RANK raw_99

prespace_100 -> leaf_115
leaf_115  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_100

literal_101 -> leaf_116
leaf_116  [color=Gray,shape=rectangle,fontname=Inconsolata,label="linebuf"]
// END RANK literal_101

raw_102 -> leaf_117
leaf_117  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and instructions as to
how to paint it.
"]
// END RANK raw_102

prose_40 -> { raw_118 prespace_119 literal_120 raw_121 prespace_122 literal_123 raw_124 prespace_125 literal_126 raw_127}
{rank=same; raw_118 prespace_119 literal_120 raw_121 prespace_122 literal_123 raw_124 prespace_125 literal_126 raw_127}

raw_118 [label="raw"]

prespace_119 [label="prespace"]

literal_120 [label="literal"]

raw_121 [label="raw"]

prespace_122 [label="prespace"]

literal_123 [label="literal"]

raw_124 [label="raw"]

prespace_125 [label="prespace"]

literal_126 [label="literal"]

raw_127 [label="raw"]


// END RANK prose_40

raw_118 -> leaf_128
leaf_128  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
There is one"]
// END RANK raw_118

prespace_119 -> leaf_129
leaf_129  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_119

literal_120 -> leaf_130
leaf_130  [color=Gray,shape=rectangle,fontname=Inconsolata,label="deck"]
// END RANK literal_120

raw_121 -> leaf_131
leaf_131  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" instance member per screen, which tiles the available
space. "]
// END RANK raw_121

prespace_122 -> leaf_132
leaf_132  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_122

literal_123 -> leaf_133
leaf_133  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_123

raw_124 -> leaf_134
leaf_134  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is the writer, and"]
// END RANK raw_124

prespace_125 -> leaf_135
leaf_135  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_125

literal_126 -> leaf_136
leaf_136  [color=Gray,shape=rectangle,fontname=Inconsolata,label="rainbuf"]
// END RANK literal_126

raw_127 -> leaf_137
leaf_137  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" holds a pointer to the
table for read access.
"]
// END RANK raw_127

prose_41 -> { raw_138 prespace_139 literal_140 raw_141 prespace_142 literal_143 raw_144}
{rank=same; raw_138 prespace_139 literal_140 raw_141 prespace_142 literal_143 raw_144}

raw_138 [label="raw"]

prespace_139 [label="prespace"]

literal_140 [label="literal"]

raw_141 [label="raw"]

prespace_142 [label="prespace"]

literal_143 [label="literal"]

raw_144 [label="raw"]


// END RANK prose_41

raw_138 -> leaf_145
leaf_145  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
When we have our fancy parse engine and quipu structure, linebuf will call"]
// END RANK raw_138

prespace_139 -> leaf_146
leaf_146  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_139

literal_140 -> leaf_147
leaf_147  [color=Gray,shape=rectangle,fontname=Inconsolata,label="comb"]
// END RANK literal_140

raw_141 -> leaf_148
leaf_148  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" to redecorate the syntax tree before passing it to"]
// END RANK raw_141

prespace_142 -> leaf_149
leaf_149  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_142

literal_143 -> leaf_150
leaf_150  [color=Gray,shape=rectangle,fontname=Inconsolata,label="rainbuf"]
// END RANK literal_143

raw_144 -> leaf_151
leaf_151  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" for
markup.  At the moment I'm just going to write some crude lexers, which
will be more than enough for Clu and Lua, which have straightforward syntax.
"]
// END RANK raw_144

prose_42 -> { raw_152 prespace_153 literal_154 raw_155 prespace_156 literal_157 raw_158}
{rank=same; raw_152 prespace_153 literal_154 raw_155 prespace_156 literal_157 raw_158}

raw_152 [label="raw"]

prespace_153 [label="prespace"]

literal_154 [label="literal"]

raw_155 [label="raw"]

prespace_156 [label="prespace"]

literal_157 [label="literal"]

raw_158 [label="raw"]


// END RANK prose_42

raw_152 -> leaf_159
leaf_159  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
An intermediate step could just squeeze the linebuf into a string, parse it
with"]
// END RANK raw_152

prespace_153 -> leaf_160
leaf_160  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_153

literal_154 -> leaf_161
leaf_161  [color=Gray,shape=rectangle,fontname=Inconsolata,label="esplalier"]
// END RANK literal_154

raw_155 -> leaf_162
leaf_162  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and emit a"]
// END RANK raw_155

prespace_156 -> leaf_163
leaf_163  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_156

literal_157 -> leaf_164
leaf_164  [color=Gray,shape=rectangle,fontname=Inconsolata,label="rainbuf"]
// END RANK literal_157

raw_158 -> leaf_165
leaf_165  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" through the usual recursive method
lookup.  The problem isn't speed, not for a REPL, it's not having error
recovery parsing available.
"]
// END RANK raw_158

prose_43 -> { raw_166 prespace_167 literal_168 raw_169}
{rank=same; raw_166 prespace_167 literal_168 raw_169}

raw_166 [label="raw"]

prespace_167 [label="prespace"]

literal_168 [label="literal"]

raw_169 [label="raw"]


// END RANK prose_43

raw_166 -> leaf_170
leaf_170  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I will likely content myself with a grammar that kicks in when the user
presses return.  I'll want that to perform rewrites (such as removing
outer-level"]
// END RANK raw_166

prespace_167 -> leaf_171
leaf_171  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_167

literal_168 -> leaf_172
leaf_172  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local"]
// END RANK literal_168

raw_169 -> leaf_173
leaf_173  [color=Gray,shape=rectangle,fontname=Inconsolata,label="s to facilicate copy-pasting) and keep the readline
grammar from becoming too ad-hoc.

"]
// END RANK raw_169

section_44 -> { header_174 prose_175 codeblock_176 codeblock_177}
{rank=same; header_174 prose_175 codeblock_176 codeblock_177}

header_174 [label="4 : asserts"]

prose_175 [label="prose"]

codeblock_176 [label="code block 58-62"]

codeblock_177 [label="code block 65-67"]


// END RANK section_44

header_174 -> leaf_178
leaf_178  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** asserts"]
// END RANK header_174

prose_175 -> { raw_179 prespace_180 literal_181 raw_182 prespace_183 literal_184 raw_185}
{rank=same; raw_179 prespace_180 literal_181 raw_182 prespace_183 literal_184 raw_185}

raw_179 [label="raw"]

prespace_180 [label="prespace"]

literal_181 [label="literal"]

raw_182 [label="raw"]

prespace_183 [label="prespace"]

literal_184 [label="literal"]

raw_185 [label="raw"]


// END RANK prose_175

raw_179 -> leaf_186
leaf_186  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

There is little sense running"]
// END RANK raw_179

prespace_180 -> leaf_187
leaf_187  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_180

literal_181 -> leaf_188
leaf_188  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_181

raw_182 -> leaf_189
leaf_189  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" outside of the"]
// END RANK raw_182

prespace_183 -> leaf_190
leaf_190  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_183

literal_184 -> leaf_191
leaf_191  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bridge"]
// END RANK literal_184

raw_185 -> leaf_192
leaf_192  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
environment.
"]
// END RANK raw_185

codeblock_176 -> leaf_193
leaf_193  [color=Gray,shape=rectangle,fontname=Inconsolata,label="assert(meta, \"must have meta in _G\")
assert(write, \"must have write in _G\")
assert(ts, \"must have ts in _G\")"]
// END RANK codeblock_176

codeblock_177 -> leaf_194
leaf_194  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local ModeS = meta()"]
// END RANK codeblock_177

section_45 -> { header_195 prose_196 codeblock_197 prose_198 prose_199 prose_200 prose_201 prose_202 codeblock_203 prose_204 codeblock_205 prose_206 codeblock_207}
{rank=same; header_195 prose_196 codeblock_197 prose_198 prose_199 prose_200 prose_201 prose_202 codeblock_203 prose_204 codeblock_205 prose_206 codeblock_207}

header_195 [label="3 : Categories"]

prose_196 [label="prose"]

codeblock_197 [label="code block 74-81"]

prose_198 [label="prose"]

prose_199 [label="prose"]

prose_200 [label="prose"]

prose_201 [label="prose"]

prose_202 [label="prose"]

codeblock_203 [label="code block 102-108"]

prose_204 [label="prose"]

codeblock_205 [label="code block 113-115"]

prose_206 [label="prose"]

codeblock_207 [label="code block 119-123"]


// END RANK section_45

header_195 -> leaf_208
leaf_208  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Categories"]
// END RANK header_195

prose_196 -> { raw_209 prespace_210 literal_211 raw_212}
{rank=same; raw_209 prespace_210 literal_211 raw_212}

raw_209 [label="raw"]

prespace_210 [label="prespace"]

literal_211 [label="literal"]

raw_212 [label="raw"]


// END RANK prose_196

raw_209 -> leaf_213
leaf_213  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

These are the types of event recognized by"]
// END RANK raw_209

prespace_210 -> leaf_214
leaf_214  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_210

literal_211 -> leaf_215
leaf_215  [color=Gray,shape=rectangle,fontname=Inconsolata,label="femto"]
// END RANK literal_211

raw_212 -> leaf_216
leaf_216  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_212

codeblock_197 -> leaf_217
leaf_217  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local INSERT = {}
local NAV    = {}
local CTRL   = {}
local ALT    = {}
local FN     = {}
local MOUSE  = {}"]
// END RANK codeblock_197

prose_198 -> { raw_218 prespace_219 literal_220 raw_221}
{rank=same; raw_218 prespace_219 literal_220 raw_221}

raw_218 [label="raw"]

prespace_219 [label="prespace"]

literal_220 [label="literal"]

raw_221 [label="raw"]


// END RANK prose_198

raw_218 -> leaf_222
leaf_222  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Color schemes are supposed to be one-and-done, and I strongly suspect we
have a"]
// END RANK raw_218

prespace_219 -> leaf_223
leaf_223  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_219

literal_220 -> leaf_224
leaf_224  [color=Gray,shape=rectangle,fontname=Inconsolata,label="__concat"]
// END RANK literal_220

raw_221 -> leaf_225
leaf_225  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" dominated workflow, although I have yet to turn on the
profiler.
"]
// END RANK raw_221

prose_199 -> { raw_226 prespace_227 literal_228 raw_229 prespace_230 literal_231 raw_232}
{rank=same; raw_226 prespace_227 literal_228 raw_229 prespace_230 literal_231 raw_232}

raw_226 [label="raw"]

prespace_227 [label="prespace"]

literal_228 [label="literal"]

raw_229 [label="raw"]

prespace_230 [label="prespace"]

literal_231 [label="literal"]

raw_232 [label="raw"]


// END RANK prose_199

raw_226 -> leaf_233
leaf_233  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Therefore we use reference equality for the"]
// END RANK raw_226

prespace_227 -> leaf_234
leaf_234  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_227

literal_228 -> leaf_235
leaf_235  [color=Gray,shape=rectangle,fontname=Inconsolata,label="color"]
// END RANK literal_228

raw_229 -> leaf_236
leaf_236  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_229

prespace_230 -> leaf_237
leaf_237  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_230

literal_231 -> leaf_238
leaf_238  [color=Gray,shape=rectangle,fontname=Inconsolata,label="hints"]
// END RANK literal_231

raw_232 -> leaf_239
leaf_239  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" tables.
Switching themes is a matter of repopulating those tables.  I intend to
isolate this within an instance so that multiple terminals can each run their
own theme, through a simple 'fat inheritance' method.
"]
// END RANK raw_232

prose_200 -> { prespace_240 literal_241 raw_242 prespace_243 italic_244 raw_245}
{rank=same; prespace_240 literal_241 raw_242 prespace_243 italic_244 raw_245}

prespace_240 [label="prespace"]

literal_241 [label="literal"]

raw_242 [label="raw"]

prespace_243 [label="prespace"]

italic_244 [label="italic"]

raw_245 [label="raw"]


// END RANK prose_200

prespace_240 -> leaf_246
leaf_246  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_240

literal_241 -> leaf_247
leaf_247  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_241

raw_242 -> leaf_248
leaf_248  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is what you might call hypermodal. Everything is isolated in
its own lookup, that is, we use"]
// END RANK raw_242

prespace_243 -> leaf_249
leaf_249  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_243

italic_244 -> leaf_250
leaf_250  [color=Gray,shape=rectangle,fontname=Inconsolata,label="value"]
// END RANK italic_244

raw_245 -> leaf_251
leaf_251  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" equality.  This lets us pass strings
as messages and use jump tables to resolve most things.
"]
// END RANK raw_245

prose_201 -> { raw_252}
{rank=same; raw_252}

raw_252 [label="raw"]


// END RANK prose_201

raw_252 -> leaf_253
leaf_253  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It typically runs at the speed of human fingers and can afford to be much less
efficient than it will be, even before the JIT gets involved.
"]
// END RANK raw_252

prose_202 -> { raw_254 prespace_255 literal_256 raw_257}
{rank=same; raw_254 prespace_255 literal_256 raw_257}

raw_254 [label="raw"]

prespace_255 [label="prespace"]

literal_256 [label="literal"]

raw_257 [label="raw"]


// END RANK prose_202

raw_254 -> leaf_258
leaf_258  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Note also that everything is a method, our dispatch pattern will always
include the"]
// END RANK raw_254

prespace_255 -> leaf_259
leaf_259  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_255

literal_256 -> leaf_260
leaf_260  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeS"]
// END RANK literal_256

raw_257 -> leaf_261
leaf_261  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" instance as the first argument.
"]
// END RANK raw_257

codeblock_203 -> leaf_262
leaf_262  [color=Gray,shape=rectangle,fontname=Inconsolata,label="ModeS.modes = { INSERT = INSERT,
                NAV    = NAV,
                CTRL   = CTRL,
                ALT    = ALT,
                MOUSE  = MOUSE }"]
// END RANK codeblock_203

prose_204 -> { raw_263 prespace_264 literal_265 raw_266}
{rank=same; raw_263 prespace_264 literal_265 raw_266}

raw_263 [label="raw"]

prespace_264 [label="prespace"]

literal_265 [label="literal"]

raw_266 [label="raw"]


// END RANK prose_204

raw_263 -> leaf_267
leaf_267  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Sometimes its useful to briefly override handlers, so we check values
against"]
// END RANK raw_263

prespace_264 -> leaf_268
leaf_268  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_264

literal_265 -> leaf_269
leaf_269  [color=Gray,shape=rectangle,fontname=Inconsolata,label="special"]
// END RANK literal_265

raw_266 -> leaf_270
leaf_270  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" first:
"]
// END RANK raw_266

codeblock_205 -> leaf_271
leaf_271  [color=Gray,shape=rectangle,fontname=Inconsolata,label="ModeS.special = {}"]
// END RANK codeblock_205

prose_206 -> { raw_272}
{rank=same; raw_272}

raw_272 [label="raw"]


// END RANK prose_206

raw_272 -> leaf_273
leaf_273  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A simple pass-through so we can see what we're missing.
"]
// END RANK raw_272

codeblock_207 -> leaf_274
leaf_274  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function ModeS.default(modeS, category, value)
    return write(ts(value))
end"]
// END RANK codeblock_207

section_46 -> { header_275 prose_276 codeblock_277}
{rank=same; header_275 prose_276 codeblock_277}

header_275 [label="3 : status painter (colwrite)"]

prose_276 [label="prose"]

codeblock_277 [label="code block 130-173"]


// END RANK section_46

header_275 -> leaf_278
leaf_278  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** status painter (colwrite)"]
// END RANK header_275

prose_276 -> { raw_279}
{rank=same; raw_279}

raw_279 [label="raw"]


// END RANK prose_276

raw_279 -> leaf_280
leaf_280  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Time to port over the repl feedback code from femto.
"]
// END RANK raw_279

codeblock_277 -> leaf_281
leaf_281  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local STATCOL = 81
local STAT_TOP = 1
local STAT_RUN = 2

-- more like jumpwrite at this point but w/e
local function colwrite(str, col, row)
   col = col or STATCOL
   row = row or STAT_TOP
   local dash = a.stash()
             .. a.cursor.hide()
             .. a.jump(row, col)
             .. a.erase.right()
             .. str
             .. a.pop()
             .. a.cursor.show()
   write(dash)
end

local STAT_ICON = \"◉ \"

local function mk_paint(fragment, shade)
   return function(category, action)
      return shade(category .. fragment .. action)
   end
end

local act_map = { MOUSE  = pr_mouse,
                  NAV    = mk_paint(\": \", a.italic),
                  CTRL   = mk_paint(\": \", c.field),
                  ALT    = mk_paint(\": \", a.underscore),
                  INSERT = mk_paint(\": \", c.field)}

local icon_map = { MOUSE = mk_paint(STAT_ICON, c.userdata),
                   NAV   = mk_paint(STAT_ICON, a.magenta),
                   CTRL  = mk_paint(STAT_ICON, a.blue),
                   ALT   = mk_paint(STAT_ICON, c[\"function\"]),
                   INSERT = mk_paint(STAT_ICON, a.green) }

local function icon_paint(category, value)
   assert(icon_map[category], \"icon_paint NYI:\" .. category)
   return colwrite(icon_map[category](\"\", ts(value)))
end"]
// END RANK codeblock_277

section_6 -> { header_282 prose_283 prose_284 codeblock_285 prose_286 codeblock_287 prose_288 codeblock_289 codeblock_290}
{rank=same; header_282 prose_283 prose_284 codeblock_285 prose_286 codeblock_287 prose_288 codeblock_289 codeblock_290}

header_282 [label="2 : act"]

prose_283 [label="prose"]

prose_284 [label="prose"]

codeblock_285 [label="code block 185-200"]

prose_286 [label="prose"]

codeblock_287 [label="code block 204-208"]

prose_288 [label="prose"]

codeblock_289 [label="code block 212-219"]

codeblock_290 [label="code block 221-223"]


// END RANK section_6

header_282 -> leaf_291
leaf_291  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** act"]
// END RANK header_282

prose_283 -> { raw_292 prespace_293 literal_294 raw_295 prespace_296 literal_297 raw_298 prespace_299 literal_300 raw_301 prespace_302 literal_303 raw_304}
{rank=same; raw_292 prespace_293 literal_294 raw_295 prespace_296 literal_297 raw_298 prespace_299 literal_300 raw_301 prespace_302 literal_303 raw_304}

raw_292 [label="raw"]

prespace_293 [label="prespace"]

literal_294 [label="literal"]

raw_295 [label="raw"]

prespace_296 [label="prespace"]

literal_297 [label="literal"]

raw_298 [label="raw"]

prespace_299 [label="prespace"]

literal_300 [label="literal"]

raw_301 [label="raw"]

prespace_302 [label="prespace"]

literal_303 [label="literal"]

raw_304 [label="raw"]


// END RANK prose_283

raw_292 -> leaf_305
leaf_305  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK raw_292

prespace_293 -> leaf_306
leaf_306  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_293

literal_294 -> leaf_307
leaf_307  [color=Gray,shape=rectangle,fontname=Inconsolata,label="act"]
// END RANK literal_294

raw_295 -> leaf_308
leaf_308  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" simply dispatches. Note that our common interfaces is"]
// END RANK raw_295

prespace_296 -> leaf_309
leaf_309  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_296

literal_297 -> leaf_310
leaf_310  [color=Gray,shape=rectangle,fontname=Inconsolata,label="method(modeS, category, value)"]
// END RANK literal_297

raw_298 -> leaf_311
leaf_311  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", we need to distinguish betwen the tuple"]
// END RANK raw_298

prespace_299 -> leaf_312
leaf_312  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_299

literal_300 -> leaf_313
leaf_313  [color=Gray,shape=rectangle,fontname=Inconsolata,label="(\"INSERT\", \"SHIFT-LEFT\")"]
// END RANK literal_300

raw_301 -> leaf_314
leaf_314  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" (which could arrive from copy-paste) and"]
// END RANK raw_301

prespace_302 -> leaf_315
leaf_315  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_302

literal_303 -> leaf_316
leaf_316  [color=Gray,shape=rectangle,fontname=Inconsolata,label="(\"NAV\", \"SHIFT-LEFT\")"]
// END RANK literal_303

raw_304 -> leaf_317
leaf_317  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and preserve information for our fall-through method.
"]
// END RANK raw_304

prose_284 -> { prespace_318 literal_319 raw_320}
{rank=same; prespace_318 literal_319 raw_320}

prespace_318 [label="prespace"]

literal_319 [label="literal"]

raw_320 [label="raw"]


// END RANK prose_284

prespace_318 -> leaf_321
leaf_321  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_318

literal_319 -> leaf_322
leaf_322  [color=Gray,shape=rectangle,fontname=Inconsolata,label="act"]
// END RANK literal_319

raw_320 -> leaf_323
leaf_323  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" always succeeds, meaning we need some metatable action to absorb and
log anything unexpected.
"]
// END RANK raw_320

codeblock_285 -> leaf_324
leaf_324  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function ModeS.act(modeS, category, value)
  assert(modeS.modes, \"modeS must have a modes table\")
  assert(modeS.special, \"modeS must have a special table\")
  assert(modeS.modes[category], \"no category \" .. category .. \" in modeS\")
   if modeS.special[value] then
      return modeS.special[value](modeS, category, value)
   elseif modeS.modes[category][value] then
      icon_paint(category, value)
      return modeS.modes[category][value](modeS, category, value)
   else
      icon_paint(category, value)
      return modeS:default(category, value)
   end
end"]
// END RANK codeblock_285

prose_286 -> { raw_325 prespace_326 literal_327 raw_328}
{rank=same; raw_325 prespace_326 literal_327 raw_328}

raw_325 [label="raw"]

prespace_326 [label="prespace"]

literal_327 [label="literal"]

raw_328 [label="raw"]


// END RANK prose_286

raw_325 -> leaf_329
leaf_329  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We include indirection in"]
// END RANK raw_325

prespace_326 -> leaf_330
leaf_330  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_326

literal_327 -> leaf_331
leaf_331  [color=Gray,shape=rectangle,fontname=Inconsolata,label="act"]
// END RANK literal_327

raw_328 -> leaf_332
leaf_332  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" itself, looking it up on each call:
"]
// END RANK raw_328

codeblock_287 -> leaf_333
leaf_333  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function ModeS.__call(modeS, category, value)
  return modeS:act(category, value)
end"]
// END RANK codeblock_287

prose_288 -> { raw_334}
{rank=same; raw_334}

raw_334 [label="raw"]


// END RANK prose_288

raw_334 -> leaf_335
leaf_335  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This will need to take a complete config table at some point.
"]
// END RANK raw_334

codeblock_289 -> leaf_336
leaf_336  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function new()
  local modeS = meta(ModeS)
  return modeS
end

ModeS.idEst = new"]
// END RANK codeblock_289

codeblock_290 -> leaf_337
leaf_337  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return new"]
// END RANK codeblock_290


}
