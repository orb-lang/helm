digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 551"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-502"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 section_5 section_6 section_7}
{rank=same; header_2 prose_3 prose_4 section_5 section_6 section_7}

header_2 [label="1 : Modeselektor"]

prose_3 [label="prose"]

prose_4 [label="prose"]

section_5 [label="section: 12-261"]

section_6 [label="section: 284-413"]

section_7 [label="section: 503-551"]


// END RANK section_1

header_2 -> leaf_8
leaf_8  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Modeselektor"]
// END RANK header_2

prose_3 -> { raw_9 prespace_10 literal_11 raw_12}
{rank=same; raw_9 prespace_10 literal_11 raw_12}

raw_9 [label="raw"]

prespace_10 [label="prespace"]

literal_11 [label="literal"]

raw_12 [label="raw"]


// END RANK prose_3

raw_9 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_9

prespace_10 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_10

literal_11 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label="femto"]
// END RANK literal_11

raw_12 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" will hold all state for an terminal session.  Soon, we will
encapsulate that, making the library re-entrant.
"]
// END RANK raw_12

prose_4 -> { prespace_17 literal_18 raw_19 prespace_20 literal_21 raw_22 prespace_23 literal_24 raw_25}
{rank=same; prespace_17 literal_18 raw_19 prespace_20 literal_21 raw_22 prespace_23 literal_24 raw_25}

prespace_17 [label="prespace"]

literal_18 [label="literal"]

raw_19 [label="raw"]

prespace_20 [label="prespace"]

literal_21 [label="literal"]

raw_22 [label="raw"]

prespace_23 [label="prespace"]

literal_24 [label="literal"]

raw_25 [label="raw"]


// END RANK prose_4

prespace_17 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_17

literal_18 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_18

raw_19 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is the modal interpreter for the repl language, which becomes
the core of"]
// END RANK raw_19

prespace_20 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_20

literal_21 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label="ed"]
// END RANK literal_21

raw_22 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  This is a glorified lookup table with a state switch and
a pointer to the"]
// END RANK raw_22

prespace_23 -> leaf_32
leaf_32  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_23

literal_24 -> leaf_33
leaf_33  [color=Gray,shape=rectangle,fontname=Inconsolata,label="femto"]
// END RANK literal_24

raw_25 -> leaf_34
leaf_34  [color=Gray,shape=rectangle,fontname=Inconsolata,label="cell we're operating on.

"]
// END RANK raw_25

section_5 -> { header_35 prose_36 prose_37 prose_38 prose_39 prose_40 prose_41 prose_42 prose_43 prose_44 prose_45 prose_46 prose_47 prose_48 prose_49 prose_50 prose_51 prose_52 section_53 section_54 section_55 section_56 section_57 section_58}
{rank=same; header_35 prose_36 prose_37 prose_38 prose_39 prose_40 prose_41 prose_42 prose_43 prose_44 prose_45 prose_46 prose_47 prose_48 prose_49 prose_50 prose_51 prose_52 section_53 section_54 section_55 section_56 section_57 section_58}

header_35 [label="2 : Design"]

prose_36 [label="prose"]

prose_37 [label="prose"]

prose_38 [label="prose"]

prose_39 [label="prose"]

prose_40 [label="prose"]

prose_41 [label="prose"]

prose_42 [label="prose"]

prose_43 [label="prose"]

prose_44 [label="prose"]

prose_45 [label="prose"]

prose_46 [label="prose"]

prose_47 [label="prose"]

prose_48 [label="prose"]

prose_49 [label="prose"]

prose_50 [label="prose"]

prose_51 [label="prose"]

prose_52 [label="prose"]

section_53 [label="section: 85-96"]

section_54 [label="section: 97-116"]

section_55 [label="section: 117-173"]

section_56 [label="section: 174-189"]

section_57 [label="section: 190-261"]

section_58 [label="section: 262-283"]


// END RANK section_5

header_35 -> leaf_59
leaf_59  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Design"]
// END RANK header_35

prose_36 -> { raw_60 prespace_61 literal_62 raw_63 prespace_64 literal_65 raw_66}
{rank=same; raw_60 prespace_61 literal_62 raw_63 prespace_64 literal_65 raw_66}

raw_60 [label="raw"]

prespace_61 [label="prespace"]

literal_62 [label="literal"]

raw_63 [label="raw"]

prespace_64 [label="prespace"]

literal_65 [label="literal"]

raw_66 [label="raw"]


// END RANK prose_36

raw_60 -> leaf_67
leaf_67  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

 "]
// END RANK raw_60

prespace_61 -> leaf_68
leaf_68  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_61

literal_62 -> leaf_69
leaf_69  [color=Gray,shape=rectangle,fontname=Inconsolata,label="femto"]
// END RANK literal_62

raw_63 -> leaf_70
leaf_70  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" passes keystrokes as messages to"]
// END RANK raw_63

prespace_64 -> leaf_71
leaf_71  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_64

literal_65 -> leaf_72
leaf_72  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_65

raw_66 -> leaf_73
leaf_73  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  It does no writes
to stdout at all.  It is smart enough to categorize and parse various device
reports, but has no knowledge of why those reports were requested.
"]
// END RANK raw_66

prose_37 -> { prespace_74 literal_75 raw_76}
{rank=same; prespace_74 literal_75 raw_76}

prespace_74 [label="prespace"]

literal_75 [label="literal"]

raw_76 [label="raw"]


// END RANK prose_37

prespace_74 -> leaf_77
leaf_77  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_74

literal_75 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label="femto"]
// END RANK literal_75

raw_76 -> leaf_79
leaf_79  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" runs the event loop, so all other members are pulled in as modules.
"]
// END RANK raw_76

prose_38 -> { prespace_80 literal_81 raw_82 prespace_83 literal_84 raw_85}
{rank=same; prespace_80 literal_81 raw_82 prespace_83 literal_84 raw_85}

prespace_80 [label="prespace"]

literal_81 [label="literal"]

raw_82 [label="raw"]

prespace_83 [label="prespace"]

literal_84 [label="literal"]

raw_85 [label="raw"]


// END RANK prose_38

prespace_80 -> leaf_86
leaf_86  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_80

literal_81 -> leaf_87
leaf_87  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_81

raw_82 -> leaf_88
leaf_88  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" takes care of system-level housekeeping: opening files
and sockets, keeping command history, fuzzy completion, and has its own eval
loop off the main track.  For evaluating lines, it will call a small executor,
so that in a little while we can put the user program in its own"]
// END RANK raw_82

prespace_83 -> leaf_89
leaf_89  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_83

literal_84 -> leaf_90
leaf_90  [color=Gray,shape=rectangle,fontname=Inconsolata,label="LuaL_state"]
// END RANK literal_84

raw_85 -> leaf_91
leaf_91  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_85

prose_39 -> { raw_92 prespace_93 literal_94 raw_95}
{rank=same; raw_92 prespace_93 literal_94 raw_95}

raw_92 [label="raw"]

prespace_93 [label="prespace"]

literal_94 [label="literal"]

raw_95 [label="raw"]


// END RANK prose_39

raw_92 -> leaf_96
leaf_96  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This is both good practice, and absolutely necessary if we are to REPL other"]
// END RANK raw_92

prespace_93 -> leaf_97
leaf_97  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_93

literal_94 -> leaf_98
leaf_98  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bridge"]
// END RANK literal_94

raw_95 -> leaf_99
leaf_99  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" programs, each of which has its own event loop.
"]
// END RANK raw_95

prose_40 -> { raw_100 prespace_101 literal_102 raw_103}
{rank=same; raw_100 prespace_101 literal_102 raw_103}

raw_100 [label="raw"]

prespace_101 [label="prespace"]

literal_102 [label="literal"]

raw_103 [label="raw"]


// END RANK prose_40

raw_100 -> leaf_104
leaf_104  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The implementation is essentially a VM.  Category and value are
successively looked up in jump tables and the method applied with the"]
// END RANK raw_100

prespace_101 -> leaf_105
leaf_105  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_101

literal_102 -> leaf_106
leaf_106  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeS"]
// END RANK literal_102

raw_103 -> leaf_107
leaf_107  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
instance as the first argument.
"]
// END RANK raw_103

prose_41 -> { raw_108}
{rank=same; raw_108}

raw_108 [label="raw"]


// END RANK prose_41

raw_108 -> leaf_109
leaf_109  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The state machine has to represent two sorts of state: the mode we're
operating in, and a buffer of commands.  Our mode engine is modeled after
emacs: rather than have some kind of flag that can be set to \"insert\",
\"navigate\", \"command\", or \"visual\", these will be modeled as swiching the
pointer to jump tables.  If a command needs to know which mode it's in, this
can be done with pointer comparison.
"]
// END RANK raw_108

prose_42 -> { raw_110 prespace_111 literal_112 raw_113 prespace_114 literal_115 raw_116 prespace_117 literal_118 raw_119 prespace_120 literal_121 raw_122}
{rank=same; raw_110 prespace_111 literal_112 raw_113 prespace_114 literal_115 raw_116 prespace_117 literal_118 raw_119 prespace_120 literal_121 raw_122}

raw_110 [label="raw"]

prespace_111 [label="prespace"]

literal_112 [label="literal"]

raw_113 [label="raw"]

prespace_114 [label="prespace"]

literal_115 [label="literal"]

raw_116 [label="raw"]

prespace_117 [label="prespace"]

literal_118 [label="literal"]

raw_119 [label="raw"]

prespace_120 [label="prespace"]

literal_121 [label="literal"]

raw_122 [label="raw"]


// END RANK prose_42

raw_110 -> leaf_123
leaf_123  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We're starting with"]
// END RANK raw_110

prespace_111 -> leaf_124
leaf_124  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_111

literal_112 -> leaf_125
leaf_125  [color=Gray,shape=rectangle,fontname=Inconsolata,label="vi"]
// END RANK literal_112

raw_113 -> leaf_126
leaf_126  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" mode and"]
// END RANK raw_113

prespace_114 -> leaf_127
leaf_127  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_114

literal_115 -> leaf_128
leaf_128  [color=Gray,shape=rectangle,fontname=Inconsolata,label="nerf"]
// END RANK literal_115

raw_116 -> leaf_129
leaf_129  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" mode, which is a lightweight"]
// END RANK raw_116

prespace_117 -> leaf_130
leaf_130  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_117

literal_118 -> leaf_131
leaf_131  [color=Gray,shape=rectangle,fontname=Inconsolata,label="readline"]
// END RANK literal_118

raw_119 -> leaf_132
leaf_132  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" implementation that won't use the command buffer.  Issuing a
command like"]
// END RANK raw_119

prespace_120 -> leaf_133
leaf_133  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_120

literal_121 -> leaf_134
leaf_134  [color=Gray,shape=rectangle,fontname=Inconsolata,label="d3w"]
// END RANK literal_121

raw_122 -> leaf_135
leaf_135  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" requires a simple command buffer.
"]
// END RANK raw_122

prose_43 -> { raw_136 prespace_137 literal_138 raw_139 prespace_140 literal_141 raw_142}
{rank=same; raw_136 prespace_137 literal_138 raw_139 prespace_140 literal_141 raw_142}

raw_136 [label="raw"]

prespace_137 [label="prespace"]

literal_138 [label="literal"]

raw_139 [label="raw"]

prespace_140 [label="prespace"]

literal_141 [label="literal"]

raw_142 [label="raw"]


// END RANK prose_43

raw_136 -> leaf_143
leaf_143  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The syntax can't be tied to the semantics in any tighly-coupled way. I intend
to support"]
// END RANK raw_136

prespace_137 -> leaf_144
leaf_144  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_137

literal_138 -> leaf_145
leaf_145  [color=Gray,shape=rectangle,fontname=Inconsolata,label="kakoune"]
// END RANK literal_138

raw_139 -> leaf_146
leaf_146  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" syntax as soon as possible; there you would say"]
// END RANK raw_139

prespace_140 -> leaf_147
leaf_147  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_140

literal_141 -> leaf_148
leaf_148  [color=Gray,shape=rectangle,fontname=Inconsolata,label="w3d"]
// END RANK literal_141

raw_142 -> leaf_149
leaf_149  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_142

prose_44 -> { raw_150 prespace_151 literal_152 raw_153 prespace_154 literal_155 raw_156}
{rank=same; raw_150 prespace_151 literal_152 raw_153 prespace_154 literal_155 raw_156}

raw_150 [label="raw"]

prespace_151 [label="prespace"]

literal_152 [label="literal"]

raw_153 [label="raw"]

prespace_154 [label="prespace"]

literal_155 [label="literal"]

raw_156 [label="raw"]


// END RANK prose_44

raw_150 -> leaf_157
leaf_157  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This implies that the commands can't be aware of the buffer; because"]
// END RANK raw_150

prespace_151 -> leaf_158
leaf_158  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_151

literal_152 -> leaf_159
leaf_159  [color=Gray,shape=rectangle,fontname=Inconsolata,label="d3w"]
// END RANK literal_152

raw_153 -> leaf_160
leaf_160  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
and"]
// END RANK raw_153

prespace_154 -> leaf_161
leaf_161  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_154

literal_155 -> leaf_162
leaf_162  [color=Gray,shape=rectangle,fontname=Inconsolata,label="w3d"]
// END RANK literal_155

raw_156 -> leaf_163
leaf_163  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" are two ways of saying the same thing, they should end in an
identical method call.
"]
// END RANK raw_156

prose_45 -> { raw_164}
{rank=same; raw_164}

raw_164 [label="raw"]


// END RANK prose_45

raw_164 -> leaf_165
leaf_165  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This means when the time comes we handle it with a secondary dispatch layer.
"]
// END RANK raw_164

prose_46 -> { raw_166}
{rank=same; raw_166}

raw_166 [label="raw"]


// END RANK prose_46

raw_166 -> leaf_167
leaf_167  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
There really are effectively arbitrary levels of indirection possible in an
editor.  This is why we must be absolutely consistent about everything
receiving the same tuple (modeS, category, value).
"]
// END RANK raw_166

prose_47 -> { raw_168 prespace_169 literal_170 raw_171 prespace_172 literal_173 raw_174 prespace_175 literal_176 raw_177}
{rank=same; raw_168 prespace_169 literal_170 raw_171 prespace_172 literal_173 raw_174 prespace_175 literal_176 raw_177}

raw_168 [label="raw"]

prespace_169 [label="prespace"]

literal_170 [label="literal"]

raw_171 [label="raw"]

prespace_172 [label="prespace"]

literal_173 [label="literal"]

raw_174 [label="raw"]

prespace_175 [label="prespace"]

literal_176 [label="literal"]

raw_177 [label="raw"]


// END RANK prose_47

raw_168 -> leaf_178
leaf_178  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
They must also have the same return type, with is either"]
// END RANK raw_168

prespace_169 -> leaf_179
leaf_179  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_169

literal_170 -> leaf_180
leaf_180  [color=Gray,shape=rectangle,fontname=Inconsolata,label="true"]
// END RANK literal_170

raw_171 -> leaf_181
leaf_181  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" or"]
// END RANK raw_171

prespace_172 -> leaf_182
leaf_182  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_172

literal_173 -> leaf_183
leaf_183  [color=Gray,shape=rectangle,fontname=Inconsolata,label="false, err"]
// END RANK literal_173

raw_174 -> leaf_184
leaf_184  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  where"]
// END RANK raw_174

prespace_175 -> leaf_185
leaf_185  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_175

literal_176 -> leaf_186
leaf_186  [color=Gray,shape=rectangle,fontname=Inconsolata,label="err"]
// END RANK literal_176

raw_177 -> leaf_187
leaf_187  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is an error object which may be a primitive string.

"]
// END RANK raw_177

prose_48 -> { prespace_188 literal_189 raw_190 prespace_191 literal_192 raw_193 prespace_194 literal_195 raw_196 prespace_197 literal_198 raw_199 prespace_200 literal_201 raw_202}
{rank=same; prespace_188 literal_189 raw_190 prespace_191 literal_192 raw_193 prespace_194 literal_195 raw_196 prespace_197 literal_198 raw_199 prespace_200 literal_201 raw_202}

prespace_188 [label="prespace"]

literal_189 [label="literal"]

raw_190 [label="raw"]

prespace_191 [label="prespace"]

literal_192 [label="literal"]

raw_193 [label="raw"]

prespace_194 [label="prespace"]

literal_195 [label="literal"]

raw_196 [label="raw"]

prespace_197 [label="prespace"]

literal_198 [label="literal"]

raw_199 [label="raw"]

prespace_200 [label="prespace"]

literal_201 [label="literal"]

raw_202 [label="raw"]


// END RANK prose_48

prespace_188 -> leaf_203
leaf_203  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_188

literal_189 -> leaf_204
leaf_204  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_189

raw_190 -> leaf_205
leaf_205  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" passes any edit or movement commands to an internally-owned"]
// END RANK raw_190

prespace_191 -> leaf_206
leaf_206  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_191

literal_192 -> leaf_207
leaf_207  [color=Gray,shape=rectangle,fontname=Inconsolata,label="linebuf"]
// END RANK literal_192

raw_193 -> leaf_208
leaf_208  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", which keeps all modeling of the line. "]
// END RANK raw_193

prespace_194 -> leaf_209
leaf_209  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_194

literal_195 -> leaf_210
leaf_210  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_195

raw_196 -> leaf_211
leaf_211  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" decides when
to repaint the screen, calling"]
// END RANK raw_196

prespace_197 -> leaf_212
leaf_212  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_197

literal_198 -> leaf_213
leaf_213  [color=Gray,shape=rectangle,fontname=Inconsolata,label="rainbuf"]
// END RANK literal_198

raw_199 -> leaf_214
leaf_214  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" with a region of"]
// END RANK raw_199

prespace_200 -> leaf_215
leaf_215  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_200

literal_201 -> leaf_216
leaf_216  [color=Gray,shape=rectangle,fontname=Inconsolata,label="linebuf"]
// END RANK literal_201

raw_202 -> leaf_217
leaf_217  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and
instructions as to how to paint it.
"]
// END RANK raw_202

prose_49 -> { raw_218 prespace_219 literal_220 raw_221 prespace_222 literal_223 raw_224 prespace_225 literal_226 raw_227}
{rank=same; raw_218 prespace_219 literal_220 raw_221 prespace_222 literal_223 raw_224 prespace_225 literal_226 raw_227}

raw_218 [label="raw"]

prespace_219 [label="prespace"]

literal_220 [label="literal"]

raw_221 [label="raw"]

prespace_222 [label="prespace"]

literal_223 [label="literal"]

raw_224 [label="raw"]

prespace_225 [label="prespace"]

literal_226 [label="literal"]

raw_227 [label="raw"]


// END RANK prose_49

raw_218 -> leaf_228
leaf_228  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
There is one"]
// END RANK raw_218

prespace_219 -> leaf_229
leaf_229  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_219

literal_220 -> leaf_230
leaf_230  [color=Gray,shape=rectangle,fontname=Inconsolata,label="deck"]
// END RANK literal_220

raw_221 -> leaf_231
leaf_231  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" instance member per screen, which tiles the available
space. "]
// END RANK raw_221

prespace_222 -> leaf_232
leaf_232  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_222

literal_223 -> leaf_233
leaf_233  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_223

raw_224 -> leaf_234
leaf_234  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is the writer, and"]
// END RANK raw_224

prespace_225 -> leaf_235
leaf_235  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_225

literal_226 -> leaf_236
leaf_236  [color=Gray,shape=rectangle,fontname=Inconsolata,label="rainbuf"]
// END RANK literal_226

raw_227 -> leaf_237
leaf_237  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" holds a pointer to the
table for read access.
"]
// END RANK raw_227

prose_50 -> { raw_238 prespace_239 literal_240 raw_241 prespace_242 literal_243 raw_244}
{rank=same; raw_238 prespace_239 literal_240 raw_241 prespace_242 literal_243 raw_244}

raw_238 [label="raw"]

prespace_239 [label="prespace"]

literal_240 [label="literal"]

raw_241 [label="raw"]

prespace_242 [label="prespace"]

literal_243 [label="literal"]

raw_244 [label="raw"]


// END RANK prose_50

raw_238 -> leaf_245
leaf_245  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
When we have our fancy parse engine and quipu structure, linebuf will call"]
// END RANK raw_238

prespace_239 -> leaf_246
leaf_246  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_239

literal_240 -> leaf_247
leaf_247  [color=Gray,shape=rectangle,fontname=Inconsolata,label="comb"]
// END RANK literal_240

raw_241 -> leaf_248
leaf_248  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" to redecorate the syntax tree before passing it to"]
// END RANK raw_241

prespace_242 -> leaf_249
leaf_249  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_242

literal_243 -> leaf_250
leaf_250  [color=Gray,shape=rectangle,fontname=Inconsolata,label="rainbuf"]
// END RANK literal_243

raw_244 -> leaf_251
leaf_251  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" for
markup.  At the moment I'm just going to write some crude lexers, which
will be more than enough for Clu and Lua, which have straightforward syntax.
"]
// END RANK raw_244

prose_51 -> { raw_252 prespace_253 literal_254 raw_255 prespace_256 literal_257 raw_258}
{rank=same; raw_252 prespace_253 literal_254 raw_255 prespace_256 literal_257 raw_258}

raw_252 [label="raw"]

prespace_253 [label="prespace"]

literal_254 [label="literal"]

raw_255 [label="raw"]

prespace_256 [label="prespace"]

literal_257 [label="literal"]

raw_258 [label="raw"]


// END RANK prose_51

raw_252 -> leaf_259
leaf_259  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
An intermediate step could just squeeze the linebuf into a string, parse it
with"]
// END RANK raw_252

prespace_253 -> leaf_260
leaf_260  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_253

literal_254 -> leaf_261
leaf_261  [color=Gray,shape=rectangle,fontname=Inconsolata,label="esplalier"]
// END RANK literal_254

raw_255 -> leaf_262
leaf_262  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and emit a"]
// END RANK raw_255

prespace_256 -> leaf_263
leaf_263  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_256

literal_257 -> leaf_264
leaf_264  [color=Gray,shape=rectangle,fontname=Inconsolata,label="rainbuf"]
// END RANK literal_257

raw_258 -> leaf_265
leaf_265  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" through the usual recursive method
lookup.  The problem isn't speed, not for a REPL, it's not having error
recovery parsing available.
"]
// END RANK raw_258

prose_52 -> { raw_266 prespace_267 literal_268 raw_269}
{rank=same; raw_266 prespace_267 literal_268 raw_269}

raw_266 [label="raw"]

prespace_267 [label="prespace"]

literal_268 [label="literal"]

raw_269 [label="raw"]


// END RANK prose_52

raw_266 -> leaf_270
leaf_270  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I will likely content myself with a grammar that kicks in when the user
presses return.  I'll want that to perform rewrites (such as removing
outer-level"]
// END RANK raw_266

prespace_267 -> leaf_271
leaf_271  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_267

literal_268 -> leaf_272
leaf_272  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local"]
// END RANK literal_268

raw_269 -> leaf_273
leaf_273  [color=Gray,shape=rectangle,fontname=Inconsolata,label="s to facilicate copy-pasting) and keep the readline
grammar from becoming too ad-hoc.

"]
// END RANK raw_269

section_53 -> { header_274 prose_275 codeblock_276}
{rank=same; header_274 prose_275 codeblock_276}

header_274 [label="4 : asserts"]

prose_275 [label="prose"]

codeblock_276 [label="code block 90-94"]


// END RANK section_53

header_274 -> leaf_277
leaf_277  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** asserts"]
// END RANK header_274

prose_275 -> { raw_278 prespace_279 literal_280 raw_281 prespace_282 literal_283 raw_284}
{rank=same; raw_278 prespace_279 literal_280 raw_281 prespace_282 literal_283 raw_284}

raw_278 [label="raw"]

prespace_279 [label="prespace"]

literal_280 [label="literal"]

raw_281 [label="raw"]

prespace_282 [label="prespace"]

literal_283 [label="literal"]

raw_284 [label="raw"]


// END RANK prose_275

raw_278 -> leaf_285
leaf_285  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  There is little sense running"]
// END RANK raw_278

prespace_279 -> leaf_286
leaf_286  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_279

literal_280 -> leaf_287
leaf_287  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_280

raw_281 -> leaf_288
leaf_288  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" outside of the"]
// END RANK raw_281

prespace_282 -> leaf_289
leaf_289  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_282

literal_283 -> leaf_290
leaf_290  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bridge"]
// END RANK literal_283

raw_284 -> leaf_291
leaf_291  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
environment.
"]
// END RANK raw_284

codeblock_276 -> leaf_292
leaf_292  [color=Gray,shape=rectangle,fontname=Inconsolata,label="assert(meta, \"must have meta in _G\")
assert(write, \"must have write in _G\")
assert(ts, \"must have ts in _G\")"]
// END RANK codeblock_276

section_54 -> { header_293 prose_294 prose_295 codeblock_296 codeblock_297}
{rank=same; header_293 prose_294 prose_295 codeblock_296 codeblock_297}

header_293 [label="4 : includes"]

prose_294 [label="prose"]

prose_295 [label="prose"]

codeblock_296 [label="code block 104-110"]

codeblock_297 [label="code block 112-114"]


// END RANK section_54

header_293 -> leaf_298
leaf_298  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** includes"]
// END RANK header_293

prose_294 -> { raw_299}
{rank=same; raw_299}

raw_299 [label="raw"]


// END RANK prose_294

raw_299 -> leaf_300
leaf_300  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The easiest way to go mad in concurrent environments is to share memory.
"]
// END RANK raw_299

prose_295 -> { prespace_301 literal_302 raw_303}
{rank=same; prespace_301 literal_302 raw_303}

prespace_301 [label="prespace"]

literal_302 [label="literal"]

raw_303 [label="raw"]


// END RANK prose_295

prespace_301 -> leaf_304
leaf_304  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_301

literal_302 -> leaf_305
leaf_305  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_302

raw_303 -> leaf_306
leaf_306  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" will own linebuf, and eventually txtbuf, unless I come up with
a better idea.
"]
// END RANK raw_303

codeblock_296 -> leaf_307
leaf_307  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Linebuf = require \"linebuf\"
local Historian = require \"historian\"

local concat = assert(table.concat)
local sub, gsub = assert(string.sub), assert(string.gsub)"]
// END RANK codeblock_296

codeblock_297 -> leaf_308
leaf_308  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local ModeS = meta()"]
// END RANK codeblock_297

section_55 -> { header_309 prose_310 codeblock_311 prose_312 prose_313 prose_314 prose_315 prose_316 codeblock_317 prose_318 codeblock_319 prose_320 codeblock_321}
{rank=same; header_309 prose_310 codeblock_311 prose_312 prose_313 prose_314 prose_315 prose_316 codeblock_317 prose_318 codeblock_319 prose_320 codeblock_321}

header_309 [label="3 : Categories"]

prose_310 [label="prose"]

codeblock_311 [label="code block 121-128"]

prose_312 [label="prose"]

prose_313 [label="prose"]

prose_314 [label="prose"]

prose_315 [label="prose"]

prose_316 [label="prose"]

codeblock_317 [label="code block 149-156"]

prose_318 [label="prose"]

codeblock_319 [label="code block 161-163"]

prose_320 [label="prose"]

codeblock_321 [label="code block 167-171"]


// END RANK section_55

header_309 -> leaf_322
leaf_322  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Categories"]
// END RANK header_309

prose_310 -> { raw_323}
{rank=same; raw_323}

raw_323 [label="raw"]


// END RANK prose_310

raw_323 -> leaf_324
leaf_324  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

These are the broad types of event.
"]
// END RANK raw_323

codeblock_311 -> leaf_325
leaf_325  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local ASCII = meta()
local NAV    = {}
local CTRL   = {}
local ALT    = {}
local FN     = {}
local MOUSE  = {}"]
// END RANK codeblock_311

prose_312 -> { raw_326 prespace_327 literal_328 raw_329}
{rank=same; raw_326 prespace_327 literal_328 raw_329}

raw_326 [label="raw"]

prespace_327 [label="prespace"]

literal_328 [label="literal"]

raw_329 [label="raw"]


// END RANK prose_312

raw_326 -> leaf_330
leaf_330  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Color schemes are supposed to be one-and-done, and I strongly suspect we
have a"]
// END RANK raw_326

prespace_327 -> leaf_331
leaf_331  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_327

literal_328 -> leaf_332
leaf_332  [color=Gray,shape=rectangle,fontname=Inconsolata,label="__concat"]
// END RANK literal_328

raw_329 -> leaf_333
leaf_333  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" dominated workflow, although I have yet to turn on the
profiler.
"]
// END RANK raw_329

prose_313 -> { raw_334 prespace_335 literal_336 raw_337 prespace_338 literal_339 raw_340}
{rank=same; raw_334 prespace_335 literal_336 raw_337 prespace_338 literal_339 raw_340}

raw_334 [label="raw"]

prespace_335 [label="prespace"]

literal_336 [label="literal"]

raw_337 [label="raw"]

prespace_338 [label="prespace"]

literal_339 [label="literal"]

raw_340 [label="raw"]


// END RANK prose_313

raw_334 -> leaf_341
leaf_341  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Therefore we use reference equality for the"]
// END RANK raw_334

prespace_335 -> leaf_342
leaf_342  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_335

literal_336 -> leaf_343
leaf_343  [color=Gray,shape=rectangle,fontname=Inconsolata,label="color"]
// END RANK literal_336

raw_337 -> leaf_344
leaf_344  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_337

prespace_338 -> leaf_345
leaf_345  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_338

literal_339 -> leaf_346
leaf_346  [color=Gray,shape=rectangle,fontname=Inconsolata,label="hints"]
// END RANK literal_339

raw_340 -> leaf_347
leaf_347  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" tables.
Switching themes is a matter of repopulating those tables.  I intend to
isolate this within an instance so that multiple terminals can each run their
own theme, through a simple 'fat inheritance' method.
"]
// END RANK raw_340

prose_314 -> { prespace_348 literal_349 raw_350 prespace_351 italic_352 raw_353}
{rank=same; prespace_348 literal_349 raw_350 prespace_351 italic_352 raw_353}

prespace_348 [label="prespace"]

literal_349 [label="literal"]

raw_350 [label="raw"]

prespace_351 [label="prespace"]

italic_352 [label="italic"]

raw_353 [label="raw"]


// END RANK prose_314

prespace_348 -> leaf_354
leaf_354  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_348

literal_349 -> leaf_355
leaf_355  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_349

raw_350 -> leaf_356
leaf_356  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is what you might call hypermodal. Everything is isolated in
its own lookup, that is, we use"]
// END RANK raw_350

prespace_351 -> leaf_357
leaf_357  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_351

italic_352 -> leaf_358
leaf_358  [color=Gray,shape=rectangle,fontname=Inconsolata,label="value"]
// END RANK italic_352

raw_353 -> leaf_359
leaf_359  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" equality.  This lets us pass strings
as messages and use jump tables to resolve most things.
"]
// END RANK raw_353

prose_315 -> { raw_360}
{rank=same; raw_360}

raw_360 [label="raw"]


// END RANK prose_315

raw_360 -> leaf_361
leaf_361  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It typically runs at the speed of human fingers and can afford to be much less
efficient than it will be, even before the JIT gets involved.
"]
// END RANK raw_360

prose_316 -> { raw_362 prespace_363 literal_364 raw_365}
{rank=same; raw_362 prespace_363 literal_364 raw_365}

raw_362 [label="raw"]

prespace_363 [label="prespace"]

literal_364 [label="literal"]

raw_365 [label="raw"]


// END RANK prose_316

raw_362 -> leaf_366
leaf_366  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Note also that everything is a method, our dispatch pattern will always
include the"]
// END RANK raw_362

prespace_363 -> leaf_367
leaf_367  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_363

literal_364 -> leaf_368
leaf_368  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeS"]
// END RANK literal_364

raw_365 -> leaf_369
leaf_369  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" instance as the first argument.
"]
// END RANK raw_365

codeblock_317 -> leaf_370
leaf_370  [color=Gray,shape=rectangle,fontname=Inconsolata,label="ModeS.modes = { ASCII  = ASCII,
                NAV    = NAV,
                CTRL   = CTRL,
                ALT    = ALT,
                MOUSE  = MOUSE,
                NYI    = {} }"]
// END RANK codeblock_317

prose_318 -> { raw_371 prespace_372 literal_373 raw_374}
{rank=same; raw_371 prespace_372 literal_373 raw_374}

raw_371 [label="raw"]

prespace_372 [label="prespace"]

literal_373 [label="literal"]

raw_374 [label="raw"]


// END RANK prose_318

raw_371 -> leaf_375
leaf_375  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Sometimes its useful to briefly override handlers, so we check values
against"]
// END RANK raw_371

prespace_372 -> leaf_376
leaf_376  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_372

literal_373 -> leaf_377
leaf_377  [color=Gray,shape=rectangle,fontname=Inconsolata,label="special"]
// END RANK literal_373

raw_374 -> leaf_378
leaf_378  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" first:
"]
// END RANK raw_374

codeblock_319 -> leaf_379
leaf_379  [color=Gray,shape=rectangle,fontname=Inconsolata,label="ModeS.special = {}"]
// END RANK codeblock_319

prose_320 -> { raw_380}
{rank=same; raw_380}

raw_380 [label="raw"]


// END RANK prose_320

raw_380 -> leaf_381
leaf_381  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A simple pass-through so we can see what we're missing.
"]
// END RANK raw_380

codeblock_321 -> leaf_382
leaf_382  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function ModeS.default(modeS, category, value)
    return write(ts(value))
end"]
// END RANK codeblock_321

section_56 -> { header_383 prose_384 codeblock_385}
{rank=same; header_383 prose_384 codeblock_385}

header_383 [label="3 : self-insert(modeS, category, value)"]

prose_384 [label="prose"]

codeblock_385 [label="code block 178-187"]


// END RANK section_56

header_383 -> leaf_386
leaf_386  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** self-insert(modeS, category, value)"]
// END RANK header_383

prose_384 -> { raw_387}
{rank=same; raw_387}

raw_387 [label="raw"]


// END RANK prose_384

raw_387 -> leaf_388
leaf_388  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Inserts the value into the linebuf at cursor.
"]
// END RANK raw_387

codeblock_385 -> leaf_389
leaf_389  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function ModeS.insert(modeS, category, value)
    local success =  modeS.linebuf:insert(value)
    if not success then
      write(\"no insert: \" .. value)
    else
      write(value)
    end
end"]
// END RANK codeblock_385

section_57 -> { header_390 prose_391 codeblock_392}
{rank=same; header_390 prose_391 codeblock_392}

header_390 [label="3 : status painter (colwrite)"]

prose_391 [label="prose"]

codeblock_392 [label="code block 194-259"]


// END RANK section_57

header_390 -> leaf_393
leaf_393  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** status painter (colwrite)"]
// END RANK header_390

prose_391 -> { raw_394}
{rank=same; raw_394}

raw_394 [label="raw"]


// END RANK prose_391

raw_394 -> leaf_395
leaf_395  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This just helps me see what I'm doing
"]
// END RANK raw_394

codeblock_392 -> leaf_396
leaf_396  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local STATCOL = 81
local STAT_TOP = 1
local STAT_RUN = 2

local function colwrite(str, col, row)
   col = col or STATCOL
   row = row or STAT_TOP
   local dash = a.stash()
             .. a.cursor.hide()
             .. a.jump(row, col)
             .. a.erase.right()
             .. str
             .. a.pop()
             .. a.cursor.show()
   write(dash)
end

local STAT_ICON = \"◉ \"

local function tf(bool)
   if bool then
      return ts(\"t\", \"true\")
   else
      return ts(\"f\", \"false\")
   end
end

function pr_mouse(m)
   local phrase = a.magenta(m.button) .. \": \"
                     .. a.bright(m.kind) .. \" \" .. tf(m.shift)
                     .. \" \" .. tf(m.meta)
                     .. \" \" .. tf(m.ctrl) .. \" \" .. tf(m.moving) .. \" \"
                     .. tf(m.scrolling) .. \" \"
                     .. a.cyan(m.col) .. \",\" .. a.cyan(m.row)
   return phrase
end

local function mk_paint(fragment, shade)
   return function(category, action)
      return shade(category .. fragment .. action)
   end
end

local act_map = { MOUSE  = pr_mouse,
                  NAV    = mk_paint(\": \", a.italic),
                  CTRL   = mk_paint(\": \", c.field),
                  ALT    = mk_paint(\": \", a.underscore),
                  ASCII  = mk_paint(\": \", c.field),
                  NYI    = mk_paint(\": \", a.red)}

local icon_map = { MOUSE = mk_paint(STAT_ICON, c.userdata),
                   NAV   = mk_paint(STAT_ICON, a.magenta),
                   CTRL  = mk_paint(STAT_ICON, a.blue),
                   ALT   = mk_paint(STAT_ICON, c[\"function\"]),
                   ASCII = mk_paint(STAT_ICON, a.green),
                   NYI   = mk_paint(STAT_ICON .. \"! \", a.red) }

local function icon_paint(category, value)
   assert(icon_map[category], \"icon_paint NYI:\" .. category)
   if category == \"MOUSE\" then
      return colwrite(icon_map[category](\"\", pr_mouse(value)))
    end
   return colwrite(icon_map[category](\"\", ts(value)))
end"]
// END RANK codeblock_392

section_58 -> { header_397 prose_398 codeblock_399}
{rank=same; header_397 prose_398 codeblock_399}

header_397 [label="3 : ModeS:paint_row()"]

prose_398 [label="prose"]

codeblock_399 [label="code block 266-281"]


// END RANK section_58

header_397 -> leaf_400
leaf_400  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** ModeS:paint_row()"]
// END RANK header_397

prose_398 -> { raw_401}
{rank=same; raw_401}

raw_401 [label="raw"]


// END RANK prose_398

raw_401 -> leaf_402
leaf_402  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Does what it says on the label.
"]
// END RANK raw_401

codeblock_399 -> leaf_403
leaf_403  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function ModeS.paint_row(modeS)
  write(a.col(modeS.l_margin))
  write(a.erase.right())
  write(tostring(modeS.linebuf))
  write(a.col(modeS:cur_col()))
end

function ModeS.cur_col(modeS)
   return modeS.linebuf.cursor + modeS.l_margin - 1
end

function ModeS.nl(modeS)
   write(a.col(modeS.l_margin).. a.jump.down(1))
end"]
// END RANK codeblock_399

section_6 -> { header_404 prose_405 prose_406 prose_407 codeblock_408 prose_409 codeblock_410 section_411 section_412 section_413 section_414 section_415}
{rank=same; header_404 prose_405 prose_406 prose_407 codeblock_408 prose_409 codeblock_410 section_411 section_412 section_413 section_414 section_415}

header_404 [label="2 : act"]

prose_405 [label="prose"]

prose_406 [label="prose"]

prose_407 [label="prose"]

codeblock_408 [label="code block 297-331"]

prose_409 [label="prose"]

codeblock_410 [label="code block 336-340"]

section_411 [label="section: 343-349"]

section_412 [label="section: 350-392"]

section_413 [label="section: 393-411"]

section_414 [label="section: 412-413"]

section_415 [label="section: 414-502"]


// END RANK section_6

header_404 -> leaf_416
leaf_416  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** act"]
// END RANK header_404

prose_405 -> { raw_417 prespace_418 literal_419 raw_420 prespace_421 literal_422 raw_423 prespace_424 literal_425 raw_426 prespace_427 literal_428 raw_429}
{rank=same; raw_417 prespace_418 literal_419 raw_420 prespace_421 literal_422 raw_423 prespace_424 literal_425 raw_426 prespace_427 literal_428 raw_429}

raw_417 [label="raw"]

prespace_418 [label="prespace"]

literal_419 [label="literal"]

raw_420 [label="raw"]

prespace_421 [label="prespace"]

literal_422 [label="literal"]

raw_423 [label="raw"]

prespace_424 [label="prespace"]

literal_425 [label="literal"]

raw_426 [label="raw"]

prespace_427 [label="prespace"]

literal_428 [label="literal"]

raw_429 [label="raw"]


// END RANK prose_405

raw_417 -> leaf_430
leaf_430  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK raw_417

prespace_418 -> leaf_431
leaf_431  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_418

literal_419 -> leaf_432
leaf_432  [color=Gray,shape=rectangle,fontname=Inconsolata,label="act"]
// END RANK literal_419

raw_420 -> leaf_433
leaf_433  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" simply dispatches. Note that our common interfaces is"]
// END RANK raw_420

prespace_421 -> leaf_434
leaf_434  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_421

literal_422 -> leaf_435
leaf_435  [color=Gray,shape=rectangle,fontname=Inconsolata,label="method(modeS, category, value)"]
// END RANK literal_422

raw_423 -> leaf_436
leaf_436  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", we need to distinguish betwen the tuple"]
// END RANK raw_423

prespace_424 -> leaf_437
leaf_437  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_424

literal_425 -> leaf_438
leaf_438  [color=Gray,shape=rectangle,fontname=Inconsolata,label="(\"INSERT\", \"SHIFT-LEFT\")"]
// END RANK literal_425

raw_426 -> leaf_439
leaf_439  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" (which could arrive from copy-paste) and"]
// END RANK raw_426

prespace_427 -> leaf_440
leaf_440  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_427

literal_428 -> leaf_441
leaf_441  [color=Gray,shape=rectangle,fontname=Inconsolata,label="(\"NAV\", \"SHIFT-LEFT\")"]
// END RANK literal_428

raw_429 -> leaf_442
leaf_442  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and preserve information for our fall-through method.
"]
// END RANK raw_429

prose_406 -> { prespace_443 literal_444 raw_445}
{rank=same; prespace_443 literal_444 raw_445}

prespace_443 [label="prespace"]

literal_444 [label="literal"]

raw_445 [label="raw"]


// END RANK prose_406

prespace_443 -> leaf_446
leaf_446  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_443

literal_444 -> leaf_447
leaf_447  [color=Gray,shape=rectangle,fontname=Inconsolata,label="act"]
// END RANK literal_444

raw_445 -> leaf_448
leaf_448  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" always succeeds, meaning we need some metatable action to absorb and
log anything unexpected.
"]
// END RANK raw_445

prose_407 -> { raw_449}
{rank=same; raw_449}

raw_449 [label="raw"]


// END RANK prose_407

raw_449 -> leaf_450
leaf_450  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It's easier to get the core actions down as conditionals, then
migrate them into the jump table and fill out from there.
"]
// END RANK raw_449

codeblock_408 -> leaf_451
leaf_451  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function ModeS.act(modeS, category, value)
   assert(modeS.modes[category], \"no category \" .. category .. \" in modeS\")
   -- catch special handlers first
   if modeS.special[value] then
      return modeS.special[value](modeS, category, value)
   end
   icon_paint(category, value)

   -- Dispatch on value if possible
   if modeS.modes[category][value] then
      modeS.modes[category][value](modeS, category, value)

   -- otherwise fall back:
   elseif category == \"ASCII\" then
      -- hard coded for now
      modeS:insert(category, value)
   elseif category == \"NAV\" then
      if modeS.modes.NAV[value] then
         modeS.modes.NAV[value](modeS, category, value)
      else
         icon_paint(\"NYI\", \"NAV::\" .. value)
      end
   elseif category == \"MOUSE\" then
      colwrite(pr_mouse(value), STATCOL, STAT_RUN)
   else
      icon_paint(\"NYI\", category .. \":\" .. value)
   end
   colwrite(a.bold(modeS.hist.cursor), STATCOL + 6, 3)
   for i,v in ipairs(modeS.hist) do
      colwrite(tostring(v.line), STATCOL, i + 4)
   end
   return modeS:paint_row()
end"]
// END RANK codeblock_408

prose_409 -> { raw_452 prespace_453 literal_454 raw_455}
{rank=same; raw_452 prespace_453 literal_454 raw_455}

raw_452 [label="raw"]

prespace_453 [label="prespace"]

literal_454 [label="literal"]

raw_455 [label="raw"]


// END RANK prose_409

raw_452 -> leaf_456
leaf_456  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
To keep"]
// END RANK raw_452

prespace_453 -> leaf_457
leaf_457  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_453

literal_454 -> leaf_458
leaf_458  [color=Gray,shape=rectangle,fontname=Inconsolata,label="act"]
// END RANK literal_454

raw_455 -> leaf_459
leaf_459  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" replaceable, we look it up on each call:
"]
// END RANK raw_455

codeblock_410 -> leaf_460
leaf_460  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function ModeS.__call(modeS, category, value)
  return modeS:act(category, value)
end"]
// END RANK codeblock_410

section_411 -> { header_461 prose_462 prose_463}
{rank=same; header_461 prose_462 prose_463}

header_461 [label="3 : INSERT"]

prose_462 [label="prose"]

prose_463 [label="prose"]


// END RANK section_411

header_461 -> leaf_464
leaf_464  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** INSERT"]
// END RANK header_461

prose_462 -> { raw_465}
{rank=same; raw_465}

raw_465 [label="raw"]


// END RANK prose_462

raw_465 -> leaf_466
leaf_466  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

INSERT is currently both a category and an action table.
"]
// END RANK raw_465

prose_463 -> { raw_467}
{rank=same; raw_467}

raw_467 [label="raw"]


// END RANK prose_463

raw_467 -> leaf_468
leaf_468  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
That's confusing, and I'll fix it when it's time to add modal editing.

"]
// END RANK raw_467

section_412 -> { header_469 prose_470 codeblock_471}
{rank=same; header_469 prose_470 codeblock_471}

header_469 [label="3 : NAV"]

prose_470 [label="prose"]

codeblock_471 [label="code block 352-390"]


// END RANK section_412

header_469 -> leaf_472
leaf_472  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** NAV"]
// END RANK header_469

prose_470 -> { raw_473}
{rank=same; raw_473}

raw_473 [label="raw"]


// END RANK prose_470

raw_473 -> leaf_474
leaf_474  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_473

codeblock_471 -> leaf_475
leaf_475  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function NAV.UP(modeS, category, value)
   modeS.linebuf = modeS.hist:prev()
   return modeS
end

function NAV.DOWN(modeS, category, value)
   local next_p
   modeS.linebuf, next_p = modeS.hist:next()
   if next_p then
      modeS.linebuf = Linebuf()
   end
   return modeS
end

function NAV.LEFT(modeS, category, value)
   return modeS.linebuf:left()
end

function NAV.RIGHT(modeS, category, value)
   return modeS.linebuf:right()
end

function NAV.RETURN(modeS, category, value)
   -- eval etc.
   modeS:nl()
   modeS:eval()
   modeS.hist:append(modeS.linebuf)
   modeS.linebuf = Linebuf()
end

function NAV.BACKSPACE(modeS, category, value)
   return modeS.linebuf:d_back()
end

function NAV.DELETE(modeS, category, value)
   return modeS.linebuf:d_fwd()
end"]
// END RANK codeblock_471

section_413 -> { header_476 prose_477 codeblock_478}
{rank=same; header_476 prose_477 codeblock_478}

header_476 [label="3 : CTRL"]

prose_477 [label="prose"]

codeblock_478 [label="code block 397-409"]


// END RANK section_413

header_476 -> leaf_479
leaf_479  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** CTRL"]
// END RANK header_476

prose_477 -> { raw_480}
{rank=same; raw_480}

raw_480 [label="raw"]


// END RANK prose_477

raw_480 -> leaf_481
leaf_481  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Many/most of these will be re-used as e.g. \"^\" and \"$\" in vim mode.
"]
// END RANK raw_480

codeblock_478 -> leaf_482
leaf_482  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function cursor_begin(modeS, category, value)
   modeS.linebuf.cursor = 1
end

CTRL[\"^A\"] = cursor_begin

local function cursor_end(modeS, category, value)
   modeS.linebuf.cursor = #modeS.linebuf.line + 1
end

CTRL[\"^E\"] = cursor_end"]
// END RANK codeblock_478

section_414 -> { header_483 prose_484}
{rank=same; header_483 prose_484}

header_483 [label="3 : ModeS:eval()"]

prose_484 [label="prose"]


// END RANK section_414

header_483 -> leaf_485
leaf_485  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** ModeS:eval()"]
// END RANK header_483

prose_484 -> { raw_486}
{rank=same; raw_486}

raw_486 [label="raw"]


// END RANK prose_484

raw_486 -> leaf_487
leaf_487  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_486

section_415 -> { header_488 prose_489 codeblock_490 codeblock_491 codeblock_492 codeblock_493 codeblock_494 codeblock_495}
{rank=same; header_488 prose_489 codeblock_490 codeblock_491 codeblock_492 codeblock_493 codeblock_494 codeblock_495}

header_488 [label="3 : ModeS:write(str)"]

prose_489 [label="prose"]

codeblock_490 [label="code block 420-427"]

codeblock_491 [label="code block 429-434"]

codeblock_492 [label="code block 436-443"]

codeblock_493 [label="code block 445-449"]

codeblock_494 [label="code block 451-455"]

codeblock_495 [label="code block 457-500"]


// END RANK section_415

header_488 -> leaf_496
leaf_496  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** ModeS:write(str)"]
// END RANK header_488

prose_489 -> { raw_497}
{rank=same; raw_497}

raw_497 [label="raw"]


// END RANK prose_489

raw_497 -> leaf_498
leaf_498  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This will let us phase out the colwrite business in favor of actual tiles in
the terminal.

"]
// END RANK raw_497

codeblock_490 -> leaf_499
leaf_499  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function ModeS.write(modeS, str)
   local nl = a.col(modeS.l_margin) .. a.jump.down()
   local phrase, num_subs = gsub(str, \"\\n\", nl)
   write(phrase)
   -- modeS.row = modeS.row + num_subs
end"]
// END RANK codeblock_490

codeblock_491 -> leaf_500
leaf_500  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function gatherResults(success, ...)
  local n = select('#', ...)
  return success, { n = n, ... }
end"]
// END RANK codeblock_491

codeblock_492 -> leaf_501
leaf_501  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function ModeS.printResults(modeS, results)
  for i = 1, results.n do
    results[i] = ts(results[i])
  end
  modeS:write(concat(results, '   '))
end"]
// END RANK codeblock_492

codeblock_493 -> leaf_502
leaf_502  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function ModeS.prompt(modeS)
   write(a.jump(modeS.replLine, 1) .. \"👉 \")
end"]
// END RANK codeblock_493

codeblock_494 -> leaf_503
leaf_503  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function ModeS.clearResult(modeS)
   write(a.erase.box(3, 1, modeS.max_row, modeS.r_margin))
end"]
// END RANK codeblock_494

codeblock_495 -> leaf_504
leaf_504  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function ModeS.eval(modeS)
   local line = tostring(modeS.linebuf)
   local chunk  = modeS.buffer .. line
   -- first we prefix return
   local f, err = loadstring('return ' .. chunk, 'REPL')

   if not f then
      f, err = loadstring(chunk, 'REPL') -- try again without return
   end
   if not f then
      local head = sub(chunk, 1, 1)
      if head == \"=\" then -- take pity on old-school Lua hackers
         f, err = loadstring('return ' .. sub(chunk,2), 'REPL')
      end -- more special REPL prefix soon
   end
   if f then
      modeS.buffer = \"\"
      local success, results = gatherResults(xpcall(f, debug.traceback))

      if success then
      -- successful call
         modeS:clearResult()
         if results.n > 0 then
            modeS:printResults(results)
         end
      else
      -- error
         modeS:clearResult()
         modeS:write(results[1])
      end
   else
      if err:match \"'<eof>'$\" then
         -- Lua expects some more input; stow it away for next time
         modeS.buffer = chunk .. '\\n'
         return '...'
      else
         modeS:write(err)
         modeS.buffer = ''
      end
   end
   modeS:prompt()
end"]
// END RANK codeblock_495

section_7 -> { header_505 prose_506 codeblock_507 codeblock_508}
{rank=same; header_505 prose_506 codeblock_507 codeblock_508}

header_505 [label="2 : new"]

prose_506 [label="prose"]

codeblock_507 [label="code block 507-523"]

codeblock_508 [label="code block 525-527"]


// END RANK section_7

header_505 -> leaf_509
leaf_509  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** new"]
// END RANK header_505

prose_506 -> { raw_510 prespace_511 literal_512 raw_513}
{rank=same; raw_510 prespace_511 literal_512 raw_513}

raw_510 [label="raw"]

prespace_511 [label="prespace"]

literal_512 [label="literal"]

raw_513 [label="raw"]


// END RANK prose_506

raw_510 -> leaf_514
leaf_514  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This should be configurable via"]
// END RANK raw_510

prespace_511 -> leaf_515
leaf_515  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_511

literal_512 -> leaf_516
leaf_516  [color=Gray,shape=rectangle,fontname=Inconsolata,label="cfg"]
// END RANK literal_512

raw_513 -> leaf_517
leaf_517  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_513

codeblock_507 -> leaf_518
leaf_518  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function new(cfg)
  local modeS = meta(ModeS)
  modeS.linebuf = Linebuf()
  modeS.buffer = \"\"
  modeS.hist  = Historian()
  modeS.hist:append(modeS.linebuf)
  -- this will be more complex but
  modeS.l_margin = 4
  modeS.r_margin = 80
  modeS.row = 2
  modeS.replLine = 2
  return modeS
end

ModeS.idEst = new"]
// END RANK codeblock_507

codeblock_508 -> leaf_519
leaf_519  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return new"]
// END RANK codeblock_508


}
