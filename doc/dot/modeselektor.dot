digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 673"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-618"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 section_5 section_6 section_7}
{rank=same; header_2 prose_3 prose_4 section_5 section_6 section_7}

header_2 [label="1 : Modeselektor"]

prose_3 [label="prose"]

prose_4 [label="prose"]

section_5 [label="section: 12-376"]

section_6 [label="section: 441-530"]

section_7 [label="section: 619-673"]


// END RANK section_1

header_2 -> leaf_8
leaf_8  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Modeselektor"]
// END RANK header_2

prose_3 -> { raw_9 prespace_10 literal_11 raw_12}
{rank=same; raw_9 prespace_10 literal_11 raw_12}

raw_9 [label="raw"]

prespace_10 [label="prespace"]

literal_11 [label="literal"]

raw_12 [label="raw"]


// END RANK prose_3

raw_9 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK raw_9

prespace_10 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_10

literal_11 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label="femto"]
// END RANK literal_11

raw_12 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" will hold all state for an terminal session, including setup of io,
the main event loop, teardown and exuent.  Soon, we will encapsulate that,
making the library re-entrant.
"]
// END RANK raw_12

prose_4 -> { prespace_17 literal_18 raw_19 prespace_20 literal_21 raw_22 prespace_23 literal_24 raw_25}
{rank=same; prespace_17 literal_18 raw_19 prespace_20 literal_21 raw_22 prespace_23 literal_24 raw_25}

prespace_17 [label="prespace"]

literal_18 [label="literal"]

raw_19 [label="raw"]

prespace_20 [label="prespace"]

literal_21 [label="literal"]

raw_22 [label="raw"]

prespace_23 [label="prespace"]

literal_24 [label="literal"]

raw_25 [label="raw"]


// END RANK prose_4

prespace_17 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_17

literal_18 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_18

raw_19 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is the modal interpreter for the repl language, which becomes
the core of"]
// END RANK raw_19

prespace_20 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_20

literal_21 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label="ed"]
// END RANK literal_21

raw_22 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  This is a glorified lookup table with a state switch and
a pointer to the"]
// END RANK raw_22

prespace_23 -> leaf_32
leaf_32  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_23

literal_24 -> leaf_33
leaf_33  [color=Gray,shape=rectangle,fontname=Inconsolata,label="femto"]
// END RANK literal_24

raw_25 -> leaf_34
leaf_34  [color=Gray,shape=rectangle,fontname=Inconsolata,label="cell we're operating on.

"]
// END RANK raw_25

section_5 -> { header_35 prose_36 prose_37 prose_38 prose_39 prose_40 prose_41 prose_42 prose_43 prose_44 prose_45 prose_46 prose_47 prose_48 prose_49 prose_50 prose_51 prose_52 section_53 section_54 section_55 section_56 section_57 section_58 section_59 section_60 section_61 section_62}
{rank=same; header_35 prose_36 prose_37 prose_38 prose_39 prose_40 prose_41 prose_42 prose_43 prose_44 prose_45 prose_46 prose_47 prose_48 prose_49 prose_50 prose_51 prose_52 section_53 section_54 section_55 section_56 section_57 section_58 section_59 section_60 section_61 section_62}

header_35 [label="2 : Design"]

prose_36 [label="prose"]

prose_37 [label="prose"]

prose_38 [label="prose"]

prose_39 [label="prose"]

prose_40 [label="prose"]

prose_41 [label="prose"]

prose_42 [label="prose"]

prose_43 [label="prose"]

prose_44 [label="prose"]

prose_45 [label="prose"]

prose_46 [label="prose"]

prose_47 [label="prose"]

prose_48 [label="prose"]

prose_49 [label="prose"]

prose_50 [label="prose"]

prose_51 [label="prose"]

prose_52 [label="prose"]

section_53 [label="section: 84-94"]

section_54 [label="section: 95-178"]

section_55 [label="section: 179-188"]

section_56 [label="section: 189-201"]

section_57 [label="section: 202-270"]

section_58 [label="section: 294-306"]

section_59 [label="section: 307-321"]

section_60 [label="section: 322-330"]

section_61 [label="section: 331-360"]

section_62 [label="section: 377-420"]


// END RANK section_5

header_35 -> leaf_63
leaf_63  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Design"]
// END RANK header_35

prose_36 -> { raw_64 prespace_65 literal_66 raw_67 prespace_68 literal_69 raw_70}
{rank=same; raw_64 prespace_65 literal_66 raw_67 prespace_68 literal_69 raw_70}

raw_64 [label="raw"]

prespace_65 [label="prespace"]

literal_66 [label="literal"]

raw_67 [label="raw"]

prespace_68 [label="prespace"]

literal_69 [label="literal"]

raw_70 [label="raw"]


// END RANK prose_36

raw_64 -> leaf_71
leaf_71  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

 "]
// END RANK raw_64

prespace_65 -> leaf_72
leaf_72  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_65

literal_66 -> leaf_73
leaf_73  [color=Gray,shape=rectangle,fontname=Inconsolata,label="femto"]
// END RANK literal_66

raw_67 -> leaf_74
leaf_74  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" passes keystrokes as messages to"]
// END RANK raw_67

prespace_68 -> leaf_75
leaf_75  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_68

literal_69 -> leaf_76
leaf_76  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_69

raw_70 -> leaf_77
leaf_77  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  It does no writes
to stdout at all.  It is smart enough to categorize and parse various device
reports, but has no knowledge of why those reports were requested.
"]
// END RANK raw_70

prose_37 -> { prespace_78 literal_79 raw_80}
{rank=same; prespace_78 literal_79 raw_80}

prespace_78 [label="prespace"]

literal_79 [label="literal"]

raw_80 [label="raw"]


// END RANK prose_37

prespace_78 -> leaf_81
leaf_81  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_78

literal_79 -> leaf_82
leaf_82  [color=Gray,shape=rectangle,fontname=Inconsolata,label="femto"]
// END RANK literal_79

raw_80 -> leaf_83
leaf_83  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" runs the event loop, so all other members are pulled in as modules.
"]
// END RANK raw_80

prose_38 -> { prespace_84 literal_85 raw_86 prespace_87 literal_88 raw_89}
{rank=same; prespace_84 literal_85 raw_86 prespace_87 literal_88 raw_89}

prespace_84 [label="prespace"]

literal_85 [label="literal"]

raw_86 [label="raw"]

prespace_87 [label="prespace"]

literal_88 [label="literal"]

raw_89 [label="raw"]


// END RANK prose_38

prespace_84 -> leaf_90
leaf_90  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_84

literal_85 -> leaf_91
leaf_91  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_85

raw_86 -> leaf_92
leaf_92  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" takes care of system-level housekeeping: opening files
and sockets, keeping command history, fuzzy completion, and has its own eval
loop off the main track.  For evaluating lines, it will call a small executor,
so that in a little while we can put the user program in its own"]
// END RANK raw_86

prespace_87 -> leaf_93
leaf_93  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_87

literal_88 -> leaf_94
leaf_94  [color=Gray,shape=rectangle,fontname=Inconsolata,label="LuaL_state"]
// END RANK literal_88

raw_89 -> leaf_95
leaf_95  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_89

prose_39 -> { raw_96 prespace_97 literal_98 raw_99}
{rank=same; raw_96 prespace_97 literal_98 raw_99}

raw_96 [label="raw"]

prespace_97 [label="prespace"]

literal_98 [label="literal"]

raw_99 [label="raw"]


// END RANK prose_39

raw_96 -> leaf_100
leaf_100  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This is both good practice, and absolutely necessary if we are to REPL other"]
// END RANK raw_96

prespace_97 -> leaf_101
leaf_101  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_97

literal_98 -> leaf_102
leaf_102  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bridge"]
// END RANK literal_98

raw_99 -> leaf_103
leaf_103  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" programs, each of which has its own event loop.
"]
// END RANK raw_99

prose_40 -> { raw_104 prespace_105 literal_106 raw_107}
{rank=same; raw_104 prespace_105 literal_106 raw_107}

raw_104 [label="raw"]

prespace_105 [label="prespace"]

literal_106 [label="literal"]

raw_107 [label="raw"]


// END RANK prose_40

raw_104 -> leaf_108
leaf_108  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The implementation is essentially a VM.  Category and value are
successively looked up in jump tables and the method applied with the"]
// END RANK raw_104

prespace_105 -> leaf_109
leaf_109  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_105

literal_106 -> leaf_110
leaf_110  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeS"]
// END RANK literal_106

raw_107 -> leaf_111
leaf_111  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
instance as the first argument.
"]
// END RANK raw_107

prose_41 -> { raw_112}
{rank=same; raw_112}

raw_112 [label="raw"]


// END RANK prose_41

raw_112 -> leaf_113
leaf_113  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The state machine has to represent two sorts of state: the mode we're
operating in, and a buffer of commands.  Our mode engine is modeled after
emacs: rather than have some kind of flag that can be set to \"insert\",
\"navigate\", \"command\", or \"visual\", these will be modeled as swiching the
pointer to jump tables.  If a command needs to know which mode it's in, this
can be done with pointer comparison.
"]
// END RANK raw_112

prose_42 -> { raw_114 prespace_115 literal_116 raw_117 prespace_118 literal_119 raw_120 prespace_121 literal_122 raw_123 prespace_124 literal_125 raw_126}
{rank=same; raw_114 prespace_115 literal_116 raw_117 prespace_118 literal_119 raw_120 prespace_121 literal_122 raw_123 prespace_124 literal_125 raw_126}

raw_114 [label="raw"]

prespace_115 [label="prespace"]

literal_116 [label="literal"]

raw_117 [label="raw"]

prespace_118 [label="prespace"]

literal_119 [label="literal"]

raw_120 [label="raw"]

prespace_121 [label="prespace"]

literal_122 [label="literal"]

raw_123 [label="raw"]

prespace_124 [label="prespace"]

literal_125 [label="literal"]

raw_126 [label="raw"]


// END RANK prose_42

raw_114 -> leaf_127
leaf_127  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We're starting with"]
// END RANK raw_114

prespace_115 -> leaf_128
leaf_128  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_115

literal_116 -> leaf_129
leaf_129  [color=Gray,shape=rectangle,fontname=Inconsolata,label="vi"]
// END RANK literal_116

raw_117 -> leaf_130
leaf_130  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" mode and"]
// END RANK raw_117

prespace_118 -> leaf_131
leaf_131  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_118

literal_119 -> leaf_132
leaf_132  [color=Gray,shape=rectangle,fontname=Inconsolata,label="nerf"]
// END RANK literal_119

raw_120 -> leaf_133
leaf_133  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" mode, which is a lightweight"]
// END RANK raw_120

prespace_121 -> leaf_134
leaf_134  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_121

literal_122 -> leaf_135
leaf_135  [color=Gray,shape=rectangle,fontname=Inconsolata,label="readline"]
// END RANK literal_122

raw_123 -> leaf_136
leaf_136  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" implementation that won't use the command buffer.  Issuing a
command like"]
// END RANK raw_123

prespace_124 -> leaf_137
leaf_137  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_124

literal_125 -> leaf_138
leaf_138  [color=Gray,shape=rectangle,fontname=Inconsolata,label="d3w"]
// END RANK literal_125

raw_126 -> leaf_139
leaf_139  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" requires a simple command buffer.
"]
// END RANK raw_126

prose_43 -> { raw_140 prespace_141 literal_142 raw_143 prespace_144 literal_145 raw_146}
{rank=same; raw_140 prespace_141 literal_142 raw_143 prespace_144 literal_145 raw_146}

raw_140 [label="raw"]

prespace_141 [label="prespace"]

literal_142 [label="literal"]

raw_143 [label="raw"]

prespace_144 [label="prespace"]

literal_145 [label="literal"]

raw_146 [label="raw"]


// END RANK prose_43

raw_140 -> leaf_147
leaf_147  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The syntax can't be tied to the semantics in any tighly-coupled way. I intend
to support"]
// END RANK raw_140

prespace_141 -> leaf_148
leaf_148  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_141

literal_142 -> leaf_149
leaf_149  [color=Gray,shape=rectangle,fontname=Inconsolata,label="kakoune"]
// END RANK literal_142

raw_143 -> leaf_150
leaf_150  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" syntax as soon as possible; there you would say"]
// END RANK raw_143

prespace_144 -> leaf_151
leaf_151  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_144

literal_145 -> leaf_152
leaf_152  [color=Gray,shape=rectangle,fontname=Inconsolata,label="w3d"]
// END RANK literal_145

raw_146 -> leaf_153
leaf_153  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_146

prose_44 -> { raw_154 prespace_155 literal_156 raw_157 prespace_158 literal_159 raw_160}
{rank=same; raw_154 prespace_155 literal_156 raw_157 prespace_158 literal_159 raw_160}

raw_154 [label="raw"]

prespace_155 [label="prespace"]

literal_156 [label="literal"]

raw_157 [label="raw"]

prespace_158 [label="prespace"]

literal_159 [label="literal"]

raw_160 [label="raw"]


// END RANK prose_44

raw_154 -> leaf_161
leaf_161  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This implies that the commands can't be aware of the buffer; because"]
// END RANK raw_154

prespace_155 -> leaf_162
leaf_162  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_155

literal_156 -> leaf_163
leaf_163  [color=Gray,shape=rectangle,fontname=Inconsolata,label="d3w"]
// END RANK literal_156

raw_157 -> leaf_164
leaf_164  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
and"]
// END RANK raw_157

prespace_158 -> leaf_165
leaf_165  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_158

literal_159 -> leaf_166
leaf_166  [color=Gray,shape=rectangle,fontname=Inconsolata,label="w3d"]
// END RANK literal_159

raw_160 -> leaf_167
leaf_167  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" are two ways of saying the same thing, they should end in an
identical method call.
"]
// END RANK raw_160

prose_45 -> { raw_168}
{rank=same; raw_168}

raw_168 [label="raw"]


// END RANK prose_45

raw_168 -> leaf_169
leaf_169  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This means when the time comes we handle it with a secondary dispatch layer.
"]
// END RANK raw_168

prose_46 -> { raw_170}
{rank=same; raw_170}

raw_170 [label="raw"]


// END RANK prose_46

raw_170 -> leaf_171
leaf_171  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
There really are effectively arbitrary levels of indirection possible in an
editor.  This is why we must be absolutely consistent about everything
receiving the same tuple (modeS, category, value).
"]
// END RANK raw_170

prose_47 -> { raw_172 prespace_173 literal_174 raw_175 prespace_176 literal_177 raw_178 prespace_179 literal_180 raw_181}
{rank=same; raw_172 prespace_173 literal_174 raw_175 prespace_176 literal_177 raw_178 prespace_179 literal_180 raw_181}

raw_172 [label="raw"]

prespace_173 [label="prespace"]

literal_174 [label="literal"]

raw_175 [label="raw"]

prespace_176 [label="prespace"]

literal_177 [label="literal"]

raw_178 [label="raw"]

prespace_179 [label="prespace"]

literal_180 [label="literal"]

raw_181 [label="raw"]


// END RANK prose_47

raw_172 -> leaf_182
leaf_182  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
They must also have the same return type, with is either"]
// END RANK raw_172

prespace_173 -> leaf_183
leaf_183  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_173

literal_174 -> leaf_184
leaf_184  [color=Gray,shape=rectangle,fontname=Inconsolata,label="true"]
// END RANK literal_174

raw_175 -> leaf_185
leaf_185  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" or"]
// END RANK raw_175

prespace_176 -> leaf_186
leaf_186  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_176

literal_177 -> leaf_187
leaf_187  [color=Gray,shape=rectangle,fontname=Inconsolata,label="false, err"]
// END RANK literal_177

raw_178 -> leaf_188
leaf_188  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  where"]
// END RANK raw_178

prespace_179 -> leaf_189
leaf_189  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_179

literal_180 -> leaf_190
leaf_190  [color=Gray,shape=rectangle,fontname=Inconsolata,label="err"]
// END RANK literal_180

raw_181 -> leaf_191
leaf_191  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is an error object which may be a primitive string.
"]
// END RANK raw_181

prose_48 -> { prespace_192 literal_193 raw_194 prespace_195 literal_196 raw_197 prespace_198 literal_199 raw_200 prespace_201 literal_202 raw_203 prespace_204 literal_205 raw_206 prespace_207 literal_208 raw_209}
{rank=same; prespace_192 literal_193 raw_194 prespace_195 literal_196 raw_197 prespace_198 literal_199 raw_200 prespace_201 literal_202 raw_203 prespace_204 literal_205 raw_206 prespace_207 literal_208 raw_209}

prespace_192 [label="prespace"]

literal_193 [label="literal"]

raw_194 [label="raw"]

prespace_195 [label="prespace"]

literal_196 [label="literal"]

raw_197 [label="raw"]

prespace_198 [label="prespace"]

literal_199 [label="literal"]

raw_200 [label="raw"]

prespace_201 [label="prespace"]

literal_202 [label="literal"]

raw_203 [label="raw"]

prespace_204 [label="prespace"]

literal_205 [label="literal"]

raw_206 [label="raw"]

prespace_207 [label="prespace"]

literal_208 [label="literal"]

raw_209 [label="raw"]


// END RANK prose_48

prespace_192 -> leaf_210
leaf_210  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_192

literal_193 -> leaf_211
leaf_211  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_193

raw_194 -> leaf_212
leaf_212  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" passes any edit or movement commands to an internally-owned"]
// END RANK raw_194

prespace_195 -> leaf_213
leaf_213  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_195

literal_196 -> leaf_214
leaf_214  [color=Gray,shape=rectangle,fontname=Inconsolata,label="txtbuf"]
// END RANK literal_196

raw_197 -> leaf_215
leaf_215  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", which keeps all modeling of the line. "]
// END RANK raw_197

prespace_198 -> leaf_216
leaf_216  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_198

literal_199 -> leaf_217
leaf_217  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_199

raw_200 -> leaf_218
leaf_218  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" decides when
to repaint the screen, calling"]
// END RANK raw_200

prespace_201 -> leaf_219
leaf_219  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_201

literal_202 -> leaf_220
leaf_220  [color=Gray,shape=rectangle,fontname=Inconsolata,label="rainbuf"]
// END RANK literal_202

raw_203 -> leaf_221
leaf_221  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" (currently just"]
// END RANK raw_203

prespace_204 -> leaf_222
leaf_222  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_204

literal_205 -> leaf_223
leaf_223  [color=Gray,shape=rectangle,fontname=Inconsolata,label="lex"]
// END RANK literal_205

raw_206 -> leaf_224
leaf_224  [color=Gray,shape=rectangle,fontname=Inconsolata,label=") with a region
of"]
// END RANK raw_206

prespace_207 -> leaf_225
leaf_225  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_207

literal_208 -> leaf_226
leaf_226  [color=Gray,shape=rectangle,fontname=Inconsolata,label="txtbuf"]
// END RANK literal_208

raw_209 -> leaf_227
leaf_227  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and instructions as to how to paint it.
"]
// END RANK raw_209

prose_49 -> { raw_228 prespace_229 literal_230 raw_231 prespace_232 literal_233 raw_234 prespace_235 literal_236 raw_237}
{rank=same; raw_228 prespace_229 literal_230 raw_231 prespace_232 literal_233 raw_234 prespace_235 literal_236 raw_237}

raw_228 [label="raw"]

prespace_229 [label="prespace"]

literal_230 [label="literal"]

raw_231 [label="raw"]

prespace_232 [label="prespace"]

literal_233 [label="literal"]

raw_234 [label="raw"]

prespace_235 [label="prespace"]

literal_236 [label="literal"]

raw_237 [label="raw"]


// END RANK prose_49

raw_228 -> leaf_238
leaf_238  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
There is one"]
// END RANK raw_228

prespace_229 -> leaf_239
leaf_239  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_229

literal_230 -> leaf_240
leaf_240  [color=Gray,shape=rectangle,fontname=Inconsolata,label="deck"]
// END RANK literal_230

raw_231 -> leaf_241
leaf_241  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" instance member per screen, which tiles the available
space. "]
// END RANK raw_231

prespace_232 -> leaf_242
leaf_242  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_232

literal_233 -> leaf_243
leaf_243  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_233

raw_234 -> leaf_244
leaf_244  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is the writer, and"]
// END RANK raw_234

prespace_235 -> leaf_245
leaf_245  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_235

literal_236 -> leaf_246
leaf_246  [color=Gray,shape=rectangle,fontname=Inconsolata,label="rainbuf"]
// END RANK literal_236

raw_237 -> leaf_247
leaf_247  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" holds a pointer to the
table for read access.
"]
// END RANK raw_237

prose_50 -> { raw_248 prespace_249 literal_250 raw_251 prespace_252 literal_253 raw_254}
{rank=same; raw_248 prespace_249 literal_250 raw_251 prespace_252 literal_253 raw_254}

raw_248 [label="raw"]

prespace_249 [label="prespace"]

literal_250 [label="literal"]

raw_251 [label="raw"]

prespace_252 [label="prespace"]

literal_253 [label="literal"]

raw_254 [label="raw"]


// END RANK prose_50

raw_248 -> leaf_255
leaf_255  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
When we have our fancy parse engine and quipu structure, txtbuf will call"]
// END RANK raw_248

prespace_249 -> leaf_256
leaf_256  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_249

literal_250 -> leaf_257
leaf_257  [color=Gray,shape=rectangle,fontname=Inconsolata,label="comb"]
// END RANK literal_250

raw_251 -> leaf_258
leaf_258  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" to redecorate the syntax tree before passing it to"]
// END RANK raw_251

prespace_252 -> leaf_259
leaf_259  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_252

literal_253 -> leaf_260
leaf_260  [color=Gray,shape=rectangle,fontname=Inconsolata,label="rainbuf"]
// END RANK literal_253

raw_254 -> leaf_261
leaf_261  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" for
markup.  At the moment I'm just going to write some crude lexers, which
will be more than enough for Clu and Lua, which have straightforward syntax.
"]
// END RANK raw_254

prose_51 -> { raw_262 prespace_263 literal_264 raw_265 prespace_266 literal_267 raw_268}
{rank=same; raw_262 prespace_263 literal_264 raw_265 prespace_266 literal_267 raw_268}

raw_262 [label="raw"]

prespace_263 [label="prespace"]

literal_264 [label="literal"]

raw_265 [label="raw"]

prespace_266 [label="prespace"]

literal_267 [label="literal"]

raw_268 [label="raw"]


// END RANK prose_51

raw_262 -> leaf_269
leaf_269  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
An intermediate step could just squeeze the txtbuf into a string, parse it
with"]
// END RANK raw_262

prespace_263 -> leaf_270
leaf_270  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_263

literal_264 -> leaf_271
leaf_271  [color=Gray,shape=rectangle,fontname=Inconsolata,label="espalier"]
// END RANK literal_264

raw_265 -> leaf_272
leaf_272  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and emit a"]
// END RANK raw_265

prespace_266 -> leaf_273
leaf_273  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_266

literal_267 -> leaf_274
leaf_274  [color=Gray,shape=rectangle,fontname=Inconsolata,label="rainbuf"]
// END RANK literal_267

raw_268 -> leaf_275
leaf_275  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" through the usual recursive method
lookup.  The problem isn't speed, not for a REPL, it's not having error
recovery parsing available.
"]
// END RANK raw_268

prose_52 -> { raw_276 prespace_277 literal_278 raw_279}
{rank=same; raw_276 prespace_277 literal_278 raw_279}

raw_276 [label="raw"]

prespace_277 [label="prespace"]

literal_278 [label="literal"]

raw_279 [label="raw"]


// END RANK prose_52

raw_276 -> leaf_280
leaf_280  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I will likely content myself with a grammar that kicks in when the user
presses return.  I'll want that to perform rewrites (such as removing
outer-level"]
// END RANK raw_276

prespace_277 -> leaf_281
leaf_281  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_277

literal_278 -> leaf_282
leaf_282  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local"]
// END RANK literal_278

raw_279 -> leaf_283
leaf_283  [color=Gray,shape=rectangle,fontname=Inconsolata,label="s to facilicate copy-pasting) and keep the readline
grammar from becoming too ad-hoc.

"]
// END RANK raw_279

section_53 -> { header_284 prose_285 codeblock_286}
{rank=same; header_284 prose_285 codeblock_286}

header_284 [label="4 : asserts"]

prose_285 [label="prose"]

codeblock_286 [label="code block 89-92"]


// END RANK section_53

header_284 -> leaf_287
leaf_287  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** asserts"]
// END RANK header_284

prose_285 -> { raw_288 prespace_289 literal_290 raw_291 prespace_292 literal_293 raw_294}
{rank=same; raw_288 prespace_289 literal_290 raw_291 prespace_292 literal_293 raw_294}

raw_288 [label="raw"]

prespace_289 [label="prespace"]

literal_290 [label="literal"]

raw_291 [label="raw"]

prespace_292 [label="prespace"]

literal_293 [label="literal"]

raw_294 [label="raw"]


// END RANK prose_285

raw_288 -> leaf_295
leaf_295  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  There is little sense running"]
// END RANK raw_288

prespace_289 -> leaf_296
leaf_296  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_289

literal_290 -> leaf_297
leaf_297  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_290

raw_291 -> leaf_298
leaf_298  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" outside of the"]
// END RANK raw_291

prespace_292 -> leaf_299
leaf_299  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_292

literal_293 -> leaf_300
leaf_300  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bridge"]
// END RANK literal_293

raw_294 -> leaf_301
leaf_301  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
environment.
"]
// END RANK raw_294

codeblock_286 -> leaf_302
leaf_302  [color=Gray,shape=rectangle,fontname=Inconsolata,label="assert(meta, \"must have meta in _G\")
assert(write, \"must have write in _G\")"]
// END RANK codeblock_286

section_54 -> { header_303 prose_304 prose_305 codeblock_306 codeblock_307 prose_308 prose_309 prose_310 prose_311 prose_312 codeblock_313 prose_314 codeblock_315 prose_316 codeblock_317 prose_318 codeblock_319}
{rank=same; header_303 prose_304 prose_305 codeblock_306 codeblock_307 prose_308 prose_309 prose_310 prose_311 prose_312 codeblock_313 prose_314 codeblock_315 prose_316 codeblock_317 prose_318 codeblock_319}

header_303 [label="4 : includes"]

prose_304 [label="prose"]

prose_305 [label="prose"]

codeblock_306 [label="code block 101-125"]

codeblock_307 [label="code block 127-129"]

prose_308 [label="prose"]

prose_309 [label="prose"]

prose_310 [label="prose"]

prose_311 [label="prose"]

prose_312 [label="prose"]

codeblock_313 [label="code block 152-154"]

prose_314 [label="prose"]

codeblock_315 [label="code block 158-160"]

prose_316 [label="prose"]

codeblock_317 [label="code block 165-167"]

prose_318 [label="prose"]

codeblock_319 [label="code block 172-176"]


// END RANK section_54

header_303 -> leaf_320
leaf_320  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** includes"]
// END RANK header_303

prose_304 -> { raw_321}
{rank=same; raw_321}

raw_321 [label="raw"]


// END RANK prose_304

raw_321 -> leaf_322
leaf_322  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The easiest way to go mad in concurrent environments is to share memory.
"]
// END RANK raw_321

prose_305 -> { prespace_323 literal_324 raw_325}
{rank=same; prespace_323 literal_324 raw_325}

prespace_323 [label="prespace"]

literal_324 [label="literal"]

raw_325 [label="raw"]


// END RANK prose_305

prespace_323 -> leaf_326
leaf_326  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_323

literal_324 -> leaf_327
leaf_327  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_324

raw_325 -> leaf_328
leaf_328  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" will own txtbuf, historian, and the entire screen.
"]
// END RANK raw_325

codeblock_306 -> leaf_329
leaf_329  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local stacktrace = require \"stacktrace\" . stacktrace

local Txtbuf    = require \"txtbuf\"
local Resbuf    = require \"resbuf\" -- Not currently used...
local Rainbuf   = require \"rainbuf\"
local Historian = require \"historian\"
local Lex       = require \"lex\"
local Zoneherd  = require \"zone\"
local repr      = require \"repr\"
local color     = require \"color\"
c = color.color

local Nerf   = require \"nerf\"
local Search = require \"search\"

local concat               = assert(table.concat)
local sub, gsub, rep, find = assert(string.sub),
                             assert(string.gsub),
                             assert(string.rep),
                             assert(string.find)

local ts = repr.ts
"]
// END RANK codeblock_306

codeblock_307 -> leaf_330
leaf_330  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local ModeS = meta()"]
// END RANK codeblock_307

prose_308 -> { raw_331 prespace_332 literal_333 raw_334}
{rank=same; raw_331 prespace_332 literal_333 raw_334}

raw_331 [label="raw"]

prespace_332 [label="prespace"]

literal_333 [label="literal"]

raw_334 [label="raw"]


// END RANK prose_308

raw_331 -> leaf_335
leaf_335  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Color schemes are supposed to be one-and-done, and I strongly suspect we
have a"]
// END RANK raw_331

prespace_332 -> leaf_336
leaf_336  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_332

literal_333 -> leaf_337
leaf_337  [color=Gray,shape=rectangle,fontname=Inconsolata,label="__concat"]
// END RANK literal_333

raw_334 -> leaf_338
leaf_338  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" dominated workflow, although I have yet to turn on the
profiler.
"]
// END RANK raw_334

prose_309 -> { raw_339 prespace_340 literal_341 raw_342 prespace_343 literal_344 raw_345}
{rank=same; raw_339 prespace_340 literal_341 raw_342 prespace_343 literal_344 raw_345}

raw_339 [label="raw"]

prespace_340 [label="prespace"]

literal_341 [label="literal"]

raw_342 [label="raw"]

prespace_343 [label="prespace"]

literal_344 [label="literal"]

raw_345 [label="raw"]


// END RANK prose_309

raw_339 -> leaf_346
leaf_346  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Therefore we use reference equality for the"]
// END RANK raw_339

prespace_340 -> leaf_347
leaf_347  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_340

literal_341 -> leaf_348
leaf_348  [color=Gray,shape=rectangle,fontname=Inconsolata,label="color"]
// END RANK literal_341

raw_342 -> leaf_349
leaf_349  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_342

prespace_343 -> leaf_350
leaf_350  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_343

literal_344 -> leaf_351
leaf_351  [color=Gray,shape=rectangle,fontname=Inconsolata,label="hints"]
// END RANK literal_344

raw_345 -> leaf_352
leaf_352  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" tables.
Switching themes is a matter of repopulating those tables.  I intend to
isolate this within an instance so that multiple terminals can each run their
own theme, through a simple 'fat inheritance' method.
"]
// END RANK raw_345

prose_310 -> { prespace_353 literal_354 raw_355 prespace_356 italic_357 raw_358}
{rank=same; prespace_353 literal_354 raw_355 prespace_356 italic_357 raw_358}

prespace_353 [label="prespace"]

literal_354 [label="literal"]

raw_355 [label="raw"]

prespace_356 [label="prespace"]

italic_357 [label="italic"]

raw_358 [label="raw"]


// END RANK prose_310

prespace_353 -> leaf_359
leaf_359  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_353

literal_354 -> leaf_360
leaf_360  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_354

raw_355 -> leaf_361
leaf_361  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is what you might call hypermodal. Everything is isolated in
its own lookup, that is, we use"]
// END RANK raw_355

prespace_356 -> leaf_362
leaf_362  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_356

italic_357 -> leaf_363
leaf_363  [color=Gray,shape=rectangle,fontname=Inconsolata,label="value"]
// END RANK italic_357

raw_358 -> leaf_364
leaf_364  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" equality.  This lets us pass strings
as messages and use jump tables to resolve most things.
"]
// END RANK raw_358

prose_311 -> { raw_365}
{rank=same; raw_365}

raw_365 [label="raw"]


// END RANK prose_311

raw_365 -> leaf_366
leaf_366  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It typically runs at the speed of human fingers and can afford to be much less
efficient than it will be, even before the JIT gets involved.
"]
// END RANK raw_365

prose_312 -> { raw_367 prespace_368 literal_369 raw_370}
{rank=same; raw_367 prespace_368 literal_369 raw_370}

raw_367 [label="raw"]

prespace_368 [label="prespace"]

literal_369 [label="literal"]

raw_370 [label="raw"]


// END RANK prose_312

raw_367 -> leaf_371
leaf_371  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Note also that everything is a method, our dispatch pattern will always
include the"]
// END RANK raw_367

prespace_368 -> leaf_372
leaf_372  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_368

literal_369 -> leaf_373
leaf_373  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeS"]
// END RANK literal_369

raw_370 -> leaf_374
leaf_374  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" instance as the first argument.
"]
// END RANK raw_370

codeblock_313 -> leaf_375
leaf_375  [color=Gray,shape=rectangle,fontname=Inconsolata,label="ModeS.modes = Nerf"]
// END RANK codeblock_313

prose_314 -> { raw_376}
{rank=same; raw_376}

raw_376 [label="raw"]


// END RANK prose_314

raw_376 -> leaf_377
leaf_377  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
With some semi-constants:
"]
// END RANK raw_376

codeblock_315 -> leaf_378
leaf_378  [color=Gray,shape=rectangle,fontname=Inconsolata,label="ModeS.REPL_LINE = 2"]
// END RANK codeblock_315

prose_316 -> { raw_379 prespace_380 literal_381 raw_382}
{rank=same; raw_379 prespace_380 literal_381 raw_382}

raw_379 [label="raw"]

prespace_380 [label="prespace"]

literal_381 [label="literal"]

raw_382 [label="raw"]


// END RANK prose_316

raw_379 -> leaf_383
leaf_383  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Sometimes its useful to briefly override handlers, so we check values
against"]
// END RANK raw_379

prespace_380 -> leaf_384
leaf_384  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_380

literal_381 -> leaf_385
leaf_385  [color=Gray,shape=rectangle,fontname=Inconsolata,label="special"]
// END RANK literal_381

raw_382 -> leaf_386
leaf_386  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" first:
"]
// END RANK raw_382

codeblock_317 -> leaf_387
leaf_387  [color=Gray,shape=rectangle,fontname=Inconsolata,label="ModeS.special = {}"]
// END RANK codeblock_317

prose_318 -> { raw_388}
{rank=same; raw_388}

raw_388 [label="raw"]


// END RANK prose_318

raw_388 -> leaf_389
leaf_389  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A simple pass-through so we can see what we're missing.
"]
// END RANK raw_388

codeblock_319 -> leaf_390
leaf_390  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function ModeS.default(modeS, category, value)
    return write(ts(value))
end"]
// END RANK codeblock_319

section_55 -> { header_391 prose_392 codeblock_393}
{rank=same; header_391 prose_392 codeblock_393}

header_391 [label="3 : self-insert(modeS, category, value)"]

prose_392 [label="prose"]

codeblock_393 [label="code block 183-187"]


// END RANK section_55

header_391 -> leaf_394
leaf_394  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** self-insert(modeS, category, value)"]
// END RANK header_391

prose_392 -> { raw_395}
{rank=same; raw_395}

raw_395 [label="raw"]


// END RANK prose_392

raw_395 -> leaf_396
leaf_396  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Inserts the value into the txtbuf at cursor.
"]
// END RANK raw_395

codeblock_393 -> leaf_397
leaf_397  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function ModeS.insert(modeS, category, value)
    local success =  modeS.txtbuf:insert(value)
end"]
// END RANK codeblock_393

section_56 -> { header_398 prose_399 codeblock_400}
{rank=same; header_398 prose_399 codeblock_400}

header_398 [label="3 : ModeS:errPrint(modeS, category, value)"]

prose_399 [label="prose"]

codeblock_400 [label="code block 193-199"]


// END RANK section_56

header_398 -> leaf_401
leaf_401  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** ModeS:errPrint(modeS, category, value)"]
// END RANK header_398

prose_399 -> { raw_402}
{rank=same; raw_402}

raw_402 [label="raw"]


// END RANK prose_399

raw_402 -> leaf_403
leaf_403  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Debug aide.
"]
// END RANK raw_402

codeblock_400 -> leaf_404
leaf_404  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function ModeS.errPrint(modeS, log_stmt)
   modeS.zones.suggest:replace(log_stmt)
   modeS:paint()
   return modeS
end"]
// END RANK codeblock_400

section_57 -> { header_405 prose_406 prose_407 section_408 section_409}
{rank=same; header_405 prose_406 prose_407 section_408 section_409}

header_405 [label="3 : status painter (colwrite)"]

prose_406 [label="prose"]

prose_407 [label="prose"]

section_408 [label="section: 209-270"]

section_409 [label="section: 271-293"]


// END RANK section_57

header_405 -> leaf_410
leaf_410  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** status painter (colwrite)"]
// END RANK header_405

prose_406 -> { raw_411}
{rank=same; raw_411}

raw_411 [label="raw"]


// END RANK prose_406

raw_411 -> leaf_412
leaf_412  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This is a grab-bag with many traces of the bootstrap process.
"]
// END RANK raw_411

prose_407 -> { raw_413}
{rank=same; raw_413}

raw_413 [label="raw"]


// END RANK prose_407

raw_413 -> leaf_414
leaf_414  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It also contains the state-of-the-art renderers.

"]
// END RANK raw_413

section_408 -> { header_415 prose_416 prose_417 prose_418 codeblock_419}
{rank=same; header_415 prose_416 prose_417 prose_418 codeblock_419}

header_415 [label="4 : bootstrappers"]

prose_416 [label="prose"]

prose_417 [label="prose"]

prose_418 [label="prose"]

codeblock_419 [label="code block 218-269"]


// END RANK section_408

header_415 -> leaf_420
leaf_420  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** bootstrappers"]
// END RANK header_415

prose_416 -> { raw_421}
{rank=same; raw_421}

raw_421 [label="raw"]


// END RANK prose_416

raw_421 -> leaf_422
leaf_422  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

A lot of this just paints mouse events, which we aren't using and won't be
able to use until we rigorously keep track of what's printed where.
"]
// END RANK raw_421

prose_417 -> { raw_423}
{rank=same; raw_423}

raw_423 [label="raw"]


// END RANK prose_417

raw_423 -> leaf_424
leaf_424  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Which is painstaking and annoying, but we'll get there...
"]
// END RANK raw_423

prose_418 -> { raw_425}
{rank=same; raw_425}

raw_425 [label="raw"]


// END RANK prose_418

raw_425 -> leaf_426
leaf_426  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This will continue to exist for awhile.
"]
// END RANK raw_425

codeblock_419 -> leaf_427
leaf_427  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local STAT_ICON = \"◉ \"

local function tf(bool)
   if bool then
      return ts(\"t\", \"true\")
   else
      return ts(\"f\", \"false\")
   end
end

local function pr_mouse(m)
   return a.magenta(m.button) .. \": \"
      .. a.bright(m.kind) .. \" \"
      .. tf(m.shift) .. \" \"
      .. tf(m.meta) .. \" \"
      .. tf(m.ctrl) .. \" \"
      .. tf(m.moving) .. \" \"
      .. tf(m.scrolling) .. \" \"
      .. a.cyan(m.col) .. \",\" .. a.cyan(m.row)
end

local function mk_paint(fragment, shade)
   return function(category, action)
      return shade(category .. fragment .. action)
   end
end

local act_map = { MOUSE  = pr_mouse,
                  NAV    = mk_paint(\": \", a.italic),
                  CTRL   = mk_paint(\": \", c.field),
                  ALT    = mk_paint(\": \", a.underscore),
                  ASCII  = mk_paint(\": \", c.table),
                  NYI    = mk_paint(\": \", a.red)}

local icon_map = { MOUSE = mk_paint(STAT_ICON, c.userdata),
                   NAV   = mk_paint(STAT_ICON, a.magenta),
                   CTRL  = mk_paint(STAT_ICON, a.blue),
                   ALT   = mk_paint(STAT_ICON, c[\"function\"]),
                   ASCII = mk_paint(STAT_ICON, a.green),
                   NYI   = mk_paint(STAT_ICON .. \"! \", a.red) }

local function _make_icon(category, value)
   local icon = \"\"
   if category == \"MOUSE\" then
      phrase = icon_map[category](\"\", pr_mouse(value))
   else
      phrase = icon_map[category](\"\", ts(value))
   end
   return phrase
end"]
// END RANK codeblock_419

section_409 -> { header_428 prose_429 prose_430 codeblock_431 structure_432 codeblock_433}
{rank=same; header_428 prose_429 prose_430 codeblock_431 structure_432 codeblock_433}

header_428 [label="4 : dimensional getters"]

prose_429 [label="prose"]

prose_430 [label="prose"]

codeblock_431 [label="code block 279-283"]

structure_432 [label="structure"]

codeblock_433 [label="code block 288-292"]


// END RANK section_409

header_428 -> leaf_434
leaf_434  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** dimensional getters"]
// END RANK header_428

prose_429 -> { raw_435 prespace_436 literal_437 raw_438}
{rank=same; raw_435 prespace_436 literal_437 raw_438}

raw_435 [label="raw"]

prespace_436 [label="prespace"]

literal_437 [label="literal"]

raw_438 [label="raw"]


// END RANK prose_429

raw_435 -> leaf_439
leaf_439  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Any of this business needs to move to the"]
// END RANK raw_435

prespace_436 -> leaf_440
leaf_440  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_436

literal_437 -> leaf_441
leaf_441  [color=Gray,shape=rectangle,fontname=Inconsolata,label="zoneherd"]
// END RANK literal_437

raw_438 -> leaf_442
leaf_442  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_438

prose_430 -> { raw_443 prespace_444 literal_445 raw_446 prespace_447 literal_448 raw_449 prespace_450 literal_451 raw_452}
{rank=same; raw_443 prespace_444 literal_445 raw_446 prespace_447 literal_448 raw_449 prespace_450 literal_451 raw_452}

raw_443 [label="raw"]

prespace_444 [label="prespace"]

literal_445 [label="literal"]

raw_446 [label="raw"]

prespace_447 [label="prespace"]

literal_448 [label="literal"]

raw_449 [label="raw"]

prespace_450 [label="prespace"]

literal_451 [label="literal"]

raw_452 [label="raw"]


// END RANK prose_430

raw_443 -> leaf_453
leaf_453  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Ideally,"]
// END RANK raw_443

prespace_444 -> leaf_454
leaf_454  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_444

literal_445 -> leaf_455
leaf_455  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeS"]
// END RANK literal_445

raw_446 -> leaf_456
leaf_456  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" will hold values needed to reflow the"]
// END RANK raw_446

prespace_447 -> leaf_457
leaf_457  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_447

literal_448 -> leaf_458
leaf_458  [color=Gray,shape=rectangle,fontname=Inconsolata,label="zones"]
// END RANK literal_448

raw_449 -> leaf_459
leaf_459  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and everything
else will be both calculated and accessed (internally) from"]
// END RANK raw_449

prespace_450 -> leaf_460
leaf_460  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_450

literal_451 -> leaf_461
leaf_461  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeS.zones"]
// END RANK literal_451

raw_452 -> leaf_462
leaf_462  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_452

codeblock_431 -> leaf_463
leaf_463  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function ModeS.cur_col(modeS)
   return modeS.txtbuf.cursor + modeS.l_margin - 1
end"]
// END RANK codeblock_431

structure_432 -> { hashline_464}
{rank=same; hashline_464}

hashline_464 [label="hashline"]


// END RANK structure_432

hashline_464 -> { hashtag_465}
{rank=same; hashtag_465}

hashtag_465 [label="hashtag"]


// END RANK hashline_464

hashtag_465 -> leaf_466
leaf_466  [color=Gray,shape=rectangle,fontname=Inconsolata,label="deprecated"]
// END RANK hashtag_465

codeblock_433 -> leaf_467
leaf_467  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function ModeS.replLine(modeS)
   return modeS.repl_top + #modeS.txtbuf.lines - 1
end"]
// END RANK codeblock_433

section_58 -> { header_468 prose_469 codeblock_470}
{rank=same; header_468 prose_469 codeblock_470}

header_468 [label="3 : ModeS:placeCursor()"]

prose_469 [label="prose"]

codeblock_470 [label="code block 298-304"]


// END RANK section_58

header_468 -> leaf_471
leaf_471  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** ModeS:placeCursor()"]
// END RANK header_468

prose_469 -> { raw_472 prespace_473 literal_474 raw_475}
{rank=same; raw_472 prespace_473 literal_474 raw_475}

raw_472 [label="raw"]

prespace_473 [label="prespace"]

literal_474 [label="literal"]

raw_475 [label="raw"]


// END RANK prose_469

raw_472 -> leaf_476
leaf_476  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Places the cursor where it belongs within the"]
// END RANK raw_472

prespace_473 -> leaf_477
leaf_477  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_473

literal_474 -> leaf_478
leaf_478  [color=Gray,shape=rectangle,fontname=Inconsolata,label="command"]
// END RANK literal_474

raw_475 -> leaf_479
leaf_479  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" zone.
"]
// END RANK raw_475

codeblock_470 -> leaf_480
leaf_480  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function ModeS.placeCursor(modeS)
   local col = modeS.zones.command.tc + modeS.txtbuf.cursor - 1
   local row = modeS.zones.command.tr + modeS.txtbuf.cur_row - 1
   write(a.colrow(col, row))
end"]
// END RANK codeblock_470

section_59 -> { header_481 prose_482 prose_483 codeblock_484}
{rank=same; header_481 prose_482 prose_483 codeblock_484}

header_481 [label="3 : ModeS:paint()"]

prose_482 [label="prose"]

prose_483 [label="prose"]

codeblock_484 [label="code block 314-319"]


// END RANK section_59

header_481 -> leaf_485
leaf_485  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** ModeS:paint()"]
// END RANK header_481

prose_482 -> { raw_486}
{rank=same; raw_486}

raw_486 [label="raw"]


// END RANK prose_482

raw_486 -> leaf_487
leaf_487  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This simply calls the same method on the zoneherd.
"]
// END RANK raw_486

prose_483 -> { prespace_488 literal_489 raw_490 prespace_491 literal_492 raw_493 prespace_494 literal_495 raw_496}
{rank=same; prespace_488 literal_489 raw_490 prespace_491 literal_492 raw_493 prespace_494 literal_495 raw_496}

prespace_488 [label="prespace"]

literal_489 [label="literal"]

raw_490 [label="raw"]

prespace_491 [label="prespace"]

literal_492 [label="literal"]

raw_493 [label="raw"]

prespace_494 [label="prespace"]

literal_495 [label="literal"]

raw_496 [label="raw"]


// END RANK prose_483

prespace_488 -> leaf_497
leaf_497  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_488

literal_489 -> leaf_498
leaf_498  [color=Gray,shape=rectangle,fontname=Inconsolata,label="all"]
// END RANK literal_489

raw_490 -> leaf_499
leaf_499  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is a boolean which, if"]
// END RANK raw_490

prespace_491 -> leaf_500
leaf_500  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_491

literal_492 -> leaf_501
leaf_501  [color=Gray,shape=rectangle,fontname=Inconsolata,label="true"]
// END RANK literal_492

raw_493 -> leaf_502
leaf_502  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", repaints everything whether"]
// END RANK raw_493

prespace_494 -> leaf_503
leaf_503  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_494

literal_495 -> leaf_504
leaf_504  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".touched"]
// END RANK literal_495

raw_496 -> leaf_505
leaf_505  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
or no.
"]
// END RANK raw_496

codeblock_484 -> leaf_506
leaf_506  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function ModeS.paint(modeS, all)
   modeS.zones:paint(modeS, all)
   return modeS
end"]
// END RANK codeblock_484

section_60 -> { header_507 prose_508 codeblock_509}
{rank=same; header_507 prose_508 codeblock_509}

header_507 [label="3 : ModeS:reflow()"]

prose_508 [label="prose"]

codeblock_509 [label="code block 324-329"]


// END RANK section_60

header_507 -> leaf_510
leaf_510  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** ModeS:reflow()"]
// END RANK header_507

prose_508 -> { raw_511}
{rank=same; raw_511}

raw_511 [label="raw"]


// END RANK prose_508

raw_511 -> leaf_512
leaf_512  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_511

codeblock_509 -> leaf_513
leaf_513  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function ModeS.reflow(modeS)
   modeS.zones:reflow(modeS)
   modeS:paint(true)
end"]
// END RANK codeblock_509

section_61 -> { header_514 prose_515 prose_516 codeblock_517 prose_518 prose_519 prose_520 prose_521 prose_522 prose_523 section_524}
{rank=same; header_514 prose_515 prose_516 codeblock_517 prose_518 prose_519 prose_520 prose_521 prose_522 prose_523 section_524}

header_514 [label="3 : Prompts and modes / raga"]

prose_515 [label="prose"]

prose_516 [label="prose"]

codeblock_517 [label="code block 337-340"]

prose_518 [label="prose"]

prose_519 [label="prose"]

prose_520 [label="prose"]

prose_521 [label="prose"]

prose_522 [label="prose"]

prose_523 [label="prose"]

section_524 [label="section: 361-376"]


// END RANK section_61

header_514 -> leaf_525
leaf_525  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Prompts and modes / raga"]
// END RANK header_514

prose_515 -> { raw_526 prespace_527 literal_528 raw_529}
{rank=same; raw_526 prespace_527 literal_528 raw_529}

raw_526 [label="raw"]

prespace_527 [label="prespace"]

literal_528 [label="literal"]

raw_529 [label="raw"]


// END RANK prose_515

raw_526 -> leaf_530
leaf_530  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Time to add modes to the"]
// END RANK raw_526

prespace_527 -> leaf_531
leaf_531  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_527

literal_528 -> leaf_532
leaf_532  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_528

raw_529 -> leaf_533
leaf_533  [color=Gray,shape=rectangle,fontname=Inconsolata,label="!
"]
// END RANK raw_529

prose_516 -> { raw_534}
{rank=same; raw_534}

raw_534 [label="raw"]


// END RANK prose_516

raw_534 -> leaf_535
leaf_535  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Right now everything works on the default mode, \"insert\":
"]
// END RANK raw_534

codeblock_517 -> leaf_536
leaf_536  [color=Gray,shape=rectangle,fontname=Inconsolata,label="ModeS.raga = \"nerf\"
ModeS.raga_default = \"nerf\""]
// END RANK codeblock_517

prose_518 -> { raw_537 prespace_538 literal_539 raw_540 prespace_541 literal_542 raw_543 prespace_544 literal_545 raw_546 prespace_547 literal_548 raw_549}
{rank=same; raw_537 prespace_538 literal_539 raw_540 prespace_541 literal_542 raw_543 prespace_544 literal_545 raw_546 prespace_547 literal_548 raw_549}

raw_537 [label="raw"]

prespace_538 [label="prespace"]

literal_539 [label="literal"]

raw_540 [label="raw"]

prespace_541 [label="prespace"]

literal_542 [label="literal"]

raw_543 [label="raw"]

prespace_544 [label="prespace"]

literal_545 [label="literal"]

raw_546 [label="raw"]

prespace_547 [label="prespace"]

literal_548 [label="literal"]

raw_549 [label="raw"]


// END RANK prose_518

raw_537 -> leaf_550
leaf_550  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Yes, I'm calling it"]
// END RANK raw_537

prespace_538 -> leaf_551
leaf_551  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_538

literal_539 -> leaf_552
leaf_552  [color=Gray,shape=rectangle,fontname=Inconsolata,label="raga"]
// END RANK literal_539

raw_540 -> leaf_553
leaf_553  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and that's a bit precious, but we have a"]
// END RANK raw_540

prespace_541 -> leaf_554
leaf_554  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_541

literal_542 -> leaf_555
leaf_555  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modes"]
// END RANK literal_542

raw_543 -> leaf_556
leaf_556  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
table and use it heavily. "]
// END RANK raw_543

prespace_544 -> leaf_557
leaf_557  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_544

literal_545 -> leaf_558
leaf_558  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modes"]
// END RANK literal_545

raw_546 -> leaf_559
leaf_559  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is kind of short for"]
// END RANK raw_546

prespace_547 -> leaf_560
leaf_560  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_547

literal_548 -> leaf_561
leaf_561  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modal selector"]
// END RANK literal_548

raw_549 -> leaf_562
leaf_562  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_549

prose_519 -> { raw_563}
{rank=same; raw_563}

raw_563 [label="raw"]


// END RANK prose_519

raw_563 -> leaf_564
leaf_564  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We'll need several basic modes and some ways to do overlay, and we need a
single source of truth as to what mode we're in.
"]
// END RANK raw_563

prose_520 -> { raw_565 prespace_566 literal_567 raw_568 prespace_569 literal_570 raw_571 prespace_572 literal_573 raw_574}
{rank=same; raw_565 prespace_566 literal_567 raw_568 prespace_569 literal_570 raw_571 prespace_572 literal_573 raw_574}

raw_565 [label="raw"]

prespace_566 [label="prespace"]

literal_567 [label="literal"]

raw_568 [label="raw"]

prespace_569 [label="prespace"]

literal_570 [label="literal"]

raw_571 [label="raw"]

prespace_572 [label="prespace"]

literal_573 [label="literal"]

raw_574 [label="raw"]


// END RANK prose_520

raw_565 -> leaf_575
leaf_575  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The entrance for that should be a single function,"]
// END RANK raw_565

prespace_566 -> leaf_576
leaf_576  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_566

literal_567 -> leaf_577
leaf_577  [color=Gray,shape=rectangle,fontname=Inconsolata,label="ModeS:shiftMode(raga)"]
// END RANK literal_567

raw_568 -> leaf_578
leaf_578  [color=Gray,shape=rectangle,fontname=Inconsolata,label=",
which takes care of all stateful changes to"]
// END RANK raw_568

prespace_569 -> leaf_579
leaf_579  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_569

literal_570 -> leaf_580
leaf_580  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_570

raw_571 -> leaf_581
leaf_581  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" needed to enter
the mode.  One thing it will do is set the field"]
// END RANK raw_571

prespace_572 -> leaf_582
leaf_582  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_572

literal_573 -> leaf_583
leaf_583  [color=Gray,shape=rectangle,fontname=Inconsolata,label="raga"]
// END RANK literal_573

raw_574 -> leaf_584
leaf_584  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" to the parameter.
"]
// END RANK raw_574

prose_521 -> { raw_585 prespace_586 literal_587 raw_588}
{rank=same; raw_585 prespace_586 literal_587 raw_588}

raw_585 [label="raw"]

prespace_586 [label="prespace"]

literal_587 [label="literal"]

raw_588 [label="raw"]


// END RANK prose_521

raw_585 -> leaf_589
leaf_589  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
As a general rule, we want mode changes to work generically, by changing
the functions attached to"]
// END RANK raw_585

prespace_586 -> leaf_590
leaf_590  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_586

literal_587 -> leaf_591
leaf_591  [color=Gray,shape=rectangle,fontname=Inconsolata,label="(category, value)"]
// END RANK literal_587

raw_588 -> leaf_592
leaf_592  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" pairs.
"]
// END RANK raw_588

prose_522 -> { raw_593}
{rank=same; raw_593}

raw_593 [label="raw"]


// END RANK prose_522

raw_593 -> leaf_594
leaf_594  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
But sometimes we'll want a bit of logic that dispatches on the mode directly,
repainting is a good example of this.
"]
// END RANK raw_593

prose_523 -> { raw_595 prespace_596 literal_597 raw_598}
{rank=same; raw_595 prespace_596 literal_597 raw_598}

raw_595 [label="raw"]

prespace_596 [label="prespace"]

literal_597 [label="literal"]

raw_598 [label="raw"]


// END RANK prose_523

raw_595 -> leaf_599
leaf_599  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The next mode we're going to write is"]
// END RANK raw_595

prespace_596 -> leaf_600
leaf_600  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_596

literal_597 -> leaf_601
leaf_601  [color=Gray,shape=rectangle,fontname=Inconsolata,label="\"search\""]
// END RANK literal_597

raw_598 -> leaf_602
leaf_602  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".

"]
// END RANK raw_598

section_524 -> { header_603 prose_604 codeblock_605 codeblock_606}
{rank=same; header_603 prose_604 codeblock_605 codeblock_606}

header_603 [label="4 : Prompts"]

prose_604 [label="prose"]

codeblock_605 [label="code block 365-368"]

codeblock_606 [label="code block 370-374"]


// END RANK section_524

header_603 -> leaf_607
leaf_607  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Prompts"]
// END RANK header_603

prose_604 -> { raw_608}
{rank=same; raw_608}

raw_608 [label="raw"]


// END RANK prose_604

raw_608 -> leaf_609
leaf_609  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Let's add some:
"]
// END RANK raw_608

codeblock_605 -> leaf_610
leaf_610  [color=Gray,shape=rectangle,fontname=Inconsolata,label="ModeS.prompts = { nerf   = \"👉 \",
                  search = \"⁉️ \" }"]
// END RANK codeblock_605

codeblock_606 -> leaf_611
leaf_611  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function ModeS.prompt(modeS)
   modeS.zones.prompt:replace(modeS.prompts[modeS.raga])
end"]
// END RANK codeblock_606

section_62 -> { header_612 prose_613 prose_614 prose_615 section_616 section_617}
{rank=same; header_612 prose_613 prose_614 prose_615 section_616 section_617}

header_612 [label="3 : ModeS:shiftMode(raga)"]

prose_613 [label="prose"]

prose_614 [label="prose"]

prose_615 [label="prose"]

section_616 [label="section: 388-420"]

section_617 [label="section: 421-440"]


// END RANK section_62

header_612 -> leaf_618
leaf_618  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** ModeS:shiftMode(raga)"]
// END RANK header_612

prose_613 -> { raw_619 prespace_620 literal_621 raw_622 prespace_623 literal_624 raw_625}
{rank=same; raw_619 prespace_620 literal_621 raw_622 prespace_623 literal_624 raw_625}

raw_619 [label="raw"]

prespace_620 [label="prespace"]

literal_621 [label="literal"]

raw_622 [label="raw"]

prespace_623 [label="prespace"]

literal_624 [label="literal"]

raw_625 [label="raw"]


// END RANK prose_613

raw_619 -> leaf_626
leaf_626  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The"]
// END RANK raw_619

prespace_620 -> leaf_627
leaf_627  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_620

literal_621 -> leaf_628
leaf_628  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_621

raw_622 -> leaf_629
leaf_629  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", as described in the prelude, is a stateful and hypermodal"]
// END RANK raw_622

prespace_623 -> leaf_630
leaf_630  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_623

literal_624 -> leaf_631
leaf_631  [color=Gray,shape=rectangle,fontname=Inconsolata,label="repl"]
// END RANK literal_624

raw_625 -> leaf_632
leaf_632  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" environment.
"]
// END RANK raw_625

prose_614 -> { prespace_633 literal_634 raw_635}
{rank=same; prespace_633 literal_634 raw_635}

prespace_633 [label="prespace"]

literal_634 [label="literal"]

raw_635 [label="raw"]


// END RANK prose_614

prespace_633 -> leaf_636
leaf_636  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_633

literal_634 -> leaf_637
leaf_637  [color=Gray,shape=rectangle,fontname=Inconsolata,label="shiftMode"]
// END RANK literal_634

raw_635 -> leaf_638
leaf_638  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is the gear stick which drives the state. It encapsulates the
state changes needed to switch between them.
"]
// END RANK raw_635

prose_615 -> { raw_639 prespace_640 literal_641 raw_642}
{rank=same; raw_639 prespace_640 literal_641 raw_642}

raw_639 [label="raw"]

prespace_640 [label="prespace"]

literal_641 [label="literal"]

raw_642 [label="raw"]


// END RANK prose_615

raw_639 -> leaf_643
leaf_643  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I'm going to go ahead and weld on"]
// END RANK raw_639

prespace_640 -> leaf_644
leaf_644  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_640

literal_641 -> leaf_645
leaf_645  [color=Gray,shape=rectangle,fontname=Inconsolata,label="search"]
// END RANK literal_641

raw_642 -> leaf_646
leaf_646  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" before I start waxing eloquent.

"]
// END RANK raw_642

section_616 -> { header_647 prose_648 codeblock_649}
{rank=same; header_647 prose_648 codeblock_649}

header_647 [label="4 : ModeS.closet"]

prose_648 [label="prose"]

codeblock_649 [label="code block 393-419"]


// END RANK section_616

header_647 -> leaf_650
leaf_650  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** ModeS.closet"]
// END RANK header_647

prose_648 -> { raw_651}
{rank=same; raw_651}

raw_651 [label="raw"]


// END RANK prose_648

raw_651 -> leaf_652
leaf_652  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

A storage table for modes and other things we aren't using and need to
retrieve.
"]
// END RANK raw_651

codeblock_649 -> leaf_653
leaf_653  [color=Gray,shape=rectangle,fontname=Inconsolata,label="ModeS.closet = { nerf = { modes = Nerf,
                          lex   = Lex.lua_thor },
                 search = { modes = Search,
                            lex   = c.base } }

function ModeS.shiftMode(modeS, raga)
   if raga == \"search\" then
      -- stash current lexer
      -- #todo do this in a less dumb way
      modeS.closet[modeS.raga].lex = modeS.lex
      modeS.lex = modeS.closet.search.lex
      modeS.modes = modeS.closet.search.modes
   elseif raga == \"nerf\" then
      -- do default nerfy things
      modeS.lex = modeS.closet.nerf.lex
      modeS.modes = modeS.closet.nerf.modes
   elseif raga == \"vril-nav\" then
      -- do vimmy navigation
   elseif raga == \"vril-ins\" then
      -- do vimmy inserts
   end
   modeS.raga = raga
   modeS:prompt()
   return modeS
end"]
// END RANK codeblock_649

section_617 -> { header_654 prose_655 codeblock_656}
{rank=same; header_654 prose_655 codeblock_656}

header_654 [label="4 : _firstCharHandler"]

prose_655 [label="prose"]

codeblock_656 [label="code block 426-438"]


// END RANK section_617

header_654 -> leaf_657
leaf_657  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** _firstCharHandler"]
// END RANK header_654

prose_655 -> { raw_658 prespace_659 literal_660 raw_661}
{rank=same; raw_658 prespace_659 literal_660 raw_661}

raw_658 [label="raw"]

prespace_659 [label="prespace"]

literal_660 [label="literal"]

raw_661 [label="raw"]


// END RANK prose_655

raw_658 -> leaf_662
leaf_662  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Our first character can trigger mode switches, notably we want an initial"]
// END RANK raw_658

prespace_659 -> leaf_663
leaf_663  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_659

literal_660 -> leaf_664
leaf_664  [color=Gray,shape=rectangle,fontname=Inconsolata,label="/"]
// END RANK literal_660

raw_661 -> leaf_665
leaf_665  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" to trigger search mode.
"]
// END RANK raw_661

codeblock_656 -> leaf_666
leaf_666  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function _firstCharHandler(modeS, category, value)
   local shifted = false
   if category == \"ASCII\" then
      if value == \"/\" then
         modeS:shiftMode \"search\"
         shifted = true
      end
   end
   modeS.firstChar = false
   return shifted
end"]
// END RANK codeblock_656

section_6 -> { header_667 prose_668 prose_669 prose_670 codeblock_671 prose_672 codeblock_673 section_674 section_675}
{rank=same; header_667 prose_668 prose_669 prose_670 codeblock_671 prose_672 codeblock_673 section_674 section_675}

header_667 [label="2 : act"]

prose_668 [label="prose"]

prose_669 [label="prose"]

prose_670 [label="prose"]

codeblock_671 [label="code block 454-511"]

prose_672 [label="prose"]

codeblock_673 [label="code block 515-519"]

section_674 [label="section: 522-530"]

section_675 [label="section: 531-618"]


// END RANK section_6

header_667 -> leaf_676
leaf_676  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** act"]
// END RANK header_667

prose_668 -> { raw_677 prespace_678 literal_679 raw_680 prespace_681 literal_682 raw_683 prespace_684 literal_685 raw_686 prespace_687 literal_688 raw_689}
{rank=same; raw_677 prespace_678 literal_679 raw_680 prespace_681 literal_682 raw_683 prespace_684 literal_685 raw_686 prespace_687 literal_688 raw_689}

raw_677 [label="raw"]

prespace_678 [label="prespace"]

literal_679 [label="literal"]

raw_680 [label="raw"]

prespace_681 [label="prespace"]

literal_682 [label="literal"]

raw_683 [label="raw"]

prespace_684 [label="prespace"]

literal_685 [label="literal"]

raw_686 [label="raw"]

prespace_687 [label="prespace"]

literal_688 [label="literal"]

raw_689 [label="raw"]


// END RANK prose_668

raw_677 -> leaf_690
leaf_690  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

 "]
// END RANK raw_677

prespace_678 -> leaf_691
leaf_691  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_678

literal_679 -> leaf_692
leaf_692  [color=Gray,shape=rectangle,fontname=Inconsolata,label="act"]
// END RANK literal_679

raw_680 -> leaf_693
leaf_693  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" simply dispatches. Note that our common interfaces is"]
// END RANK raw_680

prespace_681 -> leaf_694
leaf_694  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_681

literal_682 -> leaf_695
leaf_695  [color=Gray,shape=rectangle,fontname=Inconsolata,label="method(modeS, category, value)"]
// END RANK literal_682

raw_683 -> leaf_696
leaf_696  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", we need to distinguish betwen the tuple"]
// END RANK raw_683

prespace_684 -> leaf_697
leaf_697  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_684

literal_685 -> leaf_698
leaf_698  [color=Gray,shape=rectangle,fontname=Inconsolata,label="(\"INSERT\", \"SHIFT-LEFT\")"]
// END RANK literal_685

raw_686 -> leaf_699
leaf_699  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" (which could arrive from copy-paste[*]) and"]
// END RANK raw_686

prespace_687 -> leaf_700
leaf_700  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_687

literal_688 -> leaf_701
leaf_701  [color=Gray,shape=rectangle,fontname=Inconsolata,label="(\"NAV\", \"SHIFT-LEFT\")"]
// END RANK literal_688

raw_689 -> leaf_702
leaf_702  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and preserve information for our fall-through method.
"]
// END RANK raw_689

prose_669 -> { raw_703 prespace_704 italic_705 raw_706}
{rank=same; raw_703 prespace_704 italic_705 raw_706}

raw_703 [label="raw"]

prespace_704 [label="prespace"]

italic_705 [label="italic"]

raw_706 [label="raw"]


// END RANK prose_669

raw_703 -> leaf_707
leaf_707  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
[*] We"]
// END RANK raw_703

prespace_704 -> leaf_708
leaf_708  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_704

italic_705 -> leaf_709
leaf_709  [color=Gray,shape=rectangle,fontname=Inconsolata,label="should"]
// END RANK italic_705

raw_706 -> leaf_710
leaf_710  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" split up paste events into constituent codepoints, but we
don't.
"]
// END RANK raw_706

prose_670 -> { prespace_711 literal_712 raw_713}
{rank=same; prespace_711 literal_712 raw_713}

prespace_711 [label="prespace"]

literal_712 [label="literal"]

raw_713 [label="raw"]


// END RANK prose_670

prespace_711 -> leaf_714
leaf_714  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_711

literal_712 -> leaf_715
leaf_715  [color=Gray,shape=rectangle,fontname=Inconsolata,label="act"]
// END RANK literal_712

raw_713 -> leaf_716
leaf_716  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" always succeeds, meaning we need some metatable action to absorb and
log anything unexpected.
"]
// END RANK raw_713

codeblock_671 -> leaf_717
leaf_717  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local assertfmt = assert(core.assertfmt)

function ModeS.act(modeS, category, value)
   assertfmt(modeS.modes[category], \"no category %s in modeS\", category)
   -- catch special handlers first
   if modeS.special[value] then
      return modeS.special[value](modeS, category, value)
   end
   local icon = _make_icon(category, value)
   -- Special first-character handling
   if modeS.firstChar and not (category == \"MOUSE\" or category == \"NAV\") then
      modeS.zones.results:replace \"\"
      local shifted = _firstCharHandler(modeS, category, value)
      if shifted then
        goto final
      end
   end
   -- Dispatch on value if possible
   if type(modeS.modes[category]) == \"table\"
      and modeS.modes[category][value] then
      modeS.modes[category][value](modeS, category, value)

   -- otherwise fall back:
   elseif category == \"ASCII\" then
      -- hard coded for now
      modeS:insert(category, value)
   elseif category == \"NAV\" then
      if modeS.modes.NAV[value] then
         modeS.modes.NAV[value](modeS, category, value)
      else
         icon = _make_icon(\"NYI\", \"NAV::\" .. value)
      end
   elseif category == \"MOUSE\" then
      -- do mouse stuff
      if modeS.modes.MOUSE then
         modeS.modes.MOUSE(modeS, category, value)
      end
   else
      icon = _make_icon(\"NYI\", category .. \":\" .. value)
   end

   ::final::
   if modeS.raga == \"search\" then
      -- we need to fake this into a 'result'
      local searchResult = Rainbuf()
      searchResult[1] = modeS.hist:search(tostring(modeS.txtbuf))
      searchResult.n = 1
      modeS.zones.results:replace(searchResult)
   end
   -- Replace zones
   modeS.zones.stat_col:replace(icon)
   modeS.zones.command:replace(modeS.txtbuf)
   modeS.zones:adjustCommand()
   modeS:paint()
   collectgarbage()
end"]
// END RANK codeblock_671

prose_672 -> { raw_718 prespace_719 literal_720 raw_721}
{rank=same; raw_718 prespace_719 literal_720 raw_721}

raw_718 [label="raw"]

prespace_719 [label="prespace"]

literal_720 [label="literal"]

raw_721 [label="raw"]


// END RANK prose_672

raw_718 -> leaf_722
leaf_722  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
To keep"]
// END RANK raw_718

prespace_719 -> leaf_723
leaf_723  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_719

literal_720 -> leaf_724
leaf_724  [color=Gray,shape=rectangle,fontname=Inconsolata,label="act"]
// END RANK literal_720

raw_721 -> leaf_725
leaf_725  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" itself replaceable, we look it up on each call:
"]
// END RANK raw_721

codeblock_673 -> leaf_726
leaf_726  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function ModeS.__call(modeS, category, value)
  return modeS:act(category, value)
end"]
// END RANK codeblock_673

section_674 -> { header_727 prose_728 prose_729}
{rank=same; header_727 prose_728 prose_729}

header_727 [label="3 : ASCII"]

prose_728 [label="prose"]

prose_729 [label="prose"]


// END RANK section_674

header_727 -> leaf_730
leaf_730  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** ASCII"]
// END RANK header_727

prose_728 -> { raw_731}
{rank=same; raw_731}

raw_731 [label="raw"]


// END RANK prose_728

raw_731 -> leaf_732
leaf_732  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Any printable 7 bit utf-8 sequence.
"]
// END RANK raw_731

prose_729 -> { raw_733}
{rank=same; raw_733}

raw_733 [label="raw"]


// END RANK prose_729

raw_733 -> leaf_734
leaf_734  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Currently just self-inserts, but watch this space...



"]
// END RANK raw_733

section_675 -> { header_735 prose_736 codeblock_737 codeblock_738 codeblock_739}
{rank=same; header_735 prose_736 codeblock_737 codeblock_738 codeblock_739}

header_735 [label="3 : ModeS:eval()"]

prose_736 [label="prose"]

codeblock_737 [label="code block 534-539"]

codeblock_738 [label="code block 541-545"]

codeblock_739 [label="code block 547-616"]


// END RANK section_675

header_735 -> leaf_740
leaf_740  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** ModeS:eval()"]
// END RANK header_735

prose_736 -> { raw_741}
{rank=same; raw_741}

raw_741 [label="raw"]


// END RANK prose_736

raw_741 -> leaf_742
leaf_742  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

"]
// END RANK raw_741

codeblock_737 -> leaf_743
leaf_743  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function gatherResults(success, ...)
  local n = select('#', ...)
  return success, { n = n, ... }
end"]
// END RANK codeblock_737

codeblock_738 -> leaf_744
leaf_744  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function ModeS.clearResults(modeS)
   write(a.erase.box(modeS.repl_top + 1, 1, modeS.max_row, modeS.r_margin))
end"]
// END RANK codeblock_738

codeblock_739 -> leaf_745
leaf_745  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function ModeS.eval(modeS)
   local chunk = tostring(modeS.txtbuf)

   local success, results
   -- first we prefix return
   local f, err = loadstring('return ' .. chunk, 'REPL')

   if not f then
      -- try again without return
      f, err = loadstring(chunk, 'REPL')
   end
   if not f then
      local head = sub(chunk, 1, 1)
      if head == \"=\" then -- take pity on old-school Lua hackers
         f, err = loadstring('return ' .. sub(chunk,2), 'REPL')
      end -- more special REPL prefix soon: /, ?, >(?)
   end
   if f then
      setfenv(f, _G)
      success, results = gatherResults(xpcall(f, debug.traceback))
      if success then
      -- successful call
         if results.n > 0 then
            local rb = Rainbuf(results)
            modeS.zones.results:replace(rb)
         else
            modeS.zones.results:replace \"\"
         end
      elseif string.find(results[1], \"is not declared\") then
         -- let's try it with __G
         setfenv(f, __G)
         success, results = gatherResults(xpcall(f, debug.traceback))
         if success then
            if results.n > 0 then
               local rb = Rainbuf(results)
               modeS.zones.results:replace(rb)
            else
               modeS.zones.results:replace \"\"
            end
         else
            -- error
            results.frozen = true
            modeS.zones.results:replace(results)
         end
      else
         -- error
         results.frozen = true
         modeS.zones.results:replace(results)
      end
   else
      if err:match \"'<eof>'$\" then
         -- Lua expects some more input, advance the txtbuf
         modeS.txtbuf:advance()
         write(a.colrow(1, modeS.repl_top + 1) .. \"...\")
         return true
      else
         local to_err = { err.. \"\\n\" .. stacktrace(),
                          n = 1,
                          frozen = true}
         modeS.zones.results:replace(to_err)
         -- pass through to default.
      end
   end

   modeS.hist:append(modeS.txtbuf, results, success)
   modeS.hist.cursor = #modeS.hist
   -- modeS:prompt()
end"]
// END RANK codeblock_739

section_7 -> { header_746 prose_747 codeblock_748 codeblock_749}
{rank=same; header_746 prose_747 codeblock_748 codeblock_749}

header_746 [label="2 : new"]

prose_747 [label="prose"]

codeblock_748 [label="code block 622-645"]

codeblock_749 [label="code block 647-649"]


// END RANK section_7

header_746 -> leaf_750
leaf_750  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** new"]
// END RANK header_746

prose_747 -> { raw_751}
{rank=same; raw_751}

raw_751 [label="raw"]


// END RANK prose_747

raw_751 -> leaf_752
leaf_752  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

"]
// END RANK raw_751

codeblock_748 -> leaf_753
leaf_753  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function new(max_col, max_row)
  local modeS = meta(ModeS)
  modeS.txtbuf = Txtbuf()
  modeS.hist  = Historian()
  modeS.lex  = Lex.lua_thor
  modeS.hist.cursor = #modeS.hist + 1
  modeS.max_col = max_col
  modeS.max_row = max_row
  -- this will be replaced with Zones
  modeS.l_margin = 4
  modeS.r_margin = 80
  modeS.row = 2
  modeS.repl_top  = ModeS.REPL_LINE
  modeS.zones = Zoneherd(modeS, write)
  modeS.zones.status:replace \"an repl, plz reply uwu 👀\"
  modeS.zones.prompt:replace \"👉  \"
  -- initial state
  modeS.firstChar = true
  return modeS
end

ModeS.idEst = new"]
// END RANK codeblock_748

codeblock_749 -> leaf_754
leaf_754  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return new"]
// END RANK codeblock_749


}
