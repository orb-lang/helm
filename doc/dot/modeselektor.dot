digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 300"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-221"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 section_5 section_6}
{rank=same; header_2 prose_3 prose_4 section_5 section_6}

header_2 [label="1 : Modeselektor"]

prose_3 [label="prose"]

prose_4 [label="prose"]

section_5 [label="section: 11-157"]

section_6 [label="section: 222-300"]


// END RANK section_1

header_2 -> leaf_7
leaf_7  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Modeselektor"]
// END RANK header_2

prose_3 -> { raw_8 prespace_9 literal_10 raw_11}
{rank=same; raw_8 prespace_9 literal_10 raw_11}

raw_8 [label="raw"]

prespace_9 [label="prespace"]

literal_10 [label="literal"]

raw_11 [label="raw"]


// END RANK prose_3

raw_8 -> leaf_12
leaf_12  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK raw_8

prespace_9 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_9

literal_10 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label="femto"]
// END RANK literal_10

raw_11 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" will hold all state for an terminal session.  Soon, we will
encapsulate that, making the library re-entrant.
"]
// END RANK raw_11

prose_4 -> { prespace_16 literal_17 raw_18 prespace_19 literal_20 raw_21 prespace_22 literal_23 raw_24}
{rank=same; prespace_16 literal_17 raw_18 prespace_19 literal_20 raw_21 prespace_22 literal_23 raw_24}

prespace_16 [label="prespace"]

literal_17 [label="literal"]

raw_18 [label="raw"]

prespace_19 [label="prespace"]

literal_20 [label="literal"]

raw_21 [label="raw"]

prespace_22 [label="prespace"]

literal_23 [label="literal"]

raw_24 [label="raw"]


// END RANK prose_4

prespace_16 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_16

literal_17 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_17

raw_18 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is the modal interpreter for the repl language, which becomes
the core of"]
// END RANK raw_18

prespace_19 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_19

literal_20 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label="ed"]
// END RANK literal_20

raw_21 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  This is a glorified lookup table with a state switch and
a pointer to the"]
// END RANK raw_21

prespace_22 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_22

literal_23 -> leaf_32
leaf_32  [color=Gray,shape=rectangle,fontname=Inconsolata,label="femto"]
// END RANK literal_23

raw_24 -> leaf_33
leaf_33  [color=Gray,shape=rectangle,fontname=Inconsolata,label="cell we're operating on.

"]
// END RANK raw_24

section_5 -> { header_34 prose_35 prose_36 prose_37 prose_38 prose_39 prose_40 prose_41 prose_42 prose_43 prose_44 section_45 section_46 section_47 section_48 section_49}
{rank=same; header_34 prose_35 prose_36 prose_37 prose_38 prose_39 prose_40 prose_41 prose_42 prose_43 prose_44 section_45 section_46 section_47 section_48 section_49}

header_34 [label="2 : Design"]

prose_35 [label="prose"]

prose_36 [label="prose"]

prose_37 [label="prose"]

prose_38 [label="prose"]

prose_39 [label="prose"]

prose_40 [label="prose"]

prose_41 [label="prose"]

prose_42 [label="prose"]

prose_43 [label="prose"]

prose_44 [label="prose"]

section_45 [label="section: 56-67"]

section_46 [label="section: 68-85"]

section_47 [label="section: 86-142"]

section_48 [label="section: 143-157"]

section_49 [label="section: 158-221"]


// END RANK section_5

header_34 -> leaf_50
leaf_50  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Design"]
// END RANK header_34

prose_35 -> { raw_51 prespace_52 literal_53 raw_54 prespace_55 literal_56 raw_57}
{rank=same; raw_51 prespace_52 literal_53 raw_54 prespace_55 literal_56 raw_57}

raw_51 [label="raw"]

prespace_52 [label="prespace"]

literal_53 [label="literal"]

raw_54 [label="raw"]

prespace_55 [label="prespace"]

literal_56 [label="literal"]

raw_57 [label="raw"]


// END RANK prose_35

raw_51 -> leaf_58
leaf_58  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

 "]
// END RANK raw_51

prespace_52 -> leaf_59
leaf_59  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_52

literal_53 -> leaf_60
leaf_60  [color=Gray,shape=rectangle,fontname=Inconsolata,label="femto"]
// END RANK literal_53

raw_54 -> leaf_61
leaf_61  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" passes keystrokes as messages to"]
// END RANK raw_54

prespace_55 -> leaf_62
leaf_62  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_55

literal_56 -> leaf_63
leaf_63  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_56

raw_57 -> leaf_64
leaf_64  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  It does no writes
to stdout at all.  It is smart enough to categorize and parse various device
reports, but has no knowledge of why those reports were requested.
"]
// END RANK raw_57

prose_36 -> { prespace_65 literal_66 raw_67}
{rank=same; prespace_65 literal_66 raw_67}

prespace_65 [label="prespace"]

literal_66 [label="literal"]

raw_67 [label="raw"]


// END RANK prose_36

prespace_65 -> leaf_68
leaf_68  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_65

literal_66 -> leaf_69
leaf_69  [color=Gray,shape=rectangle,fontname=Inconsolata,label="femto"]
// END RANK literal_66

raw_67 -> leaf_70
leaf_70  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" runs the event loop, so all other members are pulled in as modules.
"]
// END RANK raw_67

prose_37 -> { prespace_71 literal_72 raw_73 prespace_74 literal_75 raw_76}
{rank=same; prespace_71 literal_72 raw_73 prespace_74 literal_75 raw_76}

prespace_71 [label="prespace"]

literal_72 [label="literal"]

raw_73 [label="raw"]

prespace_74 [label="prespace"]

literal_75 [label="literal"]

raw_76 [label="raw"]


// END RANK prose_37

prespace_71 -> leaf_77
leaf_77  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_71

literal_72 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_72

raw_73 -> leaf_79
leaf_79  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" takes care of system-level housekeeping: opening files
and sockets, keeping command history, fuzzy completion, and has its own eval
loop off the main track.  For evaluating lines, it will call a small executor,
so that in a little while we can put the user program in its own"]
// END RANK raw_73

prespace_74 -> leaf_80
leaf_80  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_74

literal_75 -> leaf_81
leaf_81  [color=Gray,shape=rectangle,fontname=Inconsolata,label="LuaL_state"]
// END RANK literal_75

raw_76 -> leaf_82
leaf_82  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_76

prose_38 -> { raw_83 prespace_84 literal_85 raw_86}
{rank=same; raw_83 prespace_84 literal_85 raw_86}

raw_83 [label="raw"]

prespace_84 [label="prespace"]

literal_85 [label="literal"]

raw_86 [label="raw"]


// END RANK prose_38

raw_83 -> leaf_87
leaf_87  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This is both good practice, and absolutely necessary if we are to REPL other"]
// END RANK raw_83

prespace_84 -> leaf_88
leaf_88  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_84

literal_85 -> leaf_89
leaf_89  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bridge"]
// END RANK literal_85

raw_86 -> leaf_90
leaf_90  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" programs, each of which has its own event loop.
"]
// END RANK raw_86

prose_39 -> { raw_91 prespace_92 literal_93 raw_94}
{rank=same; raw_91 prespace_92 literal_93 raw_94}

raw_91 [label="raw"]

prespace_92 [label="prespace"]

literal_93 [label="literal"]

raw_94 [label="raw"]


// END RANK prose_39

raw_91 -> leaf_95
leaf_95  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The implementation is essentially a VM.  Category and value are
successively looked up in jump tables and the method applied with the"]
// END RANK raw_91

prespace_92 -> leaf_96
leaf_96  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_92

literal_93 -> leaf_97
leaf_97  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeS"]
// END RANK literal_93

raw_94 -> leaf_98
leaf_98  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
instance as the first argument.
"]
// END RANK raw_94

prose_40 -> { prespace_99 literal_100 raw_101 prespace_102 literal_103 raw_104 prespace_105 literal_106 raw_107 prespace_108 literal_109 raw_110 prespace_111 literal_112 raw_113}
{rank=same; prespace_99 literal_100 raw_101 prespace_102 literal_103 raw_104 prespace_105 literal_106 raw_107 prespace_108 literal_109 raw_110 prespace_111 literal_112 raw_113}

prespace_99 [label="prespace"]

literal_100 [label="literal"]

raw_101 [label="raw"]

prespace_102 [label="prespace"]

literal_103 [label="literal"]

raw_104 [label="raw"]

prespace_105 [label="prespace"]

literal_106 [label="literal"]

raw_107 [label="raw"]

prespace_108 [label="prespace"]

literal_109 [label="literal"]

raw_110 [label="raw"]

prespace_111 [label="prespace"]

literal_112 [label="literal"]

raw_113 [label="raw"]


// END RANK prose_40

prespace_99 -> leaf_114
leaf_114  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_99

literal_100 -> leaf_115
leaf_115  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_100

raw_101 -> leaf_116
leaf_116  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" passes any edit or movement commands to an internally-owned"]
// END RANK raw_101

prespace_102 -> leaf_117
leaf_117  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_102

literal_103 -> leaf_118
leaf_118  [color=Gray,shape=rectangle,fontname=Inconsolata,label="linebuf"]
// END RANK literal_103

raw_104 -> leaf_119
leaf_119  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", which keeps all modeling of the line. "]
// END RANK raw_104

prespace_105 -> leaf_120
leaf_120  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_105

literal_106 -> leaf_121
leaf_121  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_106

raw_107 -> leaf_122
leaf_122  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" decides when
to repaint the screen, calling"]
// END RANK raw_107

prespace_108 -> leaf_123
leaf_123  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_108

literal_109 -> leaf_124
leaf_124  [color=Gray,shape=rectangle,fontname=Inconsolata,label="rainbuf"]
// END RANK literal_109

raw_110 -> leaf_125
leaf_125  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" with a region of"]
// END RANK raw_110

prespace_111 -> leaf_126
leaf_126  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_111

literal_112 -> leaf_127
leaf_127  [color=Gray,shape=rectangle,fontname=Inconsolata,label="linebuf"]
// END RANK literal_112

raw_113 -> leaf_128
leaf_128  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and
instructions as to how to paint it.
"]
// END RANK raw_113

prose_41 -> { raw_129 prespace_130 literal_131 raw_132 prespace_133 literal_134 raw_135 prespace_136 literal_137 raw_138}
{rank=same; raw_129 prespace_130 literal_131 raw_132 prespace_133 literal_134 raw_135 prespace_136 literal_137 raw_138}

raw_129 [label="raw"]

prespace_130 [label="prespace"]

literal_131 [label="literal"]

raw_132 [label="raw"]

prespace_133 [label="prespace"]

literal_134 [label="literal"]

raw_135 [label="raw"]

prespace_136 [label="prespace"]

literal_137 [label="literal"]

raw_138 [label="raw"]


// END RANK prose_41

raw_129 -> leaf_139
leaf_139  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
There is one"]
// END RANK raw_129

prespace_130 -> leaf_140
leaf_140  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_130

literal_131 -> leaf_141
leaf_141  [color=Gray,shape=rectangle,fontname=Inconsolata,label="deck"]
// END RANK literal_131

raw_132 -> leaf_142
leaf_142  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" instance member per screen, which tiles the available
space. "]
// END RANK raw_132

prespace_133 -> leaf_143
leaf_143  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_133

literal_134 -> leaf_144
leaf_144  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_134

raw_135 -> leaf_145
leaf_145  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is the writer, and"]
// END RANK raw_135

prespace_136 -> leaf_146
leaf_146  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_136

literal_137 -> leaf_147
leaf_147  [color=Gray,shape=rectangle,fontname=Inconsolata,label="rainbuf"]
// END RANK literal_137

raw_138 -> leaf_148
leaf_148  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" holds a pointer to the
table for read access.
"]
// END RANK raw_138

prose_42 -> { raw_149 prespace_150 literal_151 raw_152 prespace_153 literal_154 raw_155}
{rank=same; raw_149 prespace_150 literal_151 raw_152 prespace_153 literal_154 raw_155}

raw_149 [label="raw"]

prespace_150 [label="prespace"]

literal_151 [label="literal"]

raw_152 [label="raw"]

prespace_153 [label="prespace"]

literal_154 [label="literal"]

raw_155 [label="raw"]


// END RANK prose_42

raw_149 -> leaf_156
leaf_156  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
When we have our fancy parse engine and quipu structure, linebuf will call"]
// END RANK raw_149

prespace_150 -> leaf_157
leaf_157  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_150

literal_151 -> leaf_158
leaf_158  [color=Gray,shape=rectangle,fontname=Inconsolata,label="comb"]
// END RANK literal_151

raw_152 -> leaf_159
leaf_159  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" to redecorate the syntax tree before passing it to"]
// END RANK raw_152

prespace_153 -> leaf_160
leaf_160  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_153

literal_154 -> leaf_161
leaf_161  [color=Gray,shape=rectangle,fontname=Inconsolata,label="rainbuf"]
// END RANK literal_154

raw_155 -> leaf_162
leaf_162  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" for
markup.  At the moment I'm just going to write some crude lexers, which
will be more than enough for Clu and Lua, which have straightforward syntax.
"]
// END RANK raw_155

prose_43 -> { raw_163 prespace_164 literal_165 raw_166 prespace_167 literal_168 raw_169}
{rank=same; raw_163 prespace_164 literal_165 raw_166 prespace_167 literal_168 raw_169}

raw_163 [label="raw"]

prespace_164 [label="prespace"]

literal_165 [label="literal"]

raw_166 [label="raw"]

prespace_167 [label="prespace"]

literal_168 [label="literal"]

raw_169 [label="raw"]


// END RANK prose_43

raw_163 -> leaf_170
leaf_170  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
An intermediate step could just squeeze the linebuf into a string, parse it
with"]
// END RANK raw_163

prespace_164 -> leaf_171
leaf_171  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_164

literal_165 -> leaf_172
leaf_172  [color=Gray,shape=rectangle,fontname=Inconsolata,label="esplalier"]
// END RANK literal_165

raw_166 -> leaf_173
leaf_173  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and emit a"]
// END RANK raw_166

prespace_167 -> leaf_174
leaf_174  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_167

literal_168 -> leaf_175
leaf_175  [color=Gray,shape=rectangle,fontname=Inconsolata,label="rainbuf"]
// END RANK literal_168

raw_169 -> leaf_176
leaf_176  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" through the usual recursive method
lookup.  The problem isn't speed, not for a REPL, it's not having error
recovery parsing available.
"]
// END RANK raw_169

prose_44 -> { raw_177 prespace_178 literal_179 raw_180}
{rank=same; raw_177 prespace_178 literal_179 raw_180}

raw_177 [label="raw"]

prespace_178 [label="prespace"]

literal_179 [label="literal"]

raw_180 [label="raw"]


// END RANK prose_44

raw_177 -> leaf_181
leaf_181  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I will likely content myself with a grammar that kicks in when the user
presses return.  I'll want that to perform rewrites (such as removing
outer-level"]
// END RANK raw_177

prespace_178 -> leaf_182
leaf_182  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_178

literal_179 -> leaf_183
leaf_183  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local"]
// END RANK literal_179

raw_180 -> leaf_184
leaf_184  [color=Gray,shape=rectangle,fontname=Inconsolata,label="s to facilicate copy-pasting) and keep the readline
grammar from becoming too ad-hoc.

"]
// END RANK raw_180

section_45 -> { header_185 prose_186 codeblock_187}
{rank=same; header_185 prose_186 codeblock_187}

header_185 [label="4 : asserts"]

prose_186 [label="prose"]

codeblock_187 [label="code block 61-65"]


// END RANK section_45

header_185 -> leaf_188
leaf_188  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** asserts"]
// END RANK header_185

prose_186 -> { raw_189 prespace_190 literal_191 raw_192 prespace_193 literal_194 raw_195}
{rank=same; raw_189 prespace_190 literal_191 raw_192 prespace_193 literal_194 raw_195}

raw_189 [label="raw"]

prespace_190 [label="prespace"]

literal_191 [label="literal"]

raw_192 [label="raw"]

prespace_193 [label="prespace"]

literal_194 [label="literal"]

raw_195 [label="raw"]


// END RANK prose_186

raw_189 -> leaf_196
leaf_196  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  There is little sense running"]
// END RANK raw_189

prespace_190 -> leaf_197
leaf_197  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_190

literal_191 -> leaf_198
leaf_198  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_191

raw_192 -> leaf_199
leaf_199  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" outside of the"]
// END RANK raw_192

prespace_193 -> leaf_200
leaf_200  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_193

literal_194 -> leaf_201
leaf_201  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bridge"]
// END RANK literal_194

raw_195 -> leaf_202
leaf_202  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
environment.
"]
// END RANK raw_195

codeblock_187 -> leaf_203
leaf_203  [color=Gray,shape=rectangle,fontname=Inconsolata,label="assert(meta, \"must have meta in _G\")
assert(write, \"must have write in _G\")
assert(ts, \"must have ts in _G\")"]
// END RANK codeblock_187

section_46 -> { header_204 prose_205 prose_206 prose_207 codeblock_208 codeblock_209}
{rank=same; header_204 prose_205 prose_206 prose_207 codeblock_208 codeblock_209}

header_204 [label="4 : includes"]

prose_205 [label="prose"]

prose_206 [label="prose"]

prose_207 [label="prose"]

codeblock_208 [label="code block 77-79"]

codeblock_209 [label="code block 81-83"]


// END RANK section_46

header_204 -> leaf_210
leaf_210  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** includes"]
// END RANK header_204

prose_205 -> { raw_211}
{rank=same; raw_211}

raw_211 [label="raw"]


// END RANK prose_205

raw_211 -> leaf_212
leaf_212  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The easiest way to go mad in concurrent environments is to share memory.
"]
// END RANK raw_211

prose_206 -> { prespace_213 literal_214 raw_215}
{rank=same; prespace_213 literal_214 raw_215}

prespace_213 [label="prespace"]

literal_214 [label="literal"]

raw_215 [label="raw"]


// END RANK prose_206

prespace_213 -> leaf_216
leaf_216  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_213

literal_214 -> leaf_217
leaf_217  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_214

raw_215 -> leaf_218
leaf_218  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" will own linebuf, and eventually txtbuf, unless I come up with
a better idea.
"]
// END RANK raw_215

prose_207 -> { prespace_219 literal_220 raw_221 prespace_222 literal_223 raw_224}
{rank=same; prespace_219 literal_220 raw_221 prespace_222 literal_223 raw_224}

prespace_219 [label="prespace"]

literal_220 [label="literal"]

raw_221 [label="raw"]

prespace_222 [label="prespace"]

literal_223 [label="literal"]

raw_224 [label="raw"]


// END RANK prose_207

prespace_219 -> leaf_225
leaf_225  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_219

literal_220 -> leaf_226
leaf_226  [color=Gray,shape=rectangle,fontname=Inconsolata,label="rainbuf"]
// END RANK literal_220

raw_221 -> leaf_227
leaf_227  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" should be built inside"]
// END RANK raw_221

prespace_222 -> leaf_228
leaf_228  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_222

literal_223 -> leaf_229
leaf_229  [color=Gray,shape=rectangle,fontname=Inconsolata,label="femto"]
// END RANK literal_223

raw_224 -> leaf_230
leaf_230  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and passed in as an argument.
"]
// END RANK raw_224

codeblock_208 -> leaf_231
leaf_231  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Linebuf = require \"linebuf\""]
// END RANK codeblock_208

codeblock_209 -> leaf_232
leaf_232  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local ModeS = meta()"]
// END RANK codeblock_209

section_47 -> { header_233 prose_234 codeblock_235 prose_236 prose_237 prose_238 prose_239 prose_240 codeblock_241 prose_242 codeblock_243 prose_244 codeblock_245}
{rank=same; header_233 prose_234 codeblock_235 prose_236 prose_237 prose_238 prose_239 prose_240 codeblock_241 prose_242 codeblock_243 prose_244 codeblock_245}

header_233 [label="3 : Categories"]

prose_234 [label="prose"]

codeblock_235 [label="code block 90-97"]

prose_236 [label="prose"]

prose_237 [label="prose"]

prose_238 [label="prose"]

prose_239 [label="prose"]

prose_240 [label="prose"]

codeblock_241 [label="code block 118-125"]

prose_242 [label="prose"]

codeblock_243 [label="code block 130-132"]

prose_244 [label="prose"]

codeblock_245 [label="code block 136-140"]


// END RANK section_47

header_233 -> leaf_246
leaf_246  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Categories"]
// END RANK header_233

prose_234 -> { raw_247 prespace_248 literal_249 raw_250}
{rank=same; raw_247 prespace_248 literal_249 raw_250}

raw_247 [label="raw"]

prespace_248 [label="prespace"]

literal_249 [label="literal"]

raw_250 [label="raw"]


// END RANK prose_234

raw_247 -> leaf_251
leaf_251  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

These are the types of event recognized by"]
// END RANK raw_247

prespace_248 -> leaf_252
leaf_252  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_248

literal_249 -> leaf_253
leaf_253  [color=Gray,shape=rectangle,fontname=Inconsolata,label="femto"]
// END RANK literal_249

raw_250 -> leaf_254
leaf_254  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_250

codeblock_235 -> leaf_255
leaf_255  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local INSERT = meta()
local NAV    = {}
local CTRL   = {}
local ALT    = {}
local FN     = {}
local MOUSE  = {}"]
// END RANK codeblock_235

prose_236 -> { raw_256 prespace_257 literal_258 raw_259}
{rank=same; raw_256 prespace_257 literal_258 raw_259}

raw_256 [label="raw"]

prespace_257 [label="prespace"]

literal_258 [label="literal"]

raw_259 [label="raw"]


// END RANK prose_236

raw_256 -> leaf_260
leaf_260  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Color schemes are supposed to be one-and-done, and I strongly suspect we
have a"]
// END RANK raw_256

prespace_257 -> leaf_261
leaf_261  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_257

literal_258 -> leaf_262
leaf_262  [color=Gray,shape=rectangle,fontname=Inconsolata,label="__concat"]
// END RANK literal_258

raw_259 -> leaf_263
leaf_263  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" dominated workflow, although I have yet to turn on the
profiler.
"]
// END RANK raw_259

prose_237 -> { raw_264 prespace_265 literal_266 raw_267 prespace_268 literal_269 raw_270}
{rank=same; raw_264 prespace_265 literal_266 raw_267 prespace_268 literal_269 raw_270}

raw_264 [label="raw"]

prespace_265 [label="prespace"]

literal_266 [label="literal"]

raw_267 [label="raw"]

prespace_268 [label="prespace"]

literal_269 [label="literal"]

raw_270 [label="raw"]


// END RANK prose_237

raw_264 -> leaf_271
leaf_271  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Therefore we use reference equality for the"]
// END RANK raw_264

prespace_265 -> leaf_272
leaf_272  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_265

literal_266 -> leaf_273
leaf_273  [color=Gray,shape=rectangle,fontname=Inconsolata,label="color"]
// END RANK literal_266

raw_267 -> leaf_274
leaf_274  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_267

prespace_268 -> leaf_275
leaf_275  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_268

literal_269 -> leaf_276
leaf_276  [color=Gray,shape=rectangle,fontname=Inconsolata,label="hints"]
// END RANK literal_269

raw_270 -> leaf_277
leaf_277  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" tables.
Switching themes is a matter of repopulating those tables.  I intend to
isolate this within an instance so that multiple terminals can each run their
own theme, through a simple 'fat inheritance' method.
"]
// END RANK raw_270

prose_238 -> { prespace_278 literal_279 raw_280 prespace_281 italic_282 raw_283}
{rank=same; prespace_278 literal_279 raw_280 prespace_281 italic_282 raw_283}

prespace_278 [label="prespace"]

literal_279 [label="literal"]

raw_280 [label="raw"]

prespace_281 [label="prespace"]

italic_282 [label="italic"]

raw_283 [label="raw"]


// END RANK prose_238

prespace_278 -> leaf_284
leaf_284  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_278

literal_279 -> leaf_285
leaf_285  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_279

raw_280 -> leaf_286
leaf_286  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is what you might call hypermodal. Everything is isolated in
its own lookup, that is, we use"]
// END RANK raw_280

prespace_281 -> leaf_287
leaf_287  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_281

italic_282 -> leaf_288
leaf_288  [color=Gray,shape=rectangle,fontname=Inconsolata,label="value"]
// END RANK italic_282

raw_283 -> leaf_289
leaf_289  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" equality.  This lets us pass strings
as messages and use jump tables to resolve most things.
"]
// END RANK raw_283

prose_239 -> { raw_290}
{rank=same; raw_290}

raw_290 [label="raw"]


// END RANK prose_239

raw_290 -> leaf_291
leaf_291  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It typically runs at the speed of human fingers and can afford to be much less
efficient than it will be, even before the JIT gets involved.
"]
// END RANK raw_290

prose_240 -> { raw_292 prespace_293 literal_294 raw_295}
{rank=same; raw_292 prespace_293 literal_294 raw_295}

raw_292 [label="raw"]

prespace_293 [label="prespace"]

literal_294 [label="literal"]

raw_295 [label="raw"]


// END RANK prose_240

raw_292 -> leaf_296
leaf_296  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Note also that everything is a method, our dispatch pattern will always
include the"]
// END RANK raw_292

prespace_293 -> leaf_297
leaf_297  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_293

literal_294 -> leaf_298
leaf_298  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeS"]
// END RANK literal_294

raw_295 -> leaf_299
leaf_299  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" instance as the first argument.
"]
// END RANK raw_295

codeblock_241 -> leaf_300
leaf_300  [color=Gray,shape=rectangle,fontname=Inconsolata,label="ModeS.modes = { INSERT = INSERT,
                NAV    = NAV,
                CTRL   = CTRL,
                ALT    = ALT,
                MOUSE  = MOUSE,
                NYI    = true }"]
// END RANK codeblock_241

prose_242 -> { raw_301 prespace_302 literal_303 raw_304}
{rank=same; raw_301 prespace_302 literal_303 raw_304}

raw_301 [label="raw"]

prespace_302 [label="prespace"]

literal_303 [label="literal"]

raw_304 [label="raw"]


// END RANK prose_242

raw_301 -> leaf_305
leaf_305  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Sometimes its useful to briefly override handlers, so we check values
against"]
// END RANK raw_301

prespace_302 -> leaf_306
leaf_306  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_302

literal_303 -> leaf_307
leaf_307  [color=Gray,shape=rectangle,fontname=Inconsolata,label="special"]
// END RANK literal_303

raw_304 -> leaf_308
leaf_308  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" first:
"]
// END RANK raw_304

codeblock_243 -> leaf_309
leaf_309  [color=Gray,shape=rectangle,fontname=Inconsolata,label="ModeS.special = {}"]
// END RANK codeblock_243

prose_244 -> { raw_310}
{rank=same; raw_310}

raw_310 [label="raw"]


// END RANK prose_244

raw_310 -> leaf_311
leaf_311  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A simple pass-through so we can see what we're missing.
"]
// END RANK raw_310

codeblock_245 -> leaf_312
leaf_312  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function ModeS.default(modeS, category, value)
    return write(ts(value))
end"]
// END RANK codeblock_245

section_48 -> { header_313 prose_314 codeblock_315}
{rank=same; header_313 prose_314 codeblock_315}

header_313 [label="3 : self-insert(modeS, category, value)"]

prose_314 [label="prose"]

codeblock_315 [label="code block 147-156"]


// END RANK section_48

header_313 -> leaf_316
leaf_316  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** self-insert(modeS, category, value)"]
// END RANK header_313

prose_314 -> { raw_317}
{rank=same; raw_317}

raw_317 [label="raw"]


// END RANK prose_314

raw_317 -> leaf_318
leaf_318  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Inserts the value into the linebuf at cursor.
"]
// END RANK raw_317

codeblock_315 -> leaf_319
leaf_319  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function self_insert(modeS, category, value)
    local success =  modeS.linebuf:insert(value)
    if not success then
      write(\"no insert: \" .. value)
    else
      write(value)
    end
end"]
// END RANK codeblock_315

section_49 -> { header_320 prose_321 codeblock_322}
{rank=same; header_320 prose_321 codeblock_322}

header_320 [label="3 : status painter (colwrite)"]

prose_321 [label="prose"]

codeblock_322 [label="code block 162-220"]


// END RANK section_49

header_320 -> leaf_323
leaf_323  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** status painter (colwrite)"]
// END RANK header_320

prose_321 -> { raw_324}
{rank=same; raw_324}

raw_324 [label="raw"]


// END RANK prose_321

raw_324 -> leaf_325
leaf_325  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Time to port over the repl feedback code from femto.
"]
// END RANK raw_324

codeblock_322 -> leaf_326
leaf_326  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local STATCOL = 81
local STAT_TOP = 1
local STAT_RUN = 2

-- more like jumpwrite at this point but w/e
local function colwrite(str, col, row)
   col = col or STATCOL
   row = row or STAT_TOP
   local dash = a.stash()
             .. a.cursor.hide()
             .. a.jump(row, col)
             .. a.erase.right()
             .. str
             .. a.pop()
             .. a.cursor.show()
   write(dash)
end

local STAT_ICON = \"◉ \"

function pr_mouse(m)
   local phrase = a.magenta(m.button) .. \": \"
                     .. a.bright(kind) .. \" \" .. ts(m.shift)
                     .. \" \" .. ts(m.meta)
                     .. \" \" .. ts(m.ctrl) .. \" \" .. ts(m.moving) .. \" \"
                     .. ts(m.scrolling) .. \" \"
                     .. a.cyan(m.col) .. \",\" .. a.cyan(m.row)
   return phrase
end

local function mk_paint(fragment, shade)
   return function(category, action)
      return shade(category .. fragment .. action)
   end
end

local act_map = { MOUSE  = pr_mouse,
                  NAV    = mk_paint(\": \", a.italic),
                  CTRL   = mk_paint(\": \", c.field),
                  ALT    = mk_paint(\": \", a.underscore),
                  INSERT = mk_paint(\": \", c.field),
                  NYI    = mk_paint(\": \", a.red)}

local icon_map = { MOUSE = mk_paint(STAT_ICON, c.userdata),
                   NAV   = mk_paint(STAT_ICON, a.magenta),
                   CTRL  = mk_paint(STAT_ICON, a.blue),
                   ALT   = mk_paint(STAT_ICON, c[\"function\"]),
                   INSERT = mk_paint(STAT_ICON, a.green),
                   NYI   = mk_paint(STAT_ICON .. \"! \", a.red) }

local function icon_paint(category, value)
   assert(icon_map[category], \"icon_paint NYI:\" .. category)
   if category == \"MOUSE\" then
      return colwrite(icon_map[category](\"\", pr_mouse(value)))
    end
   return colwrite(icon_map[category](\"\", ts(value)))
end"]
// END RANK codeblock_322

section_6 -> { header_327 prose_328 prose_329 codeblock_330 prose_331 codeblock_332 prose_333 codeblock_334 codeblock_335}
{rank=same; header_327 prose_328 prose_329 codeblock_330 prose_331 codeblock_332 prose_333 codeblock_334 codeblock_335}

header_327 [label="2 : act"]

prose_328 [label="prose"]

prose_329 [label="prose"]

codeblock_330 [label="code block 232-252"]

prose_331 [label="prose"]

codeblock_332 [label="code block 256-260"]

prose_333 [label="prose"]

codeblock_334 [label="code block 264-272"]

codeblock_335 [label="code block 274-276"]


// END RANK section_6

header_327 -> leaf_336
leaf_336  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** act"]
// END RANK header_327

prose_328 -> { raw_337 prespace_338 literal_339 raw_340 prespace_341 literal_342 raw_343 prespace_344 literal_345 raw_346 prespace_347 literal_348 raw_349}
{rank=same; raw_337 prespace_338 literal_339 raw_340 prespace_341 literal_342 raw_343 prespace_344 literal_345 raw_346 prespace_347 literal_348 raw_349}

raw_337 [label="raw"]

prespace_338 [label="prespace"]

literal_339 [label="literal"]

raw_340 [label="raw"]

prespace_341 [label="prespace"]

literal_342 [label="literal"]

raw_343 [label="raw"]

prespace_344 [label="prespace"]

literal_345 [label="literal"]

raw_346 [label="raw"]

prespace_347 [label="prespace"]

literal_348 [label="literal"]

raw_349 [label="raw"]


// END RANK prose_328

raw_337 -> leaf_350
leaf_350  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK raw_337

prespace_338 -> leaf_351
leaf_351  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_338

literal_339 -> leaf_352
leaf_352  [color=Gray,shape=rectangle,fontname=Inconsolata,label="act"]
// END RANK literal_339

raw_340 -> leaf_353
leaf_353  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" simply dispatches. Note that our common interfaces is"]
// END RANK raw_340

prespace_341 -> leaf_354
leaf_354  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_341

literal_342 -> leaf_355
leaf_355  [color=Gray,shape=rectangle,fontname=Inconsolata,label="method(modeS, category, value)"]
// END RANK literal_342

raw_343 -> leaf_356
leaf_356  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", we need to distinguish betwen the tuple"]
// END RANK raw_343

prespace_344 -> leaf_357
leaf_357  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_344

literal_345 -> leaf_358
leaf_358  [color=Gray,shape=rectangle,fontname=Inconsolata,label="(\"INSERT\", \"SHIFT-LEFT\")"]
// END RANK literal_345

raw_346 -> leaf_359
leaf_359  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" (which could arrive from copy-paste) and"]
// END RANK raw_346

prespace_347 -> leaf_360
leaf_360  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_347

literal_348 -> leaf_361
leaf_361  [color=Gray,shape=rectangle,fontname=Inconsolata,label="(\"NAV\", \"SHIFT-LEFT\")"]
// END RANK literal_348

raw_349 -> leaf_362
leaf_362  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and preserve information for our fall-through method.
"]
// END RANK raw_349

prose_329 -> { prespace_363 literal_364 raw_365}
{rank=same; prespace_363 literal_364 raw_365}

prespace_363 [label="prespace"]

literal_364 [label="literal"]

raw_365 [label="raw"]


// END RANK prose_329

prespace_363 -> leaf_366
leaf_366  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_363

literal_364 -> leaf_367
leaf_367  [color=Gray,shape=rectangle,fontname=Inconsolata,label="act"]
// END RANK literal_364

raw_365 -> leaf_368
leaf_368  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" always succeeds, meaning we need some metatable action to absorb and
log anything unexpected.
"]
// END RANK raw_365

codeblock_330 -> leaf_369
leaf_369  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function ModeS.act(modeS, category, value)
  assert(modeS.modes, \"modeS must have a modes table\")
  assert(modeS.special, \"modeS must have a special table\")
  assert(modeS.modes[category], \"no category \" .. category .. \" in modeS\")
   if modeS.special[value] then
      return modeS.special[value](modeS, category, value)
   elseif modeS.modes[category] then
      icon_paint(category, value)
      if category == \"INSERT\" then
         -- hard coded for now
         self_insert(modeS, category, value)
      end
      --colwrite(category .. ts(value), 1,2)
   else
      icon_paint(category, value)
      --colwrite(\"!! \" .. category .. \" \" .. value, 1, 2)
      return modeS:default(category, value)
   end
end"]
// END RANK codeblock_330

prose_331 -> { raw_370 prespace_371 literal_372 raw_373}
{rank=same; raw_370 prespace_371 literal_372 raw_373}

raw_370 [label="raw"]

prespace_371 [label="prespace"]

literal_372 [label="literal"]

raw_373 [label="raw"]


// END RANK prose_331

raw_370 -> leaf_374
leaf_374  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We include indirection in"]
// END RANK raw_370

prespace_371 -> leaf_375
leaf_375  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_371

literal_372 -> leaf_376
leaf_376  [color=Gray,shape=rectangle,fontname=Inconsolata,label="act"]
// END RANK literal_372

raw_373 -> leaf_377
leaf_377  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" itself, looking it up on each call:
"]
// END RANK raw_373

codeblock_332 -> leaf_378
leaf_378  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function ModeS.__call(modeS, category, value)
  return modeS:act(category, value)
end"]
// END RANK codeblock_332

prose_333 -> { raw_379}
{rank=same; raw_379}

raw_379 [label="raw"]


// END RANK prose_333

raw_379 -> leaf_380
leaf_380  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This will need to take a complete config table at some point.
"]
// END RANK raw_379

codeblock_334 -> leaf_381
leaf_381  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function new()
  local modeS = meta(ModeS)
  modeS.linebuf = Linebuf(1)
  return modeS
end

ModeS.idEst = new"]
// END RANK codeblock_334

codeblock_335 -> leaf_382
leaf_382  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return new"]
// END RANK codeblock_335


}
