digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 374"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-228"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 section_5 section_6}
{rank=same; header_2 prose_3 prose_4 section_5 section_6}

header_2 [label="1 : Modeselektor"]

prose_3 [label="prose"]

prose_4 [label="prose"]

section_5 [label="section: 12-157"]

section_6 [label="section: 229-374"]


// END RANK section_1

header_2 -> leaf_7
leaf_7  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Modeselektor"]
// END RANK header_2

prose_3 -> { raw_8 prespace_9 literal_10 raw_11}
{rank=same; raw_8 prespace_9 literal_10 raw_11}

raw_8 [label="raw"]

prespace_9 [label="prespace"]

literal_10 [label="literal"]

raw_11 [label="raw"]


// END RANK prose_3

raw_8 -> leaf_12
leaf_12  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_8

prespace_9 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_9

literal_10 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label="femto"]
// END RANK literal_10

raw_11 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" will hold all state for an terminal session.  Soon, we will
encapsulate that, making the library re-entrant.
"]
// END RANK raw_11

prose_4 -> { prespace_16 literal_17 raw_18 prespace_19 literal_20 raw_21 prespace_22 literal_23 raw_24}
{rank=same; prespace_16 literal_17 raw_18 prespace_19 literal_20 raw_21 prespace_22 literal_23 raw_24}

prespace_16 [label="prespace"]

literal_17 [label="literal"]

raw_18 [label="raw"]

prespace_19 [label="prespace"]

literal_20 [label="literal"]

raw_21 [label="raw"]

prespace_22 [label="prespace"]

literal_23 [label="literal"]

raw_24 [label="raw"]


// END RANK prose_4

prespace_16 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_16

literal_17 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_17

raw_18 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is the modal interpreter for the repl language, which becomes
the core of"]
// END RANK raw_18

prespace_19 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_19

literal_20 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label="ed"]
// END RANK literal_20

raw_21 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  This is a glorified lookup table with a state switch and
a pointer to the"]
// END RANK raw_21

prespace_22 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_22

literal_23 -> leaf_32
leaf_32  [color=Gray,shape=rectangle,fontname=Inconsolata,label="femto"]
// END RANK literal_23

raw_24 -> leaf_33
leaf_33  [color=Gray,shape=rectangle,fontname=Inconsolata,label="cell we're operating on.

"]
// END RANK raw_24

section_5 -> { header_34 prose_35 prose_36 prose_37 prose_38 prose_39 prose_40 prose_41 prose_42 prose_43 prose_44 section_45 section_46 section_47 section_48 section_49}
{rank=same; header_34 prose_35 prose_36 prose_37 prose_38 prose_39 prose_40 prose_41 prose_42 prose_43 prose_44 section_45 section_46 section_47 section_48 section_49}

header_34 [label="2 : Design"]

prose_35 [label="prose"]

prose_36 [label="prose"]

prose_37 [label="prose"]

prose_38 [label="prose"]

prose_39 [label="prose"]

prose_40 [label="prose"]

prose_41 [label="prose"]

prose_42 [label="prose"]

prose_43 [label="prose"]

prose_44 [label="prose"]

section_45 [label="section: 57-68"]

section_46 [label="section: 69-84"]

section_47 [label="section: 85-141"]

section_48 [label="section: 142-157"]

section_49 [label="section: 158-228"]


// END RANK section_5

header_34 -> leaf_50
leaf_50  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Design"]
// END RANK header_34

prose_35 -> { raw_51 prespace_52 literal_53 raw_54 prespace_55 literal_56 raw_57}
{rank=same; raw_51 prespace_52 literal_53 raw_54 prespace_55 literal_56 raw_57}

raw_51 [label="raw"]

prespace_52 [label="prespace"]

literal_53 [label="literal"]

raw_54 [label="raw"]

prespace_55 [label="prespace"]

literal_56 [label="literal"]

raw_57 [label="raw"]


// END RANK prose_35

raw_51 -> leaf_58
leaf_58  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

 "]
// END RANK raw_51

prespace_52 -> leaf_59
leaf_59  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_52

literal_53 -> leaf_60
leaf_60  [color=Gray,shape=rectangle,fontname=Inconsolata,label="femto"]
// END RANK literal_53

raw_54 -> leaf_61
leaf_61  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" passes keystrokes as messages to"]
// END RANK raw_54

prespace_55 -> leaf_62
leaf_62  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_55

literal_56 -> leaf_63
leaf_63  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_56

raw_57 -> leaf_64
leaf_64  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  It does no writes
to stdout at all.  It is smart enough to categorize and parse various device
reports, but has no knowledge of why those reports were requested.
"]
// END RANK raw_57

prose_36 -> { prespace_65 literal_66 raw_67}
{rank=same; prespace_65 literal_66 raw_67}

prespace_65 [label="prespace"]

literal_66 [label="literal"]

raw_67 [label="raw"]


// END RANK prose_36

prespace_65 -> leaf_68
leaf_68  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_65

literal_66 -> leaf_69
leaf_69  [color=Gray,shape=rectangle,fontname=Inconsolata,label="femto"]
// END RANK literal_66

raw_67 -> leaf_70
leaf_70  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" runs the event loop, so all other members are pulled in as modules.
"]
// END RANK raw_67

prose_37 -> { prespace_71 literal_72 raw_73 prespace_74 literal_75 raw_76}
{rank=same; prespace_71 literal_72 raw_73 prespace_74 literal_75 raw_76}

prespace_71 [label="prespace"]

literal_72 [label="literal"]

raw_73 [label="raw"]

prespace_74 [label="prespace"]

literal_75 [label="literal"]

raw_76 [label="raw"]


// END RANK prose_37

prespace_71 -> leaf_77
leaf_77  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_71

literal_72 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_72

raw_73 -> leaf_79
leaf_79  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" takes care of system-level housekeeping: opening files
and sockets, keeping command history, fuzzy completion, and has its own eval
loop off the main track.  For evaluating lines, it will call a small executor,
so that in a little while we can put the user program in its own"]
// END RANK raw_73

prespace_74 -> leaf_80
leaf_80  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_74

literal_75 -> leaf_81
leaf_81  [color=Gray,shape=rectangle,fontname=Inconsolata,label="LuaL_state"]
// END RANK literal_75

raw_76 -> leaf_82
leaf_82  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_76

prose_38 -> { raw_83 prespace_84 literal_85 raw_86}
{rank=same; raw_83 prespace_84 literal_85 raw_86}

raw_83 [label="raw"]

prespace_84 [label="prespace"]

literal_85 [label="literal"]

raw_86 [label="raw"]


// END RANK prose_38

raw_83 -> leaf_87
leaf_87  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This is both good practice, and absolutely necessary if we are to REPL other"]
// END RANK raw_83

prespace_84 -> leaf_88
leaf_88  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_84

literal_85 -> leaf_89
leaf_89  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bridge"]
// END RANK literal_85

raw_86 -> leaf_90
leaf_90  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" programs, each of which has its own event loop.
"]
// END RANK raw_86

prose_39 -> { raw_91 prespace_92 literal_93 raw_94}
{rank=same; raw_91 prespace_92 literal_93 raw_94}

raw_91 [label="raw"]

prespace_92 [label="prespace"]

literal_93 [label="literal"]

raw_94 [label="raw"]


// END RANK prose_39

raw_91 -> leaf_95
leaf_95  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The implementation is essentially a VM.  Category and value are
successively looked up in jump tables and the method applied with the"]
// END RANK raw_91

prespace_92 -> leaf_96
leaf_96  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_92

literal_93 -> leaf_97
leaf_97  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeS"]
// END RANK literal_93

raw_94 -> leaf_98
leaf_98  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
instance as the first argument.
"]
// END RANK raw_94

prose_40 -> { prespace_99 literal_100 raw_101 prespace_102 literal_103 raw_104 prespace_105 literal_106 raw_107 prespace_108 literal_109 raw_110 prespace_111 literal_112 raw_113}
{rank=same; prespace_99 literal_100 raw_101 prespace_102 literal_103 raw_104 prespace_105 literal_106 raw_107 prespace_108 literal_109 raw_110 prespace_111 literal_112 raw_113}

prespace_99 [label="prespace"]

literal_100 [label="literal"]

raw_101 [label="raw"]

prespace_102 [label="prespace"]

literal_103 [label="literal"]

raw_104 [label="raw"]

prespace_105 [label="prespace"]

literal_106 [label="literal"]

raw_107 [label="raw"]

prespace_108 [label="prespace"]

literal_109 [label="literal"]

raw_110 [label="raw"]

prespace_111 [label="prespace"]

literal_112 [label="literal"]

raw_113 [label="raw"]


// END RANK prose_40

prespace_99 -> leaf_114
leaf_114  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_99

literal_100 -> leaf_115
leaf_115  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_100

raw_101 -> leaf_116
leaf_116  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" passes any edit or movement commands to an internally-owned"]
// END RANK raw_101

prespace_102 -> leaf_117
leaf_117  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_102

literal_103 -> leaf_118
leaf_118  [color=Gray,shape=rectangle,fontname=Inconsolata,label="linebuf"]
// END RANK literal_103

raw_104 -> leaf_119
leaf_119  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", which keeps all modeling of the line. "]
// END RANK raw_104

prespace_105 -> leaf_120
leaf_120  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_105

literal_106 -> leaf_121
leaf_121  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_106

raw_107 -> leaf_122
leaf_122  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" decides when
to repaint the screen, calling"]
// END RANK raw_107

prespace_108 -> leaf_123
leaf_123  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_108

literal_109 -> leaf_124
leaf_124  [color=Gray,shape=rectangle,fontname=Inconsolata,label="rainbuf"]
// END RANK literal_109

raw_110 -> leaf_125
leaf_125  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" with a region of"]
// END RANK raw_110

prespace_111 -> leaf_126
leaf_126  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_111

literal_112 -> leaf_127
leaf_127  [color=Gray,shape=rectangle,fontname=Inconsolata,label="linebuf"]
// END RANK literal_112

raw_113 -> leaf_128
leaf_128  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and
instructions as to how to paint it.
"]
// END RANK raw_113

prose_41 -> { raw_129 prespace_130 literal_131 raw_132 prespace_133 literal_134 raw_135 prespace_136 literal_137 raw_138}
{rank=same; raw_129 prespace_130 literal_131 raw_132 prespace_133 literal_134 raw_135 prespace_136 literal_137 raw_138}

raw_129 [label="raw"]

prespace_130 [label="prespace"]

literal_131 [label="literal"]

raw_132 [label="raw"]

prespace_133 [label="prespace"]

literal_134 [label="literal"]

raw_135 [label="raw"]

prespace_136 [label="prespace"]

literal_137 [label="literal"]

raw_138 [label="raw"]


// END RANK prose_41

raw_129 -> leaf_139
leaf_139  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
There is one"]
// END RANK raw_129

prespace_130 -> leaf_140
leaf_140  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_130

literal_131 -> leaf_141
leaf_141  [color=Gray,shape=rectangle,fontname=Inconsolata,label="deck"]
// END RANK literal_131

raw_132 -> leaf_142
leaf_142  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" instance member per screen, which tiles the available
space. "]
// END RANK raw_132

prespace_133 -> leaf_143
leaf_143  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_133

literal_134 -> leaf_144
leaf_144  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_134

raw_135 -> leaf_145
leaf_145  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is the writer, and"]
// END RANK raw_135

prespace_136 -> leaf_146
leaf_146  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_136

literal_137 -> leaf_147
leaf_147  [color=Gray,shape=rectangle,fontname=Inconsolata,label="rainbuf"]
// END RANK literal_137

raw_138 -> leaf_148
leaf_148  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" holds a pointer to the
table for read access.
"]
// END RANK raw_138

prose_42 -> { raw_149 prespace_150 literal_151 raw_152 prespace_153 literal_154 raw_155}
{rank=same; raw_149 prespace_150 literal_151 raw_152 prespace_153 literal_154 raw_155}

raw_149 [label="raw"]

prespace_150 [label="prespace"]

literal_151 [label="literal"]

raw_152 [label="raw"]

prespace_153 [label="prespace"]

literal_154 [label="literal"]

raw_155 [label="raw"]


// END RANK prose_42

raw_149 -> leaf_156
leaf_156  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
When we have our fancy parse engine and quipu structure, linebuf will call"]
// END RANK raw_149

prespace_150 -> leaf_157
leaf_157  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_150

literal_151 -> leaf_158
leaf_158  [color=Gray,shape=rectangle,fontname=Inconsolata,label="comb"]
// END RANK literal_151

raw_152 -> leaf_159
leaf_159  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" to redecorate the syntax tree before passing it to"]
// END RANK raw_152

prespace_153 -> leaf_160
leaf_160  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_153

literal_154 -> leaf_161
leaf_161  [color=Gray,shape=rectangle,fontname=Inconsolata,label="rainbuf"]
// END RANK literal_154

raw_155 -> leaf_162
leaf_162  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" for
markup.  At the moment I'm just going to write some crude lexers, which
will be more than enough for Clu and Lua, which have straightforward syntax.
"]
// END RANK raw_155

prose_43 -> { raw_163 prespace_164 literal_165 raw_166 prespace_167 literal_168 raw_169}
{rank=same; raw_163 prespace_164 literal_165 raw_166 prespace_167 literal_168 raw_169}

raw_163 [label="raw"]

prespace_164 [label="prespace"]

literal_165 [label="literal"]

raw_166 [label="raw"]

prespace_167 [label="prespace"]

literal_168 [label="literal"]

raw_169 [label="raw"]


// END RANK prose_43

raw_163 -> leaf_170
leaf_170  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
An intermediate step could just squeeze the linebuf into a string, parse it
with"]
// END RANK raw_163

prespace_164 -> leaf_171
leaf_171  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_164

literal_165 -> leaf_172
leaf_172  [color=Gray,shape=rectangle,fontname=Inconsolata,label="esplalier"]
// END RANK literal_165

raw_166 -> leaf_173
leaf_173  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and emit a"]
// END RANK raw_166

prespace_167 -> leaf_174
leaf_174  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_167

literal_168 -> leaf_175
leaf_175  [color=Gray,shape=rectangle,fontname=Inconsolata,label="rainbuf"]
// END RANK literal_168

raw_169 -> leaf_176
leaf_176  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" through the usual recursive method
lookup.  The problem isn't speed, not for a REPL, it's not having error
recovery parsing available.
"]
// END RANK raw_169

prose_44 -> { raw_177 prespace_178 literal_179 raw_180}
{rank=same; raw_177 prespace_178 literal_179 raw_180}

raw_177 [label="raw"]

prespace_178 [label="prespace"]

literal_179 [label="literal"]

raw_180 [label="raw"]


// END RANK prose_44

raw_177 -> leaf_181
leaf_181  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I will likely content myself with a grammar that kicks in when the user
presses return.  I'll want that to perform rewrites (such as removing
outer-level"]
// END RANK raw_177

prespace_178 -> leaf_182
leaf_182  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_178

literal_179 -> leaf_183
leaf_183  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local"]
// END RANK literal_179

raw_180 -> leaf_184
leaf_184  [color=Gray,shape=rectangle,fontname=Inconsolata,label="s to facilicate copy-pasting) and keep the readline
grammar from becoming too ad-hoc.

"]
// END RANK raw_180

section_45 -> { header_185 prose_186 codeblock_187}
{rank=same; header_185 prose_186 codeblock_187}

header_185 [label="4 : asserts"]

prose_186 [label="prose"]

codeblock_187 [label="code block 62-66"]


// END RANK section_45

header_185 -> leaf_188
leaf_188  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** asserts"]
// END RANK header_185

prose_186 -> { raw_189 prespace_190 literal_191 raw_192 prespace_193 literal_194 raw_195}
{rank=same; raw_189 prespace_190 literal_191 raw_192 prespace_193 literal_194 raw_195}

raw_189 [label="raw"]

prespace_190 [label="prespace"]

literal_191 [label="literal"]

raw_192 [label="raw"]

prespace_193 [label="prespace"]

literal_194 [label="literal"]

raw_195 [label="raw"]


// END RANK prose_186

raw_189 -> leaf_196
leaf_196  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  There is little sense running"]
// END RANK raw_189

prespace_190 -> leaf_197
leaf_197  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_190

literal_191 -> leaf_198
leaf_198  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_191

raw_192 -> leaf_199
leaf_199  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" outside of the"]
// END RANK raw_192

prespace_193 -> leaf_200
leaf_200  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_193

literal_194 -> leaf_201
leaf_201  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bridge"]
// END RANK literal_194

raw_195 -> leaf_202
leaf_202  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
environment.
"]
// END RANK raw_195

codeblock_187 -> leaf_203
leaf_203  [color=Gray,shape=rectangle,fontname=Inconsolata,label="assert(meta, \"must have meta in _G\")
assert(write, \"must have write in _G\")
assert(ts, \"must have ts in _G\")"]
// END RANK codeblock_187

section_46 -> { header_204 prose_205 prose_206 codeblock_207 codeblock_208}
{rank=same; header_204 prose_205 prose_206 codeblock_207 codeblock_208}

header_204 [label="4 : includes"]

prose_205 [label="prose"]

prose_206 [label="prose"]

codeblock_207 [label="code block 76-78"]

codeblock_208 [label="code block 80-82"]


// END RANK section_46

header_204 -> leaf_209
leaf_209  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** includes"]
// END RANK header_204

prose_205 -> { raw_210}
{rank=same; raw_210}

raw_210 [label="raw"]


// END RANK prose_205

raw_210 -> leaf_211
leaf_211  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The easiest way to go mad in concurrent environments is to share memory.
"]
// END RANK raw_210

prose_206 -> { prespace_212 literal_213 raw_214}
{rank=same; prespace_212 literal_213 raw_214}

prespace_212 [label="prespace"]

literal_213 [label="literal"]

raw_214 [label="raw"]


// END RANK prose_206

prespace_212 -> leaf_215
leaf_215  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_212

literal_213 -> leaf_216
leaf_216  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_213

raw_214 -> leaf_217
leaf_217  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" will own linebuf, and eventually txtbuf, unless I come up with
a better idea.
"]
// END RANK raw_214

codeblock_207 -> leaf_218
leaf_218  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Linebuf = require \"linebuf\""]
// END RANK codeblock_207

codeblock_208 -> leaf_219
leaf_219  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local ModeS = meta()"]
// END RANK codeblock_208

section_47 -> { header_220 prose_221 codeblock_222 prose_223 prose_224 prose_225 prose_226 prose_227 codeblock_228 prose_229 codeblock_230 prose_231 codeblock_232}
{rank=same; header_220 prose_221 codeblock_222 prose_223 prose_224 prose_225 prose_226 prose_227 codeblock_228 prose_229 codeblock_230 prose_231 codeblock_232}

header_220 [label="3 : Categories"]

prose_221 [label="prose"]

codeblock_222 [label="code block 89-96"]

prose_223 [label="prose"]

prose_224 [label="prose"]

prose_225 [label="prose"]

prose_226 [label="prose"]

prose_227 [label="prose"]

codeblock_228 [label="code block 117-124"]

prose_229 [label="prose"]

codeblock_230 [label="code block 129-131"]

prose_231 [label="prose"]

codeblock_232 [label="code block 135-139"]


// END RANK section_47

header_220 -> leaf_233
leaf_233  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Categories"]
// END RANK header_220

prose_221 -> { raw_234 prespace_235 literal_236 raw_237}
{rank=same; raw_234 prespace_235 literal_236 raw_237}

raw_234 [label="raw"]

prespace_235 [label="prespace"]

literal_236 [label="literal"]

raw_237 [label="raw"]


// END RANK prose_221

raw_234 -> leaf_238
leaf_238  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

These are the types of event recognized by"]
// END RANK raw_234

prespace_235 -> leaf_239
leaf_239  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_235

literal_236 -> leaf_240
leaf_240  [color=Gray,shape=rectangle,fontname=Inconsolata,label="femto"]
// END RANK literal_236

raw_237 -> leaf_241
leaf_241  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_237

codeblock_222 -> leaf_242
leaf_242  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local INSERT = meta()
local NAV    = {}
local CTRL   = {}
local ALT    = {}
local FN     = {}
local MOUSE  = {}"]
// END RANK codeblock_222

prose_223 -> { raw_243 prespace_244 literal_245 raw_246}
{rank=same; raw_243 prespace_244 literal_245 raw_246}

raw_243 [label="raw"]

prespace_244 [label="prespace"]

literal_245 [label="literal"]

raw_246 [label="raw"]


// END RANK prose_223

raw_243 -> leaf_247
leaf_247  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Color schemes are supposed to be one-and-done, and I strongly suspect we
have a"]
// END RANK raw_243

prespace_244 -> leaf_248
leaf_248  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_244

literal_245 -> leaf_249
leaf_249  [color=Gray,shape=rectangle,fontname=Inconsolata,label="__concat"]
// END RANK literal_245

raw_246 -> leaf_250
leaf_250  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" dominated workflow, although I have yet to turn on the
profiler.
"]
// END RANK raw_246

prose_224 -> { raw_251 prespace_252 literal_253 raw_254 prespace_255 literal_256 raw_257}
{rank=same; raw_251 prespace_252 literal_253 raw_254 prespace_255 literal_256 raw_257}

raw_251 [label="raw"]

prespace_252 [label="prespace"]

literal_253 [label="literal"]

raw_254 [label="raw"]

prespace_255 [label="prespace"]

literal_256 [label="literal"]

raw_257 [label="raw"]


// END RANK prose_224

raw_251 -> leaf_258
leaf_258  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Therefore we use reference equality for the"]
// END RANK raw_251

prespace_252 -> leaf_259
leaf_259  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_252

literal_253 -> leaf_260
leaf_260  [color=Gray,shape=rectangle,fontname=Inconsolata,label="color"]
// END RANK literal_253

raw_254 -> leaf_261
leaf_261  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_254

prespace_255 -> leaf_262
leaf_262  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_255

literal_256 -> leaf_263
leaf_263  [color=Gray,shape=rectangle,fontname=Inconsolata,label="hints"]
// END RANK literal_256

raw_257 -> leaf_264
leaf_264  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" tables.
Switching themes is a matter of repopulating those tables.  I intend to
isolate this within an instance so that multiple terminals can each run their
own theme, through a simple 'fat inheritance' method.
"]
// END RANK raw_257

prose_225 -> { prespace_265 literal_266 raw_267 prespace_268 italic_269 raw_270}
{rank=same; prespace_265 literal_266 raw_267 prespace_268 italic_269 raw_270}

prespace_265 [label="prespace"]

literal_266 [label="literal"]

raw_267 [label="raw"]

prespace_268 [label="prespace"]

italic_269 [label="italic"]

raw_270 [label="raw"]


// END RANK prose_225

prespace_265 -> leaf_271
leaf_271  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_265

literal_266 -> leaf_272
leaf_272  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_266

raw_267 -> leaf_273
leaf_273  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is what you might call hypermodal. Everything is isolated in
its own lookup, that is, we use"]
// END RANK raw_267

prespace_268 -> leaf_274
leaf_274  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_268

italic_269 -> leaf_275
leaf_275  [color=Gray,shape=rectangle,fontname=Inconsolata,label="value"]
// END RANK italic_269

raw_270 -> leaf_276
leaf_276  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" equality.  This lets us pass strings
as messages and use jump tables to resolve most things.
"]
// END RANK raw_270

prose_226 -> { raw_277}
{rank=same; raw_277}

raw_277 [label="raw"]


// END RANK prose_226

raw_277 -> leaf_278
leaf_278  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It typically runs at the speed of human fingers and can afford to be much less
efficient than it will be, even before the JIT gets involved.
"]
// END RANK raw_277

prose_227 -> { raw_279 prespace_280 literal_281 raw_282}
{rank=same; raw_279 prespace_280 literal_281 raw_282}

raw_279 [label="raw"]

prespace_280 [label="prespace"]

literal_281 [label="literal"]

raw_282 [label="raw"]


// END RANK prose_227

raw_279 -> leaf_283
leaf_283  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Note also that everything is a method, our dispatch pattern will always
include the"]
// END RANK raw_279

prespace_280 -> leaf_284
leaf_284  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_280

literal_281 -> leaf_285
leaf_285  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeS"]
// END RANK literal_281

raw_282 -> leaf_286
leaf_286  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" instance as the first argument.
"]
// END RANK raw_282

codeblock_228 -> leaf_287
leaf_287  [color=Gray,shape=rectangle,fontname=Inconsolata,label="ModeS.modes = { INSERT = INSERT,
                NAV    = NAV,
                CTRL   = CTRL,
                ALT    = ALT,
                MOUSE  = MOUSE,
                NYI    = true }"]
// END RANK codeblock_228

prose_229 -> { raw_288 prespace_289 literal_290 raw_291}
{rank=same; raw_288 prespace_289 literal_290 raw_291}

raw_288 [label="raw"]

prespace_289 [label="prespace"]

literal_290 [label="literal"]

raw_291 [label="raw"]


// END RANK prose_229

raw_288 -> leaf_292
leaf_292  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Sometimes its useful to briefly override handlers, so we check values
against"]
// END RANK raw_288

prespace_289 -> leaf_293
leaf_293  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_289

literal_290 -> leaf_294
leaf_294  [color=Gray,shape=rectangle,fontname=Inconsolata,label="special"]
// END RANK literal_290

raw_291 -> leaf_295
leaf_295  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" first:
"]
// END RANK raw_291

codeblock_230 -> leaf_296
leaf_296  [color=Gray,shape=rectangle,fontname=Inconsolata,label="ModeS.special = {}"]
// END RANK codeblock_230

prose_231 -> { raw_297}
{rank=same; raw_297}

raw_297 [label="raw"]


// END RANK prose_231

raw_297 -> leaf_298
leaf_298  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A simple pass-through so we can see what we're missing.
"]
// END RANK raw_297

codeblock_232 -> leaf_299
leaf_299  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function ModeS.default(modeS, category, value)
    return write(ts(value))
end"]
// END RANK codeblock_232

section_48 -> { header_300 prose_301 codeblock_302}
{rank=same; header_300 prose_301 codeblock_302}

header_300 [label="3 : self-insert(modeS, category, value)"]

prose_301 [label="prose"]

codeblock_302 [label="code block 146-155"]


// END RANK section_48

header_300 -> leaf_303
leaf_303  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** self-insert(modeS, category, value)"]
// END RANK header_300

prose_301 -> { raw_304}
{rank=same; raw_304}

raw_304 [label="raw"]


// END RANK prose_301

raw_304 -> leaf_305
leaf_305  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Inserts the value into the linebuf at cursor.
"]
// END RANK raw_304

codeblock_302 -> leaf_306
leaf_306  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function self_insert(modeS, category, value)
    local success =  modeS.linebuf:insert(value)
    if not success then
      write(\"no insert: \" .. value)
    else
      write(value)
    end
end"]
// END RANK codeblock_302

section_49 -> { header_307 prose_308 codeblock_309}
{rank=same; header_307 prose_308 codeblock_309}

header_307 [label="3 : status painter (colwrite)"]

prose_308 [label="prose"]

codeblock_309 [label="code block 162-227"]


// END RANK section_49

header_307 -> leaf_310
leaf_310  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** status painter (colwrite)"]
// END RANK header_307

prose_308 -> { raw_311}
{rank=same; raw_311}

raw_311 [label="raw"]


// END RANK prose_308

raw_311 -> leaf_312
leaf_312  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This just helps me see what I'm doing
"]
// END RANK raw_311

codeblock_309 -> leaf_313
leaf_313  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local STATCOL = 81
local STAT_TOP = 1
local STAT_RUN = 2

local function colwrite(str, col, row)
   col = col or STATCOL
   row = row or STAT_TOP
   local dash = a.stash()
             .. a.cursor.hide()
             .. a.jump(row, col)
             .. a.erase.right()
             .. str
             .. a.pop()
             .. a.cursor.show()
   write(dash)
end

local STAT_ICON = \"◉ \"

local function tf(bool)
   if bool then
      return ts(\"t\", \"true\")
   else
      return ts(\"f\", \"false\")
   end
end

function pr_mouse(m)
   local phrase = a.magenta(m.button) .. \": \"
                     .. a.bright(kind) .. \" \" .. tf(m.shift)
                     .. \" \" .. tf(m.meta)
                     .. \" \" .. tf(m.ctrl) .. \" \" .. tf(m.moving) .. \" \"
                     .. tf(m.scrolling) .. \" \"
                     .. a.cyan(m.col) .. \",\" .. a.cyan(m.row)
   return phrase
end

local function mk_paint(fragment, shade)
   return function(category, action)
      return shade(category .. fragment .. action)
   end
end

local act_map = { MOUSE  = pr_mouse,
                  NAV    = mk_paint(\": \", a.italic),
                  CTRL   = mk_paint(\": \", c.field),
                  ALT    = mk_paint(\": \", a.underscore),
                  INSERT = mk_paint(\": \", c.field),
                  NYI    = mk_paint(\": \", a.red)}

local icon_map = { MOUSE = mk_paint(STAT_ICON, c.userdata),
                   NAV   = mk_paint(STAT_ICON, a.magenta),
                   CTRL  = mk_paint(STAT_ICON, a.blue),
                   ALT   = mk_paint(STAT_ICON, c[\"function\"]),
                   INSERT = mk_paint(STAT_ICON, a.green),
                   NYI   = mk_paint(STAT_ICON .. \"! \", a.red) }

local function icon_paint(category, value)
   assert(icon_map[category], \"icon_paint NYI:\" .. category)
   if category == \"MOUSE\" then
      return colwrite(icon_map[category](\"\", pr_mouse(value)))
    end
   return colwrite(icon_map[category](\"\", ts(value)))
end"]
// END RANK codeblock_309

section_6 -> { header_314 prose_315 prose_316 codeblock_317 prose_318 codeblock_319 prose_320 codeblock_321 prose_322 codeblock_323 codeblock_324}
{rank=same; header_314 prose_315 prose_316 codeblock_317 prose_318 codeblock_319 prose_320 codeblock_321 prose_322 codeblock_323 codeblock_324}

header_314 [label="2 : act"]

prose_315 [label="prose"]

prose_316 [label="prose"]

codeblock_317 [label="code block 239-263"]

prose_318 [label="prose"]

codeblock_319 [label="code block 269-320"]

prose_320 [label="prose"]

codeblock_321 [label="code block 324-328"]

prose_322 [label="prose"]

codeblock_323 [label="code block 332-346"]

codeblock_324 [label="code block 348-350"]


// END RANK section_6

header_314 -> leaf_325
leaf_325  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** act"]
// END RANK header_314

prose_315 -> { raw_326 prespace_327 literal_328 raw_329 prespace_330 literal_331 raw_332 prespace_333 literal_334 raw_335 prespace_336 literal_337 raw_338}
{rank=same; raw_326 prespace_327 literal_328 raw_329 prespace_330 literal_331 raw_332 prespace_333 literal_334 raw_335 prespace_336 literal_337 raw_338}

raw_326 [label="raw"]

prespace_327 [label="prespace"]

literal_328 [label="literal"]

raw_329 [label="raw"]

prespace_330 [label="prespace"]

literal_331 [label="literal"]

raw_332 [label="raw"]

prespace_333 [label="prespace"]

literal_334 [label="literal"]

raw_335 [label="raw"]

prespace_336 [label="prespace"]

literal_337 [label="literal"]

raw_338 [label="raw"]


// END RANK prose_315

raw_326 -> leaf_339
leaf_339  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK raw_326

prespace_327 -> leaf_340
leaf_340  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_327

literal_328 -> leaf_341
leaf_341  [color=Gray,shape=rectangle,fontname=Inconsolata,label="act"]
// END RANK literal_328

raw_329 -> leaf_342
leaf_342  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" simply dispatches. Note that our common interfaces is"]
// END RANK raw_329

prespace_330 -> leaf_343
leaf_343  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_330

literal_331 -> leaf_344
leaf_344  [color=Gray,shape=rectangle,fontname=Inconsolata,label="method(modeS, category, value)"]
// END RANK literal_331

raw_332 -> leaf_345
leaf_345  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", we need to distinguish betwen the tuple"]
// END RANK raw_332

prespace_333 -> leaf_346
leaf_346  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_333

literal_334 -> leaf_347
leaf_347  [color=Gray,shape=rectangle,fontname=Inconsolata,label="(\"INSERT\", \"SHIFT-LEFT\")"]
// END RANK literal_334

raw_335 -> leaf_348
leaf_348  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" (which could arrive from copy-paste) and"]
// END RANK raw_335

prespace_336 -> leaf_349
leaf_349  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_336

literal_337 -> leaf_350
leaf_350  [color=Gray,shape=rectangle,fontname=Inconsolata,label="(\"NAV\", \"SHIFT-LEFT\")"]
// END RANK literal_337

raw_338 -> leaf_351
leaf_351  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and preserve information for our fall-through method.
"]
// END RANK raw_338

prose_316 -> { prespace_352 literal_353 raw_354}
{rank=same; prespace_352 literal_353 raw_354}

prespace_352 [label="prespace"]

literal_353 [label="literal"]

raw_354 [label="raw"]


// END RANK prose_316

prespace_352 -> leaf_355
leaf_355  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_352

literal_353 -> leaf_356
leaf_356  [color=Gray,shape=rectangle,fontname=Inconsolata,label="act"]
// END RANK literal_353

raw_354 -> leaf_357
leaf_357  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" always succeeds, meaning we need some metatable action to absorb and
log anything unexpected.
"]
// END RANK raw_354

codeblock_317 -> leaf_358
leaf_358  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
function repaint(modeS)
  write(a.col(modeS.l_margin))
  write(a.erase.right())
  write(tostring(modeS.linebuf))
  write(a.col(modeS:cur_col()))
end

function ModeS.cur_col(modeS)
   return modeS.linebuf.cursor + modeS.l_margin - 1
end

function ModeS.nl(modeS)
   write(a.col(modeS.l_margin))
   if modeS.row + 1 <= modeS.max_row then
      write(a.jump.down())
      modeS.row  = modeS.row + 1
   else
      -- this gets complicated
   end
end

"]
// END RANK codeblock_317

prose_318 -> { raw_359}
{rank=same; raw_359}

raw_359 [label="raw"]


// END RANK prose_318

raw_359 -> leaf_360
leaf_360  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It's easier to get the core actions down as conditionals, then
migrate them into the jump table and fill out from there.
"]
// END RANK raw_359

codeblock_319 -> leaf_361
leaf_361  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function ModeS.act(modeS, category, value)
  assert(modeS.modes[category], \"no category \" .. category .. \" in modeS\")
   if modeS.special[value] then
      return modeS.special[value](modeS, category, value)
   elseif modeS.modes[category] then
      icon_paint(category, value)
      if category == \"INSERT\" then
         -- hard coded for now
         self_insert(modeS, category, value)
         repaint(modeS)
      elseif category == \"NAV\" then
         if value == \"RETURN\" then
            -- eval etc.
            modeS:nl()
            write(tostring(modeS.linebuf))
            modeS:nl()
            modeS.history[#modeS.history + 1] = modeS.linebuf:suspend()
            modeS.hist_mark = #modeS.history
            modeS.linebuf = Linebuf(1)
         elseif value == \"LEFT\" then
            modeS.linebuf:left()
            write(a.col(modeS:cur_col()))
            colwrite(ts(move),nil,3)
         elseif value == \"RIGHT\" then
            modeS.linebuf:right()
            write(a.col(modeS:cur_col()))
            colwrite(ts(move),nil,3)
         elseif value == \"UP\" then
            if modeS.hist_mark > 0 then
               if modeS.hist_mark == #modeS.history then
                  modeS.history[modeS.hist_mark + 1] = modeS.linebuf:suspend()
                  modeS.linebuf = modeS.history[modeS.hist_mark]:resume()
                  modeS.hist_mark = modeS.hist_mark - 1
                  repaint(modeS)
               end
            end
         elseif value == \"BACKSPACE\" then
            modeS.linebuf:d_back()
            repaint(modeS)
         elseif value == \"DELETE\" then
            modeS.linebuf:d_fwd()
            repaint(modeS)
         end
      end
   else
      icon_paint(category, value)
      --colwrite(\"!! \" .. category .. \" \" .. value, 1, 2)
      return modeS:default(category, value)
   end
end"]
// END RANK codeblock_319

prose_320 -> { raw_362 prespace_363 literal_364 raw_365}
{rank=same; raw_362 prespace_363 literal_364 raw_365}

raw_362 [label="raw"]

prespace_363 [label="prespace"]

literal_364 [label="literal"]

raw_365 [label="raw"]


// END RANK prose_320

raw_362 -> leaf_366
leaf_366  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We include indirection in"]
// END RANK raw_362

prespace_363 -> leaf_367
leaf_367  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_363

literal_364 -> leaf_368
leaf_368  [color=Gray,shape=rectangle,fontname=Inconsolata,label="act"]
// END RANK literal_364

raw_365 -> leaf_369
leaf_369  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" itself, looking it up on each call:
"]
// END RANK raw_365

codeblock_321 -> leaf_370
leaf_370  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function ModeS.__call(modeS, category, value)
  return modeS:act(category, value)
end"]
// END RANK codeblock_321

prose_322 -> { raw_371}
{rank=same; raw_371}

raw_371 [label="raw"]


// END RANK prose_322

raw_371 -> leaf_372
leaf_372  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This will need to take a complete config table at some point.
"]
// END RANK raw_371

codeblock_323 -> leaf_373
leaf_373  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function new()
  local modeS = meta(ModeS)
  modeS.linebuf = Linebuf(1)
  -- this will be more complex but
  modeS.l_margin = 4
  modeS.r_margin = 83
  modeS.row = 2
  modeS.history = {} -- make 3-d!
  modeS.hist_mark = 0
  return modeS
end

ModeS.idEst = new"]
// END RANK codeblock_323

codeblock_324 -> leaf_374
leaf_374  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return new"]
// END RANK codeblock_324


}
