digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 148"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-93"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 prose_5 codeblock_6 section_7 section_8 section_9 section_10}
{rank=same; header_2 prose_3 prose_4 prose_5 codeblock_6 section_7 section_8 section_9 section_10}

header_2 [label="1 : SQLayer"]

prose_3 [label="prose"]

prose_4 [label="prose"]

prose_5 [label="prose"]

codeblock_6 [label="code block 11-16"]

section_7 [label="section: 19-32"]

section_8 [label="section: 33-73"]

section_9 [label="section: 74-93"]

section_10 [label="section: 94-112"]


// END RANK section_1

header_2 -> leaf_11
leaf_11  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* SQLayer"]
// END RANK header_2

prose_3 -> { raw_12}
{rank=same; raw_12}

raw_12 [label="raw"]


// END RANK prose_3

raw_12 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This will be in pylon eventually.
"]
// END RANK raw_12

prose_4 -> { raw_14 prespace_15 literal_16 raw_17}
{rank=same; raw_14 prespace_15 literal_16 raw_17}

raw_14 [label="raw"]

prespace_15 [label="prespace"]

literal_16 [label="literal"]

raw_17 [label="raw"]


// END RANK prose_4

raw_14 -> leaf_18
leaf_18  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Enhances the existing SQLite bindings, which in turn will be turned into a
statically-linked part of"]
// END RANK raw_14

prespace_15 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_15

literal_16 -> leaf_20
leaf_20  [color=Gray,shape=rectangle,fontname=Inconsolata,label="pylon"]
// END RANK literal_16

raw_17 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_17

prose_5 -> { raw_22}
{rank=same; raw_22}

raw_22 [label="raw"]


// END RANK prose_5

raw_22 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
SQLite being a core competency, we want to make this really nice; see
[[stretch goals][#stretch-goals]] for details.
"]
// END RANK raw_22

codeblock_6 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local sql = require \"sqlite\"
local pcall = assert (pcall)
local gsub = assert(string.gsub)
local format = assert(string.format)"]
// END RANK codeblock_6

section_7 -> { header_25 prose_26 codeblock_27}
{rank=same; header_25 prose_26 codeblock_27}

header_25 [label="2 : sql.san(str)"]

prose_26 [label="prose"]

codeblock_27 [label="code block 23-30"]


// END RANK section_7

header_25 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** sql.san(str)"]
// END RANK header_25

prose_26 -> { raw_29}
{rank=same; raw_29}

raw_29 [label="raw"]


// END RANK prose_26

raw_29 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Sanitizes a string for SQL(ite) quoting.
"]
// END RANK raw_29

codeblock_27 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function san(str)
   return gsub(str, \"'\", \"''\")
end

sql.san = san
"]
// END RANK codeblock_27

section_8 -> { header_32 prose_33 prose_34 prose_35 prose_36 prose_37 codeblock_38}
{rank=same; header_32 prose_33 prose_34 prose_35 prose_36 prose_37 codeblock_38}

header_32 [label="2 : sql.format(str)"]

prose_33 [label="prose"]

prose_34 [label="prose"]

prose_35 [label="prose"]

prose_36 [label="prose"]

prose_37 [label="prose"]

codeblock_38 [label="code block 54-72"]


// END RANK section_8

header_32 -> leaf_39
leaf_39  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** sql.format(str)"]
// END RANK header_32

prose_33 -> { raw_40}
{rank=same; raw_40}

raw_40 [label="raw"]


// END RANK prose_33

raw_40 -> leaf_41
leaf_41  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The SQLite bindings I'm using support only an impoverished subset of the
SQLite binds.  In the meantime we're going to use format strings, which at
least typecheck parameters.
"]
// END RANK raw_40

prose_34 -> { prespace_42 bold_43 raw_44 prespace_45 literal_46 raw_47}
{rank=same; prespace_42 bold_43 raw_44 prespace_45 literal_46 raw_47}

prespace_42 [label="prespace"]

bold_43 [label="bold"]

raw_44 [label="raw"]

prespace_45 [label="prespace"]

literal_46 [label="literal"]

raw_47 [label="raw"]


// END RANK prose_34

prespace_42 -> leaf_48
leaf_48  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_42

bold_43 -> leaf_49
leaf_49  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Update"]
// END RANK bold_43

raw_44 -> leaf_50
leaf_50  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" I've added"]
// END RANK raw_44

prespace_45 -> leaf_51
leaf_51  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_45

literal_46 -> leaf_52
leaf_52  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bindkv"]
// END RANK literal_46

raw_47 -> leaf_53
leaf_53  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" which helps.
"]
// END RANK raw_47

prose_35 -> { raw_54 prespace_55 literal_56 raw_57 prespace_58 literal_59 raw_60 prespace_61 literal_62 raw_63 prespace_64 literal_65 raw_66}
{rank=same; raw_54 prespace_55 literal_56 raw_57 prespace_58 literal_59 raw_60 prespace_61 literal_62 raw_63 prespace_64 literal_65 raw_66}

raw_54 [label="raw"]

prespace_55 [label="prespace"]

literal_56 [label="literal"]

raw_57 [label="raw"]

prespace_58 [label="prespace"]

literal_59 [label="literal"]

raw_60 [label="raw"]

prespace_61 [label="prespace"]

literal_62 [label="literal"]

raw_63 [label="raw"]

prespace_64 [label="prespace"]

literal_65 [label="literal"]

raw_66 [label="raw"]


// END RANK prose_35

raw_54 -> leaf_67
leaf_67  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This"]
// END RANK raw_54

prespace_55 -> leaf_68
leaf_68  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_55

literal_56 -> leaf_69
leaf_69  [color=Gray,shape=rectangle,fontname=Inconsolata,label="format"]
// END RANK literal_56

raw_57 -> leaf_70
leaf_70  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" command sanitizes string inputs, and also replaces any"]
// END RANK raw_57

prespace_58 -> leaf_71
leaf_71  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_58

literal_59 -> leaf_72
leaf_72  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%s"]
// END RANK literal_59

raw_60 -> leaf_73
leaf_73  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
with"]
// END RANK raw_60

prespace_61 -> leaf_74
leaf_74  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_61

literal_62 -> leaf_75
leaf_75  [color=Gray,shape=rectangle,fontname=Inconsolata,label="'%s'"]
// END RANK literal_62

raw_63 -> leaf_76
leaf_76  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" without making any"]
// END RANK raw_63

prespace_64 -> leaf_77
leaf_77  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_64

literal_65 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label="''%s''"]
// END RANK literal_65

raw_66 -> leaf_79
leaf_79  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", or more accurately trimming them
if it creates them.
"]
// END RANK raw_66

prose_36 -> { raw_80 prespace_81 literal_82 raw_83 prespace_84 literal_85 raw_86 prespace_87 literal_88 raw_89}
{rank=same; raw_80 prespace_81 literal_82 raw_83 prespace_84 literal_85 raw_86 prespace_87 literal_88 raw_89}

raw_80 [label="raw"]

prespace_81 [label="prespace"]

literal_82 [label="literal"]

raw_83 [label="raw"]

prespace_84 [label="prespace"]

literal_85 [label="literal"]

raw_86 [label="raw"]

prespace_87 [label="prespace"]

literal_88 [label="literal"]

raw_89 [label="raw"]


// END RANK prose_36

raw_80 -> leaf_90
leaf_90  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
So"]
// END RANK raw_80

prespace_81 -> leaf_91
leaf_91  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_81

literal_82 -> leaf_92
leaf_92  [color=Gray,shape=rectangle,fontname=Inconsolata,label="sql.format(\"it's %s!\", \"it's\")"]
// END RANK literal_82

raw_83 -> leaf_93
leaf_93  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_83

prespace_84 -> leaf_94
leaf_94  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_84

literal_85 -> leaf_95
leaf_95  [color=Gray,shape=rectangle,fontname=Inconsolata,label="sql.format(\"it's '%s'!\", \"it's\")"]
// END RANK literal_85

raw_86 -> leaf_96
leaf_96  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
both yield"]
// END RANK raw_86

prespace_87 -> leaf_97
leaf_97  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_87

literal_88 -> leaf_98
leaf_98  [color=Gray,shape=rectangle,fontname=Inconsolata,label="\"it's 'it''s\""]
// END RANK literal_88

raw_89 -> leaf_99
leaf_99  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  I figure any apostrophes in the format string
belong there.
"]
// END RANK raw_89

prose_37 -> { raw_100 prespace_101 literal_102 raw_103}
{rank=same; raw_100 prespace_101 literal_102 raw_103}

raw_100 [label="raw"]

prespace_101 [label="prespace"]

literal_102 [label="literal"]

raw_103 [label="raw"]


// END RANK prose_37

raw_100 -> leaf_104
leaf_104  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Failure to format returns"]
// END RANK raw_100

prespace_101 -> leaf_105
leaf_105  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_101

literal_102 -> leaf_106
leaf_106  [color=Gray,shape=rectangle,fontname=Inconsolata,label="false, err"]
// END RANK literal_102

raw_103 -> leaf_107
leaf_107  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_103

codeblock_38 -> leaf_108
leaf_108  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function sql.format(str, ...)
   local argv = {...}
   str = gsub(str, \"%%s\", \"'%%s'\"):gsub(\"''%%s''\", \"'%%s'\")
   for i, v in ipairs(argv) do
      if type(v) == \"string\" then
         argv[i] = san(v)
      else
         argv[i] = v
      end
   end
   local success, ret = pcall(format, str, unpack(argv))
   if success then
      return ret
   else
      return success, ret
   end
end"]
// END RANK codeblock_38

section_9 -> { header_109 prose_110 prose_111 codeblock_112}
{rank=same; header_109 prose_110 prose_111 codeblock_112}

header_109 [label="2 : sql.pexec(conn, stmt)"]

prose_110 [label="prose"]

prose_111 [label="prose"]

codeblock_112 [label="code block 80-91"]


// END RANK section_9

header_109 -> leaf_113
leaf_113  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** sql.pexec(conn, stmt)"]
// END RANK header_109

prose_110 -> { raw_114}
{rank=same; raw_114}

raw_114 [label="raw"]


// END RANK prose_110

raw_114 -> leaf_115
leaf_115  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Executes the statement on conn in protected mode.
"]
// END RANK raw_114

prose_111 -> { raw_116 prespace_117 literal_118 raw_119}
{rank=same; raw_116 prespace_117 literal_118 raw_119}

raw_116 [label="raw"]

prespace_117 [label="prespace"]

literal_118 [label="literal"]

raw_119 [label="raw"]


// END RANK prose_111

raw_116 -> leaf_120
leaf_120  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Unwraps and returns success, or"]
// END RANK raw_116

prespace_117 -> leaf_121
leaf_121  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_117

literal_118 -> leaf_122
leaf_122  [color=Gray,shape=rectangle,fontname=Inconsolata,label="false"]
// END RANK literal_118

raw_119 -> leaf_123
leaf_123  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and error.
"]
// END RANK raw_119

codeblock_112 -> leaf_124
leaf_124  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function sql.pexec(conn, stmt, col_str)
   -- conn:exec(stmt)
   col_str = col_str or \"hik\"
   local success, result, nrow = pcall(conn.exec, conn, stmt, col_str)
   if success then
      return result, nrow
   else
      return false, value
   end
end"]
// END RANK codeblock_112

section_10 -> { header_125 prose_126 prose_127 codeblock_128 codeblock_129 section_130}
{rank=same; header_125 prose_126 prose_127 codeblock_128 codeblock_129 section_130}

header_125 [label="2 : sql.lastid(conn)"]

prose_126 [label="prose"]

prose_127 [label="prose"]

codeblock_128 [label="code block 100-105"]

codeblock_129 [label="code block 108-110"]

section_130 [label="section: 113-128"]


// END RANK section_10

header_125 -> leaf_131
leaf_131  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** sql.lastid(conn)"]
// END RANK header_125

prose_126 -> { raw_132 prespace_133 literal_134 raw_135}
{rank=same; raw_132 prespace_133 literal_134 raw_135}

raw_132 [label="raw"]

prespace_133 [label="prespace"]

literal_134 [label="literal"]

raw_135 [label="raw"]


// END RANK prose_126

raw_132 -> leaf_136
leaf_136  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This could be improved by natively handling uint64_t"]
// END RANK raw_132

prespace_133 -> leaf_137
leaf_137  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_133

literal_134 -> leaf_138
leaf_138  [color=Gray,shape=rectangle,fontname=Inconsolata,label="cdata"]
// END RANK literal_134

raw_135 -> leaf_139
leaf_139  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_135

prose_127 -> { raw_140}
{rank=same; raw_140}

raw_140 [label="raw"]


// END RANK prose_127

raw_140 -> leaf_141
leaf_141  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Y'know, if we ever keep more than 53 bits width of rows in uhhhhh SQLite.
"]
// END RANK raw_140

codeblock_128 -> leaf_142
leaf_142  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function sql.lastRowId(conn)
   local result = conn:exec \"SELECT CAST(last_insert_rowid() AS REAL)\"
   return result[1][1]
end"]
// END RANK codeblock_128

codeblock_129 -> leaf_143
leaf_143  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return sql"]
// END RANK codeblock_129

section_130 -> { header_144 prose_145 section_146 section_147 section_148}
{rank=same; header_144 prose_145 section_146 section_147 section_148}

header_144 [label="3 : Stretch goals"]

prose_145 [label="prose"]

section_146 [label="section: 116-123"]

section_147 [label="section: 124-128"]

section_148 [label="section: 129-148"]


// END RANK section_130

header_144 -> leaf_149
leaf_149  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Stretch goals"]
// END RANK header_144

prose_145 -> { raw_150}
{rank=same; raw_150}

raw_150 [label="raw"]


// END RANK prose_145

raw_150 -> leaf_151
leaf_151  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

"]
// END RANK raw_150

section_146 -> { header_152 prose_153 prose_154}
{rank=same; header_152 prose_153 prose_154}

header_152 [label="4 : sql.pragma.etc(bool)"]

prose_153 [label="prose"]

prose_154 [label="prose"]


// END RANK section_146

header_152 -> leaf_155
leaf_155  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** sql.pragma.etc(bool)"]
// END RANK header_152

prose_153 -> { raw_156}
{rank=same; raw_156}

raw_156 [label="raw"]


// END RANK prose_153

raw_156 -> leaf_157
leaf_157  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

A convenience wrapper over the SQL pragma commands.
"]
// END RANK raw_156

prose_154 -> { raw_158 prespace_159 literal_160 raw_161}
{rank=same; raw_158 prespace_159 literal_160 raw_161}

raw_158 [label="raw"]

prespace_159 [label="prespace"]

literal_160 [label="literal"]

raw_161 [label="raw"]


// END RANK prose_154

raw_158 -> leaf_162
leaf_162  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We can use the same interface for setting Lua-specific values, the one I need
is"]
// END RANK raw_158

prespace_159 -> leaf_163
leaf_163  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_159

literal_160 -> leaf_164
leaf_164  [color=Gray,shape=rectangle,fontname=Inconsolata,label="sql.pragma.nulls_are_nil(false)"]
// END RANK literal_160

raw_161 -> leaf_165
leaf_165  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".

"]
// END RANK raw_161

section_147 -> { header_166 prose_167}
{rank=same; header_166 prose_167}

header_166 [label="4 : sql.NULL"]

prose_167 [label="prose"]


// END RANK section_147

header_166 -> leaf_168
leaf_168  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** sql.NULL"]
// END RANK header_166

prose_167 -> { raw_169}
{rank=same; raw_169}

raw_169 [label="raw"]


// END RANK prose_167

raw_169 -> leaf_170
leaf_170  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This isn't much of a stretch, just a truthy table that represents nullity.

"]
// END RANK raw_169

section_148 -> { header_171 prose_172 prose_173}
{rank=same; header_171 prose_172 prose_173}

header_171 [label="4 : Dereferencing pointers in Luaspace"]

prose_172 [label="prose"]

prose_173 [label="prose"]


// END RANK section_148

header_171 -> leaf_174
leaf_174  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Dereferencing pointers in Luaspace"]
// END RANK header_171

prose_172 -> { raw_175 prespace_176 literal_177 raw_178 prespace_179 literal_180 raw_181}
{rank=same; raw_175 prespace_176 literal_177 raw_178 prespace_179 literal_180 raw_181}

raw_175 [label="raw"]

prespace_176 [label="prespace"]

literal_177 [label="literal"]

raw_178 [label="raw"]

prespace_179 [label="prespace"]

literal_180 [label="literal"]

raw_181 [label="raw"]


// END RANK prose_172

raw_175 -> leaf_182
leaf_182  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

It would be nice to write a small C wrapper on"]
// END RANK raw_175

prespace_176 -> leaf_183
leaf_183  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_176

literal_177 -> leaf_184
leaf_184  [color=Gray,shape=rectangle,fontname=Inconsolata,label="sqlite3_sql()"]
// END RANK literal_177

raw_178 -> leaf_185
leaf_185  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" that gets the
address from a statement pointer and returns the resulting string.  The whole
dataflow layer of"]
// END RANK raw_178

prespace_179 -> leaf_186
leaf_186  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_179

literal_180 -> leaf_187
leaf_187  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bridge"]
// END RANK literal_180

raw_181 -> leaf_188
leaf_188  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is predicated on abstracting over some pretty
gnarly SQL introspection.
"]
// END RANK raw_181

prose_173 -> { raw_189}
{rank=same; raw_189}

raw_189 [label="raw"]


// END RANK prose_173

raw_189 -> leaf_190
leaf_190  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The easy way is just to denormalize the string onto a member of the stmt
table, but that violates single-source-of-truth, and handling pointers across
the abstraction barrier is something I'm going to need to get used to.









"]
// END RANK raw_189


}
