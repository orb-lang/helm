digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 112"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-70"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 codeblock_5 section_6 section_7 section_8}
{rank=same; header_2 prose_3 prose_4 codeblock_5 section_6 section_7 section_8}

header_2 [label="1 : SQLayer"]

prose_3 [label="prose"]

prose_4 [label="prose"]

codeblock_5 [label="code block 8-13"]

section_6 [label="section: 16-29"]

section_7 [label="section: 30-70"]

section_8 [label="section: 71-93"]


// END RANK section_1

header_2 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* SQLayer"]
// END RANK header_2

prose_3 -> { raw_10}
{rank=same; raw_10}

raw_10 [label="raw"]


// END RANK prose_3

raw_10 -> leaf_11
leaf_11  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This will be in pylon eventually.
"]
// END RANK raw_10

prose_4 -> { raw_12 prespace_13 literal_14 raw_15}
{rank=same; raw_12 prespace_13 literal_14 raw_15}

raw_12 [label="raw"]

prespace_13 [label="prespace"]

literal_14 [label="literal"]

raw_15 [label="raw"]


// END RANK prose_4

raw_12 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Enhances the existing SQLite bindings, which in turn will be turned into a
statically-linked part of"]
// END RANK raw_12

prespace_13 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_13

literal_14 -> leaf_18
leaf_18  [color=Gray,shape=rectangle,fontname=Inconsolata,label="pylon"]
// END RANK literal_14

raw_15 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_15

codeblock_5 -> leaf_20
leaf_20  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local sql = require \"sqlite\"
local pcall = assert (pcall)
local gsub = assert(string.gsub)
local format = assert(string.format)"]
// END RANK codeblock_5

section_6 -> { header_21 prose_22 codeblock_23}
{rank=same; header_21 prose_22 codeblock_23}

header_21 [label="2 : sql.san(str)"]

prose_22 [label="prose"]

codeblock_23 [label="code block 20-27"]


// END RANK section_6

header_21 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** sql.san(str)"]
// END RANK header_21

prose_22 -> { raw_25}
{rank=same; raw_25}

raw_25 [label="raw"]


// END RANK prose_22

raw_25 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Sanitizes a string for SQL(ite) quoting.
"]
// END RANK raw_25

codeblock_23 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function san(str)
   return gsub(str, \"'\", \"''\")
end

sql.san = san
"]
// END RANK codeblock_23

section_7 -> { header_28 prose_29 prose_30 prose_31 prose_32 prose_33 codeblock_34}
{rank=same; header_28 prose_29 prose_30 prose_31 prose_32 prose_33 codeblock_34}

header_28 [label="2 : sql.format(str)"]

prose_29 [label="prose"]

prose_30 [label="prose"]

prose_31 [label="prose"]

prose_32 [label="prose"]

prose_33 [label="prose"]

codeblock_34 [label="code block 51-69"]


// END RANK section_7

header_28 -> leaf_35
leaf_35  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** sql.format(str)"]
// END RANK header_28

prose_29 -> { raw_36}
{rank=same; raw_36}

raw_36 [label="raw"]


// END RANK prose_29

raw_36 -> leaf_37
leaf_37  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The SQLite bindings I'm using support only an impoverished subset of the
SQLite binds.  In the meantime we're going to use format strings, which at
least typecheck parameters.
"]
// END RANK raw_36

prose_30 -> { prespace_38 bold_39 raw_40 prespace_41 literal_42 raw_43}
{rank=same; prespace_38 bold_39 raw_40 prespace_41 literal_42 raw_43}

prespace_38 [label="prespace"]

bold_39 [label="bold"]

raw_40 [label="raw"]

prespace_41 [label="prespace"]

literal_42 [label="literal"]

raw_43 [label="raw"]


// END RANK prose_30

prespace_38 -> leaf_44
leaf_44  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_38

bold_39 -> leaf_45
leaf_45  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Update"]
// END RANK bold_39

raw_40 -> leaf_46
leaf_46  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" I've added"]
// END RANK raw_40

prespace_41 -> leaf_47
leaf_47  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_41

literal_42 -> leaf_48
leaf_48  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bindkv"]
// END RANK literal_42

raw_43 -> leaf_49
leaf_49  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" which helps.
"]
// END RANK raw_43

prose_31 -> { raw_50 prespace_51 literal_52 raw_53 prespace_54 literal_55 raw_56 prespace_57 literal_58 raw_59 prespace_60 literal_61 raw_62}
{rank=same; raw_50 prespace_51 literal_52 raw_53 prespace_54 literal_55 raw_56 prespace_57 literal_58 raw_59 prespace_60 literal_61 raw_62}

raw_50 [label="raw"]

prespace_51 [label="prespace"]

literal_52 [label="literal"]

raw_53 [label="raw"]

prespace_54 [label="prespace"]

literal_55 [label="literal"]

raw_56 [label="raw"]

prespace_57 [label="prespace"]

literal_58 [label="literal"]

raw_59 [label="raw"]

prespace_60 [label="prespace"]

literal_61 [label="literal"]

raw_62 [label="raw"]


// END RANK prose_31

raw_50 -> leaf_63
leaf_63  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This"]
// END RANK raw_50

prespace_51 -> leaf_64
leaf_64  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_51

literal_52 -> leaf_65
leaf_65  [color=Gray,shape=rectangle,fontname=Inconsolata,label="format"]
// END RANK literal_52

raw_53 -> leaf_66
leaf_66  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" command sanitizes string inputs, and also replaces any"]
// END RANK raw_53

prespace_54 -> leaf_67
leaf_67  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_54

literal_55 -> leaf_68
leaf_68  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%s"]
// END RANK literal_55

raw_56 -> leaf_69
leaf_69  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
with"]
// END RANK raw_56

prespace_57 -> leaf_70
leaf_70  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_57

literal_58 -> leaf_71
leaf_71  [color=Gray,shape=rectangle,fontname=Inconsolata,label="'%s'"]
// END RANK literal_58

raw_59 -> leaf_72
leaf_72  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" without making any"]
// END RANK raw_59

prespace_60 -> leaf_73
leaf_73  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_60

literal_61 -> leaf_74
leaf_74  [color=Gray,shape=rectangle,fontname=Inconsolata,label="''%s''"]
// END RANK literal_61

raw_62 -> leaf_75
leaf_75  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", or more accurately trimming them
if it creates them.
"]
// END RANK raw_62

prose_32 -> { raw_76 prespace_77 literal_78 raw_79 prespace_80 literal_81 raw_82 prespace_83 literal_84 raw_85}
{rank=same; raw_76 prespace_77 literal_78 raw_79 prespace_80 literal_81 raw_82 prespace_83 literal_84 raw_85}

raw_76 [label="raw"]

prespace_77 [label="prespace"]

literal_78 [label="literal"]

raw_79 [label="raw"]

prespace_80 [label="prespace"]

literal_81 [label="literal"]

raw_82 [label="raw"]

prespace_83 [label="prespace"]

literal_84 [label="literal"]

raw_85 [label="raw"]


// END RANK prose_32

raw_76 -> leaf_86
leaf_86  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
So"]
// END RANK raw_76

prespace_77 -> leaf_87
leaf_87  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_77

literal_78 -> leaf_88
leaf_88  [color=Gray,shape=rectangle,fontname=Inconsolata,label="sql.format(\"it's %s!\", \"it's\")"]
// END RANK literal_78

raw_79 -> leaf_89
leaf_89  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_79

prespace_80 -> leaf_90
leaf_90  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_80

literal_81 -> leaf_91
leaf_91  [color=Gray,shape=rectangle,fontname=Inconsolata,label="sql.format(\"it's '%s'!\", \"it's\")"]
// END RANK literal_81

raw_82 -> leaf_92
leaf_92  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
both yield"]
// END RANK raw_82

prespace_83 -> leaf_93
leaf_93  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_83

literal_84 -> leaf_94
leaf_94  [color=Gray,shape=rectangle,fontname=Inconsolata,label="\"it's 'it''s\""]
// END RANK literal_84

raw_85 -> leaf_95
leaf_95  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  I figure any apostrophes in the format string
belong there.
"]
// END RANK raw_85

prose_33 -> { raw_96 prespace_97 literal_98 raw_99}
{rank=same; raw_96 prespace_97 literal_98 raw_99}

raw_96 [label="raw"]

prespace_97 [label="prespace"]

literal_98 [label="literal"]

raw_99 [label="raw"]


// END RANK prose_33

raw_96 -> leaf_100
leaf_100  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Failure to format returns"]
// END RANK raw_96

prespace_97 -> leaf_101
leaf_101  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_97

literal_98 -> leaf_102
leaf_102  [color=Gray,shape=rectangle,fontname=Inconsolata,label="false, err"]
// END RANK literal_98

raw_99 -> leaf_103
leaf_103  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_99

codeblock_34 -> leaf_104
leaf_104  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function sql.format(str, ...)
   local argv = {...}
   str = gsub(str, \"%%s\", \"'%%s'\"):gsub(\"''%%s''\", \"'%%s'\")
   for i, v in ipairs(argv) do
      if type(v) == \"string\" then
         argv[i] = san(v)
      else
         argv[i] = v
      end
   end
   local success, ret = pcall(format, str, unpack(argv))
   if success then
      return ret
   else
      return success, ret
   end
end"]
// END RANK codeblock_34

section_8 -> { header_105 prose_106 prose_107 codeblock_108 codeblock_109 section_110}
{rank=same; header_105 prose_106 prose_107 codeblock_108 codeblock_109 section_110}

header_105 [label="2 : sql.pexec(conn, stmt)"]

prose_106 [label="prose"]

prose_107 [label="prose"]

codeblock_108 [label="code block 77-87"]

codeblock_109 [label="code block 89-91"]

section_110 [label="section: 94-112"]


// END RANK section_8

header_105 -> leaf_111
leaf_111  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** sql.pexec(conn, stmt)"]
// END RANK header_105

prose_106 -> { raw_112}
{rank=same; raw_112}

raw_112 [label="raw"]


// END RANK prose_106

raw_112 -> leaf_113
leaf_113  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Executes the statement on conn in protected mode.
"]
// END RANK raw_112

prose_107 -> { raw_114 prespace_115 literal_116 raw_117}
{rank=same; raw_114 prespace_115 literal_116 raw_117}

raw_114 [label="raw"]

prespace_115 [label="prespace"]

literal_116 [label="literal"]

raw_117 [label="raw"]


// END RANK prose_107

raw_114 -> leaf_118
leaf_118  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Unwraps and returns success, or"]
// END RANK raw_114

prespace_115 -> leaf_119
leaf_119  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_115

literal_116 -> leaf_120
leaf_120  [color=Gray,shape=rectangle,fontname=Inconsolata,label="false"]
// END RANK literal_116

raw_117 -> leaf_121
leaf_121  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and error.
"]
// END RANK raw_117

codeblock_108 -> leaf_122
leaf_122  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function sql.pexec(conn, stmt)
   -- conn:exec(stmt)
   local success, value = pcall(conn.exec, conn, stmt)
   if success then
      return value
   else
      return false, value
   end
end"]
// END RANK codeblock_108

codeblock_109 -> leaf_123
leaf_123  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return sql"]
// END RANK codeblock_109

section_110 -> { header_124 prose_125 prose_126}
{rank=same; header_124 prose_125 prose_126}

header_124 [label="3 : Stretch goals"]

prose_125 [label="prose"]

prose_126 [label="prose"]


// END RANK section_110

header_124 -> leaf_127
leaf_127  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Stretch goals"]
// END RANK header_124

prose_125 -> { raw_128 prespace_129 literal_130 raw_131 prespace_132 literal_133 raw_134}
{rank=same; raw_128 prespace_129 literal_130 raw_131 prespace_132 literal_133 raw_134}

raw_128 [label="raw"]

prespace_129 [label="prespace"]

literal_130 [label="literal"]

raw_131 [label="raw"]

prespace_132 [label="prespace"]

literal_133 [label="literal"]

raw_134 [label="raw"]


// END RANK prose_125

raw_128 -> leaf_135
leaf_135  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

It would be nice to write a small C wrapper on"]
// END RANK raw_128

prespace_129 -> leaf_136
leaf_136  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_129

literal_130 -> leaf_137
leaf_137  [color=Gray,shape=rectangle,fontname=Inconsolata,label="sqlite3_sql()"]
// END RANK literal_130

raw_131 -> leaf_138
leaf_138  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" that gets the
address from a statement pointer and returns the resulting string.  The whole
dataflow layer of"]
// END RANK raw_131

prespace_132 -> leaf_139
leaf_139  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_132

literal_133 -> leaf_140
leaf_140  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bridge"]
// END RANK literal_133

raw_134 -> leaf_141
leaf_141  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is predicated on abstracting over some pretty
gnarly SQL introspection.
"]
// END RANK raw_134

prose_126 -> { raw_142}
{rank=same; raw_142}

raw_142 [label="raw"]


// END RANK prose_126

raw_142 -> leaf_143
leaf_143  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The easy way is just to denormalize the string onto a member of the stmt
table









"]
// END RANK raw_142


}
