digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 127"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-89"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 codeblock_5 section_6 section_7 section_8 section_9}
{rank=same; header_2 prose_3 prose_4 codeblock_5 section_6 section_7 section_8 section_9}

header_2 [label="1 : SQLayer"]

prose_3 [label="prose"]

prose_4 [label="prose"]

codeblock_5 [label="code block 8-13"]

section_6 [label="section: 16-29"]

section_7 [label="section: 30-70"]

section_8 [label="section: 71-89"]

section_9 [label="section: 90-108"]


// END RANK section_1

header_2 -> leaf_10
leaf_10  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* SQLayer"]
// END RANK header_2

prose_3 -> { raw_11}
{rank=same; raw_11}

raw_11 [label="raw"]


// END RANK prose_3

raw_11 -> leaf_12
leaf_12  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This will be in pylon eventually.
"]
// END RANK raw_11

prose_4 -> { raw_13 prespace_14 literal_15 raw_16}
{rank=same; raw_13 prespace_14 literal_15 raw_16}

raw_13 [label="raw"]

prespace_14 [label="prespace"]

literal_15 [label="literal"]

raw_16 [label="raw"]


// END RANK prose_4

raw_13 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Enhances the existing SQLite bindings, which in turn will be turned into a
statically-linked part of"]
// END RANK raw_13

prespace_14 -> leaf_18
leaf_18  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_14

literal_15 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label="pylon"]
// END RANK literal_15

raw_16 -> leaf_20
leaf_20  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_16

codeblock_5 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local sql = require \"sqlite\"
local pcall = assert (pcall)
local gsub = assert(string.gsub)
local format = assert(string.format)"]
// END RANK codeblock_5

section_6 -> { header_22 prose_23 codeblock_24}
{rank=same; header_22 prose_23 codeblock_24}

header_22 [label="2 : sql.san(str)"]

prose_23 [label="prose"]

codeblock_24 [label="code block 20-27"]


// END RANK section_6

header_22 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** sql.san(str)"]
// END RANK header_22

prose_23 -> { raw_26}
{rank=same; raw_26}

raw_26 [label="raw"]


// END RANK prose_23

raw_26 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Sanitizes a string for SQL(ite) quoting.
"]
// END RANK raw_26

codeblock_24 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function san(str)
   return gsub(str, \"'\", \"''\")
end

sql.san = san
"]
// END RANK codeblock_24

section_7 -> { header_29 prose_30 prose_31 prose_32 prose_33 prose_34 codeblock_35}
{rank=same; header_29 prose_30 prose_31 prose_32 prose_33 prose_34 codeblock_35}

header_29 [label="2 : sql.format(str)"]

prose_30 [label="prose"]

prose_31 [label="prose"]

prose_32 [label="prose"]

prose_33 [label="prose"]

prose_34 [label="prose"]

codeblock_35 [label="code block 51-69"]


// END RANK section_7

header_29 -> leaf_36
leaf_36  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** sql.format(str)"]
// END RANK header_29

prose_30 -> { raw_37}
{rank=same; raw_37}

raw_37 [label="raw"]


// END RANK prose_30

raw_37 -> leaf_38
leaf_38  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The SQLite bindings I'm using support only an impoverished subset of the
SQLite binds.  In the meantime we're going to use format strings, which at
least typecheck parameters.
"]
// END RANK raw_37

prose_31 -> { prespace_39 bold_40 raw_41 prespace_42 literal_43 raw_44}
{rank=same; prespace_39 bold_40 raw_41 prespace_42 literal_43 raw_44}

prespace_39 [label="prespace"]

bold_40 [label="bold"]

raw_41 [label="raw"]

prespace_42 [label="prespace"]

literal_43 [label="literal"]

raw_44 [label="raw"]


// END RANK prose_31

prespace_39 -> leaf_45
leaf_45  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_39

bold_40 -> leaf_46
leaf_46  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Update"]
// END RANK bold_40

raw_41 -> leaf_47
leaf_47  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" I've added"]
// END RANK raw_41

prespace_42 -> leaf_48
leaf_48  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_42

literal_43 -> leaf_49
leaf_49  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bindkv"]
// END RANK literal_43

raw_44 -> leaf_50
leaf_50  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" which helps.
"]
// END RANK raw_44

prose_32 -> { raw_51 prespace_52 literal_53 raw_54 prespace_55 literal_56 raw_57 prespace_58 literal_59 raw_60 prespace_61 literal_62 raw_63}
{rank=same; raw_51 prespace_52 literal_53 raw_54 prespace_55 literal_56 raw_57 prespace_58 literal_59 raw_60 prespace_61 literal_62 raw_63}

raw_51 [label="raw"]

prespace_52 [label="prespace"]

literal_53 [label="literal"]

raw_54 [label="raw"]

prespace_55 [label="prespace"]

literal_56 [label="literal"]

raw_57 [label="raw"]

prespace_58 [label="prespace"]

literal_59 [label="literal"]

raw_60 [label="raw"]

prespace_61 [label="prespace"]

literal_62 [label="literal"]

raw_63 [label="raw"]


// END RANK prose_32

raw_51 -> leaf_64
leaf_64  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This"]
// END RANK raw_51

prespace_52 -> leaf_65
leaf_65  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_52

literal_53 -> leaf_66
leaf_66  [color=Gray,shape=rectangle,fontname=Inconsolata,label="format"]
// END RANK literal_53

raw_54 -> leaf_67
leaf_67  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" command sanitizes string inputs, and also replaces any"]
// END RANK raw_54

prespace_55 -> leaf_68
leaf_68  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_55

literal_56 -> leaf_69
leaf_69  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%s"]
// END RANK literal_56

raw_57 -> leaf_70
leaf_70  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
with"]
// END RANK raw_57

prespace_58 -> leaf_71
leaf_71  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_58

literal_59 -> leaf_72
leaf_72  [color=Gray,shape=rectangle,fontname=Inconsolata,label="'%s'"]
// END RANK literal_59

raw_60 -> leaf_73
leaf_73  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" without making any"]
// END RANK raw_60

prespace_61 -> leaf_74
leaf_74  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_61

literal_62 -> leaf_75
leaf_75  [color=Gray,shape=rectangle,fontname=Inconsolata,label="''%s''"]
// END RANK literal_62

raw_63 -> leaf_76
leaf_76  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", or more accurately trimming them
if it creates them.
"]
// END RANK raw_63

prose_33 -> { raw_77 prespace_78 literal_79 raw_80 prespace_81 literal_82 raw_83 prespace_84 literal_85 raw_86}
{rank=same; raw_77 prespace_78 literal_79 raw_80 prespace_81 literal_82 raw_83 prespace_84 literal_85 raw_86}

raw_77 [label="raw"]

prespace_78 [label="prespace"]

literal_79 [label="literal"]

raw_80 [label="raw"]

prespace_81 [label="prespace"]

literal_82 [label="literal"]

raw_83 [label="raw"]

prespace_84 [label="prespace"]

literal_85 [label="literal"]

raw_86 [label="raw"]


// END RANK prose_33

raw_77 -> leaf_87
leaf_87  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
So"]
// END RANK raw_77

prespace_78 -> leaf_88
leaf_88  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_78

literal_79 -> leaf_89
leaf_89  [color=Gray,shape=rectangle,fontname=Inconsolata,label="sql.format(\"it's %s!\", \"it's\")"]
// END RANK literal_79

raw_80 -> leaf_90
leaf_90  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_80

prespace_81 -> leaf_91
leaf_91  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_81

literal_82 -> leaf_92
leaf_92  [color=Gray,shape=rectangle,fontname=Inconsolata,label="sql.format(\"it's '%s'!\", \"it's\")"]
// END RANK literal_82

raw_83 -> leaf_93
leaf_93  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
both yield"]
// END RANK raw_83

prespace_84 -> leaf_94
leaf_94  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_84

literal_85 -> leaf_95
leaf_95  [color=Gray,shape=rectangle,fontname=Inconsolata,label="\"it's 'it''s\""]
// END RANK literal_85

raw_86 -> leaf_96
leaf_96  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  I figure any apostrophes in the format string
belong there.
"]
// END RANK raw_86

prose_34 -> { raw_97 prespace_98 literal_99 raw_100}
{rank=same; raw_97 prespace_98 literal_99 raw_100}

raw_97 [label="raw"]

prespace_98 [label="prespace"]

literal_99 [label="literal"]

raw_100 [label="raw"]


// END RANK prose_34

raw_97 -> leaf_101
leaf_101  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Failure to format returns"]
// END RANK raw_97

prespace_98 -> leaf_102
leaf_102  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_98

literal_99 -> leaf_103
leaf_103  [color=Gray,shape=rectangle,fontname=Inconsolata,label="false, err"]
// END RANK literal_99

raw_100 -> leaf_104
leaf_104  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_100

codeblock_35 -> leaf_105
leaf_105  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function sql.format(str, ...)
   local argv = {...}
   str = gsub(str, \"%%s\", \"'%%s'\"):gsub(\"''%%s''\", \"'%%s'\")
   for i, v in ipairs(argv) do
      if type(v) == \"string\" then
         argv[i] = san(v)
      else
         argv[i] = v
      end
   end
   local success, ret = pcall(format, str, unpack(argv))
   if success then
      return ret
   else
      return success, ret
   end
end"]
// END RANK codeblock_35

section_8 -> { header_106 prose_107 prose_108 codeblock_109}
{rank=same; header_106 prose_107 prose_108 codeblock_109}

header_106 [label="2 : sql.pexec(conn, stmt)"]

prose_107 [label="prose"]

prose_108 [label="prose"]

codeblock_109 [label="code block 77-87"]


// END RANK section_8

header_106 -> leaf_110
leaf_110  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** sql.pexec(conn, stmt)"]
// END RANK header_106

prose_107 -> { raw_111}
{rank=same; raw_111}

raw_111 [label="raw"]


// END RANK prose_107

raw_111 -> leaf_112
leaf_112  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Executes the statement on conn in protected mode.
"]
// END RANK raw_111

prose_108 -> { raw_113 prespace_114 literal_115 raw_116}
{rank=same; raw_113 prespace_114 literal_115 raw_116}

raw_113 [label="raw"]

prespace_114 [label="prespace"]

literal_115 [label="literal"]

raw_116 [label="raw"]


// END RANK prose_108

raw_113 -> leaf_117
leaf_117  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Unwraps and returns success, or"]
// END RANK raw_113

prespace_114 -> leaf_118
leaf_118  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_114

literal_115 -> leaf_119
leaf_119  [color=Gray,shape=rectangle,fontname=Inconsolata,label="false"]
// END RANK literal_115

raw_116 -> leaf_120
leaf_120  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and error.
"]
// END RANK raw_116

codeblock_109 -> leaf_121
leaf_121  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function sql.pexec(conn, stmt)
   -- conn:exec(stmt)
   local success, value = pcall(conn.exec, conn, stmt)
   if success then
      return value
   else
      return false, value
   end
end"]
// END RANK codeblock_109

section_9 -> { header_122 prose_123 prose_124 codeblock_125 codeblock_126 section_127}
{rank=same; header_122 prose_123 prose_124 codeblock_125 codeblock_126 section_127}

header_122 [label="2 : sql.lastid(conn)"]

prose_123 [label="prose"]

prose_124 [label="prose"]

codeblock_125 [label="code block 96-101"]

codeblock_126 [label="code block 104-106"]

section_127 [label="section: 109-127"]


// END RANK section_9

header_122 -> leaf_128
leaf_128  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** sql.lastid(conn)"]
// END RANK header_122

prose_123 -> { raw_129 prespace_130 literal_131 raw_132}
{rank=same; raw_129 prespace_130 literal_131 raw_132}

raw_129 [label="raw"]

prespace_130 [label="prespace"]

literal_131 [label="literal"]

raw_132 [label="raw"]


// END RANK prose_123

raw_129 -> leaf_133
leaf_133  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This could be improved by natively handling uint64_t"]
// END RANK raw_129

prespace_130 -> leaf_134
leaf_134  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_130

literal_131 -> leaf_135
leaf_135  [color=Gray,shape=rectangle,fontname=Inconsolata,label="cdata"]
// END RANK literal_131

raw_132 -> leaf_136
leaf_136  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_132

prose_124 -> { raw_137}
{rank=same; raw_137}

raw_137 [label="raw"]


// END RANK prose_124

raw_137 -> leaf_138
leaf_138  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Y'know, if we ever keep more than 53 bits width of rows in uhhhhh SQLite.
"]
// END RANK raw_137

codeblock_125 -> leaf_139
leaf_139  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function sql.lastRowId(conn)
   local result = conn:exec \"SELECT CAST(last_insert_rowid() AS REAL)\"
   return result[1][1]
end"]
// END RANK codeblock_125

codeblock_126 -> leaf_140
leaf_140  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return sql"]
// END RANK codeblock_126

section_127 -> { header_141 prose_142 prose_143}
{rank=same; header_141 prose_142 prose_143}

header_141 [label="3 : Stretch goals"]

prose_142 [label="prose"]

prose_143 [label="prose"]


// END RANK section_127

header_141 -> leaf_144
leaf_144  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Stretch goals"]
// END RANK header_141

prose_142 -> { raw_145 prespace_146 literal_147 raw_148 prespace_149 literal_150 raw_151}
{rank=same; raw_145 prespace_146 literal_147 raw_148 prespace_149 literal_150 raw_151}

raw_145 [label="raw"]

prespace_146 [label="prespace"]

literal_147 [label="literal"]

raw_148 [label="raw"]

prespace_149 [label="prespace"]

literal_150 [label="literal"]

raw_151 [label="raw"]


// END RANK prose_142

raw_145 -> leaf_152
leaf_152  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

It would be nice to write a small C wrapper on"]
// END RANK raw_145

prespace_146 -> leaf_153
leaf_153  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_146

literal_147 -> leaf_154
leaf_154  [color=Gray,shape=rectangle,fontname=Inconsolata,label="sqlite3_sql()"]
// END RANK literal_147

raw_148 -> leaf_155
leaf_155  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" that gets the
address from a statement pointer and returns the resulting string.  The whole
dataflow layer of"]
// END RANK raw_148

prespace_149 -> leaf_156
leaf_156  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_149

literal_150 -> leaf_157
leaf_157  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bridge"]
// END RANK literal_150

raw_151 -> leaf_158
leaf_158  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is predicated on abstracting over some pretty
gnarly SQL introspection.
"]
// END RANK raw_151

prose_143 -> { raw_159}
{rank=same; raw_159}

raw_159 [label="raw"]


// END RANK prose_143

raw_159 -> leaf_160
leaf_160  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The easy way is just to denormalize the string onto a member of the stmt
table









"]
// END RANK raw_159


}
