digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 231"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-110"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 prose_5 codeblock_6 section_7 section_8 section_9 section_10 section_11}
{rank=same; header_2 prose_3 prose_4 prose_5 codeblock_6 section_7 section_8 section_9 section_10 section_11}

header_2 [label="1 : SQLayer"]

prose_3 [label="prose"]

prose_4 [label="prose"]

prose_5 [label="prose"]

codeblock_6 [label="code block 11-18"]

section_7 [label="section: 21-36"]

section_8 [label="section: 37-49"]

section_9 [label="section: 50-90"]

section_10 [label="section: 91-110"]

section_11 [label="section: 111-202"]


// END RANK section_1

header_2 -> leaf_12
leaf_12  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* SQLayer"]
// END RANK header_2

prose_3 -> { raw_13}
{rank=same; raw_13}

raw_13 [label="raw"]


// END RANK prose_3

raw_13 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This will be in pylon eventually.
"]
// END RANK raw_13

prose_4 -> { raw_15 prespace_16 literal_17 raw_18}
{rank=same; raw_15 prespace_16 literal_17 raw_18}

raw_15 [label="raw"]

prespace_16 [label="prespace"]

literal_17 [label="literal"]

raw_18 [label="raw"]


// END RANK prose_4

raw_15 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Enhances the existing SQLite bindings, which in turn will be turned into a
statically-linked part of"]
// END RANK raw_15

prespace_16 -> leaf_20
leaf_20  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_16

literal_17 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label="pylon"]
// END RANK literal_17

raw_18 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_18

prose_5 -> { raw_23}
{rank=same; raw_23}

raw_23 [label="raw"]


// END RANK prose_5

raw_23 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
SQLite being a core competency, we want to make this really nice; see
[[stretch goals][#stretch-goals]] for details.
"]
// END RANK raw_23

codeblock_6 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local sql = require \"sqlite\"
local pcall = assert (pcall)
local gsub = assert(string.gsub)
local format = assert(string.format)
assert(ffi)
assert(ffi.reflect)"]
// END RANK codeblock_6

section_7 -> { header_26 prose_27 prose_28 codeblock_29}
{rank=same; header_26 prose_27 prose_28 codeblock_29}

header_26 [label="3 : Monkey Patches"]

prose_27 [label="prose"]

prose_28 [label="prose"]

codeblock_29 [label="code block 27-35"]


// END RANK section_7

header_26 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Monkey Patches"]
// END RANK header_26

prose_27 -> { raw_31 prespace_32 literal_33 raw_34 prespace_35 literal_36 raw_37}
{rank=same; raw_31 prespace_32 literal_33 raw_34 prespace_35 literal_36 raw_37}

raw_31 [label="raw"]

prespace_32 [label="prespace"]

literal_33 [label="literal"]

raw_34 [label="raw"]

prespace_35 [label="prespace"]

literal_36 [label="literal"]

raw_37 [label="raw"]


// END RANK prose_27

raw_31 -> leaf_38
leaf_38  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

It's time to start decorating the"]
// END RANK raw_31

prespace_32 -> leaf_39
leaf_39  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_32

literal_33 -> leaf_40
leaf_40  [color=Gray,shape=rectangle,fontname=Inconsolata,label="conn"]
// END RANK literal_33

raw_34 -> leaf_41
leaf_41  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_34

prespace_35 -> leaf_42
leaf_42  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_35

literal_36 -> leaf_43
leaf_43  [color=Gray,shape=rectangle,fontname=Inconsolata,label="stmt"]
// END RANK literal_36

raw_37 -> leaf_44
leaf_44  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" metatables.
"]
// END RANK raw_37

prose_28 -> { raw_45}
{rank=same; raw_45}

raw_45 [label="raw"]


// END RANK prose_28

raw_45 -> leaf_46
leaf_46  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
First we must summon them from the ether.
"]
// END RANK raw_45

codeblock_29 -> leaf_47
leaf_47  [color=Gray,shape=rectangle,fontname=Inconsolata,label="-- get a conn object via in-memory DB
local conn = sql.open \":memory:\"
local conn_mt = ffi.reflect.getmetatable(conn)
local stmt = conn:prepare \"CREATE TABLE IF NOT EXISTS test(a,b);\"
local stmt_mt = ffi.reflect.getmetatable(stmt)
conn:close() -- polite
conn, stmt = nil, nil"]
// END RANK codeblock_29

section_8 -> { header_48 prose_49 codeblock_50}
{rank=same; header_48 prose_49 codeblock_50}

header_48 [label="2 : sql.san(str)"]

prose_49 [label="prose"]

codeblock_50 [label="code block 41-47"]


// END RANK section_8

header_48 -> leaf_51
leaf_51  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** sql.san(str)"]
// END RANK header_48

prose_49 -> { raw_52}
{rank=same; raw_52}

raw_52 [label="raw"]


// END RANK prose_49

raw_52 -> leaf_53
leaf_53  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Sanitizes a string for SQL(ite) quoting.
"]
// END RANK raw_52

codeblock_50 -> leaf_54
leaf_54  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function san(str)
   return gsub(str, \"'\", \"''\")
end

sql.san = san"]
// END RANK codeblock_50

section_9 -> { header_55 prose_56 prose_57 prose_58 prose_59 prose_60 codeblock_61}
{rank=same; header_55 prose_56 prose_57 prose_58 prose_59 prose_60 codeblock_61}

header_55 [label="2 : sql.format(str)"]

prose_56 [label="prose"]

prose_57 [label="prose"]

prose_58 [label="prose"]

prose_59 [label="prose"]

prose_60 [label="prose"]

codeblock_61 [label="code block 71-89"]


// END RANK section_9

header_55 -> leaf_62
leaf_62  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** sql.format(str)"]
// END RANK header_55

prose_56 -> { raw_63}
{rank=same; raw_63}

raw_63 [label="raw"]


// END RANK prose_56

raw_63 -> leaf_64
leaf_64  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The SQLite bindings I'm using support only an impoverished subset of the
SQLite binds.  In the meantime we're going to use format strings, which at
least typecheck parameters.
"]
// END RANK raw_63

prose_57 -> { prespace_65 bold_66 raw_67 prespace_68 literal_69 raw_70}
{rank=same; prespace_65 bold_66 raw_67 prespace_68 literal_69 raw_70}

prespace_65 [label="prespace"]

bold_66 [label="bold"]

raw_67 [label="raw"]

prespace_68 [label="prespace"]

literal_69 [label="literal"]

raw_70 [label="raw"]


// END RANK prose_57

prespace_65 -> leaf_71
leaf_71  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_65

bold_66 -> leaf_72
leaf_72  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Update"]
// END RANK bold_66

raw_67 -> leaf_73
leaf_73  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" I've added"]
// END RANK raw_67

prespace_68 -> leaf_74
leaf_74  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_68

literal_69 -> leaf_75
leaf_75  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bindkv"]
// END RANK literal_69

raw_70 -> leaf_76
leaf_76  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" which helps.
"]
// END RANK raw_70

prose_58 -> { raw_77 prespace_78 literal_79 raw_80 prespace_81 literal_82 raw_83 prespace_84 literal_85 raw_86 prespace_87 literal_88 raw_89}
{rank=same; raw_77 prespace_78 literal_79 raw_80 prespace_81 literal_82 raw_83 prespace_84 literal_85 raw_86 prespace_87 literal_88 raw_89}

raw_77 [label="raw"]

prespace_78 [label="prespace"]

literal_79 [label="literal"]

raw_80 [label="raw"]

prespace_81 [label="prespace"]

literal_82 [label="literal"]

raw_83 [label="raw"]

prespace_84 [label="prespace"]

literal_85 [label="literal"]

raw_86 [label="raw"]

prespace_87 [label="prespace"]

literal_88 [label="literal"]

raw_89 [label="raw"]


// END RANK prose_58

raw_77 -> leaf_90
leaf_90  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This"]
// END RANK raw_77

prespace_78 -> leaf_91
leaf_91  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_78

literal_79 -> leaf_92
leaf_92  [color=Gray,shape=rectangle,fontname=Inconsolata,label="format"]
// END RANK literal_79

raw_80 -> leaf_93
leaf_93  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" command sanitizes string inputs, and also replaces any"]
// END RANK raw_80

prespace_81 -> leaf_94
leaf_94  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_81

literal_82 -> leaf_95
leaf_95  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%s"]
// END RANK literal_82

raw_83 -> leaf_96
leaf_96  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
with"]
// END RANK raw_83

prespace_84 -> leaf_97
leaf_97  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_84

literal_85 -> leaf_98
leaf_98  [color=Gray,shape=rectangle,fontname=Inconsolata,label="'%s'"]
// END RANK literal_85

raw_86 -> leaf_99
leaf_99  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" without making any"]
// END RANK raw_86

prespace_87 -> leaf_100
leaf_100  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_87

literal_88 -> leaf_101
leaf_101  [color=Gray,shape=rectangle,fontname=Inconsolata,label="''%s''"]
// END RANK literal_88

raw_89 -> leaf_102
leaf_102  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", or more accurately trimming them
if it creates them.
"]
// END RANK raw_89

prose_59 -> { raw_103 prespace_104 literal_105 raw_106 prespace_107 literal_108 raw_109 prespace_110 literal_111 raw_112}
{rank=same; raw_103 prespace_104 literal_105 raw_106 prespace_107 literal_108 raw_109 prespace_110 literal_111 raw_112}

raw_103 [label="raw"]

prespace_104 [label="prespace"]

literal_105 [label="literal"]

raw_106 [label="raw"]

prespace_107 [label="prespace"]

literal_108 [label="literal"]

raw_109 [label="raw"]

prespace_110 [label="prespace"]

literal_111 [label="literal"]

raw_112 [label="raw"]


// END RANK prose_59

raw_103 -> leaf_113
leaf_113  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
So"]
// END RANK raw_103

prespace_104 -> leaf_114
leaf_114  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_104

literal_105 -> leaf_115
leaf_115  [color=Gray,shape=rectangle,fontname=Inconsolata,label="sql.format(\"it's %s!\", \"it's\")"]
// END RANK literal_105

raw_106 -> leaf_116
leaf_116  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_106

prespace_107 -> leaf_117
leaf_117  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_107

literal_108 -> leaf_118
leaf_118  [color=Gray,shape=rectangle,fontname=Inconsolata,label="sql.format(\"it's '%s'!\", \"it's\")"]
// END RANK literal_108

raw_109 -> leaf_119
leaf_119  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
both yield"]
// END RANK raw_109

prespace_110 -> leaf_120
leaf_120  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_110

literal_111 -> leaf_121
leaf_121  [color=Gray,shape=rectangle,fontname=Inconsolata,label="\"it's 'it''s\""]
// END RANK literal_111

raw_112 -> leaf_122
leaf_122  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  I figure any apostrophes in the format string
belong there.
"]
// END RANK raw_112

prose_60 -> { raw_123 prespace_124 literal_125 raw_126}
{rank=same; raw_123 prespace_124 literal_125 raw_126}

raw_123 [label="raw"]

prespace_124 [label="prespace"]

literal_125 [label="literal"]

raw_126 [label="raw"]


// END RANK prose_60

raw_123 -> leaf_127
leaf_127  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Failure to format returns"]
// END RANK raw_123

prespace_124 -> leaf_128
leaf_128  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_124

literal_125 -> leaf_129
leaf_129  [color=Gray,shape=rectangle,fontname=Inconsolata,label="false, err"]
// END RANK literal_125

raw_126 -> leaf_130
leaf_130  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_126

codeblock_61 -> leaf_131
leaf_131  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function sql.format(str, ...)
   local argv = {...}
   str = gsub(str, \"%%s\", \"'%%s'\"):gsub(\"''%%s''\", \"'%%s'\")
   for i, v in ipairs(argv) do
      if type(v) == \"string\" then
         argv[i] = san(v)
      else
         argv[i] = v
      end
   end
   local success, ret = pcall(format, str, unpack(argv))
   if success then
      return ret
   else
      return success, ret
   end
end"]
// END RANK codeblock_61

section_10 -> { header_132 prose_133 prose_134 codeblock_135}
{rank=same; header_132 prose_133 prose_134 codeblock_135}

header_132 [label="2 : sql.pexec(conn, stmt)"]

prose_133 [label="prose"]

prose_134 [label="prose"]

codeblock_135 [label="code block 97-108"]


// END RANK section_10

header_132 -> leaf_136
leaf_136  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** sql.pexec(conn, stmt)"]
// END RANK header_132

prose_133 -> { raw_137}
{rank=same; raw_137}

raw_137 [label="raw"]


// END RANK prose_133

raw_137 -> leaf_138
leaf_138  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Executes the statement on conn in protected mode.
"]
// END RANK raw_137

prose_134 -> { raw_139 prespace_140 literal_141 raw_142}
{rank=same; raw_139 prespace_140 literal_141 raw_142}

raw_139 [label="raw"]

prespace_140 [label="prespace"]

literal_141 [label="literal"]

raw_142 [label="raw"]


// END RANK prose_134

raw_139 -> leaf_143
leaf_143  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Unwraps and returns success, or"]
// END RANK raw_139

prespace_140 -> leaf_144
leaf_144  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_140

literal_141 -> leaf_145
leaf_145  [color=Gray,shape=rectangle,fontname=Inconsolata,label="false"]
// END RANK literal_141

raw_142 -> leaf_146
leaf_146  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and error.
"]
// END RANK raw_142

codeblock_135 -> leaf_147
leaf_147  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function sql.pexec(conn, stmt, col_str)
   -- conn:exec(stmt)
   col_str = col_str or \"hik\"
   local success, result, nrow = pcall(conn.exec, conn, stmt, col_str)
   if success then
      return result, nrow
   else
      return false, value
   end
end"]
// END RANK codeblock_135

section_11 -> { header_148 prose_149 prose_150 codeblock_151 section_152 section_153}
{rank=same; header_148 prose_149 prose_150 codeblock_151 section_152 section_153}

header_148 [label="2 : sql.lastid(conn)"]

prose_149 [label="prose"]

prose_150 [label="prose"]

codeblock_151 [label="code block 117-122"]

section_152 [label="section: 125-202"]

section_153 [label="section: 203-211"]


// END RANK section_11

header_148 -> leaf_154
leaf_154  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** sql.lastid(conn)"]
// END RANK header_148

prose_149 -> { raw_155 prespace_156 literal_157 raw_158}
{rank=same; raw_155 prespace_156 literal_157 raw_158}

raw_155 [label="raw"]

prespace_156 [label="prespace"]

literal_157 [label="literal"]

raw_158 [label="raw"]


// END RANK prose_149

raw_155 -> leaf_159
leaf_159  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This could be improved by natively handling uint64_t"]
// END RANK raw_155

prespace_156 -> leaf_160
leaf_160  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_156

literal_157 -> leaf_161
leaf_161  [color=Gray,shape=rectangle,fontname=Inconsolata,label="cdata"]
// END RANK literal_157

raw_158 -> leaf_162
leaf_162  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_158

prose_150 -> { raw_163}
{rank=same; raw_163}

raw_163 [label="raw"]


// END RANK prose_150

raw_163 -> leaf_164
leaf_164  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Y'know, if we ever keep more than 53 bits width of rows in uhhhhh SQLite.
"]
// END RANK raw_163

codeblock_151 -> leaf_165
leaf_165  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function sql.lastRowId(conn)
   local result = conn:rowexec \"SELECT CAST(last_insert_rowid() AS REAL)\"
   return result
end"]
// END RANK codeblock_151

section_152 -> { header_166 prose_167 prose_168 prose_169 prose_170 codeblock_171 prose_172 codeblock_173 codeblock_174}
{rank=same; header_166 prose_167 prose_168 prose_169 prose_170 codeblock_171 prose_172 codeblock_173 codeblock_174}

header_166 [label="4 : conn.pragma.etc(bool)"]

prose_167 [label="prose"]

prose_168 [label="prose"]

prose_169 [label="prose"]

prose_170 [label="prose"]

codeblock_171 [label="code block 136-177"]

prose_172 [label="prose"]

codeblock_173 [label="code block 182-195"]

codeblock_174 [label="code block 198-200"]


// END RANK section_152

header_166 -> leaf_175
leaf_175  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** conn.pragma.etc(bool)"]
// END RANK header_166

prose_167 -> { raw_176}
{rank=same; raw_176}

raw_176 [label="raw"]


// END RANK prose_167

raw_176 -> leaf_177
leaf_177  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

A convenience wrapper over the SQL pragma commands.
"]
// END RANK raw_176

prose_168 -> { raw_178 prespace_179 literal_180 raw_181}
{rank=same; raw_178 prespace_179 literal_180 raw_181}

raw_178 [label="raw"]

prespace_179 [label="prespace"]

literal_180 [label="literal"]

raw_181 [label="raw"]


// END RANK prose_168

raw_178 -> leaf_182
leaf_182  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We can use the same interface for setting Lua-specific values, the one I need
is"]
// END RANK raw_178

prespace_179 -> leaf_183
leaf_183  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_179

literal_180 -> leaf_184
leaf_184  [color=Gray,shape=rectangle,fontname=Inconsolata,label="conn.pragma.nulls_are_nil(false)"]
// END RANK literal_180

raw_181 -> leaf_185
leaf_185  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_181

prose_169 -> { raw_186}
{rank=same; raw_186}

raw_186 [label="raw"]


// END RANK prose_169

raw_186 -> leaf_187
leaf_187  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This is a subtle bit of function composition with a nice result.
"]
// END RANK raw_186

prose_170 -> { raw_188 prespace_189 literal_190 raw_191 prespace_192 literal_193 raw_194 prespace_195 literal_196 raw_197}
{rank=same; raw_188 prespace_189 literal_190 raw_191 prespace_192 literal_193 raw_194 prespace_195 literal_196 raw_197}

raw_188 [label="raw"]

prespace_189 [label="prespace"]

literal_190 [label="literal"]

raw_191 [label="raw"]

prespace_192 [label="prespace"]

literal_193 [label="literal"]

raw_194 [label="raw"]

prespace_195 [label="prespace"]

literal_196 [label="literal"]

raw_197 [label="raw"]


// END RANK prose_170

raw_188 -> leaf_198
leaf_198  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I might be able to use this technique in"]
// END RANK raw_188

prespace_189 -> leaf_199
leaf_199  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_189

literal_190 -> leaf_200
leaf_200  [color=Gray,shape=rectangle,fontname=Inconsolata,label="check"]
// END RANK literal_190

raw_191 -> leaf_201
leaf_201  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" to favor"]
// END RANK raw_191

prespace_192 -> leaf_202
leaf_202  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_192

literal_193 -> leaf_203
leaf_203  [color=Gray,shape=rectangle,fontname=Inconsolata,label="."]
// END RANK literal_193

raw_194 -> leaf_204
leaf_204  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" over"]
// END RANK raw_194

prespace_195 -> leaf_205
leaf_205  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_195

literal_196 -> leaf_206
leaf_206  [color=Gray,shape=rectangle,fontname=Inconsolata,label=":"]
// END RANK literal_196

raw_197 -> leaf_207
leaf_207  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_197

codeblock_171 -> leaf_208
leaf_208  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local pragma_pre = \"PRAGMA \"
local c = require \"color\"

-- Builds and returns a pragma string
local function __pragma(prag, value)
   local val
   if value == nil then
      return pragma_pre .. prag .. \";\"
   end
   if type(value) == \"boolean\" then
      val = value and \" = 1\" or \" = 0\"
   elseif type(value) == \"string\" then
      val = \"('\" .. san(value) .. \"')\"
   elseif type(value) == \"number\" then
      val = \" = \" .. tostring(value)
   else
      error(false, \"value of type \" .. type(value) .. \", \" .. c.ts(value))
   end
   return pragma_pre .. prag .. val .. \";\"
end

-- Sets a pragma and checks its new value
local function _prag_set(conn, prag)
   return function(value)
      local prag_str = __pragma(prag, value)
      conn:exec(prag_str)
      -- check for a boolean
      -- #todo make sure this gives sane results for a method-call pragma
      local answer = conn:exec(pragma_pre .. prag .. \";\")
      if answer[1] and answer[1][1] then
         if answer[1][1] == 1 then
            return true
         elseif answer[1][1] == 0 then
            return false
         else
            return nil
         end
      end
   end
end"]
// END RANK codeblock_171

prose_172 -> { raw_209 prespace_210 literal_211 raw_212}
{rank=same; raw_209 prespace_210 literal_211 raw_212}

raw_209 [label="raw"]

prespace_210 [label="prespace"]

literal_211 [label="literal"]

raw_212 [label="raw"]


// END RANK prose_172

raw_209 -> leaf_213
leaf_213  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This is the fun part: we swap the old metatable for a function which closes
over our"]
// END RANK raw_209

prespace_210 -> leaf_214
leaf_214  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_210

literal_211 -> leaf_215
leaf_215  [color=Gray,shape=rectangle,fontname=Inconsolata,label="conn"]
// END RANK literal_211

raw_212 -> leaf_216
leaf_216  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", passing it along to the pragma.
"]
// END RANK raw_212

codeblock_173 -> leaf_217
leaf_217  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function new_conn_index(conn, key)
   local function _prag_index(f, prag)
      return _prag_set(conn, prag)
   end
   if key == \"pragma\" then
      return setmetatable({}, {__index = _prag_index})
   else
      return conn_mt[key]
   end
end

conn_mt.__index = new_conn_index"]
// END RANK codeblock_173

codeblock_174 -> leaf_218
leaf_218  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return sql"]
// END RANK codeblock_174

section_153 -> { header_219 prose_220 section_221 section_222}
{rank=same; header_219 prose_220 section_221 section_222}

header_219 [label="3 : Stretch goals"]

prose_220 [label="prose"]

section_221 [label="section: 207-211"]

section_222 [label="section: 212-231"]


// END RANK section_153

header_219 -> leaf_223
leaf_223  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Stretch goals"]
// END RANK header_219

prose_220 -> { raw_224}
{rank=same; raw_224}

raw_224 [label="raw"]


// END RANK prose_220

raw_224 -> leaf_225
leaf_225  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


"]
// END RANK raw_224

section_221 -> { header_226 prose_227}
{rank=same; header_226 prose_227}

header_226 [label="4 : sql.NULL"]

prose_227 [label="prose"]


// END RANK section_221

header_226 -> leaf_228
leaf_228  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** sql.NULL"]
// END RANK header_226

prose_227 -> { raw_229}
{rank=same; raw_229}

raw_229 [label="raw"]


// END RANK prose_227

raw_229 -> leaf_230
leaf_230  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This isn't much of a stretch, just a truthy table that represents nullity.

"]
// END RANK raw_229

section_222 -> { header_231 prose_232 prose_233}
{rank=same; header_231 prose_232 prose_233}

header_231 [label="4 : Dereferencing pointers in Luaspace"]

prose_232 [label="prose"]

prose_233 [label="prose"]


// END RANK section_222

header_231 -> leaf_234
leaf_234  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Dereferencing pointers in Luaspace"]
// END RANK header_231

prose_232 -> { raw_235 prespace_236 literal_237 raw_238 prespace_239 literal_240 raw_241}
{rank=same; raw_235 prespace_236 literal_237 raw_238 prespace_239 literal_240 raw_241}

raw_235 [label="raw"]

prespace_236 [label="prespace"]

literal_237 [label="literal"]

raw_238 [label="raw"]

prespace_239 [label="prespace"]

literal_240 [label="literal"]

raw_241 [label="raw"]


// END RANK prose_232

raw_235 -> leaf_242
leaf_242  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

It would be nice to write a small C wrapper on"]
// END RANK raw_235

prespace_236 -> leaf_243
leaf_243  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_236

literal_237 -> leaf_244
leaf_244  [color=Gray,shape=rectangle,fontname=Inconsolata,label="sqlite3_sql()"]
// END RANK literal_237

raw_238 -> leaf_245
leaf_245  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" that gets the
address from a statement pointer and returns the resulting string.  The whole
dataflow layer of"]
// END RANK raw_238

prespace_239 -> leaf_246
leaf_246  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_239

literal_240 -> leaf_247
leaf_247  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bridge"]
// END RANK literal_240

raw_241 -> leaf_248
leaf_248  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is predicated on abstracting over some pretty
gnarly SQL introspection.
"]
// END RANK raw_241

prose_233 -> { raw_249}
{rank=same; raw_249}

raw_249 [label="raw"]


// END RANK prose_233

raw_249 -> leaf_250
leaf_250  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The easy way is just to denormalize the string onto a member of the stmt
table, but that violates single-source-of-truth, and handling pointers across
the abstraction barrier is something I'm going to need to get used to.









"]
// END RANK raw_249


}
