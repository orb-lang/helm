digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 34"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-13"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 codeblock_5 section_6}
{rank=same; header_2 prose_3 prose_4 codeblock_5 section_6}

header_2 [label="1 : SQLayer"]

prose_3 [label="prose"]

prose_4 [label="prose"]

codeblock_5 [label="code block 8-11"]

section_6 [label="section: 14-34"]


// END RANK section_1

header_2 -> leaf_7
leaf_7  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* SQLayer"]
// END RANK header_2

prose_3 -> { raw_8}
{rank=same; raw_8}

raw_8 [label="raw"]


// END RANK prose_3

raw_8 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This will be in pylon eventually.
"]
// END RANK raw_8

prose_4 -> { raw_10 prespace_11 literal_12 raw_13}
{rank=same; raw_10 prespace_11 literal_12 raw_13}

raw_10 [label="raw"]

prespace_11 [label="prespace"]

literal_12 [label="literal"]

raw_13 [label="raw"]


// END RANK prose_4

raw_10 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Enhances the existing SQLite bindings, which in turn will be turned into a
statically-linked part of"]
// END RANK raw_10

prespace_11 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_11

literal_12 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label="pylon"]
// END RANK literal_12

raw_13 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_13

codeblock_5 -> leaf_18
leaf_18  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local sql = require \"sqlite\"
local pcall = assert (pcall)"]
// END RANK codeblock_5

section_6 -> { header_19 prose_20 prose_21 codeblock_22 codeblock_23}
{rank=same; header_19 prose_20 prose_21 codeblock_22 codeblock_23}

header_19 [label="2 : sql.pexec(conn, stmt)"]

prose_20 [label="prose"]

prose_21 [label="prose"]

codeblock_22 [label="code block 20-30"]

codeblock_23 [label="code block 32-34"]


// END RANK section_6

header_19 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** sql.pexec(conn, stmt)"]
// END RANK header_19

prose_20 -> { raw_25}
{rank=same; raw_25}

raw_25 [label="raw"]


// END RANK prose_20

raw_25 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Executes the statement on conn in protected mode.
"]
// END RANK raw_25

prose_21 -> { raw_27 prespace_28 literal_29 raw_30}
{rank=same; raw_27 prespace_28 literal_29 raw_30}

raw_27 [label="raw"]

prespace_28 [label="prespace"]

literal_29 [label="literal"]

raw_30 [label="raw"]


// END RANK prose_21

raw_27 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Unwraps and returns success, or"]
// END RANK raw_27

prespace_28 -> leaf_32
leaf_32  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_28

literal_29 -> leaf_33
leaf_33  [color=Gray,shape=rectangle,fontname=Inconsolata,label="false"]
// END RANK literal_29

raw_30 -> leaf_34
leaf_34  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and error.
"]
// END RANK raw_30

codeblock_22 -> leaf_35
leaf_35  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function sql.pexec(conn, stmt)
   -- conn:exec(stmt)
   local success, value = pcall(conn.exec, conn, stmt)
   if success then
      return value
   else
      return false, value
   end
end"]
// END RANK codeblock_22

codeblock_23 -> leaf_36
leaf_36  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return sql"]
// END RANK codeblock_23


}
