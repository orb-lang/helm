digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 206"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-71"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 prose_5 prose_6 section_7 section_8}
{rank=same; header_2 prose_3 prose_4 prose_5 prose_6 section_7 section_8}

header_2 [label="1 : Rainbuf"]

prose_3 [label="prose"]

prose_4 [label="prose"]

prose_5 [label="prose"]

prose_6 [label="prose"]

section_7 [label="section: 15-65"]

section_8 [label="section: 72-179"]


// END RANK section_1

header_2 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Rainbuf"]
// END RANK header_2

prose_3 -> { raw_10}
{rank=same; raw_10}

raw_10 [label="raw"]


// END RANK prose_3

raw_10 -> leaf_11
leaf_11  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


This class encapsulates data to be written to the screen.
"]
// END RANK raw_10

prose_4 -> { raw_12 prespace_13 literal_14 raw_15 prespace_16 literal_17 raw_18}
{rank=same; raw_12 prespace_13 literal_14 raw_15 prespace_16 literal_17 raw_18}

raw_12 [label="raw"]

prespace_13 [label="prespace"]

literal_14 [label="literal"]

raw_15 [label="raw"]

prespace_16 [label="prespace"]

literal_17 [label="literal"]

raw_18 [label="raw"]


// END RANK prose_4

raw_12 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
As it stands, we have two special cases, the"]
// END RANK raw_12

prespace_13 -> leaf_20
leaf_20  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_13

literal_14 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label="txtbuf"]
// END RANK literal_14

raw_15 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_15

prespace_16 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_16

literal_17 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label="results"]
// END RANK literal_17

raw_18 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_18

prose_5 -> { raw_26 prespace_27 literal_28 raw_29}
{rank=same; raw_26 prespace_27 literal_28 raw_29}

raw_26 [label="raw"]

prespace_27 [label="prespace"]

literal_28 [label="literal"]

raw_29 [label="raw"]


// END RANK prose_5

raw_26 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We need to extend the functionality of"]
// END RANK raw_26

prespace_27 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_27

literal_28 -> leaf_32
leaf_32  [color=Gray,shape=rectangle,fontname=Inconsolata,label="results"]
// END RANK literal_28

raw_29 -> leaf_33
leaf_33  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", so we're building this as a
root metatable for those methods.
"]
// END RANK raw_29

prose_6 -> { raw_34 prespace_35 literal_36 raw_37}
{rank=same; raw_34 prespace_35 literal_36 raw_37}

raw_34 [label="raw"]

prespace_35 [label="prespace"]

literal_36 [label="literal"]

raw_37 [label="raw"]


// END RANK prose_6

raw_34 -> leaf_38
leaf_38  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Plausibly, we can make this a 'mixin' for"]
// END RANK raw_34

prespace_35 -> leaf_39
leaf_39  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_35

literal_36 -> leaf_40
leaf_40  [color=Gray,shape=rectangle,fontname=Inconsolata,label="txtbuf"]
// END RANK literal_36

raw_37 -> leaf_41
leaf_41  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" as well, since they have
the additional complexity of receiving input.

"]
// END RANK raw_37

section_7 -> { header_42 prose_43 prose_44 prose_45 prose_46 prose_47 prose_48 prose_49 prose_50 prose_51 prose_52 prose_53 section_54 section_55}
{rank=same; header_42 prose_43 prose_44 prose_45 prose_46 prose_47 prose_48 prose_49 prose_50 prose_51 prose_52 prose_53 section_54 section_55}

header_42 [label="2 : Design"]

prose_43 [label="prose"]

prose_44 [label="prose"]

prose_45 [label="prose"]

prose_46 [label="prose"]

prose_47 [label="prose"]

prose_48 [label="prose"]

prose_49 [label="prose"]

prose_50 [label="prose"]

prose_51 [label="prose"]

prose_52 [label="prose"]

prose_53 [label="prose"]

section_54 [label="section: 58-65"]

section_55 [label="section: 66-71"]


// END RANK section_7

header_42 -> leaf_56
leaf_56  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Design"]
// END RANK header_42

prose_43 -> { raw_57}
{rank=same; raw_57}

raw_57 [label="raw"]


// END RANK prose_43

raw_57 -> leaf_58
leaf_58  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

We're aiming for complex interactivity with data.
"]
// END RANK raw_57

prose_44 -> { raw_59}
{rank=same; raw_59}

raw_59 [label="raw"]


// END RANK prose_44

raw_59 -> leaf_60
leaf_60  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Our current renderer is crude: it converts the entire table into a string
representation, including newlines, and returns it.
"]
// END RANK raw_59

prose_45 -> { raw_61 prespace_62 literal_63 raw_64 prespace_65 literal_66 raw_67}
{rank=same; raw_61 prespace_62 literal_63 raw_64 prespace_65 literal_66 raw_67}

raw_61 [label="raw"]

prespace_62 [label="prespace"]

literal_63 [label="literal"]

raw_64 [label="raw"]

prespace_65 [label="prespace"]

literal_66 [label="literal"]

raw_67 [label="raw"]


// END RANK prose_45

raw_61 -> leaf_68
leaf_68  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
One sophistication we've added is a"]
// END RANK raw_61

prespace_62 -> leaf_69
leaf_69  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_62

literal_63 -> leaf_70
leaf_70  [color=Gray,shape=rectangle,fontname=Inconsolata,label="__repr"]
// END RANK literal_63

raw_64 -> leaf_71
leaf_71  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" metamethod, which overrides the
default use of"]
// END RANK raw_64

prespace_65 -> leaf_72
leaf_72  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_65

literal_66 -> leaf_73
leaf_73  [color=Gray,shape=rectangle,fontname=Inconsolata,label="ts()"]
// END RANK literal_66

raw_67 -> leaf_74
leaf_74  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  It still returns a dumb block of strings, using
concatenation at the moment of combination.  This is inefficient and also
impedes more intelligent rendering.  But it's a start.
"]
// END RANK raw_67

prose_46 -> { prespace_75 literal_76 raw_77 prespace_78 literal_79 raw_80}
{rank=same; prespace_75 literal_76 raw_77 prespace_78 literal_79 raw_80}

prespace_75 [label="prespace"]

literal_76 [label="literal"]

raw_77 [label="raw"]

prespace_78 [label="prespace"]

literal_79 [label="literal"]

raw_80 [label="raw"]


// END RANK prose_46

prespace_75 -> leaf_81
leaf_81  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_75

literal_76 -> leaf_82
leaf_82  [color=Gray,shape=rectangle,fontname=Inconsolata,label="rainbuf"]
// END RANK literal_76

raw_77 -> leaf_83
leaf_83  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" needs to have a cell-by-cell understanding of what's rendered and
what's not, must calculate a printable representation given the constraints of
the"]
// END RANK raw_77

prespace_78 -> leaf_84
leaf_84  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_78

literal_79 -> leaf_85
leaf_85  [color=Gray,shape=rectangle,fontname=Inconsolata,label="zone"]
// END RANK literal_79

raw_80 -> leaf_86
leaf_86  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", and, eventually, will respond to mouse and cursor events.
"]
// END RANK raw_80

prose_47 -> { raw_87}
{rank=same; raw_87}

raw_87 [label="raw"]


// END RANK prose_47

raw_87 -> leaf_88
leaf_88  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Doing this correctly is extraordinarily complex but we can fake it adequately
as long as the engineering is correct.  Everything we're currently using is
ASCII-range or emojis and both of those are predictable, narrow/ordinary and
wide respectively.
"]
// END RANK raw_87

prose_48 -> { raw_89}
{rank=same; raw_89}

raw_89 [label="raw"]


// END RANK prose_48

raw_89 -> leaf_90
leaf_90  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
There are libraries/databases which purport to answer this question.  We plan
to link one of those in.
"]
// END RANK raw_89

prose_49 -> { raw_91 prespace_92 literal_93 raw_94 prespace_95 literal_96 raw_97 prespace_98 literal_99 raw_100 prespace_101 literal_102 raw_103 prespace_104 literal_105 raw_106}
{rank=same; raw_91 prespace_92 literal_93 raw_94 prespace_95 literal_96 raw_97 prespace_98 literal_99 raw_100 prespace_101 literal_102 raw_103 prespace_104 literal_105 raw_106}

raw_91 [label="raw"]

prespace_92 [label="prespace"]

literal_93 [label="literal"]

raw_94 [label="raw"]

prespace_95 [label="prespace"]

literal_96 [label="literal"]

raw_97 [label="raw"]

prespace_98 [label="prespace"]

literal_99 [label="literal"]

raw_100 [label="raw"]

prespace_101 [label="prespace"]

literal_102 [label="literal"]

raw_103 [label="raw"]

prespace_104 [label="prespace"]

literal_105 [label="literal"]

raw_106 [label="raw"]


// END RANK prose_49

raw_91 -> leaf_107
leaf_107  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Results, as we currently manifest them, use an array for the raw objects and"]
// END RANK raw_91

prespace_92 -> leaf_108
leaf_108  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_92

literal_93 -> leaf_109
leaf_109  [color=Gray,shape=rectangle,fontname=Inconsolata,label="n"]
// END RANK literal_93

raw_94 -> leaf_110
leaf_110  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" rather than"]
// END RANK raw_94

prespace_95 -> leaf_111
leaf_111  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_95

literal_96 -> leaf_112
leaf_112  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#res"]
// END RANK literal_96

raw_97 -> leaf_113
leaf_113  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" to represent the length.  That's a remnant of the
original repl from"]
// END RANK raw_97

prespace_98 -> leaf_114
leaf_114  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_98

literal_99 -> leaf_115
leaf_115  [color=Gray,shape=rectangle,fontname=Inconsolata,label="luv"]
// END RANK literal_99

raw_100 -> leaf_116
leaf_116  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  The"]
// END RANK raw_100

prespace_101 -> leaf_117
leaf_117  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_101

literal_102 -> leaf_118
leaf_118  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".n"]
// END RANK literal_102

raw_103 -> leaf_119
leaf_119  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is neceessary because"]
// END RANK raw_103

prespace_104 -> leaf_120
leaf_120  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_104

literal_105 -> leaf_121
leaf_121  [color=Gray,shape=rectangle,fontname=Inconsolata,label="nil"]
// END RANK literal_105

raw_106 -> leaf_122
leaf_122  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" can be a
positional result.
"]
// END RANK raw_106

prose_50 -> { raw_123 prespace_124 literal_125 raw_126 prespace_127 literal_128 raw_129 prespace_130 literal_131 raw_132}
{rank=same; raw_123 prespace_124 literal_125 raw_126 prespace_127 literal_128 raw_129 prespace_130 literal_131 raw_132}

raw_123 [label="raw"]

prespace_124 [label="prespace"]

literal_125 [label="literal"]

raw_126 [label="raw"]

prespace_127 [label="prespace"]

literal_128 [label="literal"]

raw_129 [label="raw"]

prespace_130 [label="prespace"]

literal_131 [label="literal"]

raw_132 [label="raw"]


// END RANK prose_50

raw_123 -> leaf_133
leaf_133  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A"]
// END RANK raw_123

prespace_124 -> leaf_134
leaf_134  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_124

literal_125 -> leaf_135
leaf_135  [color=Gray,shape=rectangle,fontname=Inconsolata,label="txtbuf"]
// END RANK literal_125

raw_126 -> leaf_136
leaf_136  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" keeps its contents in a"]
// END RANK raw_126

prespace_127 -> leaf_137
leaf_137  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_127

literal_128 -> leaf_138
leaf_138  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".lines"]
// END RANK literal_128

raw_129 -> leaf_139
leaf_139  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" table, and so we can reuse this
field for cached textual representations.  All internals should support both
strings and array-of-strings as possible values of the"]
// END RANK raw_129

prespace_130 -> leaf_140
leaf_140  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_130

literal_131 -> leaf_141
leaf_141  [color=Gray,shape=rectangle,fontname=Inconsolata,label="lines"]
// END RANK literal_131

raw_132 -> leaf_142
leaf_142  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" array.
"]
// END RANK raw_132

prose_51 -> { raw_143 prespace_144 literal_145 raw_146}
{rank=same; raw_143 prespace_144 literal_145 raw_146}

raw_143 [label="raw"]

prespace_144 [label="prespace"]

literal_145 [label="literal"]

raw_146 [label="raw"]


// END RANK prose_51

raw_143 -> leaf_147
leaf_147  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We also need a"]
// END RANK raw_143

prespace_144 -> leaf_148
leaf_148  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_144

literal_145 -> leaf_149
leaf_149  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".wids"]
// END RANK literal_145

raw_146 -> leaf_150
leaf_150  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" array of arrays of numbers and should probably hide
this behind methods so as to fake it when we just have strings.
"]
// END RANK raw_146

prose_52 -> { raw_151 prespace_152 literal_153 raw_154 prespace_155 literal_156 raw_157}
{rank=same; raw_151 prespace_152 literal_153 raw_154 prespace_155 literal_156 raw_157}

raw_151 [label="raw"]

prespace_152 [label="prespace"]

literal_153 [label="literal"]

raw_154 [label="raw"]

prespace_155 [label="prespace"]

literal_156 [label="literal"]

raw_157 [label="raw"]


// END RANK prose_52

raw_151 -> leaf_158
leaf_158  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Later, we add a"]
// END RANK raw_151

prespace_152 -> leaf_159
leaf_159  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_152

literal_153 -> leaf_160
leaf_160  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".targets"]
// END RANK literal_153

raw_154 -> leaf_161
leaf_161  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", this is a dense array for the number of lines,
each with a sparse array containing handlers for mouse events.  If a mouse
event doesn't hit a"]
// END RANK raw_154

prespace_155 -> leaf_162
leaf_162  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_155

literal_156 -> leaf_163
leaf_163  [color=Gray,shape=rectangle,fontname=Inconsolata,label="target"]
// END RANK literal_156

raw_157 -> leaf_164
leaf_164  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" then the default handler is engaged.
"]
// END RANK raw_157

prose_53 -> { raw_165 prespace_166 literal_167 raw_168 prespace_169 literal_170 raw_171 prespace_172 literal_173 raw_174}
{rank=same; raw_165 prespace_166 literal_167 raw_168 prespace_169 literal_170 raw_171 prespace_172 literal_173 raw_174}

raw_165 [label="raw"]

prespace_166 [label="prespace"]

literal_167 [label="literal"]

raw_168 [label="raw"]

prespace_169 [label="prespace"]

literal_170 [label="literal"]

raw_171 [label="raw"]

prespace_172 [label="prespace"]

literal_173 [label="literal"]

raw_174 [label="raw"]


// END RANK prose_53

raw_165 -> leaf_175
leaf_175  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We also have"]
// END RANK raw_165

prespace_166 -> leaf_176
leaf_176  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_166

literal_167 -> leaf_177
leaf_177  [color=Gray,shape=rectangle,fontname=Inconsolata,label="offset"]
// END RANK literal_167

raw_168 -> leaf_178
leaf_178  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", a number, and"]
// END RANK raw_168

prespace_169 -> leaf_179
leaf_179  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_169

literal_170 -> leaf_180
leaf_180  [color=Gray,shape=rectangle,fontname=Inconsolata,label="more"]
// END RANK literal_170

raw_171 -> leaf_181
leaf_181  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", which is"]
// END RANK raw_171

prespace_172 -> leaf_182
leaf_182  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_172

literal_173 -> leaf_183
leaf_183  [color=Gray,shape=rectangle,fontname=Inconsolata,label="true"]
// END RANK literal_173

raw_174 -> leaf_184
leaf_184  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" if the buffer
continues past the edge of the zone and otherwise falsy.
"]
// END RANK raw_174

section_54 -> { header_185 prose_186 codeblock_187}
{rank=same; header_185 prose_186 codeblock_187}

header_185 [label="4 : includes"]

prose_186 [label="prose"]

codeblock_187 [label="code block 60-63"]


// END RANK section_54

header_185 -> leaf_188
leaf_188  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** includes"]
// END RANK header_185

prose_186 -> { raw_189}
{rank=same; raw_189}

raw_189 [label="raw"]


// END RANK prose_186

raw_189 -> leaf_190
leaf_190  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_189

codeblock_187 -> leaf_191
leaf_191  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local repr = require \"repr\"
local ts, lineGen = repr.ts, repr.lineGen"]
// END RANK codeblock_187

section_55 -> { header_192 prose_193 codeblock_194}
{rank=same; header_192 prose_193 codeblock_194}

header_192 [label="4 : Rainbuf metatable"]

prose_193 [label="prose"]

codeblock_194 [label="code block 68-70"]


// END RANK section_55

header_192 -> leaf_195
leaf_195  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Rainbuf metatable"]
// END RANK header_192

prose_193 -> { raw_196}
{rank=same; raw_196}

raw_196 [label="raw"]


// END RANK prose_193

raw_196 -> leaf_197
leaf_197  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_196

codeblock_194 -> leaf_198
leaf_198  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Rainbuf = meta {}"]
// END RANK codeblock_194

section_8 -> { header_199 prose_200 section_201 section_202}
{rank=same; header_199 prose_200 section_201 section_202}

header_199 [label="2 : Methods"]

prose_200 [label="prose"]

section_201 [label="section: 75-179"]

section_202 [label="section: 180-206"]


// END RANK section_8

header_199 -> leaf_203
leaf_203  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Methods"]
// END RANK header_199

prose_200 -> { raw_204}
{rank=same; raw_204}

raw_204 [label="raw"]


// END RANK prose_200

raw_204 -> leaf_205
leaf_205  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

"]
// END RANK raw_204

section_201 -> { header_206 prose_207 prose_208 prose_209 prose_210 prose_211 prose_212 codeblock_213}
{rank=same; header_206 prose_207 prose_208 prose_209 prose_210 prose_211 prose_212 codeblock_213}

header_206 [label="3 : Rainbuf:lineGen(rows, offset)"]

prose_207 [label="prose"]

prose_208 [label="prose"]

prose_209 [label="prose"]

prose_210 [label="prose"]

prose_211 [label="prose"]

prose_212 [label="prose"]

codeblock_213 [label="code block 96-177"]


// END RANK section_201

header_206 -> leaf_214
leaf_214  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Rainbuf:lineGen(rows, offset)"]
// END RANK header_206

prose_207 -> { raw_215 prespace_216 literal_217 raw_218}
{rank=same; raw_215 prespace_216 literal_217 raw_218}

raw_215 [label="raw"]

prespace_216 [label="prespace"]

literal_217 [label="literal"]

raw_218 [label="raw"]


// END RANK prose_207

raw_215 -> leaf_219
leaf_219  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This is a generator which yields"]
// END RANK raw_215

prespace_216 -> leaf_220
leaf_220  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_216

literal_217 -> leaf_221
leaf_221  [color=Gray,shape=rectangle,fontname=Inconsolata,label="rows"]
// END RANK literal_217

raw_218 -> leaf_222
leaf_222  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" number of lines.
"]
// END RANK raw_218

prose_208 -> { raw_223 prespace_224 literal_225 raw_226 prespace_227 literal_228 raw_229 prespace_230 literal_231 raw_232}
{rank=same; raw_223 prespace_224 literal_225 raw_226 prespace_227 literal_228 raw_229 prespace_230 literal_231 raw_232}

raw_223 [label="raw"]

prespace_224 [label="prespace"]

literal_225 [label="literal"]

raw_226 [label="raw"]

prespace_227 [label="prespace"]

literal_228 [label="literal"]

raw_229 [label="raw"]

prespace_230 [label="prespace"]

literal_231 [label="literal"]

raw_232 [label="raw"]


// END RANK prose_208

raw_223 -> leaf_233
leaf_233  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I need to do some empirical profiling as to whether, given"]
// END RANK raw_223

prespace_224 -> leaf_234
leaf_234  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_224

literal_225 -> leaf_235
leaf_235  [color=Gray,shape=rectangle,fontname=Inconsolata,label="luv"]
// END RANK literal_225

raw_226 -> leaf_236
leaf_236  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", we should
iterate over an array of tokens and"]
// END RANK raw_226

prespace_227 -> leaf_237
leaf_237  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_227

literal_228 -> leaf_238
leaf_238  [color=Gray,shape=rectangle,fontname=Inconsolata,label="write"]
// END RANK literal_228

raw_229 -> leaf_239
leaf_239  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" them individually, or use"]
// END RANK raw_229

prespace_230 -> leaf_240
leaf_240  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_230

literal_231 -> leaf_241
leaf_241  [color=Gray,shape=rectangle,fontname=Inconsolata,label="table.concat"]
// END RANK literal_231

raw_232 -> leaf_242
leaf_242  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" to efficiently stringify them first.
"]
// END RANK raw_232

prose_209 -> { raw_243 prespace_244 literal_245 raw_246}
{rank=same; raw_243 prespace_244 literal_245 raw_246}

raw_243 [label="raw"]

prespace_244 [label="prespace"]

literal_245 [label="literal"]

raw_246 [label="raw"]


// END RANK prose_209

raw_243 -> leaf_247
leaf_247  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It's non-blocking, but it is a syscall, and those are expensive. I suspect
more expensive than"]
// END RANK raw_243

prespace_244 -> leaf_248
leaf_248  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_244

literal_245 -> leaf_249
leaf_249  [color=Gray,shape=rectangle,fontname=Inconsolata,label="concat"]
// END RANK literal_245

raw_246 -> leaf_250
leaf_250  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" which is efficient C.
"]
// END RANK raw_246

prose_210 -> { raw_251 prespace_252 literal_253 raw_254}
{rank=same; raw_251 prespace_252 literal_253 raw_254}

raw_251 [label="raw"]

prespace_252 [label="prespace"]

literal_253 [label="literal"]

raw_254 [label="raw"]


// END RANK prose_210

raw_251 -> leaf_255
leaf_255  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Given this more likely scenario,"]
// END RANK raw_251

prespace_252 -> leaf_256
leaf_256  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_252

literal_253 -> leaf_257
leaf_257  [color=Gray,shape=rectangle,fontname=Inconsolata,label="lines"]
// END RANK literal_253

raw_254 -> leaf_258
leaf_258  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" should emit pure strings.
"]
// END RANK raw_254

prose_211 -> { raw_259 prespace_260 literal_261 raw_262 prespace_263 literal_264 raw_265}
{rank=same; raw_259 prespace_260 literal_261 raw_262 prespace_263 literal_264 raw_265}

raw_259 [label="raw"]

prespace_260 [label="prespace"]

literal_261 [label="literal"]

raw_262 [label="raw"]

prespace_263 [label="prespace"]

literal_264 [label="literal"]

raw_265 [label="raw"]


// END RANK prose_211

raw_259 -> leaf_266
leaf_266  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The default method, provided here, can be overridden for other data types.
I intend to substitute a"]
// END RANK raw_259

prespace_260 -> leaf_267
leaf_267  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_260

literal_261 -> leaf_268
leaf_268  [color=Gray,shape=rectangle,fontname=Inconsolata,label="lines"]
// END RANK literal_261

raw_262 -> leaf_269
leaf_269  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" method instead of the use of"]
// END RANK raw_262

prespace_263 -> leaf_270
leaf_270  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_263

literal_264 -> leaf_271
leaf_271  [color=Gray,shape=rectangle,fontname=Inconsolata,label="__repr"]
// END RANK literal_264

raw_265 -> leaf_272
leaf_272  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" at
some point in the relatively near future, for search results and the like.
"]
// END RANK raw_265

prose_212 -> { raw_273}
{rank=same; raw_273}

raw_273 [label="raw"]


// END RANK prose_212

raw_273 -> leaf_274
leaf_274  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We're going to do this the easy way, and generate a full representation,
yielding only afterward.  But the interface is designed so that we can do this
lazily once we're motivated to do so.
"]
// END RANK raw_273

codeblock_213 -> leaf_275
leaf_275  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Rainbuf.linegen(rainbuf, rows, cols)
   offset = rainbuf.offset or 0
   local reprs = {}
   if not rainbuf.lines then
      for i = 1, rainbuf.n do
         if rainbuf.frozen then
            reprs[i] = rainbuf[i]
         else
            reprs[i] = lineGen(rainbuf[i], nil, nil, cols)
            if type(reprs[i]) == \"string\" then
               reprs[i] = string.lines(reprs[i])
            end
         end
      end
   end
   -- state for iterator
   local r_num = 1
   local cursor = 1 + offset

   local function _nextLine()
      -- if we have lines, yield them
      if rainbuf.lines then
         -- deal with line case
      else
         local repr = reprs[r_num]
         if repr == nil then return nil end
         local line = repr()
         if line ~= nil then
            return line
         else
            r_num = r_num + 1
            _nextLine()
         end
      end
   end
   return _nextLine
end

function Rainbuf._lineGen(rainbuf, rows)
   offset = rainbuf.offset or 0
   if not rainbuf.lines then
      local phrase = \"\"
      for i = 1, rainbuf.n do
         local piece
         if rainbuf.frozen then
            piece = rainbuf[i]
         else
            piece = ts(rainbuf[i])
         end
         phrase = phrase .. piece
         if i < rainbuf.n then
            phrase = phrase .. \"   \"
         end
      end
      rainbuf.lines = table.collect(string.lines, phrase)
   end
   rows = rows or #rainbuf.lines
   local cursor = 1 + offset
   rows = rows + offset

   return function()
      if cursor < rows then
         local line = rainbuf.lines[cursor]
         if not line then
            rainbuf.more = false
            return nil
         end
         cursor = cursor + 1
         return line
      else
         if cursor <= #rainbuf.lines then
            rainbuf.more = true
            return nil
         else
            rainbuf.more = false
            return nil
         end
      end
   end
end"]
// END RANK codeblock_213

section_202 -> { header_276 prose_277 codeblock_278}
{rank=same; header_276 prose_277 codeblock_278}

header_276 [label="3 : new(res?)"]

prose_277 [label="prose"]

codeblock_278 [label="code block 182-203"]


// END RANK section_202

header_276 -> leaf_279
leaf_279  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** new(res?)"]
// END RANK header_276

prose_277 -> { raw_280}
{rank=same; raw_280}

raw_280 [label="raw"]


// END RANK prose_277

raw_280 -> leaf_281
leaf_281  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_280

codeblock_278 -> leaf_282
leaf_282  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function new(res)
   if type(res) == \"table\" and res.idEst == Rainbuf then
      error \"made a Rainbuf from a Rainbuf\"
   end
   local rainbuf = meta(Rainbuf)
   if res then
      for i = 1, res.n do
         rainbuf[i] = res[i]
      end
      rainbuf.n = res.n
      rainbuf.frozen = res.frozen
   end
   rainbuf.wids  = {}
   rainbuf.offset = 0
   return rainbuf
end

Rainbuf.idEst = new

return new"]
// END RANK codeblock_278


}
