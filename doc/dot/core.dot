digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 371"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-156"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 codeblock_5 section_6 section_7 section_8}
{rank=same; header_2 prose_3 prose_4 codeblock_5 section_6 section_7 section_8}

header_2 [label="1 : Core"]

prose_3 [label="prose"]

prose_4 [label="prose"]

codeblock_5 [label="code block 8-10"]

section_6 [label="section: 13-39"]

section_7 [label="section: 40-128"]

section_8 [label="section: 157-313"]


// END RANK section_1

header_2 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Core"]
// END RANK header_2

prose_3 -> { raw_10 prespace_11 literal_12 raw_13}
{rank=same; raw_10 prespace_11 literal_12 raw_13}

raw_10 [label="raw"]

prespace_11 [label="prespace"]

literal_12 [label="literal"]

raw_13 [label="raw"]


// END RANK prose_3

raw_10 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_10

prespace_11 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_11

literal_12 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label="core"]
// END RANK literal_12

raw_13 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is for tampering with the global namespace and standard libraries.
"]
// END RANK raw_13

prose_4 -> { raw_18 prespace_19 literal_20 raw_21}
{rank=same; raw_18 prespace_19 literal_20 raw_21}

raw_18 [label="raw"]

prespace_19 [label="prespace"]

literal_20 [label="literal"]

raw_21 [label="raw"]


// END RANK prose_4

raw_18 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It will eventually land in"]
// END RANK raw_18

prespace_19 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_19

literal_20 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label="pylon"]
// END RANK literal_20

raw_21 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_21

codeblock_5 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local core = {}"]
// END RANK codeblock_5

section_6 -> { header_27 prose_28 prose_29 codeblock_30}
{rank=same; header_27 prose_28 prose_29 codeblock_30}

header_27 [label="2 : meta"]

prose_28 [label="prose"]

prose_29 [label="prose"]

codeblock_30 [label="code block 21-37"]


// END RANK section_6

header_27 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** meta"]
// END RANK header_27

prose_28 -> { raw_32 prespace_33 literal_34 raw_35 prespace_36 literal_37 raw_38 prespace_39 literal_40 raw_41 prespace_42 literal_43 raw_44 prespace_45 literal_46 raw_47 prespace_48 literal_49 raw_50}
{rank=same; raw_32 prespace_33 literal_34 raw_35 prespace_36 literal_37 raw_38 prespace_39 literal_40 raw_41 prespace_42 literal_43 raw_44 prespace_45 literal_46 raw_47 prespace_48 literal_49 raw_50}

raw_32 [label="raw"]

prespace_33 [label="prespace"]

literal_34 [label="literal"]

raw_35 [label="raw"]

prespace_36 [label="prespace"]

literal_37 [label="literal"]

raw_38 [label="raw"]

prespace_39 [label="prespace"]

literal_40 [label="literal"]

raw_41 [label="raw"]

prespace_42 [label="prespace"]

literal_43 [label="literal"]

raw_44 [label="raw"]

prespace_45 [label="prespace"]

literal_46 [label="literal"]

raw_47 [label="raw"]

prespace_48 [label="prespace"]

literal_49 [label="literal"]

raw_50 [label="raw"]


// END RANK prose_28

raw_32 -> leaf_51
leaf_51  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

We shorten a few of the common Lua keywords:"]
// END RANK raw_32

prespace_33 -> leaf_52
leaf_52  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_33

literal_34 -> leaf_53
leaf_53  [color=Gray,shape=rectangle,fontname=Inconsolata,label="coro"]
// END RANK literal_34

raw_35 -> leaf_54
leaf_54  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" rather than"]
// END RANK raw_35

prespace_36 -> leaf_55
leaf_55  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_36

literal_37 -> leaf_56
leaf_56  [color=Gray,shape=rectangle,fontname=Inconsolata,label="coroutine"]
// END RANK literal_37

raw_38 -> leaf_57
leaf_57  [color=Gray,shape=rectangle,fontname=Inconsolata,label=",
and"]
// END RANK raw_38

prespace_39 -> leaf_58
leaf_58  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_39

literal_40 -> leaf_59
leaf_59  [color=Gray,shape=rectangle,fontname=Inconsolata,label="getmeta"]
// END RANK literal_40

raw_41 -> leaf_60
leaf_60  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_41

prespace_42 -> leaf_61
leaf_61  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_42

literal_43 -> leaf_62
leaf_62  [color=Gray,shape=rectangle,fontname=Inconsolata,label="setmeta"]
// END RANK literal_43

raw_44 -> leaf_63
leaf_63  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" over"]
// END RANK raw_44

prespace_45 -> leaf_64
leaf_64  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_45

literal_46 -> leaf_65
leaf_65  [color=Gray,shape=rectangle,fontname=Inconsolata,label="getmetatable"]
// END RANK literal_46

raw_47 -> leaf_66
leaf_66  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_47

prespace_48 -> leaf_67
leaf_67  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_48

literal_49 -> leaf_68
leaf_68  [color=Gray,shape=rectangle,fontname=Inconsolata,label="setmetatable"]
// END RANK literal_49

raw_50 -> leaf_69
leaf_69  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_50

prose_29 -> { raw_70 prespace_71 literal_72 raw_73}
{rank=same; raw_70 prespace_71 literal_72 raw_73}

raw_70 [label="raw"]

prespace_71 [label="prespace"]

literal_72 [label="literal"]

raw_73 [label="raw"]


// END RANK prose_29

raw_70 -> leaf_74
leaf_74  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
In my code there is a repeated pattern of use that is basic enough that I'm
entering it into the global namespace as simple"]
// END RANK raw_70

prespace_71 -> leaf_75
leaf_75  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_71

literal_72 -> leaf_76
leaf_76  [color=Gray,shape=rectangle,fontname=Inconsolata,label="meta"]
// END RANK literal_72

raw_73 -> leaf_77
leaf_77  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_73

codeblock_30 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function core.meta(MT)
   if MT and MT.__index then
      -- inherit
      return setmetatable({}, MT)
   elseif MT then
      -- decorate
      MT.__index = MT
      return MT
   else
      -- new metatable
      local _M = {}
      _M.__index = _M
      return _M
   end
end"]
// END RANK codeblock_30

section_7 -> { header_79 prose_80 section_81 section_82 section_83 section_84 section_85 section_86}
{rank=same; header_79 prose_80 section_81 section_82 section_83 section_84 section_85 section_86}

header_79 [label="2 : Table extensions"]

prose_80 [label="prose"]

section_81 [label="section: 42-57"]

section_82 [label="section: 58-72"]

section_83 [label="section: 73-96"]

section_84 [label="section: 97-113"]

section_85 [label="section: 114-128"]

section_86 [label="section: 129-156"]


// END RANK section_7

header_79 -> leaf_87
leaf_87  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Table extensions"]
// END RANK header_79

prose_80 -> { raw_88}
{rank=same; raw_88}

raw_88 [label="raw"]


// END RANK prose_80

raw_88 -> leaf_89
leaf_89  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_88

section_81 -> { header_90 prose_91 codeblock_92}
{rank=same; header_90 prose_91 codeblock_92}

header_90 [label="3 : clone(tab)"]

prose_91 [label="prose"]

codeblock_92 [label="code block 46-55"]


// END RANK section_81

header_90 -> leaf_93
leaf_93  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** clone(tab)"]
// END RANK header_90

prose_91 -> { raw_94}
{rank=same; raw_94}

raw_94 [label="raw"]


// END RANK prose_91

raw_94 -> leaf_95
leaf_95  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Performs a shallow clone of table, attaching metatable if available.
"]
// END RANK raw_94

codeblock_92 -> leaf_96
leaf_96  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function core.clone(tab)
   local _M = getmetatable(tab)
   local clone = _M and setmetatable({}, _M) or {}
   for k,v in pairs(tab) do
      clone[k] = v
   end
   return clone
end"]
// END RANK codeblock_92

section_82 -> { header_97 prose_98 codeblock_99}
{rank=same; header_97 prose_98 codeblock_99}

header_97 [label="3 : arrayof(tab)"]

prose_98 [label="prose"]

codeblock_99 [label="code block 62-70"]


// END RANK section_82

header_97 -> leaf_100
leaf_100  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** arrayof(tab)"]
// END RANK header_97

prose_98 -> { raw_101}
{rank=same; raw_101}

raw_101 [label="raw"]


// END RANK prose_98

raw_101 -> leaf_102
leaf_102  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Clones and returns the array portion of a table.
"]
// END RANK raw_101

codeblock_99 -> leaf_103
leaf_103  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function core.arrayof(tab)
   local arr = {}
   for i,v in ipairs(tab) do
      arr[i] = v
   end
   return arr
end"]
// END RANK codeblock_99

section_83 -> { header_104 prose_105 codeblock_106}
{rank=same; header_104 prose_105 codeblock_106}

header_104 [label="3 : select(tab, key)"]

prose_105 [label="prose"]

codeblock_106 [label="code block 77-94"]


// END RANK section_83

header_104 -> leaf_107
leaf_107  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** select(tab, key)"]
// END RANK header_104

prose_105 -> { raw_108 prespace_109 literal_110 raw_111 prespace_112 literal_113 raw_114}
{rank=same; raw_108 prespace_109 literal_110 raw_111 prespace_112 literal_113 raw_114}

raw_108 [label="raw"]

prespace_109 [label="prespace"]

literal_110 [label="literal"]

raw_111 [label="raw"]

prespace_112 [label="prespace"]

literal_113 [label="literal"]

raw_114 [label="raw"]


// END RANK prose_105

raw_108 -> leaf_115
leaf_115  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Recursively return all"]
// END RANK raw_108

prespace_109 -> leaf_116
leaf_116  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_109

literal_110 -> leaf_117
leaf_117  [color=Gray,shape=rectangle,fontname=Inconsolata,label="v"]
// END RANK literal_110

raw_111 -> leaf_118
leaf_118  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" for"]
// END RANK raw_111

prespace_112 -> leaf_119
leaf_119  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_112

literal_113 -> leaf_120
leaf_120  [color=Gray,shape=rectangle,fontname=Inconsolata,label="key"]
// END RANK literal_113

raw_114 -> leaf_121
leaf_121  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" in all subtables of tab
"]
// END RANK raw_114

codeblock_106 -> leaf_122
leaf_122  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function _select(collection, tab, key, cycle)
   for k,v in pairs(tab) do
      if key == k then
         collection[#collection + 1] = v
      end
      if type(v) == \"table\" and not cycle[v] then
         cycle[v] = true
         collection = _select(collection, v, key, cycle)
      end
   end
   return collection
end

function core.select(tab, key)
   return _select({}, tab, key, {})
end"]
// END RANK codeblock_106

section_84 -> { header_123 prose_124 codeblock_125}
{rank=same; header_123 prose_124 codeblock_125}

header_123 [label="3 : reverse(tab)"]

prose_124 [label="prose"]

codeblock_125 [label="code block 101-111"]


// END RANK section_84

header_123 -> leaf_126
leaf_126  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** reverse(tab)"]
// END RANK header_123

prose_124 -> { raw_127}
{rank=same; raw_127}

raw_127 [label="raw"]


// END RANK prose_124

raw_127 -> leaf_128
leaf_128  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Reverses (only) the array portion of a table, returning a new table.
"]
// END RANK raw_127

codeblock_125 -> leaf_129
leaf_129  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function core.reverse(tab)
   local bat = {}
   for i,v in ipairs(tab) do
      bat[#tab - i + 1] = v
   end
   assert(bat[1])
   assert(bat[#tab])
   return bat
end"]
// END RANK codeblock_125

section_85 -> { header_130 prose_131 codeblock_132}
{rank=same; header_130 prose_131 codeblock_132}

header_130 [label="3 : keys(tab)"]

prose_131 [label="prose"]

codeblock_132 [label="code block 118-126"]


// END RANK section_85

header_130 -> leaf_133
leaf_133  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** keys(tab)"]
// END RANK header_130

prose_131 -> { raw_134}
{rank=same; raw_134}

raw_134 [label="raw"]


// END RANK prose_131

raw_134 -> leaf_135
leaf_135  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Returns an array of the keys of a table.
"]
// END RANK raw_134

codeblock_132 -> leaf_136
leaf_136  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function core.keys(tab)
   local keys = {}
   for k,v in pairs(tab) do
      keys[#keys + 1] = k
   end
   return keys, #keys
end"]
// END RANK codeblock_132

section_86 -> { header_137 prose_138 codeblock_139}
{rank=same; header_137 prose_138 codeblock_139}

header_137 [label="3 : splice(tab, index, into)"]

prose_138 [label="prose"]

codeblock_139 [label="code block 134-154"]


// END RANK section_86

header_137 -> leaf_140
leaf_140  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** splice(tab, index, into)"]
// END RANK header_137

prose_138 -> { raw_141 prespace_142 literal_143 raw_144 prespace_145 literal_146 raw_147 prespace_148 literal_149 raw_150}
{rank=same; raw_141 prespace_142 literal_143 raw_144 prespace_145 literal_146 raw_147 prespace_148 literal_149 raw_150}

raw_141 [label="raw"]

prespace_142 [label="prespace"]

literal_143 [label="literal"]

raw_144 [label="raw"]

prespace_145 [label="prespace"]

literal_146 [label="literal"]

raw_147 [label="raw"]

prespace_148 [label="prespace"]

literal_149 [label="literal"]

raw_150 [label="raw"]


// END RANK prose_138

raw_141 -> leaf_151
leaf_151  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Puts the full contents of"]
// END RANK raw_141

prespace_142 -> leaf_152
leaf_152  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_142

literal_143 -> leaf_153
leaf_153  [color=Gray,shape=rectangle,fontname=Inconsolata,label="into"]
// END RANK literal_143

raw_144 -> leaf_154
leaf_154  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" into"]
// END RANK raw_144

prespace_145 -> leaf_155
leaf_155  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_145

literal_146 -> leaf_156
leaf_156  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tab"]
// END RANK literal_146

raw_147 -> leaf_157
leaf_157  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" at"]
// END RANK raw_147

prespace_148 -> leaf_158
leaf_158  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_148

literal_149 -> leaf_159
leaf_159  [color=Gray,shape=rectangle,fontname=Inconsolata,label="index"]
// END RANK literal_149

raw_150 -> leaf_160
leaf_160  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  The argument order is
compatible with existing functions and method syntax.
"]
// END RANK raw_150

codeblock_139 -> leaf_161
leaf_161  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local insert = table.insert

local sp_er = \"table<core>.splice: \"
local _e_1 = sp_er .. \"$1 must be a table\"
local _e_2 = sp_er .. \"$2 must be a number\"
local _e_3 = sp_er .. \"$3 must be a table\"

function core.splice(tab, idx, into)
   assert(type(tab) == \"table\", _e_1)
   assert(type(idx) == \"number\", _e_2)
   assert(type(into) == \"table\", _e_3)
    idx = idx - 1
    local i = 1
    for j = 1, #into do
        insert(tab,i+idx,into[j])
        i = i + 1
    end
    return tab
end"]
// END RANK codeblock_139

section_8 -> { header_162 prose_163 codeblock_164 section_165 section_166 section_167 section_168 section_169}
{rank=same; header_162 prose_163 codeblock_164 section_165 section_166 section_167 section_168 section_169}

header_162 [label="2 : String extensions"]

prose_163 [label="prose"]

codeblock_164 [label="code block 159-164"]

section_165 [label="section: 166-215"]

section_166 [label="section: 216-268"]

section_167 [label="section: 269-298"]

section_168 [label="section: 299-313"]

section_169 [label="section: 314-371"]


// END RANK section_8

header_162 -> leaf_170
leaf_170  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** String extensions"]
// END RANK header_162

prose_163 -> { raw_171}
{rank=same; raw_171}

raw_171 [label="raw"]


// END RANK prose_163

raw_171 -> leaf_172
leaf_172  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_171

codeblock_164 -> leaf_173
leaf_173  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local byte = assert(string.byte)
local find = assert(string.find)
local sub = assert(string.sub)
local format = assert(string.format)"]
// END RANK codeblock_164

section_165 -> { header_174 prose_175 prose_176 codeblock_177}
{rank=same; header_174 prose_175 prose_176 codeblock_177}

header_174 [label="3 : utf8(char)"]

prose_175 [label="prose"]

prose_176 [label="prose"]

codeblock_177 [label="code block 174-213"]


// END RANK section_165

header_174 -> leaf_178
leaf_178  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** utf8(char)"]
// END RANK header_174

prose_175 -> { raw_179}
{rank=same; raw_179}

raw_179 [label="raw"]


// END RANK prose_175

raw_179 -> leaf_180
leaf_180  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This takes a string and validates the first character.
"]
// END RANK raw_179

prose_176 -> { raw_181}
{rank=same; raw_181}

raw_181 [label="raw"]


// END RANK prose_176

raw_181 -> leaf_182
leaf_182  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Return is either the (valid) length in bytes, or nil and an error string.
"]
// END RANK raw_181

codeblock_177 -> leaf_183
leaf_183  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function continue(c)
   return c >= 128 and c <= 191
end

function core.utf8(c)
   local byte = byte
   local head = byte(c)
   if head < 128 then
      return 1
   elseif head >= 194 and head <= 223 then
      local two = byte(c, 2)
      if continue(two) then
         return 2
      else
         return nil, \"utf8: bad second byte\"
      end
   elseif head >= 224 and head <= 239 then
      local two, three = byte(c, 2), byte(c, 3)
      if continue(two) and continue(three) then
         return 3
      else
         return nil, \"utf8: bad second and/or third byte\"
      end
   elseif head >= 240 and head <= 244 then
      local two, three, four = byte(c, 2), byte(c, 3), byte(c, 4)
      if continue(two) and continue(three) and continue(four) then
         return 4
      else
         return nil, \"utf8: bad second, third, and/or fourth byte\"
      end
   elseif continue(head) then
      return nil, \"utf8: continuation byte at head\"
   elseif head == 192 or head == 193 then
      return nil, \"utf8: 192 or 193 forbidden\"
   else -- head > 245
      return nil, \"utf8: byte > 245\"
   end
end"]
// END RANK codeblock_177

section_166 -> { header_184 prose_185 structure_186 prose_187 prose_188 prose_189 prose_190 prose_191 prose_192 prose_193 codeblock_194}
{rank=same; header_184 prose_185 structure_186 prose_187 prose_188 prose_189 prose_190 prose_191 prose_192 prose_193 codeblock_194}

header_184 [label="3 : format_safe(str, ...)"]

prose_185 [label="prose"]

structure_186 [label="structure"]

prose_187 [label="prose"]

prose_188 [label="prose"]

prose_189 [label="prose"]

prose_190 [label="prose"]

prose_191 [label="prose"]

prose_192 [label="prose"]

prose_193 [label="prose"]

codeblock_194 [label="code block 250-267"]


// END RANK section_166

header_184 -> leaf_195
leaf_195  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** format_safe(str, ...)"]
// END RANK header_184

prose_185 -> { raw_196}
{rank=same; raw_196}

raw_196 [label="raw"]


// END RANK prose_185

raw_196 -> leaf_197
leaf_197  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_196

structure_186 -> { hashline_198}
{rank=same; hashline_198}

hashline_198 [label="hashline"]


// END RANK structure_186

hashline_198 -> { hashtag_199}
{rank=same; hashtag_199}

hashtag_199 [label="hashtag"]


// END RANK hashline_198

hashtag_199 -> leaf_200
leaf_200  [color=Gray,shape=rectangle,fontname=Inconsolata,label="NB"]
// END RANK hashtag_199

prose_187 -> { prespace_201 literal_202 raw_203 prespace_204 literal_205 raw_206 prespace_207 literal_208 raw_209}
{rank=same; prespace_201 literal_202 raw_203 prespace_204 literal_205 raw_206 prespace_207 literal_208 raw_209}

prespace_201 [label="prespace"]

literal_202 [label="literal"]

raw_203 [label="raw"]

prespace_204 [label="prespace"]

literal_205 [label="literal"]

raw_206 [label="raw"]

prespace_207 [label="prespace"]

literal_208 [label="literal"]

raw_209 [label="raw"]


// END RANK prose_187

prespace_201 -> leaf_210
leaf_210  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_201

literal_202 -> leaf_211
leaf_211  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%d"]
// END RANK literal_202

raw_203 -> leaf_212
leaf_212  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" as a call to"]
// END RANK raw_203

prespace_204 -> leaf_213
leaf_213  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_204

literal_205 -> leaf_214
leaf_214  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tonumber"]
// END RANK literal_205

raw_206 -> leaf_215
leaf_215  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  The latter I will allow, I'm struggling to find
a circumstance where casting \"1\" to \"1\" through"]
// END RANK raw_206

prespace_207 -> leaf_216
leaf_216  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_207

literal_208 -> leaf_217
leaf_217  [color=Gray,shape=rectangle,fontname=Inconsolata,label="1"]
// END RANK literal_208

raw_209 -> leaf_218
leaf_218  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is dangerous.
"]
// END RANK raw_209

prose_188 -> { raw_219 prespace_220 literal_221 raw_222 prespace_223 literal_224 raw_225 prespace_226 literal_227 raw_228}
{rank=same; raw_219 prespace_220 literal_221 raw_222 prespace_223 literal_224 raw_225 prespace_226 literal_227 raw_228}

raw_219 [label="raw"]

prespace_220 [label="prespace"]

literal_221 [label="literal"]

raw_222 [label="raw"]

prespace_223 [label="prespace"]

literal_224 [label="literal"]

raw_225 [label="raw"]

prespace_226 [label="prespace"]

literal_227 [label="literal"]

raw_228 [label="raw"]


// END RANK prose_188

raw_219 -> leaf_229
leaf_229  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This isn't \"safe\" in the sense of preventing injections, all it does is check
that its arguments are of a valid type, prohibiting implicit"]
// END RANK raw_219

prespace_220 -> leaf_230
leaf_230  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_220

literal_221 -> leaf_231
leaf_231  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tostring"]
// END RANK literal_221

raw_222 -> leaf_232
leaf_232  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
conversions.  So"]
// END RANK raw_222

prespace_223 -> leaf_233
leaf_233  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_223

literal_224 -> leaf_234
leaf_234  [color=Gray,shape=rectangle,fontname=Inconsolata,label="format(\"select %s from ...\", \"';drop table users;\")"]
// END RANK literal_224

raw_225 -> leaf_235
leaf_235  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" will
get through, but not"]
// END RANK raw_225

prespace_226 -> leaf_236
leaf_236  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_226

literal_227 -> leaf_237
leaf_237  [color=Gray,shape=rectangle,fontname=Inconsolata,label="format(\"%s\", setmeta({}, {__tostring = function() return \"'; drop...\"}))"]
// END RANK literal_227

raw_228 -> leaf_238
leaf_238  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_228

prose_189 -> { raw_239}
{rank=same; raw_239}

raw_239 [label="raw"]


// END RANK prose_189

raw_239 -> leaf_240
leaf_240  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Less concerned about hostility and more about explicit coding practices. Also
don't want to undermine hardening elsewhere.
"]
// END RANK raw_239

prose_190 -> { raw_241 prespace_242 literal_243 raw_244 prespace_245 literal_246 raw_247 prespace_248 literal_249 raw_250}
{rank=same; raw_241 prespace_242 literal_243 raw_244 prespace_245 literal_246 raw_247 prespace_248 literal_249 raw_250}

raw_241 [label="raw"]

prespace_242 [label="prespace"]

literal_243 [label="literal"]

raw_244 [label="raw"]

prespace_245 [label="prespace"]

literal_246 [label="literal"]

raw_247 [label="raw"]

prespace_248 [label="prespace"]

literal_249 [label="literal"]

raw_250 [label="raw"]


// END RANK prose_190

raw_241 -> leaf_251
leaf_251  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
From the wiki, the full set of numeric parameters is"]
// END RANK raw_241

prespace_242 -> leaf_252
leaf_252  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_242

literal_243 -> leaf_253
leaf_253  [color=Gray,shape=rectangle,fontname=Inconsolata,label="{A,a,c,d,E,e,f,G,g,i,o,u,X,x}"]
// END RANK literal_243

raw_244 -> leaf_254
leaf_254  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  That leaves"]
// END RANK raw_244

prespace_245 -> leaf_255
leaf_255  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_245

literal_246 -> leaf_256
leaf_256  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%q"]
// END RANK literal_246

raw_247 -> leaf_257
leaf_257  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_247

prespace_248 -> leaf_258
leaf_258  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_248

literal_249 -> leaf_259
leaf_259  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%s"]
// END RANK literal_249

raw_250 -> leaf_260
leaf_260  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", the former does
string escaping but of course it is the Lua/C style of escaping.
"]
// END RANK raw_250

prose_191 -> { raw_261 prespace_262 literal_263 raw_264 prespace_265 literal_266 raw_267 prespace_268 literal_269 raw_270 prespace_271 literal_272 raw_273 prespace_274 literal_275 raw_276 prespace_277 literal_278 raw_279 prespace_280 literal_281 raw_282 prespace_283 literal_284 raw_285 prespace_286 literal_287 raw_288}
{rank=same; raw_261 prespace_262 literal_263 raw_264 prespace_265 literal_266 raw_267 prespace_268 literal_269 raw_270 prespace_271 literal_272 raw_273 prespace_274 literal_275 raw_276 prespace_277 literal_278 raw_279 prespace_280 literal_281 raw_282 prespace_283 literal_284 raw_285 prespace_286 literal_287 raw_288}

raw_261 [label="raw"]

prespace_262 [label="prespace"]

literal_263 [label="literal"]

raw_264 [label="raw"]

prespace_265 [label="prespace"]

literal_266 [label="literal"]

raw_267 [label="raw"]

prespace_268 [label="prespace"]

literal_269 [label="literal"]

raw_270 [label="raw"]

prespace_271 [label="prespace"]

literal_272 [label="literal"]

raw_273 [label="raw"]

prespace_274 [label="prespace"]

literal_275 [label="literal"]

raw_276 [label="raw"]

prespace_277 [label="prespace"]

literal_278 [label="literal"]

raw_279 [label="raw"]

prespace_280 [label="prespace"]

literal_281 [label="literal"]

raw_282 [label="raw"]

prespace_283 [label="prespace"]

literal_284 [label="literal"]

raw_285 [label="raw"]

prespace_286 [label="prespace"]

literal_287 [label="literal"]

raw_288 [label="raw"]


// END RANK prose_191

raw_261 -> leaf_289
leaf_289  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We add"]
// END RANK raw_261

prespace_262 -> leaf_290
leaf_290  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_262

literal_263 -> leaf_291
leaf_291  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%t"]
// END RANK literal_263

raw_264 -> leaf_292
leaf_292  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_264

prespace_265 -> leaf_293
leaf_293  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_265

literal_266 -> leaf_294
leaf_294  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%L"]
// END RANK literal_266

raw_267 -> leaf_295
leaf_295  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" (for λ), which call"]
// END RANK raw_267

prespace_268 -> leaf_296
leaf_296  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_268

literal_269 -> leaf_297
leaf_297  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tostring"]
// END RANK literal_269

raw_270 -> leaf_298
leaf_298  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" on a table or a function
respectively. "]
// END RANK raw_270

prespace_271 -> leaf_299
leaf_299  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_271

literal_272 -> leaf_300
leaf_300  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%t"]
// END RANK literal_272

raw_273 -> leaf_301
leaf_301  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" will actually accept all remaining compound types:"]
// END RANK raw_273

prespace_274 -> leaf_302
leaf_302  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_274

literal_275 -> leaf_303
leaf_303  [color=Gray,shape=rectangle,fontname=Inconsolata,label="userdata"]
// END RANK literal_275

raw_276 -> leaf_304
leaf_304  [color=Gray,shape=rectangle,fontname=Inconsolata,label=","]
// END RANK raw_276

prespace_277 -> leaf_305
leaf_305  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_277

literal_278 -> leaf_306
leaf_306  [color=Gray,shape=rectangle,fontname=Inconsolata,label="thread"]
// END RANK literal_278

raw_279 -> leaf_307
leaf_307  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", and"]
// END RANK raw_279

prespace_280 -> leaf_308
leaf_308  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_280

literal_281 -> leaf_309
leaf_309  [color=Gray,shape=rectangle,fontname=Inconsolata,label="cdata"]
// END RANK literal_281

raw_282 -> leaf_310
leaf_310  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  While we're being thorough,"]
// END RANK raw_282

prespace_283 -> leaf_311
leaf_311  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_283

literal_284 -> leaf_312
leaf_312  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%b"]
// END RANK literal_284

raw_285 -> leaf_313
leaf_313  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" for
boolean.  Perhaps"]
// END RANK raw_285

prespace_286 -> leaf_314
leaf_314  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_286

literal_287 -> leaf_315
leaf_315  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%*"]
// END RANK literal_287

raw_288 -> leaf_316
leaf_316  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" as a wildcard?
"]
// END RANK raw_288

prose_192 -> { raw_317 prespace_318 literal_319 raw_320}
{rank=same; raw_317 prespace_318 literal_319 raw_320}

raw_317 [label="raw"]

prespace_318 [label="prespace"]

literal_319 [label="literal"]

raw_320 [label="raw"]


// END RANK prose_192

raw_317 -> leaf_321
leaf_321  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Note our"]
// END RANK raw_317

prespace_318 -> leaf_322
leaf_322  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_318

literal_319 -> leaf_323
leaf_323  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%L"]
// END RANK literal_319

raw_320 -> leaf_324
leaf_324  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is not the C version.
"]
// END RANK raw_320

prose_193 -> { prespace_325 literal_326 raw_327}
{rank=same; prespace_325 literal_326 raw_327}

prespace_325 [label="prespace"]

literal_326 [label="literal"]

raw_327 [label="raw"]


// END RANK prose_193

prespace_325 -> leaf_328
leaf_328  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_325

literal_326 -> leaf_329
leaf_329  [color=Gray,shape=rectangle,fontname=Inconsolata,label="format_safe"]
// END RANK literal_326

raw_327 -> leaf_330
leaf_330  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" returns the correctly formatted string, or throws an error.
"]
// END RANK raw_327

codeblock_194 -> leaf_331
leaf_331  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local fmt_set = {\"L\", \"q\", \"s\", \"t\"}

for i, v in ipairs(fmt_set) do
   fmt_set[i] = \"%%\" .. v
end

--[[
local function next_fmt(str)
   local head, tail
   for _, v in ipairs(fmt_set) do
      head, tail = 2
end]]

function core.format_safe(str, ...)

end"]
// END RANK codeblock_194

section_167 -> { header_332 prose_333 prose_334 codeblock_335}
{rank=same; header_332 prose_333 prose_334 codeblock_335}

header_332 [label="3 : litpat(s)"]

prose_333 [label="prose"]

prose_334 [label="prose"]

codeblock_335 [label="code block 275-296"]


// END RANK section_167

header_332 -> leaf_336
leaf_336  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** litpat(s)"]
// END RANK header_332

prose_333 -> { raw_337 prespace_338 literal_339 raw_340}
{rank=same; raw_337 prespace_338 literal_339 raw_340}

raw_337 [label="raw"]

prespace_338 [label="prespace"]

literal_339 [label="literal"]

raw_340 [label="raw"]


// END RANK prose_333

raw_337 -> leaf_341
leaf_341  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK raw_337

prespace_338 -> leaf_342
leaf_342  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_338

literal_339 -> leaf_343
leaf_343  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%"]
// END RANK literal_339

raw_340 -> leaf_344
leaf_344  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" escapes all pattern characters.
"]
// END RANK raw_340

prose_334 -> { raw_345 prespace_346 literal_347 raw_348 prespace_349 literal_350 raw_351 prespace_352 literal_353 raw_354}
{rank=same; raw_345 prespace_346 literal_347 raw_348 prespace_349 literal_350 raw_351 prespace_352 literal_353 raw_354}

raw_345 [label="raw"]

prespace_346 [label="prespace"]

literal_347 [label="literal"]

raw_348 [label="raw"]

prespace_349 [label="prespace"]

literal_350 [label="literal"]

raw_351 [label="raw"]

prespace_352 [label="prespace"]

literal_353 [label="literal"]

raw_354 [label="raw"]


// END RANK prose_334

raw_345 -> leaf_355
leaf_355  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The resulting string will literally match"]
// END RANK raw_345

prespace_346 -> leaf_356
leaf_356  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_346

literal_347 -> leaf_357
leaf_357  [color=Gray,shape=rectangle,fontname=Inconsolata,label="s"]
// END RANK literal_347

raw_348 -> leaf_358
leaf_358  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" in"]
// END RANK raw_348

prespace_349 -> leaf_359
leaf_359  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_349

literal_350 -> leaf_360
leaf_360  [color=Gray,shape=rectangle,fontname=Inconsolata,label="sub"]
// END RANK literal_350

raw_351 -> leaf_361
leaf_361  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" or"]
// END RANK raw_351

prespace_352 -> leaf_362
leaf_362  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_352

literal_353 -> leaf_363
leaf_363  [color=Gray,shape=rectangle,fontname=Inconsolata,label="gsub"]
// END RANK literal_353

raw_354 -> leaf_364
leaf_364  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_354

codeblock_335 -> leaf_365
leaf_365  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local matches =
  {
    [\"^\"] = \"%^\";
    [\"$\"] = \"%$\";
    [\"(\"] = \"%(\";
    [\")\"] = \"%)\";
    [\"%\"] = \"%%\";
    [\".\"] = \"%.\";
    [\"[\"] = \"%[\";
    [\"]\"] = \"%]\";
    [\"*\"] = \"%*\";
    [\"+\"] = \"%+\";
    [\"-\"] = \"%-\";
    [\"?\"] = \"%?\";
    [\"\\0\"] = \"%z\";
  }

function core.litpat(s)
    return (s:gsub(\".\", matches))
end"]
// END RANK codeblock_335

section_168 -> { header_366 prose_367 prose_368 codeblock_369}
{rank=same; header_366 prose_367 prose_368 codeblock_369}

header_366 [label="3 : cleave(str, patt)"]

prose_367 [label="prose"]

prose_368 [label="prose"]

codeblock_369 [label="code block 306-311"]


// END RANK section_168

header_366 -> leaf_370
leaf_370  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** cleave(str, patt)"]
// END RANK header_366

prose_367 -> { raw_371 prespace_372 literal_373 raw_374 prespace_375 literal_376 raw_377}
{rank=same; raw_371 prespace_372 literal_373 raw_374 prespace_375 literal_376 raw_377}

raw_371 [label="raw"]

prespace_372 [label="prespace"]

literal_373 [label="literal"]

raw_374 [label="raw"]

prespace_375 [label="prespace"]

literal_376 [label="literal"]

raw_377 [label="raw"]


// END RANK prose_367

raw_371 -> leaf_378
leaf_378  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Performs the common operation of returning one run of bytes up to"]
// END RANK raw_371

prespace_372 -> leaf_379
leaf_379  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_372

literal_373 -> leaf_380
leaf_380  [color=Gray,shape=rectangle,fontname=Inconsolata,label="patt"]
// END RANK literal_373

raw_374 -> leaf_381
leaf_381  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
then the rest of the bytes after"]
// END RANK raw_374

prespace_375 -> leaf_382
leaf_382  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_375

literal_376 -> leaf_383
leaf_383  [color=Gray,shape=rectangle,fontname=Inconsolata,label="patt"]
// END RANK literal_376

raw_377 -> leaf_384
leaf_384  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_377

prose_368 -> { raw_385}
{rank=same; raw_385}

raw_385 [label="raw"]


// END RANK prose_368

raw_385 -> leaf_386
leaf_386  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Can be used to build iterators, either stateful or coroutine-based.
"]
// END RANK raw_385

codeblock_369 -> leaf_387
leaf_387  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function core.cleave(str, pat)
   local at = find(str, pat)
   return sub(str, 1, at - 1), sub(str, at + 1)
end"]
// END RANK codeblock_369

section_169 -> { header_388 prose_389 codeblock_390 codeblock_391}
{rank=same; header_388 prose_389 codeblock_390 codeblock_391}

header_388 [label="3 : codepoints(str)"]

prose_389 [label="prose"]

codeblock_390 [label="code block 319-347"]

codeblock_391 [label="code block 349-351"]


// END RANK section_169

header_388 -> leaf_392
leaf_392  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** codepoints(str)"]
// END RANK header_388

prose_389 -> { raw_393 prespace_394 literal_395 raw_396}
{rank=same; raw_393 prespace_394 literal_395 raw_396}

raw_393 [label="raw"]

prespace_394 [label="prespace"]

literal_395 [label="literal"]

raw_396 [label="raw"]


// END RANK prose_389

raw_393 -> leaf_397
leaf_397  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Returns an array of the utf8 codepoints in"]
// END RANK raw_393

prespace_394 -> leaf_398
leaf_398  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_394

literal_395 -> leaf_399
leaf_399  [color=Gray,shape=rectangle,fontname=Inconsolata,label="str"]
// END RANK literal_395

raw_396 -> leaf_400
leaf_400  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", incidentally validating or
rather filtering the contents into utf8 compliance.
"]
// END RANK raw_396

codeblock_390 -> leaf_401
leaf_401  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
local function split(str, at)
   return sub(str,1, at), sub(str, at + 1)
end

function core.codepoints(str)
   local utf8 = core.utf8
   local codes = {}
   -- propagate nil
   if not str then return nil end
   -- break on bad type
   assert(type(str) == \"string\", \"codepoints must be given a string\")
   while #str > 0 do
      local width, err = utf8(str)
      if width then
         local head, tail = split(str, width)
         codes[#codes + 1] = head
         str = tail
      else
         -- make sure we take a bit off anyway
         str = sub(str, -1)
         -- for debugging
         codes[codes + 1] = { err = err }
      end
   end
   return codes
end"]
// END RANK codeblock_390

codeblock_391 -> leaf_402
leaf_402  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return core"]
// END RANK codeblock_391


}
