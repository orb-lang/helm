digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 646"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-601"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 codeblock_5 section_6 section_7 section_8 section_9}
{rank=same; header_2 prose_3 prose_4 codeblock_5 section_6 section_7 section_8 section_9}

header_2 [label="1 : Core"]

prose_3 [label="prose"]

prose_4 [label="prose"]

codeblock_5 [label="code block 8-10"]

section_6 [label="section: 13-93"]

section_7 [label="section: 110-321"]

section_8 [label="section: 359-587"]

section_9 [label="section: 602-604"]


// END RANK section_1

header_2 -> leaf_10
leaf_10  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Core"]
// END RANK header_2

prose_3 -> { raw_11 prespace_12 literal_13 raw_14}
{rank=same; raw_11 prespace_12 literal_13 raw_14}

raw_11 [label="raw"]

prespace_12 [label="prespace"]

literal_13 [label="literal"]

raw_14 [label="raw"]


// END RANK prose_3

raw_11 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_11

prespace_12 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_12

literal_13 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label="core"]
// END RANK literal_13

raw_14 -> leaf_18
leaf_18  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is for tampering with the global namespace and standard libraries.
"]
// END RANK raw_14

prose_4 -> { raw_19 prespace_20 literal_21 raw_22}
{rank=same; raw_19 prespace_20 literal_21 raw_22}

raw_19 [label="raw"]

prespace_20 [label="prespace"]

literal_21 [label="literal"]

raw_22 [label="raw"]


// END RANK prose_4

raw_19 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It will eventually land in"]
// END RANK raw_19

prespace_20 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_20

literal_21 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label="pylon"]
// END RANK literal_21

raw_22 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_22

codeblock_5 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local core = {}"]
// END RANK codeblock_5

section_6 -> { header_28 prose_29 prose_30 section_31 section_32 section_33 section_34}
{rank=same; header_28 prose_29 prose_30 section_31 section_32 section_33 section_34}

header_28 [label="2 : Meta Object Protocol"]

prose_29 [label="prose"]

prose_30 [label="prose"]

section_31 [label="section: 20-43"]

section_32 [label="section: 44-67"]

section_33 [label="section: 68-93"]

section_34 [label="section: 94-109"]


// END RANK section_6

header_28 -> leaf_35
leaf_35  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Meta Object Protocol"]
// END RANK header_28

prose_29 -> { raw_36}
{rank=same; raw_36}

raw_36 [label="raw"]


// END RANK prose_29

raw_36 -> leaf_37
leaf_37  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This is where we start to design Cluster.
"]
// END RANK raw_36

prose_30 -> { raw_38 prespace_39 literal_40 raw_41 prespace_42 literal_43 raw_44 prespace_45 literal_46 raw_47 prespace_48 literal_49 raw_50 prespace_51 literal_52 raw_53 prespace_54 literal_55 raw_56}
{rank=same; raw_38 prespace_39 literal_40 raw_41 prespace_42 literal_43 raw_44 prespace_45 literal_46 raw_47 prespace_48 literal_49 raw_50 prespace_51 literal_52 raw_53 prespace_54 literal_55 raw_56}

raw_38 [label="raw"]

prespace_39 [label="prespace"]

literal_40 [label="literal"]

raw_41 [label="raw"]

prespace_42 [label="prespace"]

literal_43 [label="literal"]

raw_44 [label="raw"]

prespace_45 [label="prespace"]

literal_46 [label="literal"]

raw_47 [label="raw"]

prespace_48 [label="prespace"]

literal_49 [label="literal"]

raw_50 [label="raw"]

prespace_51 [label="prespace"]

literal_52 [label="literal"]

raw_53 [label="raw"]

prespace_54 [label="prespace"]

literal_55 [label="literal"]

raw_56 [label="raw"]


// END RANK prose_30

raw_38 -> leaf_57
leaf_57  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We shorten a few of the common Lua keywords:"]
// END RANK raw_38

prespace_39 -> leaf_58
leaf_58  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_39

literal_40 -> leaf_59
leaf_59  [color=Gray,shape=rectangle,fontname=Inconsolata,label="coro"]
// END RANK literal_40

raw_41 -> leaf_60
leaf_60  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" rather than"]
// END RANK raw_41

prespace_42 -> leaf_61
leaf_61  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_42

literal_43 -> leaf_62
leaf_62  [color=Gray,shape=rectangle,fontname=Inconsolata,label="coroutine"]
// END RANK literal_43

raw_44 -> leaf_63
leaf_63  [color=Gray,shape=rectangle,fontname=Inconsolata,label=",
and"]
// END RANK raw_44

prespace_45 -> leaf_64
leaf_64  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_45

literal_46 -> leaf_65
leaf_65  [color=Gray,shape=rectangle,fontname=Inconsolata,label="getmeta"]
// END RANK literal_46

raw_47 -> leaf_66
leaf_66  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_47

prespace_48 -> leaf_67
leaf_67  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_48

literal_49 -> leaf_68
leaf_68  [color=Gray,shape=rectangle,fontname=Inconsolata,label="setmeta"]
// END RANK literal_49

raw_50 -> leaf_69
leaf_69  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" over"]
// END RANK raw_50

prespace_51 -> leaf_70
leaf_70  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_51

literal_52 -> leaf_71
leaf_71  [color=Gray,shape=rectangle,fontname=Inconsolata,label="getmetatable"]
// END RANK literal_52

raw_53 -> leaf_72
leaf_72  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_53

prespace_54 -> leaf_73
leaf_73  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_54

literal_55 -> leaf_74
leaf_74  [color=Gray,shape=rectangle,fontname=Inconsolata,label="setmetatable"]
// END RANK literal_55

raw_56 -> leaf_75
leaf_75  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_56

section_31 -> { header_76 prose_77 codeblock_78}
{rank=same; header_76 prose_77 codeblock_78}

header_76 [label="3 : meta"]

prose_77 [label="prose"]

codeblock_78 [label="code block 25-41"]


// END RANK section_31

header_76 -> leaf_79
leaf_79  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** meta"]
// END RANK header_76

prose_77 -> { raw_80 prespace_81 literal_82 raw_83}
{rank=same; raw_80 prespace_81 literal_82 raw_83}

raw_80 [label="raw"]

prespace_81 [label="prespace"]

literal_82 [label="literal"]

raw_83 [label="raw"]


// END RANK prose_77

raw_80 -> leaf_84
leaf_84  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

In my code there is a repeated pattern of use that is basic enough that I'm
entering it into the global namespace as simple"]
// END RANK raw_80

prespace_81 -> leaf_85
leaf_85  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_81

literal_82 -> leaf_86
leaf_86  [color=Gray,shape=rectangle,fontname=Inconsolata,label="meta"]
// END RANK literal_82

raw_83 -> leaf_87
leaf_87  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_83

codeblock_78 -> leaf_88
leaf_88  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function core.meta(MT)
   if MT and MT.__index then
      -- inherit
      return setmetatable({}, MT)
   elseif MT then
      -- decorate
      MT.__index = MT
      return MT
   else
      -- new metatable
      local _M = {}
      _M.__index = _M
      return _M
   end
end"]
// END RANK codeblock_78

section_32 -> { header_89 prose_90 prose_91 prose_92 codeblock_93}
{rank=same; header_89 prose_90 prose_91 prose_92 codeblock_93}

header_89 [label="3 : hasmetamethod(tab, mmethod)"]

prose_90 [label="prose"]

prose_91 [label="prose"]

prose_92 [label="prose"]

codeblock_93 [label="code block 55-66"]


// END RANK section_32

header_89 -> leaf_94
leaf_94  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** hasmetamethod(tab, mmethod)"]
// END RANK header_89

prose_90 -> { raw_95 prespace_96 literal_97 raw_98}
{rank=same; raw_95 prespace_96 literal_97 raw_98}

raw_95 [label="raw"]

prespace_96 [label="prespace"]

literal_97 [label="literal"]

raw_98 [label="raw"]


// END RANK prose_90

raw_95 -> leaf_99
leaf_99  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The function of this is clear: given a table, return"]
// END RANK raw_95

prespace_96 -> leaf_100
leaf_100  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_96

literal_97 -> leaf_101
leaf_101  [color=Gray,shape=rectangle,fontname=Inconsolata,label="true"]
// END RANK literal_97

raw_98 -> leaf_102
leaf_102  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" if it can receive
a given metamethod.
"]
// END RANK raw_98

prose_91 -> { raw_103}
{rank=same; raw_103}

raw_103 [label="raw"]


// END RANK prose_91

raw_103 -> leaf_104
leaf_104  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The question is, how magical to make it. I'm going with \"slightly magical\" for
now.  You can leave off the \"__\" in checking for a metamethod.
"]
// END RANK raw_103

prose_92 -> { raw_105 prespace_106 literal_107 raw_108 prespace_109 literal_110 raw_111}
{rank=same; raw_105 prespace_106 literal_107 raw_108 prespace_109 literal_110 raw_111}

raw_105 [label="raw"]

prespace_106 [label="prespace"]

literal_107 [label="literal"]

raw_108 [label="raw"]

prespace_109 [label="prespace"]

literal_110 [label="literal"]

raw_111 [label="raw"]


// END RANK prose_92

raw_105 -> leaf_112
leaf_112  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A successful lookup returns the result, presumable truthy, otherwise"]
// END RANK raw_105

prespace_106 -> leaf_113
leaf_113  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_106

literal_107 -> leaf_114
leaf_114  [color=Gray,shape=rectangle,fontname=Inconsolata,label="false"]
// END RANK literal_107

raw_108 -> leaf_115
leaf_115  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
for a non-table argument and"]
// END RANK raw_108

prespace_109 -> leaf_116
leaf_116  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_109

literal_110 -> leaf_117
leaf_117  [color=Gray,shape=rectangle,fontname=Inconsolata,label="nil"]
// END RANK literal_110

raw_111 -> leaf_118
leaf_118  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" for a failed lookup.
"]
// END RANK raw_111

codeblock_93 -> leaf_119
leaf_119  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local sub = assert(string.sub)

function core.hasmetamethod(tab, mmethod)
   assert(type(mmethod) == \"string\", \"metamethod must be a string\")
   if sub(mmethod,1,2) == \"__\" then
      return type(tab) == \"table\" and tab[mmethod]
   else
      return type(tab) == \"table\" and tab[\"__\" ..mmethod]
   end
end"]
// END RANK codeblock_93

section_33 -> { header_120 prose_121 prose_122 prose_123 codeblock_124 prose_125}
{rank=same; header_120 prose_121 prose_122 prose_123 codeblock_124 prose_125}

header_120 [label="3 : endow(Meta)"]

prose_121 [label="prose"]

prose_122 [label="prose"]

prose_123 [label="prose"]

codeblock_124 [label="code block 78-88"]

prose_125 [label="prose"]


// END RANK section_33

header_120 -> leaf_126
leaf_126  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** endow(Meta)"]
// END RANK header_120

prose_121 -> { raw_127}
{rank=same; raw_127}

raw_127 [label="raw"]


// END RANK prose_121

raw_127 -> leaf_128
leaf_128  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Performs a thick copy of the metatable.
"]
// END RANK raw_127

prose_122 -> { raw_129}
{rank=same; raw_129}

raw_129 [label="raw"]


// END RANK prose_122

raw_129 -> leaf_130
leaf_130  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Because this will include __index and the like, this folds an level of
indirection out of inheritance.
"]
// END RANK raw_129

prose_123 -> { raw_131}
{rank=same; raw_131}

raw_131 [label="raw"]


// END RANK prose_123

raw_131 -> leaf_132
leaf_132  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I plan to use this with Nodes when I make a single base class for a complex
Grammar.
"]
// END RANK raw_131

codeblock_124 -> leaf_133
leaf_133  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local pairs = assert(pairs)

function core.endow(Meta)
   local MC = {}
   for k, v in pairs(Meta) do
      MC[k] = v
   end
   return MC
end"]
// END RANK codeblock_124

prose_125 -> { raw_134 prespace_135 literal_136 raw_137}
{rank=same; raw_134 prespace_135 literal_136 raw_137}

raw_134 [label="raw"]

prespace_135 [label="prespace"]

literal_136 [label="literal"]

raw_137 [label="raw"]


// END RANK prose_125

raw_134 -> leaf_138
leaf_138  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
That's just a shallow clone, the subtlety is that if the __index was a
self-table, it now points to"]
// END RANK raw_134

prespace_135 -> leaf_139
leaf_139  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_135

literal_136 -> leaf_140
leaf_140  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Meta"]
// END RANK literal_136

raw_137 -> leaf_141
leaf_141  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", while if Meta was created through
endowment or inheritance it's now out of the picture.
"]
// END RANK raw_137

section_34 -> { header_142 prose_143 codeblock_144}
{rank=same; header_142 prose_143 codeblock_144}

header_142 [label="3 : readOnly(tab)"]

prose_143 [label="prose"]

codeblock_144 [label="code block 98-107"]


// END RANK section_34

header_142 -> leaf_145
leaf_145  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** readOnly(tab)"]
// END RANK header_142

prose_143 -> { raw_146}
{rank=same; raw_146}

raw_146 [label="raw"]


// END RANK prose_143

raw_146 -> leaf_147
leaf_147  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Makes a table read-only, will throw an error if assigned to.
"]
// END RANK raw_146

codeblock_144 -> leaf_148
leaf_148  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function RO_M__newindex(tab, key, value)
   error(\"attempt to write value `\" .. tostring(value)
         .. \"` to read-only table slot `.\" .. tostring(key) .. \"`\")
end

function core.readOnly(tab)
   return setmetatable({}, {__index = tab, __newindex = RO_M__newindex})
end"]
// END RANK codeblock_144

section_7 -> { header_149 prose_150 section_151 section_152 section_153 section_154 section_155 section_156 section_157 section_158 section_159 section_160 section_161}
{rank=same; header_149 prose_150 section_151 section_152 section_153 section_154 section_155 section_156 section_157 section_158 section_159 section_160 section_161}

header_149 [label="2 : Table extensions"]

prose_150 [label="prose"]

section_151 [label="section: 112-122"]

section_152 [label="section: 123-151"]

section_153 [label="section: 152-177"]

section_154 [label="section: 178-192"]

section_155 [label="section: 193-209"]

section_156 [label="section: 210-238"]

section_157 [label="section: 239-256"]

section_158 [label="section: 257-273"]

section_159 [label="section: 274-288"]

section_160 [label="section: 289-321"]

section_161 [label="section: 322-358"]


// END RANK section_7

header_149 -> leaf_162
leaf_162  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Table extensions"]
// END RANK header_149

prose_150 -> { raw_163}
{rank=same; raw_163}

raw_163 [label="raw"]


// END RANK prose_150

raw_163 -> leaf_164
leaf_164  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_163

section_151 -> { header_165 prose_166 codeblock_167}
{rank=same; header_165 prose_166 codeblock_167}

header_165 [label="3 : pack(...)"]

prose_166 [label="prose"]

codeblock_167 [label="code block 116-120"]


// END RANK section_151

header_165 -> leaf_168
leaf_168  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** pack(...)"]
// END RANK header_165

prose_166 -> { raw_169}
{rank=same; raw_169}

raw_169 [label="raw"]


// END RANK prose_166

raw_169 -> leaf_170
leaf_170  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

A 5.2 shim.
"]
// END RANK raw_169

codeblock_167 -> leaf_171
leaf_171  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function core.pack(...)
   return { n = select('#', ...), ... }
end"]
// END RANK codeblock_167

section_152 -> { header_172 prose_173 codeblock_174}
{rank=same; header_172 prose_173 codeblock_174}

header_172 [label="3 : hasfield(field, tab) & hasfield.field(tab)"]

prose_173 [label="prose"]

codeblock_174 [label="code block 128-149"]


// END RANK section_152

header_172 -> leaf_175
leaf_175  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** hasfield(field, tab) & hasfield.field(tab)"]
// END RANK header_172

prose_173 -> { raw_176}
{rank=same; raw_176}

raw_176 [label="raw"]


// END RANK prose_173

raw_176 -> leaf_177
leaf_177  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


A nicety which can be used both for predication and assignment.
"]
// END RANK raw_176

codeblock_174 -> leaf_178
leaf_178  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function _hasfield(field, tab)
   if type(tab) == \"table\" and tab[field] ~= nil then
      return true, tab[field]
   else
      return false
   end
end

local function _hf__index(_, field)
   return function(tab)
      return _hasfield(field, tab)
   end
end

local function _hf__call(_, field, tab)
   return _hasfield(field, tab)
end

core.hasfield = setmetatable({}, { __index = _hf__index,
                                   __call  = _hf__call })"]
// END RANK codeblock_174

section_153 -> { header_179 prose_180 prose_181 prose_182 codeblock_183}
{rank=same; header_179 prose_180 prose_181 prose_182 codeblock_183}

header_179 [label="3 : clone(tab, depth)"]

prose_180 [label="prose"]

prose_181 [label="prose"]

prose_182 [label="prose"]

codeblock_183 [label="code block 160-175"]


// END RANK section_153

header_179 -> leaf_184
leaf_184  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** clone(tab, depth)"]
// END RANK header_179

prose_180 -> { raw_185}
{rank=same; raw_185}

raw_185 [label="raw"]


// END RANK prose_180

raw_185 -> leaf_186
leaf_186  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Performs a shallow clone of table, attaching metatable if available.
"]
// END RANK raw_185

prose_181 -> { raw_187 prespace_188 literal_189 raw_190}
{rank=same; raw_187 prespace_188 literal_189 raw_190}

raw_187 [label="raw"]

prespace_188 [label="prespace"]

literal_189 [label="literal"]

raw_190 [label="raw"]


// END RANK prose_181

raw_187 -> leaf_191
leaf_191  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Will recurse to"]
// END RANK raw_187

prespace_188 -> leaf_192
leaf_192  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_188

literal_189 -> leaf_193
leaf_193  [color=Gray,shape=rectangle,fontname=Inconsolata,label="depth"]
// END RANK literal_189

raw_190 -> leaf_194
leaf_194  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" if provided.
"]
// END RANK raw_190

prose_182 -> { raw_195}
{rank=same; raw_195}

raw_195 [label="raw"]


// END RANK prose_182

raw_195 -> leaf_196
leaf_196  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This will unroll circular references, which may not be what you want.
"]
// END RANK raw_195

codeblock_183 -> leaf_197
leaf_197  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function _clone(tab, depth)
   depth = depth or 1
   assert(depth > 0, \"depth must be positive \" .. tostring(depth))
   local _M = getmetatable(tab)
   local clone = _M and setmetatable({}, _M) or {}
   for k,v in pairs(tab) do
      if depth > 1 and type(v) == \"table\" then
        v = _clone(v, depth - 1)
      end
      clone[k] = v
   end
   return clone
end
core.clone = _clone"]
// END RANK codeblock_183

section_154 -> { header_198 prose_199 codeblock_200}
{rank=same; header_198 prose_199 codeblock_200}

header_198 [label="3 : arrayof(tab)"]

prose_199 [label="prose"]

codeblock_200 [label="code block 182-190"]


// END RANK section_154

header_198 -> leaf_201
leaf_201  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** arrayof(tab)"]
// END RANK header_198

prose_199 -> { raw_202}
{rank=same; raw_202}

raw_202 [label="raw"]


// END RANK prose_199

raw_202 -> leaf_203
leaf_203  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Clones and returns the array portion of a table.
"]
// END RANK raw_202

codeblock_200 -> leaf_204
leaf_204  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function core.arrayof(tab)
   local arr = {}
   for i,v in ipairs(tab) do
      arr[i] = v
   end
   return arr
end"]
// END RANK codeblock_200

section_155 -> { header_205 prose_206 codeblock_207}
{rank=same; header_205 prose_206 codeblock_207}

header_205 [label="3 : collect(iter, ...)"]

prose_206 [label="prose"]

codeblock_207 [label="code block 198-207"]


// END RANK section_155

header_205 -> leaf_208
leaf_208  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** collect(iter, ...)"]
// END RANK header_205

prose_206 -> { raw_209}
{rank=same; raw_209}

raw_209 [label="raw"]


// END RANK prose_206

raw_209 -> leaf_210
leaf_210  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Collects and returns up to two tables of values, given an iterator and
arguments to pass to it.
"]
// END RANK raw_209

codeblock_207 -> leaf_211
leaf_211  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function core.collect(iter, tab)
   local k_tab, v_tab = {}, {}
   for k, v in iter(tab) do
      k_tab[#k_tab + 1] = k
      v_tab[#v_tab + 1] = v
   end
   return k_tab, v_tab
end"]
// END RANK codeblock_207

section_156 -> { header_212 prose_213 structure_214 codeblock_215}
{rank=same; header_212 prose_213 structure_214 codeblock_215}

header_212 [label="3 : select(tab, key)"]

prose_213 [label="prose"]

structure_214 [label="structure"]

codeblock_215 [label="code block 218-236"]


// END RANK section_156

header_212 -> leaf_216
leaf_216  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** select(tab, key)"]
// END RANK header_212

prose_213 -> { raw_217 prespace_218 literal_219 raw_220 prespace_221 literal_222 raw_223}
{rank=same; raw_217 prespace_218 literal_219 raw_220 prespace_221 literal_222 raw_223}

raw_217 [label="raw"]

prespace_218 [label="prespace"]

literal_219 [label="literal"]

raw_220 [label="raw"]

prespace_221 [label="prespace"]

literal_222 [label="literal"]

raw_223 [label="raw"]


// END RANK prose_213

raw_217 -> leaf_224
leaf_224  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Recursively return all"]
// END RANK raw_217

prespace_218 -> leaf_225
leaf_225  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_218

literal_219 -> leaf_226
leaf_226  [color=Gray,shape=rectangle,fontname=Inconsolata,label="v"]
// END RANK literal_219

raw_220 -> leaf_227
leaf_227  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" for"]
// END RANK raw_220

prespace_221 -> leaf_228
leaf_228  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_221

literal_222 -> leaf_229
leaf_229  [color=Gray,shape=rectangle,fontname=Inconsolata,label="key"]
// END RANK literal_222

raw_223 -> leaf_230
leaf_230  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" in all subtables of tab.
"]
// END RANK raw_223

structure_214 -> { hashline_231}
{rank=same; hashline_231}

hashline_231 [label="hashline"]


// END RANK structure_214

hashline_231 -> { hashtag_232}
{rank=same; hashtag_232}

hashtag_232 [label="hashtag"]


// END RANK hashline_231

hashtag_232 -> leaf_233
leaf_233  [color=Gray,shape=rectangle,fontname=Inconsolata,label="NB"]
// END RANK hashtag_232

codeblock_215 -> leaf_234
leaf_234  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function _select(collection, tab, key, cycle)
   cycle = cycle or {}
   for k,v in pairs(tab) do
      if key == k then
         collection[#collection + 1] = v
      end
      if type(v) == \"table\" and not cycle[v] then
         cycle[v] = true
         collection = _select(collection, v, key, cycle)
      end
   end
   return collection
end

function core.select(tab, key)
   return _select({}, tab, key)
end"]
// END RANK codeblock_215

section_157 -> { header_235 prose_236 codeblock_237}
{rank=same; header_235 prose_236 codeblock_237}

header_235 [label="3 : reverse(tab)"]

prose_236 [label="prose"]

codeblock_237 [label="code block 243-254"]


// END RANK section_157

header_235 -> leaf_238
leaf_238  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** reverse(tab)"]
// END RANK header_235

prose_236 -> { raw_239}
{rank=same; raw_239}

raw_239 [label="raw"]


// END RANK prose_236

raw_239 -> leaf_240
leaf_240  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Reverses (only) the array portion of a table, returning a new table.
"]
// END RANK raw_239

codeblock_237 -> leaf_241
leaf_241  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function core.reverse(tab)
   if type(tab) ~= \"table\" or #tab == 0 then
      return {}
   end
   local bat = {}
   for i,v in ipairs(tab) do
      bat[#tab - i + 1] = v
   end
   return bat
end"]
// END RANK codeblock_237

section_158 -> { header_242 prose_243 codeblock_244}
{rank=same; header_242 prose_243 codeblock_244}

header_242 [label="3 : keys(tab)"]

prose_243 [label="prose"]

codeblock_244 [label="code block 261-271"]


// END RANK section_158

header_242 -> leaf_245
leaf_245  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** keys(tab)"]
// END RANK header_242

prose_243 -> { raw_246}
{rank=same; raw_246}

raw_246 [label="raw"]


// END RANK prose_243

raw_246 -> leaf_247
leaf_247  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Returns an array of the keys of a table.
"]
// END RANK raw_246

codeblock_244 -> leaf_248
leaf_248  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function core.keys(tab)
   assert(type(tab) == \"table\", \"keys must receive a table\")
   local keys = {}
   for k, _ in pairs(tab) do
      keys[#keys + 1] = k
   end

   return keys, #keys
end"]
// END RANK codeblock_244

section_159 -> { header_249 prose_250 codeblock_251}
{rank=same; header_249 prose_250 codeblock_251}

header_249 [label="3 : values(tab)"]

prose_250 [label="prose"]

codeblock_251 [label="code block 276-286"]


// END RANK section_159

header_249 -> leaf_252
leaf_252  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** values(tab)"]
// END RANK header_249

prose_250 -> { raw_253}
{rank=same; raw_253}

raw_253 [label="raw"]


// END RANK prose_250

raw_253 -> leaf_254
leaf_254  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_253

codeblock_251 -> leaf_255
leaf_255  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function core.values(tab)
   assert(type(tab) == \"table\", \"vals must receive a table\")
   local vals = {}
   for _, v in pairs(tab) do
      vals[#vals + 1] = v
   end

   return vals, #vals
end"]
// END RANK codeblock_251

section_160 -> { header_256 prose_257 prose_258 codeblock_259}
{rank=same; header_256 prose_257 prose_258 codeblock_259}

header_256 [label="3 : splice(tab, index, into)"]

prose_257 [label="prose"]

prose_258 [label="prose"]

codeblock_259 [label="code block 297-320"]


// END RANK section_160

header_256 -> leaf_260
leaf_260  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** splice(tab, index, into)"]
// END RANK header_256

prose_257 -> { raw_261 prespace_262 literal_263 raw_264 prespace_265 literal_266 raw_267 prespace_268 literal_269 raw_270}
{rank=same; raw_261 prespace_262 literal_263 raw_264 prespace_265 literal_266 raw_267 prespace_268 literal_269 raw_270}

raw_261 [label="raw"]

prespace_262 [label="prespace"]

literal_263 [label="literal"]

raw_264 [label="raw"]

prespace_265 [label="prespace"]

literal_266 [label="literal"]

raw_267 [label="raw"]

prespace_268 [label="prespace"]

literal_269 [label="literal"]

raw_270 [label="raw"]


// END RANK prose_257

raw_261 -> leaf_271
leaf_271  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Puts the full contents of"]
// END RANK raw_261

prespace_262 -> leaf_272
leaf_272  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_262

literal_263 -> leaf_273
leaf_273  [color=Gray,shape=rectangle,fontname=Inconsolata,label="into"]
// END RANK literal_263

raw_264 -> leaf_274
leaf_274  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" into"]
// END RANK raw_264

prespace_265 -> leaf_275
leaf_275  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_265

literal_266 -> leaf_276
leaf_276  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tab"]
// END RANK literal_266

raw_267 -> leaf_277
leaf_277  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" at"]
// END RANK raw_267

prespace_268 -> leaf_278
leaf_278  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_268

literal_269 -> leaf_279
leaf_279  [color=Gray,shape=rectangle,fontname=Inconsolata,label="index"]
// END RANK literal_269

raw_270 -> leaf_280
leaf_280  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  The argument order is
compatible with existing functions and method syntax.
"]
// END RANK raw_270

prose_258 -> { raw_281 prespace_282 literal_283 raw_284 prespace_285 literal_286 raw_287 prespace_288 literal_289 raw_290}
{rank=same; raw_281 prespace_282 literal_283 raw_284 prespace_285 literal_286 raw_287 prespace_288 literal_289 raw_290}

raw_281 [label="raw"]

prespace_282 [label="prespace"]

literal_283 [label="literal"]

raw_284 [label="raw"]

prespace_285 [label="prespace"]

literal_286 [label="literal"]

raw_287 [label="raw"]

prespace_288 [label="prespace"]

literal_289 [label="literal"]

raw_290 [label="raw"]


// END RANK prose_258

raw_281 -> leaf_291
leaf_291  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
if"]
// END RANK raw_281

prespace_282 -> leaf_292
leaf_292  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_282

literal_283 -> leaf_293
leaf_293  [color=Gray,shape=rectangle,fontname=Inconsolata,label="index"]
// END RANK literal_283

raw_284 -> leaf_294
leaf_294  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is nil, the contents of"]
// END RANK raw_284

prespace_285 -> leaf_295
leaf_295  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_285

literal_286 -> leaf_296
leaf_296  [color=Gray,shape=rectangle,fontname=Inconsolata,label="into"]
// END RANK literal_286

raw_287 -> leaf_297
leaf_297  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" will be inserted at the end of"]
// END RANK raw_287

prespace_288 -> leaf_298
leaf_298  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_288

literal_289 -> leaf_299
leaf_299  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tab"]
// END RANK literal_289

raw_290 -> leaf_300
leaf_300  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_290

codeblock_259 -> leaf_301
leaf_301  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local insert = table.insert

local sp_er = \"table<core>.splice: \"
local _e_1 = sp_er .. \"$1 must be a table\"
local _e_2 = sp_er .. \"$2 must be a number\"
local _e_3 = sp_er .. \"$3 must be a table\"

function core.splice(tab, idx, into)
   assert(type(tab) == \"table\", _e_1)
   assert(type(idx) == \"number\" or idx == nil, _e_2)
   if idx == nil then
      idx = #tab + 1
   end
   assert(type(into) == \"table\", _e_3)
    idx = idx - 1
    local i = 1
    for j = 1, #into do
        insert(tab,i+idx,into[j])
        i = i + 1
    end
    return tab
end"]
// END RANK codeblock_259

section_161 -> { header_302 prose_303 codeblock_304}
{rank=same; header_302 prose_303 codeblock_304}

header_302 [label="3 : safeget(tab, key)"]

prose_303 [label="prose"]

codeblock_304 [label="code block 327-356"]


// END RANK section_161

header_302 -> leaf_305
leaf_305  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** safeget(tab, key)"]
// END RANK header_302

prose_303 -> { raw_306}
{rank=same; raw_306}

raw_306 [label="raw"]


// END RANK prose_303

raw_306 -> leaf_307
leaf_307  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This will retrieve a value, given a key, without causing errors if the table
has been made strict.
"]
// END RANK raw_306

codeblock_304 -> leaf_308
leaf_308  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function core.safeget(tab, key)
   local val = rawget(tab, key)
   if val ~= nil then
      return val
   end
   local _M = getmetatable(tab)
   while _M ~= nil and rawget(_M, \"__index\") ~= nil do
      local index_t = type(_M.__index)
      if index_t == \"table\" then
         val = rawget(_M.__index, key)
      elseif index_t == \"function\" then
         local success
         success, val = pcall(_M.__index, table, key)
         if success then
            return val
         else
            val = nil
         end
      else
         error(\"somehow, __index is of type \" .. index_t)
      end
      if val ~= nil then
         return val
      end
      _M = index_t == \"table\" and getmetatable(_M.__index) or nil
   end
   return nil
end"]
// END RANK codeblock_304

section_8 -> { header_309 prose_310 codeblock_311 section_312 section_313 section_314 section_315 section_316 section_317}
{rank=same; header_309 prose_310 codeblock_311 section_312 section_313 section_314 section_315 section_316 section_317}

header_309 [label="2 : String extensions"]

prose_310 [label="prose"]

codeblock_311 [label="code block 361-366"]

section_312 [label="section: 368-417"]

section_313 [label="section: 418-478"]

section_314 [label="section: 479-508"]

section_315 [label="section: 509-549"]

section_316 [label="section: 550-587"]

section_317 [label="section: 588-601"]


// END RANK section_8

header_309 -> leaf_318
leaf_318  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** String extensions"]
// END RANK header_309

prose_310 -> { raw_319}
{rank=same; raw_319}

raw_319 [label="raw"]


// END RANK prose_310

raw_319 -> leaf_320
leaf_320  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_319

codeblock_311 -> leaf_321
leaf_321  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local byte = assert(string.byte)
local find = assert(string.find)
local sub = assert(string.sub)
local format = assert(string.format)"]
// END RANK codeblock_311

section_312 -> { header_322 prose_323 prose_324 codeblock_325}
{rank=same; header_322 prose_323 prose_324 codeblock_325}

header_322 [label="3 : utf8(char)"]

prose_323 [label="prose"]

prose_324 [label="prose"]

codeblock_325 [label="code block 376-415"]


// END RANK section_312

header_322 -> leaf_326
leaf_326  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** utf8(char)"]
// END RANK header_322

prose_323 -> { raw_327}
{rank=same; raw_327}

raw_327 [label="raw"]


// END RANK prose_323

raw_327 -> leaf_328
leaf_328  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This takes a string and validates the first character.
"]
// END RANK raw_327

prose_324 -> { raw_329}
{rank=same; raw_329}

raw_329 [label="raw"]


// END RANK prose_324

raw_329 -> leaf_330
leaf_330  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Return is either the (valid) length in bytes, or nil and an error string.
"]
// END RANK raw_329

codeblock_325 -> leaf_331
leaf_331  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function continue(c)
   return c >= 128 and c <= 191
end

function core.utf8(c)
   local byte = byte
   local head = byte(c)
   if head < 128 then
      return 1
   elseif head >= 194 and head <= 223 then
      local two = byte(c, 2)
      if continue(two) then
         return 2
      else
         return nil, \"utf8: bad second byte\"
      end
   elseif head >= 224 and head <= 239 then
      local two, three = byte(c, 2), byte(c, 3)
      if continue(two) and continue(three) then
         return 3
      else
         return nil, \"utf8: bad second and/or third byte\"
      end
   elseif head >= 240 and head <= 244 then
      local two, three, four = byte(c, 2), byte(c, 3), byte(c, 4)
      if continue(two) and continue(three) and continue(four) then
         return 4
      else
         return nil, \"utf8: bad second, third, and/or fourth byte\"
      end
   elseif continue(head) then
      return nil, \"utf8: continuation byte at head\"
   elseif head == 192 or head == 193 then
      return nil, \"utf8: 192 or 193 forbidden\"
   else -- head > 245
      return nil, \"utf8: byte > 245\"
   end
end"]
// END RANK codeblock_325

section_313 -> { header_332 prose_333 prose_334 prose_335 prose_336 prose_337 prose_338 prose_339 prose_340 prose_341 prose_342 prose_343 codeblock_344}
{rank=same; header_332 prose_333 prose_334 prose_335 prose_336 prose_337 prose_338 prose_339 prose_340 prose_341 prose_342 prose_343 codeblock_344}

header_332 [label="3 : typeformat(str, ...)"]

prose_333 [label="prose"]

prose_334 [label="prose"]

prose_335 [label="prose"]

prose_336 [label="prose"]

prose_337 [label="prose"]

prose_338 [label="prose"]

prose_339 [label="prose"]

prose_340 [label="prose"]

prose_341 [label="prose"]

prose_342 [label="prose"]

prose_343 [label="prose"]

codeblock_344 [label="code block 460-477"]


// END RANK section_313

header_332 -> leaf_345
leaf_345  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** typeformat(str, ...)"]
// END RANK header_332

prose_333 -> { raw_346}
{rank=same; raw_346}

raw_346 [label="raw"]


// END RANK prose_333

raw_346 -> leaf_347
leaf_347  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Background: I want to start using format in errors and assertions.
"]
// END RANK raw_346

prose_334 -> { raw_348}
{rank=same; raw_348}

raw_348 [label="raw"]


// END RANK prose_334

raw_348 -> leaf_349
leaf_349  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It's not as bad to use concatenation in-place for errors, since evaluating
them is a final step.  Assertions run much faster if passed only arguments.
"]
// END RANK raw_348

prose_335 -> { raw_350 prespace_351 literal_352 raw_353 prespace_354 literal_355 raw_356 prespace_357 literal_358 raw_359}
{rank=same; raw_350 prespace_351 literal_352 raw_353 prespace_354 literal_355 raw_356 prespace_357 literal_358 raw_359}

raw_350 [label="raw"]

prespace_351 [label="prespace"]

literal_352 [label="literal"]

raw_353 [label="raw"]

prespace_354 [label="prespace"]

literal_355 [label="literal"]

raw_356 [label="raw"]

prespace_357 [label="prespace"]

literal_358 [label="literal"]

raw_359 [label="raw"]


// END RANK prose_335

raw_350 -> leaf_360
leaf_360  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Lua peforms a small number of implicit conversions, mostly at the string
boundary. This is an actual feature since the language has both"]
// END RANK raw_350

prespace_351 -> leaf_361
leaf_361  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_351

literal_352 -> leaf_362
leaf_362  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".."]
// END RANK literal_352

raw_353 -> leaf_363
leaf_363  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_353

prespace_354 -> leaf_364
leaf_364  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_354

literal_355 -> leaf_365
leaf_365  [color=Gray,shape=rectangle,fontname=Inconsolata,label="+"]
// END RANK literal_355

raw_356 -> leaf_366
leaf_366  [color=Gray,shape=rectangle,fontname=Inconsolata,label=",
but it leaves a bit to be desired when it comes to"]
// END RANK raw_356

prespace_357 -> leaf_367
leaf_367  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_357

literal_358 -> leaf_368
leaf_368  [color=Gray,shape=rectangle,fontname=Inconsolata,label="string.format"]
// END RANK literal_358

raw_359 -> leaf_369
leaf_369  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_359

prose_336 -> { prespace_370 literal_371 raw_372 prespace_373 literal_374 raw_375 prespace_376 literal_377 raw_378 prespace_379 literal_380 raw_381 prespace_382 literal_383 raw_384 prespace_385 literal_386 raw_387}
{rank=same; prespace_370 literal_371 raw_372 prespace_373 literal_374 raw_375 prespace_376 literal_377 raw_378 prespace_379 literal_380 raw_381 prespace_382 literal_383 raw_384 prespace_385 literal_386 raw_387}

prespace_370 [label="prespace"]

literal_371 [label="literal"]

raw_372 [label="raw"]

prespace_373 [label="prespace"]

literal_374 [label="literal"]

raw_375 [label="raw"]

prespace_376 [label="prespace"]

literal_377 [label="literal"]

raw_378 [label="raw"]

prespace_379 [label="prespace"]

literal_380 [label="literal"]

raw_381 [label="raw"]

prespace_382 [label="prespace"]

literal_383 [label="literal"]

raw_384 [label="raw"]

prespace_385 [label="prespace"]

literal_386 [label="literal"]

raw_387 [label="raw"]


// END RANK prose_336

prespace_370 -> leaf_388
leaf_388  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_370

literal_371 -> leaf_389
leaf_389  [color=Gray,shape=rectangle,fontname=Inconsolata,label="format"]
// END RANK literal_371

raw_372 -> leaf_390
leaf_390  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" treats any"]
// END RANK raw_372

prespace_373 -> leaf_391
leaf_391  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_373

literal_374 -> leaf_392
leaf_392  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%s"]
// END RANK literal_374

raw_375 -> leaf_393
leaf_393  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" as a request to convert"]
// END RANK raw_375

prespace_376 -> leaf_394
leaf_394  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_376

literal_377 -> leaf_395
leaf_395  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tostring"]
// END RANK literal_377

raw_378 -> leaf_396
leaf_396  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", also treating"]
// END RANK raw_378

prespace_379 -> leaf_397
leaf_397  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_379

literal_380 -> leaf_398
leaf_398  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%d"]
// END RANK literal_380

raw_381 -> leaf_399
leaf_399  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" as a call to"]
// END RANK raw_381

prespace_382 -> leaf_400
leaf_400  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_382

literal_383 -> leaf_401
leaf_401  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tonumber"]
// END RANK literal_383

raw_384 -> leaf_402
leaf_402  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  The latter I will allow, I'm struggling to find
a circumstance where casting \"1\" to \"1\" through"]
// END RANK raw_384

prespace_385 -> leaf_403
leaf_403  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_385

literal_386 -> leaf_404
leaf_404  [color=Gray,shape=rectangle,fontname=Inconsolata,label="1"]
// END RANK literal_386

raw_387 -> leaf_405
leaf_405  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is dangerous.
"]
// END RANK raw_387

prose_337 -> { raw_406 prespace_407 literal_408 raw_409}
{rank=same; raw_406 prespace_407 literal_408 raw_409}

raw_406 [label="raw"]

prespace_407 [label="prespace"]

literal_408 [label="literal"]

raw_409 [label="raw"]


// END RANK prose_337

raw_406 -> leaf_410
leaf_410  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
What I want is a type-checked"]
// END RANK raw_406

prespace_407 -> leaf_411
leaf_411  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_407

literal_408 -> leaf_412
leaf_412  [color=Gray,shape=rectangle,fontname=Inconsolata,label="format"]
// END RANK literal_408

raw_409 -> leaf_413
leaf_413  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", which I can extend to use a few more
flexible strategies, depending on the context.
"]
// END RANK raw_409

prose_338 -> { raw_414}
{rank=same; raw_414}

raw_414 [label="raw"]


// END RANK prose_338

raw_414 -> leaf_415
leaf_415  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Less concerned about hostility and more about explicit coding practices. Also
don't want to undermine hardening elsewhere.
"]
// END RANK raw_414

prose_339 -> { raw_416 prespace_417 literal_418 raw_419 prespace_420 literal_421 raw_422 prespace_423 literal_424 raw_425}
{rank=same; raw_416 prespace_417 literal_418 raw_419 prespace_420 literal_421 raw_422 prespace_423 literal_424 raw_425}

raw_416 [label="raw"]

prespace_417 [label="prespace"]

literal_418 [label="literal"]

raw_419 [label="raw"]

prespace_420 [label="prespace"]

literal_421 [label="literal"]

raw_422 [label="raw"]

prespace_423 [label="prespace"]

literal_424 [label="literal"]

raw_425 [label="raw"]


// END RANK prose_339

raw_416 -> leaf_426
leaf_426  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
From the wiki, the full set of numeric parameters is"]
// END RANK raw_416

prespace_417 -> leaf_427
leaf_427  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_417

literal_418 -> leaf_428
leaf_428  [color=Gray,shape=rectangle,fontname=Inconsolata,label="{A,a,c,d,E,e,f,G,g,i,o,u,X,x}"]
// END RANK literal_418

raw_419 -> leaf_429
leaf_429  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  That leaves"]
// END RANK raw_419

prespace_420 -> leaf_430
leaf_430  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_420

literal_421 -> leaf_431
leaf_431  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%q"]
// END RANK literal_421

raw_422 -> leaf_432
leaf_432  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_422

prespace_423 -> leaf_433
leaf_433  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_423

literal_424 -> leaf_434
leaf_434  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%s"]
// END RANK literal_424

raw_425 -> leaf_435
leaf_435  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", the former does
string escaping but of course it is the Lua/C style of escaping.
"]
// END RANK raw_425

prose_340 -> { raw_436 prespace_437 literal_438 raw_439 prespace_440 literal_441 raw_442 prespace_443 literal_444 raw_445 prespace_446 literal_447 raw_448 prespace_449 literal_450 raw_451 prespace_452 literal_453 raw_454 prespace_455 literal_456 raw_457 prespace_458 literal_459 raw_460 prespace_461 literal_462 raw_463}
{rank=same; raw_436 prespace_437 literal_438 raw_439 prespace_440 literal_441 raw_442 prespace_443 literal_444 raw_445 prespace_446 literal_447 raw_448 prespace_449 literal_450 raw_451 prespace_452 literal_453 raw_454 prespace_455 literal_456 raw_457 prespace_458 literal_459 raw_460 prespace_461 literal_462 raw_463}

raw_436 [label="raw"]

prespace_437 [label="prespace"]

literal_438 [label="literal"]

raw_439 [label="raw"]

prespace_440 [label="prespace"]

literal_441 [label="literal"]

raw_442 [label="raw"]

prespace_443 [label="prespace"]

literal_444 [label="literal"]

raw_445 [label="raw"]

prespace_446 [label="prespace"]

literal_447 [label="literal"]

raw_448 [label="raw"]

prespace_449 [label="prespace"]

literal_450 [label="literal"]

raw_451 [label="raw"]

prespace_452 [label="prespace"]

literal_453 [label="literal"]

raw_454 [label="raw"]

prespace_455 [label="prespace"]

literal_456 [label="literal"]

raw_457 [label="raw"]

prespace_458 [label="prespace"]

literal_459 [label="literal"]

raw_460 [label="raw"]

prespace_461 [label="prespace"]

literal_462 [label="literal"]

raw_463 [label="raw"]


// END RANK prose_340

raw_436 -> leaf_464
leaf_464  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We add"]
// END RANK raw_436

prespace_437 -> leaf_465
leaf_465  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_437

literal_438 -> leaf_466
leaf_466  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%t"]
// END RANK literal_438

raw_439 -> leaf_467
leaf_467  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_439

prespace_440 -> leaf_468
leaf_468  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_440

literal_441 -> leaf_469
leaf_469  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%L"]
// END RANK literal_441

raw_442 -> leaf_470
leaf_470  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" (for λ), which call"]
// END RANK raw_442

prespace_443 -> leaf_471
leaf_471  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_443

literal_444 -> leaf_472
leaf_472  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tostring"]
// END RANK literal_444

raw_445 -> leaf_473
leaf_473  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" on a table or a function
respectively.  While we're being thorough,"]
// END RANK raw_445

prespace_446 -> leaf_474
leaf_474  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_446

literal_447 -> leaf_475
leaf_475  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%b"]
// END RANK literal_447

raw_448 -> leaf_476
leaf_476  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" for boolean,"]
// END RANK raw_448

prespace_449 -> leaf_477
leaf_477  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_449

literal_450 -> leaf_478
leaf_478  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%n"]
// END RANK literal_450

raw_451 -> leaf_479
leaf_479  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" for"]
// END RANK raw_451

prespace_452 -> leaf_480
leaf_480  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_452

literal_453 -> leaf_481
leaf_481  [color=Gray,shape=rectangle,fontname=Inconsolata,label="nil"]
// END RANK literal_453

raw_454 -> leaf_482
leaf_482  [color=Gray,shape=rectangle,fontname=Inconsolata,label=",
and"]
// END RANK raw_454

prespace_455 -> leaf_483
leaf_483  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_455

literal_456 -> leaf_484
leaf_484  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%*"]
// END RANK literal_456

raw_457 -> leaf_485
leaf_485  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" for the union type.  Why bother with"]
// END RANK raw_457

prespace_458 -> leaf_486
leaf_486  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_458

literal_459 -> leaf_487
leaf_487  [color=Gray,shape=rectangle,fontname=Inconsolata,label="nil"]
// END RANK literal_459

raw_460 -> leaf_488
leaf_488  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", which we can just write?
Type-checking, of course.  We treat"]
// END RANK raw_460

prespace_461 -> leaf_489
leaf_489  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_461

literal_462 -> leaf_490
leaf_490  [color=Gray,shape=rectangle,fontname=Inconsolata,label="nil"]
// END RANK literal_462

raw_463 -> leaf_491
leaf_491  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" as a full type, because in Lua, it
is.
"]
// END RANK raw_463

prose_341 -> { prespace_492 literal_493 raw_494 prespace_495 literal_496 raw_497 prespace_498 literal_499 raw_500 prespace_501 literal_502 raw_503 prespace_504 literal_505 raw_506 prespace_507 literal_508 raw_509 prespace_510 literal_511 raw_512 prespace_513 literal_514 raw_515}
{rank=same; prespace_492 literal_493 raw_494 prespace_495 literal_496 raw_497 prespace_498 literal_499 raw_500 prespace_501 literal_502 raw_503 prespace_504 literal_505 raw_506 prespace_507 literal_508 raw_509 prespace_510 literal_511 raw_512 prespace_513 literal_514 raw_515}

prespace_492 [label="prespace"]

literal_493 [label="literal"]

raw_494 [label="raw"]

prespace_495 [label="prespace"]

literal_496 [label="literal"]

raw_497 [label="raw"]

prespace_498 [label="prespace"]

literal_499 [label="literal"]

raw_500 [label="raw"]

prespace_501 [label="prespace"]

literal_502 [label="literal"]

raw_503 [label="raw"]

prespace_504 [label="prespace"]

literal_505 [label="literal"]

raw_506 [label="raw"]

prespace_507 [label="prespace"]

literal_508 [label="literal"]

raw_509 [label="raw"]

prespace_510 [label="prespace"]

literal_511 [label="literal"]

raw_512 [label="raw"]

prespace_513 [label="prespace"]

literal_514 [label="literal"]

raw_515 [label="raw"]


// END RANK prose_341

prespace_492 -> leaf_516
leaf_516  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_492

literal_493 -> leaf_517
leaf_517  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%t"]
// END RANK literal_493

raw_494 -> leaf_518
leaf_518  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" will actually accept all remaining compound types:"]
// END RANK raw_494

prespace_495 -> leaf_519
leaf_519  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_495

literal_496 -> leaf_520
leaf_520  [color=Gray,shape=rectangle,fontname=Inconsolata,label="userdata"]
// END RANK literal_496

raw_497 -> leaf_521
leaf_521  [color=Gray,shape=rectangle,fontname=Inconsolata,label=","]
// END RANK raw_497

prespace_498 -> leaf_522
leaf_522  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_498

literal_499 -> leaf_523
leaf_523  [color=Gray,shape=rectangle,fontname=Inconsolata,label="thread"]
// END RANK literal_499

raw_500 -> leaf_524
leaf_524  [color=Gray,shape=rectangle,fontname=Inconsolata,label=",
and"]
// END RANK raw_500

prespace_501 -> leaf_525
leaf_525  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_501

literal_502 -> leaf_526
leaf_526  [color=Gray,shape=rectangle,fontname=Inconsolata,label="cdata"]
// END RANK literal_502

raw_503 -> leaf_527
leaf_527  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  For only tables, we can have"]
// END RANK raw_503

prespace_504 -> leaf_528
leaf_528  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_504

literal_505 -> leaf_529
leaf_529  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%T"]
// END RANK literal_505

raw_506 -> leaf_530
leaf_530  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", and also"]
// END RANK raw_506

prespace_507 -> leaf_531
leaf_531  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_507

literal_508 -> leaf_532
leaf_532  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%U"]
// END RANK literal_508

raw_509 -> leaf_533
leaf_533  [color=Gray,shape=rectangle,fontname=Inconsolata,label=","]
// END RANK raw_509

prespace_510 -> leaf_534
leaf_534  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_510

literal_511 -> leaf_535
leaf_535  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%R"]
// END RANK literal_511

raw_512 -> leaf_536
leaf_536  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" (coRo),
and"]
// END RANK raw_512

prespace_513 -> leaf_537
leaf_537  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_513

literal_514 -> leaf_538
leaf_538  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%C"]
// END RANK literal_514

raw_515 -> leaf_539
leaf_539  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_515

prose_342 -> { raw_540 prespace_541 literal_542 raw_543 prespace_544 literal_545 raw_546}
{rank=same; raw_540 prespace_541 literal_542 raw_543 prespace_544 literal_545 raw_546}

raw_540 [label="raw"]

prespace_541 [label="prespace"]

literal_542 [label="literal"]

raw_543 [label="raw"]

prespace_544 [label="prespace"]

literal_545 [label="literal"]

raw_546 [label="raw"]


// END RANK prose_342

raw_540 -> leaf_547
leaf_547  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Note our"]
// END RANK raw_540

prespace_541 -> leaf_548
leaf_548  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_541

literal_542 -> leaf_549
leaf_549  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%L"]
// END RANK literal_542

raw_543 -> leaf_550
leaf_550  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is not the C version.  Tempted to have"]
// END RANK raw_543

prespace_544 -> leaf_551
leaf_551  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_544

literal_545 -> leaf_552
leaf_552  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%λ"]
// END RANK literal_545

raw_546 -> leaf_553
leaf_553  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" directly, but
that's a bit weird and it breaks the idea that format sequences are two
bytes long.  While I don't intend to write code that would break in this
case, eh.
"]
// END RANK raw_546

prose_343 -> { prespace_554 literal_555 raw_556}
{rank=same; prespace_554 literal_555 raw_556}

prespace_554 [label="prespace"]

literal_555 [label="literal"]

raw_556 [label="raw"]


// END RANK prose_343

prespace_554 -> leaf_557
leaf_557  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_554

literal_555 -> leaf_558
leaf_558  [color=Gray,shape=rectangle,fontname=Inconsolata,label="typeformat"]
// END RANK literal_555

raw_556 -> leaf_559
leaf_559  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" returns the correctly formatted string, or throws an error.
"]
// END RANK raw_556

codeblock_344 -> leaf_560
leaf_560  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local fmt_set = {\"*\", \"C\", \"L\", \"R\", \"T\", \"U\", \"b\", \"n\", \"q\", \"s\", \"t\" }

for i, v in ipairs(fmt_set) do
   fmt_set[i] = \"%%\" .. v
end

--[[
local function next_fmt(str)
   local head, tail
   for _, v in ipairs(fmt_set) do
      head, tail = 2
end]]

function core.format_safe(str, ...)

end"]
// END RANK codeblock_344

section_314 -> { header_561 prose_562 prose_563 codeblock_564}
{rank=same; header_561 prose_562 prose_563 codeblock_564}

header_561 [label="3 : litpat(s)"]

prose_562 [label="prose"]

prose_563 [label="prose"]

codeblock_564 [label="code block 485-506"]


// END RANK section_314

header_561 -> leaf_565
leaf_565  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** litpat(s)"]
// END RANK header_561

prose_562 -> { raw_566 prespace_567 literal_568 raw_569}
{rank=same; raw_566 prespace_567 literal_568 raw_569}

raw_566 [label="raw"]

prespace_567 [label="prespace"]

literal_568 [label="literal"]

raw_569 [label="raw"]


// END RANK prose_562

raw_566 -> leaf_570
leaf_570  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK raw_566

prespace_567 -> leaf_571
leaf_571  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_567

literal_568 -> leaf_572
leaf_572  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%"]
// END RANK literal_568

raw_569 -> leaf_573
leaf_573  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" escapes all pattern characters.
"]
// END RANK raw_569

prose_563 -> { raw_574 prespace_575 literal_576 raw_577 prespace_578 literal_579 raw_580 prespace_581 literal_582 raw_583}
{rank=same; raw_574 prespace_575 literal_576 raw_577 prespace_578 literal_579 raw_580 prespace_581 literal_582 raw_583}

raw_574 [label="raw"]

prespace_575 [label="prespace"]

literal_576 [label="literal"]

raw_577 [label="raw"]

prespace_578 [label="prespace"]

literal_579 [label="literal"]

raw_580 [label="raw"]

prespace_581 [label="prespace"]

literal_582 [label="literal"]

raw_583 [label="raw"]


// END RANK prose_563

raw_574 -> leaf_584
leaf_584  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The resulting string will literally match"]
// END RANK raw_574

prespace_575 -> leaf_585
leaf_585  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_575

literal_576 -> leaf_586
leaf_586  [color=Gray,shape=rectangle,fontname=Inconsolata,label="s"]
// END RANK literal_576

raw_577 -> leaf_587
leaf_587  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" in"]
// END RANK raw_577

prespace_578 -> leaf_588
leaf_588  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_578

literal_579 -> leaf_589
leaf_589  [color=Gray,shape=rectangle,fontname=Inconsolata,label="sub"]
// END RANK literal_579

raw_580 -> leaf_590
leaf_590  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" or"]
// END RANK raw_580

prespace_581 -> leaf_591
leaf_591  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_581

literal_582 -> leaf_592
leaf_592  [color=Gray,shape=rectangle,fontname=Inconsolata,label="gsub"]
// END RANK literal_582

raw_583 -> leaf_593
leaf_593  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_583

codeblock_564 -> leaf_594
leaf_594  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local matches =
  {
    [\"^\"] = \"%^\";
    [\"$\"] = \"%$\";
    [\"(\"] = \"%(\";
    [\")\"] = \"%)\";
    [\"%\"] = \"%%\";
    [\".\"] = \"%.\";
    [\"[\"] = \"%[\";
    [\"]\"] = \"%]\";
    [\"*\"] = \"%*\";
    [\"+\"] = \"%+\";
    [\"-\"] = \"%-\";
    [\"?\"] = \"%?\";
    [\"\\0\"] = \"%z\";
  }

function core.litpat(s)
    return (s:gsub(\".\", matches))
end"]
// END RANK codeblock_564

section_315 -> { header_595 prose_596 prose_597 codeblock_598 codeblock_599}
{rank=same; header_595 prose_596 prose_597 codeblock_598 codeblock_599}

header_595 [label="3 : cleave(str, patt)"]

prose_596 [label="prose"]

prose_597 [label="prose"]

codeblock_598 [label="code block 516-526"]

codeblock_599 [label="code block 528-547"]


// END RANK section_315

header_595 -> leaf_600
leaf_600  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** cleave(str, patt)"]
// END RANK header_595

prose_596 -> { raw_601 prespace_602 literal_603 raw_604 prespace_605 literal_606 raw_607}
{rank=same; raw_601 prespace_602 literal_603 raw_604 prespace_605 literal_606 raw_607}

raw_601 [label="raw"]

prespace_602 [label="prespace"]

literal_603 [label="literal"]

raw_604 [label="raw"]

prespace_605 [label="prespace"]

literal_606 [label="literal"]

raw_607 [label="raw"]


// END RANK prose_596

raw_601 -> leaf_608
leaf_608  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Performs the common operation of returning one run of bytes up to"]
// END RANK raw_601

prespace_602 -> leaf_609
leaf_609  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_602

literal_603 -> leaf_610
leaf_610  [color=Gray,shape=rectangle,fontname=Inconsolata,label="patt"]
// END RANK literal_603

raw_604 -> leaf_611
leaf_611  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
then the rest of the bytes after"]
// END RANK raw_604

prespace_605 -> leaf_612
leaf_612  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_605

literal_606 -> leaf_613
leaf_613  [color=Gray,shape=rectangle,fontname=Inconsolata,label="patt"]
// END RANK literal_606

raw_607 -> leaf_614
leaf_614  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_607

prose_597 -> { raw_615}
{rank=same; raw_615}

raw_615 [label="raw"]


// END RANK prose_597

raw_615 -> leaf_616
leaf_616  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Can be used to build iterators, either stateful or coroutine-based.
"]
// END RANK raw_615

codeblock_598 -> leaf_617
leaf_617  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function cleave(str, pat)
   local at = find(str, pat)
   if at then
      return sub(str, 1, at - 1), sub(str, at + 1)
   else
      return nil
   end
end
core.cleave = cleave"]
// END RANK codeblock_598

codeblock_599 -> leaf_618
leaf_618  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local yield, wrap = assert(coroutine.yield), assert(coroutine.wrap)

local function _lines(str)
   if str == \"\" or not str then return nil end
   local line, rem = cleave(str, \"\\n\")
   if line then
      yield(line)
   else
      yield(str)
   end
   _lines(rem)
end

local function lines(str)
  return coroutine.wrap(function() return _lines(str) end)
end

core.lines = lines"]
// END RANK codeblock_599

section_316 -> { header_619 prose_620 codeblock_621}
{rank=same; header_619 prose_620 codeblock_621}

header_619 [label="3 : codepoints(str)"]

prose_620 [label="prose"]

codeblock_621 [label="code block 555-585"]


// END RANK section_316

header_619 -> leaf_622
leaf_622  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** codepoints(str)"]
// END RANK header_619

prose_620 -> { raw_623 prespace_624 literal_625 raw_626}
{rank=same; raw_623 prespace_624 literal_625 raw_626}

raw_623 [label="raw"]

prespace_624 [label="prespace"]

literal_625 [label="literal"]

raw_626 [label="raw"]


// END RANK prose_620

raw_623 -> leaf_627
leaf_627  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Returns an array of the utf8 codepoints in"]
// END RANK raw_623

prespace_624 -> leaf_628
leaf_628  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_624

literal_625 -> leaf_629
leaf_629  [color=Gray,shape=rectangle,fontname=Inconsolata,label="str"]
// END RANK literal_625

raw_626 -> leaf_630
leaf_630  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", incidentally validating or
rather filtering the contents into utf8 compliance.
"]
// END RANK raw_626

codeblock_621 -> leaf_631
leaf_631  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
local function split(str, at)
   return sub(str,1, at), sub(str, at + 1)
end



function core.codepoints(str)
   local utf8 = core.utf8
   local codes = {}
   -- propagate nil
   if not str then return nil end
   -- break on bad type
   assert(type(str) == \"string\", \"codepoints must be given a string\")
   while #str > 0 do
      local width, err = utf8(str)
      if width then
         local head, tail = split(str, width)
         codes[#codes + 1] = head
         str = tail
      else
         -- make sure we take a bit off anyway
         str = sub(str, -1)
         -- for debugging
         codes[codes + 1] = { err = err }
      end
   end
   return codes
end"]
// END RANK codeblock_621

section_317 -> { header_632 prose_633 codeblock_634}
{rank=same; header_632 prose_633 codeblock_634}

header_632 [label="3 : core.slurp(filename)"]

prose_633 [label="prose"]

codeblock_634 [label="code block 592-599"]


// END RANK section_317

header_632 -> leaf_635
leaf_635  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** core.slurp(filename)"]
// END RANK header_632

prose_633 -> { raw_636}
{rank=same; raw_636}

raw_636 [label="raw"]


// END RANK prose_633

raw_636 -> leaf_637
leaf_637  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This takes a (text) file and returns a string containing its whole contents.
"]
// END RANK raw_636

codeblock_634 -> leaf_638
leaf_638  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function core.slurp(filename)
  local f = io.open(filename, \"rb\")
  local content = f:read(\"*all\")
  f:close()
  return content
end"]
// END RANK codeblock_634

section_9 -> { header_639 prose_640 section_641}
{rank=same; header_639 prose_640 section_641}

header_639 [label="2 : Errors and asserts"]

prose_640 [label="prose"]

section_641 [label="section: 605-646"]


// END RANK section_9

header_639 -> leaf_642
leaf_642  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Errors and asserts"]
// END RANK header_639

prose_640 -> { raw_643}
{rank=same; raw_643}

raw_643 [label="raw"]


// END RANK prose_640

raw_643 -> leaf_644
leaf_644  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

"]
// END RANK raw_643

section_641 -> { header_645 prose_646 prose_647 codeblock_648 codeblock_649}
{rank=same; header_645 prose_646 prose_647 codeblock_648 codeblock_649}

header_645 [label="3 : Assertfmt"]

prose_646 [label="prose"]

prose_647 [label="prose"]

codeblock_648 [label="code block 612-622"]

codeblock_649 [label="code block 624-626"]


// END RANK section_641

header_645 -> leaf_650
leaf_650  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Assertfmt"]
// END RANK header_645

prose_646 -> { raw_651}
{rank=same; raw_651}

raw_651 [label="raw"]


// END RANK prose_646

raw_651 -> leaf_652
leaf_652  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

I'll probably just globally replace assert with this over time.
"]
// END RANK raw_651

prose_647 -> { raw_653}
{rank=same; raw_653}

raw_653 [label="raw"]


// END RANK prose_647

raw_653 -> leaf_654
leaf_654  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This avoids doing concatenations and conversions on messages that we never
see in normal use.
"]
// END RANK raw_653

codeblock_648 -> leaf_655
leaf_655  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local format = string.format

function core.assertfmt(pred, msg, ...)
   if pred then
      return pred
   else
      error(format(msg, ...))
   end
end"]
// END RANK codeblock_648

codeblock_649 -> leaf_656
leaf_656  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return core"]
// END RANK codeblock_649


}
