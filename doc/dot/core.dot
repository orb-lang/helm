digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 300"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-85"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 codeblock_5 section_6 section_7 section_8}
{rank=same; header_2 prose_3 prose_4 codeblock_5 section_6 section_7 section_8}

header_2 [label="1 : Core"]

prose_3 [label="prose"]

prose_4 [label="prose"]

codeblock_5 [label="code block 8-10"]

section_6 [label="section: 13-39"]

section_7 [label="section: 40-57"]

section_8 [label="section: 86-242"]


// END RANK section_1

header_2 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Core"]
// END RANK header_2

prose_3 -> { raw_10 prespace_11 literal_12 raw_13}
{rank=same; raw_10 prespace_11 literal_12 raw_13}

raw_10 [label="raw"]

prespace_11 [label="prespace"]

literal_12 [label="literal"]

raw_13 [label="raw"]


// END RANK prose_3

raw_10 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_10

prespace_11 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_11

literal_12 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label="core"]
// END RANK literal_12

raw_13 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is for tampering with the global namespace and standard libraries.
"]
// END RANK raw_13

prose_4 -> { raw_18 prespace_19 literal_20 raw_21}
{rank=same; raw_18 prespace_19 literal_20 raw_21}

raw_18 [label="raw"]

prespace_19 [label="prespace"]

literal_20 [label="literal"]

raw_21 [label="raw"]


// END RANK prose_4

raw_18 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It will eventually land in"]
// END RANK raw_18

prespace_19 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_19

literal_20 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label="pylon"]
// END RANK literal_20

raw_21 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_21

codeblock_5 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local core = {}"]
// END RANK codeblock_5

section_6 -> { header_27 prose_28 prose_29 codeblock_30}
{rank=same; header_27 prose_28 prose_29 codeblock_30}

header_27 [label="2 : meta"]

prose_28 [label="prose"]

prose_29 [label="prose"]

codeblock_30 [label="code block 21-37"]


// END RANK section_6

header_27 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** meta"]
// END RANK header_27

prose_28 -> { raw_32 prespace_33 literal_34 raw_35 prespace_36 literal_37 raw_38 prespace_39 literal_40 raw_41 prespace_42 literal_43 raw_44 prespace_45 literal_46 raw_47 prespace_48 literal_49 raw_50}
{rank=same; raw_32 prespace_33 literal_34 raw_35 prespace_36 literal_37 raw_38 prespace_39 literal_40 raw_41 prespace_42 literal_43 raw_44 prespace_45 literal_46 raw_47 prespace_48 literal_49 raw_50}

raw_32 [label="raw"]

prespace_33 [label="prespace"]

literal_34 [label="literal"]

raw_35 [label="raw"]

prespace_36 [label="prespace"]

literal_37 [label="literal"]

raw_38 [label="raw"]

prespace_39 [label="prespace"]

literal_40 [label="literal"]

raw_41 [label="raw"]

prespace_42 [label="prespace"]

literal_43 [label="literal"]

raw_44 [label="raw"]

prespace_45 [label="prespace"]

literal_46 [label="literal"]

raw_47 [label="raw"]

prespace_48 [label="prespace"]

literal_49 [label="literal"]

raw_50 [label="raw"]


// END RANK prose_28

raw_32 -> leaf_51
leaf_51  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

We shorten a few of the common Lua keywords:"]
// END RANK raw_32

prespace_33 -> leaf_52
leaf_52  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_33

literal_34 -> leaf_53
leaf_53  [color=Gray,shape=rectangle,fontname=Inconsolata,label="coro"]
// END RANK literal_34

raw_35 -> leaf_54
leaf_54  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" rather than"]
// END RANK raw_35

prespace_36 -> leaf_55
leaf_55  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_36

literal_37 -> leaf_56
leaf_56  [color=Gray,shape=rectangle,fontname=Inconsolata,label="coroutine"]
// END RANK literal_37

raw_38 -> leaf_57
leaf_57  [color=Gray,shape=rectangle,fontname=Inconsolata,label=",
and"]
// END RANK raw_38

prespace_39 -> leaf_58
leaf_58  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_39

literal_40 -> leaf_59
leaf_59  [color=Gray,shape=rectangle,fontname=Inconsolata,label="getmeta"]
// END RANK literal_40

raw_41 -> leaf_60
leaf_60  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_41

prespace_42 -> leaf_61
leaf_61  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_42

literal_43 -> leaf_62
leaf_62  [color=Gray,shape=rectangle,fontname=Inconsolata,label="setmeta"]
// END RANK literal_43

raw_44 -> leaf_63
leaf_63  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" over"]
// END RANK raw_44

prespace_45 -> leaf_64
leaf_64  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_45

literal_46 -> leaf_65
leaf_65  [color=Gray,shape=rectangle,fontname=Inconsolata,label="getmetatable"]
// END RANK literal_46

raw_47 -> leaf_66
leaf_66  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_47

prespace_48 -> leaf_67
leaf_67  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_48

literal_49 -> leaf_68
leaf_68  [color=Gray,shape=rectangle,fontname=Inconsolata,label="setmetatable"]
// END RANK literal_49

raw_50 -> leaf_69
leaf_69  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_50

prose_29 -> { raw_70 prespace_71 literal_72 raw_73}
{rank=same; raw_70 prespace_71 literal_72 raw_73}

raw_70 [label="raw"]

prespace_71 [label="prespace"]

literal_72 [label="literal"]

raw_73 [label="raw"]


// END RANK prose_29

raw_70 -> leaf_74
leaf_74  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
In my code there is a repeated pattern of use that is basic enough that I'm
entering it into the global namespace as simple"]
// END RANK raw_70

prespace_71 -> leaf_75
leaf_75  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_71

literal_72 -> leaf_76
leaf_76  [color=Gray,shape=rectangle,fontname=Inconsolata,label="meta"]
// END RANK literal_72

raw_73 -> leaf_77
leaf_77  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_73

codeblock_30 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function core.meta(MT)
   if MT and MT.__index then
      -- inherit
      return setmetatable({}, MT)
   elseif MT then
      -- decorate
      MT.__index = MT
      return MT
   else
      -- new metatable
      local _M = {}
      _M.__index = _M
      return _M
   end
end"]
// END RANK codeblock_30

section_7 -> { header_79 prose_80 section_81 section_82}
{rank=same; header_79 prose_80 section_81 section_82}

header_79 [label="2 : Table extensions"]

prose_80 [label="prose"]

section_81 [label="section: 42-57"]

section_82 [label="section: 58-85"]


// END RANK section_7

header_79 -> leaf_83
leaf_83  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Table extensions"]
// END RANK header_79

prose_80 -> { raw_84}
{rank=same; raw_84}

raw_84 [label="raw"]


// END RANK prose_80

raw_84 -> leaf_85
leaf_85  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_84

section_81 -> { header_86 prose_87 codeblock_88}
{rank=same; header_86 prose_87 codeblock_88}

header_86 [label="3 : clone(tab)"]

prose_87 [label="prose"]

codeblock_88 [label="code block 46-55"]


// END RANK section_81

header_86 -> leaf_89
leaf_89  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** clone(tab)"]
// END RANK header_86

prose_87 -> { raw_90}
{rank=same; raw_90}

raw_90 [label="raw"]


// END RANK prose_87

raw_90 -> leaf_91
leaf_91  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Performs a shallow clone of table, attaching metatable if available.
"]
// END RANK raw_90

codeblock_88 -> leaf_92
leaf_92  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function core.clone(tab)
   local _M = getmetatable(tab)
   local clone = _M and setmetatable({}, _M) or {}
   for k,v in pairs(tab) do
      clone[k] = v
   end
   return clone
end"]
// END RANK codeblock_88

section_82 -> { header_93 prose_94 codeblock_95}
{rank=same; header_93 prose_94 codeblock_95}

header_93 [label="3 : splice(tab, index, into)"]

prose_94 [label="prose"]

codeblock_95 [label="code block 63-83"]


// END RANK section_82

header_93 -> leaf_96
leaf_96  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** splice(tab, index, into)"]
// END RANK header_93

prose_94 -> { raw_97 prespace_98 literal_99 raw_100 prespace_101 literal_102 raw_103 prespace_104 literal_105 raw_106}
{rank=same; raw_97 prespace_98 literal_99 raw_100 prespace_101 literal_102 raw_103 prespace_104 literal_105 raw_106}

raw_97 [label="raw"]

prespace_98 [label="prespace"]

literal_99 [label="literal"]

raw_100 [label="raw"]

prespace_101 [label="prespace"]

literal_102 [label="literal"]

raw_103 [label="raw"]

prespace_104 [label="prespace"]

literal_105 [label="literal"]

raw_106 [label="raw"]


// END RANK prose_94

raw_97 -> leaf_107
leaf_107  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Puts the full contents of"]
// END RANK raw_97

prespace_98 -> leaf_108
leaf_108  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_98

literal_99 -> leaf_109
leaf_109  [color=Gray,shape=rectangle,fontname=Inconsolata,label="into"]
// END RANK literal_99

raw_100 -> leaf_110
leaf_110  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" into"]
// END RANK raw_100

prespace_101 -> leaf_111
leaf_111  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_101

literal_102 -> leaf_112
leaf_112  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tab"]
// END RANK literal_102

raw_103 -> leaf_113
leaf_113  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" at"]
// END RANK raw_103

prespace_104 -> leaf_114
leaf_114  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_104

literal_105 -> leaf_115
leaf_115  [color=Gray,shape=rectangle,fontname=Inconsolata,label="index"]
// END RANK literal_105

raw_106 -> leaf_116
leaf_116  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  The argument order is
compatible with existing functions and method syntax.
"]
// END RANK raw_106

codeblock_95 -> leaf_117
leaf_117  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local insert = table.insert

local sp_er = \"table<core>.splice: \"
local _e_1 = sp_er .. \"$1 must be a table\"
local _e_2 = sp_er .. \"$2 must be a number\"
local _e_3 = sp_er .. \"$3 must be a table\"

function core.splice(tab, idx, into)
   assert(type(tab) == \"table\", _e_1)
   assert(type(idx) == \"number\", _e_2)
   assert(type(into) == \"table\", _e_3)
    idx = idx - 1
    local i = 1
    for j = 1, #into do
        insert(tab,i+idx,into[j])
        i = i + 1
    end
    return tab
end"]
// END RANK codeblock_95

section_8 -> { header_118 prose_119 codeblock_120 section_121 section_122 section_123 section_124 section_125}
{rank=same; header_118 prose_119 codeblock_120 section_121 section_122 section_123 section_124 section_125}

header_118 [label="2 : String extensions"]

prose_119 [label="prose"]

codeblock_120 [label="code block 88-93"]

section_121 [label="section: 95-144"]

section_122 [label="section: 145-197"]

section_123 [label="section: 198-227"]

section_124 [label="section: 228-242"]

section_125 [label="section: 243-300"]


// END RANK section_8

header_118 -> leaf_126
leaf_126  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** String extensions"]
// END RANK header_118

prose_119 -> { raw_127}
{rank=same; raw_127}

raw_127 [label="raw"]


// END RANK prose_119

raw_127 -> leaf_128
leaf_128  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_127

codeblock_120 -> leaf_129
leaf_129  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local byte = assert(string.byte)
local find = assert(string.find)
local sub = assert(string.sub)
local format = assert(string.format)"]
// END RANK codeblock_120

section_121 -> { header_130 prose_131 prose_132 codeblock_133}
{rank=same; header_130 prose_131 prose_132 codeblock_133}

header_130 [label="3 : utf8(char)"]

prose_131 [label="prose"]

prose_132 [label="prose"]

codeblock_133 [label="code block 103-142"]


// END RANK section_121

header_130 -> leaf_134
leaf_134  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** utf8(char)"]
// END RANK header_130

prose_131 -> { raw_135}
{rank=same; raw_135}

raw_135 [label="raw"]


// END RANK prose_131

raw_135 -> leaf_136
leaf_136  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This takes a string and validates the first character.
"]
// END RANK raw_135

prose_132 -> { raw_137}
{rank=same; raw_137}

raw_137 [label="raw"]


// END RANK prose_132

raw_137 -> leaf_138
leaf_138  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Return is either the (valid) length in bytes, or nil and an error string.
"]
// END RANK raw_137

codeblock_133 -> leaf_139
leaf_139  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function continue(c)
   return c >= 128 and c <= 191
end

function core.utf8(c)
   local byte = byte
   local head = byte(c)
   if head < 128 then
      return 1
   elseif head >= 194 and head <= 223 then
      local two = byte(c, 2)
      if continue(two) then
         return 2
      else
         return nil, \"utf8: bad second byte\"
      end
   elseif head >= 224 and head <= 239 then
      local two, three = byte(c, 2), byte(c, 3)
      if continue(two) and continue(three) then
         return 3
      else
         return nil, \"utf8: bad second and/or third byte\"
      end
   elseif head >= 240 and head <= 244 then
      local two, three, four = byte(c, 2), byte(c, 3), byte(c, 4)
      if continue(two) and continue(three) and continue(four) then
         return 4
      else
         return nil, \"utf8: bad second, third, and/or fourth byte\"
      end
   elseif continue(head) then
      return nil, \"utf8: continuation byte at head\"
   elseif head == 192 or head == 193 then
      return nil, \"utf8: 192 or 193 forbidden\"
   else -- head > 245
      return nil, \"utf8: byte > 245\"
   end
end"]
// END RANK codeblock_133

section_122 -> { header_140 prose_141 structure_142 prose_143 prose_144 prose_145 prose_146 prose_147 prose_148 prose_149 codeblock_150}
{rank=same; header_140 prose_141 structure_142 prose_143 prose_144 prose_145 prose_146 prose_147 prose_148 prose_149 codeblock_150}

header_140 [label="3 : format_safe(str, ...)"]

prose_141 [label="prose"]

structure_142 [label="structure"]

prose_143 [label="prose"]

prose_144 [label="prose"]

prose_145 [label="prose"]

prose_146 [label="prose"]

prose_147 [label="prose"]

prose_148 [label="prose"]

prose_149 [label="prose"]

codeblock_150 [label="code block 179-196"]


// END RANK section_122

header_140 -> leaf_151
leaf_151  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** format_safe(str, ...)"]
// END RANK header_140

prose_141 -> { raw_152}
{rank=same; raw_152}

raw_152 [label="raw"]


// END RANK prose_141

raw_152 -> leaf_153
leaf_153  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_152

structure_142 -> { hashline_154}
{rank=same; hashline_154}

hashline_154 [label="hashline"]


// END RANK structure_142

hashline_154 -> { hashtag_155}
{rank=same; hashtag_155}

hashtag_155 [label="hashtag"]


// END RANK hashline_154

hashtag_155 -> leaf_156
leaf_156  [color=Gray,shape=rectangle,fontname=Inconsolata,label="NB"]
// END RANK hashtag_155

prose_143 -> { prespace_157 literal_158 raw_159 prespace_160 literal_161 raw_162 prespace_163 literal_164 raw_165}
{rank=same; prespace_157 literal_158 raw_159 prespace_160 literal_161 raw_162 prespace_163 literal_164 raw_165}

prespace_157 [label="prespace"]

literal_158 [label="literal"]

raw_159 [label="raw"]

prespace_160 [label="prespace"]

literal_161 [label="literal"]

raw_162 [label="raw"]

prespace_163 [label="prespace"]

literal_164 [label="literal"]

raw_165 [label="raw"]


// END RANK prose_143

prespace_157 -> leaf_166
leaf_166  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_157

literal_158 -> leaf_167
leaf_167  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%d"]
// END RANK literal_158

raw_159 -> leaf_168
leaf_168  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" as a call to"]
// END RANK raw_159

prespace_160 -> leaf_169
leaf_169  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_160

literal_161 -> leaf_170
leaf_170  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tonumber"]
// END RANK literal_161

raw_162 -> leaf_171
leaf_171  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  The latter I will allow, I'm struggling to find
a circumstance where casting \"1\" to \"1\" through"]
// END RANK raw_162

prespace_163 -> leaf_172
leaf_172  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_163

literal_164 -> leaf_173
leaf_173  [color=Gray,shape=rectangle,fontname=Inconsolata,label="1"]
// END RANK literal_164

raw_165 -> leaf_174
leaf_174  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is dangerous.
"]
// END RANK raw_165

prose_144 -> { raw_175 prespace_176 literal_177 raw_178 prespace_179 literal_180 raw_181 prespace_182 literal_183 raw_184}
{rank=same; raw_175 prespace_176 literal_177 raw_178 prespace_179 literal_180 raw_181 prespace_182 literal_183 raw_184}

raw_175 [label="raw"]

prespace_176 [label="prespace"]

literal_177 [label="literal"]

raw_178 [label="raw"]

prespace_179 [label="prespace"]

literal_180 [label="literal"]

raw_181 [label="raw"]

prespace_182 [label="prespace"]

literal_183 [label="literal"]

raw_184 [label="raw"]


// END RANK prose_144

raw_175 -> leaf_185
leaf_185  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This isn't \"safe\" in the sense of preventing injections, all it does is check
that its arguments are of a valid type, prohibiting implicit"]
// END RANK raw_175

prespace_176 -> leaf_186
leaf_186  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_176

literal_177 -> leaf_187
leaf_187  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tostring"]
// END RANK literal_177

raw_178 -> leaf_188
leaf_188  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
conversions.  So"]
// END RANK raw_178

prespace_179 -> leaf_189
leaf_189  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_179

literal_180 -> leaf_190
leaf_190  [color=Gray,shape=rectangle,fontname=Inconsolata,label="format(\"select %s from ...\", \"';drop table users;\")"]
// END RANK literal_180

raw_181 -> leaf_191
leaf_191  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" will
get through, but not"]
// END RANK raw_181

prespace_182 -> leaf_192
leaf_192  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_182

literal_183 -> leaf_193
leaf_193  [color=Gray,shape=rectangle,fontname=Inconsolata,label="format(\"%s\", setmeta({}, {__tostring = function() return \"'; drop...\"}))"]
// END RANK literal_183

raw_184 -> leaf_194
leaf_194  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_184

prose_145 -> { raw_195}
{rank=same; raw_195}

raw_195 [label="raw"]


// END RANK prose_145

raw_195 -> leaf_196
leaf_196  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Less concerned about hostility and more about explicit coding practices. Also
don't want to undermine hardening elsewhere.
"]
// END RANK raw_195

prose_146 -> { raw_197 prespace_198 literal_199 raw_200 prespace_201 literal_202 raw_203 prespace_204 literal_205 raw_206}
{rank=same; raw_197 prespace_198 literal_199 raw_200 prespace_201 literal_202 raw_203 prespace_204 literal_205 raw_206}

raw_197 [label="raw"]

prespace_198 [label="prespace"]

literal_199 [label="literal"]

raw_200 [label="raw"]

prespace_201 [label="prespace"]

literal_202 [label="literal"]

raw_203 [label="raw"]

prespace_204 [label="prespace"]

literal_205 [label="literal"]

raw_206 [label="raw"]


// END RANK prose_146

raw_197 -> leaf_207
leaf_207  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
From the wiki, the full set of numeric parameters is"]
// END RANK raw_197

prespace_198 -> leaf_208
leaf_208  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_198

literal_199 -> leaf_209
leaf_209  [color=Gray,shape=rectangle,fontname=Inconsolata,label="{A,a,c,d,E,e,f,G,g,i,o,u,X,x}"]
// END RANK literal_199

raw_200 -> leaf_210
leaf_210  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  That leaves"]
// END RANK raw_200

prespace_201 -> leaf_211
leaf_211  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_201

literal_202 -> leaf_212
leaf_212  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%q"]
// END RANK literal_202

raw_203 -> leaf_213
leaf_213  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_203

prespace_204 -> leaf_214
leaf_214  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_204

literal_205 -> leaf_215
leaf_215  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%s"]
// END RANK literal_205

raw_206 -> leaf_216
leaf_216  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", the former does
string escaping but of course it is the Lua/C style of escaping.
"]
// END RANK raw_206

prose_147 -> { raw_217 prespace_218 literal_219 raw_220 prespace_221 literal_222 raw_223 prespace_224 literal_225 raw_226 prespace_227 literal_228 raw_229 prespace_230 literal_231 raw_232 prespace_233 literal_234 raw_235 prespace_236 literal_237 raw_238 prespace_239 literal_240 raw_241 prespace_242 literal_243 raw_244}
{rank=same; raw_217 prespace_218 literal_219 raw_220 prespace_221 literal_222 raw_223 prespace_224 literal_225 raw_226 prespace_227 literal_228 raw_229 prespace_230 literal_231 raw_232 prespace_233 literal_234 raw_235 prespace_236 literal_237 raw_238 prespace_239 literal_240 raw_241 prespace_242 literal_243 raw_244}

raw_217 [label="raw"]

prespace_218 [label="prespace"]

literal_219 [label="literal"]

raw_220 [label="raw"]

prespace_221 [label="prespace"]

literal_222 [label="literal"]

raw_223 [label="raw"]

prespace_224 [label="prespace"]

literal_225 [label="literal"]

raw_226 [label="raw"]

prespace_227 [label="prespace"]

literal_228 [label="literal"]

raw_229 [label="raw"]

prespace_230 [label="prespace"]

literal_231 [label="literal"]

raw_232 [label="raw"]

prespace_233 [label="prespace"]

literal_234 [label="literal"]

raw_235 [label="raw"]

prespace_236 [label="prespace"]

literal_237 [label="literal"]

raw_238 [label="raw"]

prespace_239 [label="prespace"]

literal_240 [label="literal"]

raw_241 [label="raw"]

prespace_242 [label="prespace"]

literal_243 [label="literal"]

raw_244 [label="raw"]


// END RANK prose_147

raw_217 -> leaf_245
leaf_245  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We add"]
// END RANK raw_217

prespace_218 -> leaf_246
leaf_246  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_218

literal_219 -> leaf_247
leaf_247  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%t"]
// END RANK literal_219

raw_220 -> leaf_248
leaf_248  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_220

prespace_221 -> leaf_249
leaf_249  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_221

literal_222 -> leaf_250
leaf_250  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%L"]
// END RANK literal_222

raw_223 -> leaf_251
leaf_251  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" (for λ), which call"]
// END RANK raw_223

prespace_224 -> leaf_252
leaf_252  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_224

literal_225 -> leaf_253
leaf_253  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tostring"]
// END RANK literal_225

raw_226 -> leaf_254
leaf_254  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" on a table or a function
respectively. "]
// END RANK raw_226

prespace_227 -> leaf_255
leaf_255  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_227

literal_228 -> leaf_256
leaf_256  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%t"]
// END RANK literal_228

raw_229 -> leaf_257
leaf_257  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" will actually accept all remaining compound types:"]
// END RANK raw_229

prespace_230 -> leaf_258
leaf_258  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_230

literal_231 -> leaf_259
leaf_259  [color=Gray,shape=rectangle,fontname=Inconsolata,label="userdata"]
// END RANK literal_231

raw_232 -> leaf_260
leaf_260  [color=Gray,shape=rectangle,fontname=Inconsolata,label=","]
// END RANK raw_232

prespace_233 -> leaf_261
leaf_261  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_233

literal_234 -> leaf_262
leaf_262  [color=Gray,shape=rectangle,fontname=Inconsolata,label="thread"]
// END RANK literal_234

raw_235 -> leaf_263
leaf_263  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", and"]
// END RANK raw_235

prespace_236 -> leaf_264
leaf_264  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_236

literal_237 -> leaf_265
leaf_265  [color=Gray,shape=rectangle,fontname=Inconsolata,label="cdata"]
// END RANK literal_237

raw_238 -> leaf_266
leaf_266  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  While we're being thorough,"]
// END RANK raw_238

prespace_239 -> leaf_267
leaf_267  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_239

literal_240 -> leaf_268
leaf_268  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%b"]
// END RANK literal_240

raw_241 -> leaf_269
leaf_269  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" for
boolean.  Perhaps"]
// END RANK raw_241

prespace_242 -> leaf_270
leaf_270  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_242

literal_243 -> leaf_271
leaf_271  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%*"]
// END RANK literal_243

raw_244 -> leaf_272
leaf_272  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" as a wildcard?
"]
// END RANK raw_244

prose_148 -> { raw_273 prespace_274 literal_275 raw_276}
{rank=same; raw_273 prespace_274 literal_275 raw_276}

raw_273 [label="raw"]

prespace_274 [label="prespace"]

literal_275 [label="literal"]

raw_276 [label="raw"]


// END RANK prose_148

raw_273 -> leaf_277
leaf_277  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Note our"]
// END RANK raw_273

prespace_274 -> leaf_278
leaf_278  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_274

literal_275 -> leaf_279
leaf_279  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%L"]
// END RANK literal_275

raw_276 -> leaf_280
leaf_280  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is not the C version.
"]
// END RANK raw_276

prose_149 -> { prespace_281 literal_282 raw_283}
{rank=same; prespace_281 literal_282 raw_283}

prespace_281 [label="prespace"]

literal_282 [label="literal"]

raw_283 [label="raw"]


// END RANK prose_149

prespace_281 -> leaf_284
leaf_284  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_281

literal_282 -> leaf_285
leaf_285  [color=Gray,shape=rectangle,fontname=Inconsolata,label="format_safe"]
// END RANK literal_282

raw_283 -> leaf_286
leaf_286  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" returns the correctly formatted string, or throws an error.
"]
// END RANK raw_283

codeblock_150 -> leaf_287
leaf_287  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local fmt_set = {\"L\", \"q\", \"s\", \"t\"}

for i, v in ipairs(fmt_set) do
   fmt_set[i] = \"%%\" .. v
end

--[[
local function next_fmt(str)
   local head, tail
   for _, v in ipairs(fmt_set) do
      head, tail = 2
end]]

function core.format_safe(str, ...)

end"]
// END RANK codeblock_150

section_123 -> { header_288 prose_289 prose_290 codeblock_291}
{rank=same; header_288 prose_289 prose_290 codeblock_291}

header_288 [label="3 : litpat(s)"]

prose_289 [label="prose"]

prose_290 [label="prose"]

codeblock_291 [label="code block 204-225"]


// END RANK section_123

header_288 -> leaf_292
leaf_292  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** litpat(s)"]
// END RANK header_288

prose_289 -> { raw_293 prespace_294 literal_295 raw_296}
{rank=same; raw_293 prespace_294 literal_295 raw_296}

raw_293 [label="raw"]

prespace_294 [label="prespace"]

literal_295 [label="literal"]

raw_296 [label="raw"]


// END RANK prose_289

raw_293 -> leaf_297
leaf_297  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK raw_293

prespace_294 -> leaf_298
leaf_298  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_294

literal_295 -> leaf_299
leaf_299  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%"]
// END RANK literal_295

raw_296 -> leaf_300
leaf_300  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" escapes all pattern characters.
"]
// END RANK raw_296

prose_290 -> { raw_301 prespace_302 literal_303 raw_304 prespace_305 literal_306 raw_307 prespace_308 literal_309 raw_310}
{rank=same; raw_301 prespace_302 literal_303 raw_304 prespace_305 literal_306 raw_307 prespace_308 literal_309 raw_310}

raw_301 [label="raw"]

prespace_302 [label="prespace"]

literal_303 [label="literal"]

raw_304 [label="raw"]

prespace_305 [label="prespace"]

literal_306 [label="literal"]

raw_307 [label="raw"]

prespace_308 [label="prespace"]

literal_309 [label="literal"]

raw_310 [label="raw"]


// END RANK prose_290

raw_301 -> leaf_311
leaf_311  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The resulting string will literally match"]
// END RANK raw_301

prespace_302 -> leaf_312
leaf_312  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_302

literal_303 -> leaf_313
leaf_313  [color=Gray,shape=rectangle,fontname=Inconsolata,label="s"]
// END RANK literal_303

raw_304 -> leaf_314
leaf_314  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" in"]
// END RANK raw_304

prespace_305 -> leaf_315
leaf_315  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_305

literal_306 -> leaf_316
leaf_316  [color=Gray,shape=rectangle,fontname=Inconsolata,label="sub"]
// END RANK literal_306

raw_307 -> leaf_317
leaf_317  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" or"]
// END RANK raw_307

prespace_308 -> leaf_318
leaf_318  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_308

literal_309 -> leaf_319
leaf_319  [color=Gray,shape=rectangle,fontname=Inconsolata,label="gsub"]
// END RANK literal_309

raw_310 -> leaf_320
leaf_320  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_310

codeblock_291 -> leaf_321
leaf_321  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local matches =
  {
    [\"^\"] = \"%^\";
    [\"$\"] = \"%$\";
    [\"(\"] = \"%(\";
    [\")\"] = \"%)\";
    [\"%\"] = \"%%\";
    [\".\"] = \"%.\";
    [\"[\"] = \"%[\";
    [\"]\"] = \"%]\";
    [\"*\"] = \"%*\";
    [\"+\"] = \"%+\";
    [\"-\"] = \"%-\";
    [\"?\"] = \"%?\";
    [\"\\0\"] = \"%z\";
  }

function core.litpat(s)
    return (s:gsub(\".\", matches))
end"]
// END RANK codeblock_291

section_124 -> { header_322 prose_323 prose_324 codeblock_325}
{rank=same; header_322 prose_323 prose_324 codeblock_325}

header_322 [label="3 : cleave(str, patt)"]

prose_323 [label="prose"]

prose_324 [label="prose"]

codeblock_325 [label="code block 235-240"]


// END RANK section_124

header_322 -> leaf_326
leaf_326  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** cleave(str, patt)"]
// END RANK header_322

prose_323 -> { raw_327 prespace_328 literal_329 raw_330 prespace_331 literal_332 raw_333}
{rank=same; raw_327 prespace_328 literal_329 raw_330 prespace_331 literal_332 raw_333}

raw_327 [label="raw"]

prespace_328 [label="prespace"]

literal_329 [label="literal"]

raw_330 [label="raw"]

prespace_331 [label="prespace"]

literal_332 [label="literal"]

raw_333 [label="raw"]


// END RANK prose_323

raw_327 -> leaf_334
leaf_334  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Performs the common operation of returning one run of bytes up to"]
// END RANK raw_327

prespace_328 -> leaf_335
leaf_335  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_328

literal_329 -> leaf_336
leaf_336  [color=Gray,shape=rectangle,fontname=Inconsolata,label="patt"]
// END RANK literal_329

raw_330 -> leaf_337
leaf_337  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
then the rest of the bytes after"]
// END RANK raw_330

prespace_331 -> leaf_338
leaf_338  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_331

literal_332 -> leaf_339
leaf_339  [color=Gray,shape=rectangle,fontname=Inconsolata,label="patt"]
// END RANK literal_332

raw_333 -> leaf_340
leaf_340  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_333

prose_324 -> { raw_341}
{rank=same; raw_341}

raw_341 [label="raw"]


// END RANK prose_324

raw_341 -> leaf_342
leaf_342  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Can be used to build iterators, either stateful or coroutine-based.
"]
// END RANK raw_341

codeblock_325 -> leaf_343
leaf_343  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function core.cleave(str, pat)
   local at = find(str, pat)
   return sub(str, 1, at - 1), sub(str, at + 1)
end"]
// END RANK codeblock_325

section_125 -> { header_344 prose_345 codeblock_346 codeblock_347}
{rank=same; header_344 prose_345 codeblock_346 codeblock_347}

header_344 [label="3 : codepoints(str)"]

prose_345 [label="prose"]

codeblock_346 [label="code block 248-276"]

codeblock_347 [label="code block 278-280"]


// END RANK section_125

header_344 -> leaf_348
leaf_348  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** codepoints(str)"]
// END RANK header_344

prose_345 -> { raw_349 prespace_350 literal_351 raw_352}
{rank=same; raw_349 prespace_350 literal_351 raw_352}

raw_349 [label="raw"]

prespace_350 [label="prespace"]

literal_351 [label="literal"]

raw_352 [label="raw"]


// END RANK prose_345

raw_349 -> leaf_353
leaf_353  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Returns an array of the utf8 codepoints in"]
// END RANK raw_349

prespace_350 -> leaf_354
leaf_354  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_350

literal_351 -> leaf_355
leaf_355  [color=Gray,shape=rectangle,fontname=Inconsolata,label="str"]
// END RANK literal_351

raw_352 -> leaf_356
leaf_356  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", incidentally validating or
rather filtering the contents into utf8 compliance.
"]
// END RANK raw_352

codeblock_346 -> leaf_357
leaf_357  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
local function split(str, at)
   return sub(str,1, at), sub(str, at + 1)
end

function core.codepoints(str)
   local utf8 = core.utf8
   local codes = {}
   -- propagate nil
   if not str then return nil end
   -- break on bad type
   assert(type(str) == \"string\", \"codepoints must be given a string\")
   while #str > 0 do
      local width, err = utf8(str)
      if width then
         local head, tail = split(str, width)
         codes[#codes + 1] = head
         str = tail
      else
         -- make sure we take a bit off anyway
         str = sub(str, -1)
         -- for debugging
         codes[codes + 1] = { err = err }
      end
   end
   return codes
end"]
// END RANK codeblock_346

codeblock_347 -> leaf_358
leaf_358  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return core"]
// END RANK codeblock_347


}
