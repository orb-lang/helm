digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 471"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-426"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 codeblock_5 section_6 section_7 section_8 section_9}
{rank=same; header_2 prose_3 prose_4 codeblock_5 section_6 section_7 section_8 section_9}

header_2 [label="1 : Core"]

prose_3 [label="prose"]

prose_4 [label="prose"]

codeblock_5 [label="code block 8-10"]

section_6 [label="section: 13-39"]

section_7 [label="section: 65-200"]

section_8 [label="section: 229-390"]

section_9 [label="section: 427-429"]


// END RANK section_1

header_2 -> leaf_10
leaf_10  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Core"]
// END RANK header_2

prose_3 -> { raw_11 prespace_12 literal_13 raw_14}
{rank=same; raw_11 prespace_12 literal_13 raw_14}

raw_11 [label="raw"]

prespace_12 [label="prespace"]

literal_13 [label="literal"]

raw_14 [label="raw"]


// END RANK prose_3

raw_11 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_11

prespace_12 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_12

literal_13 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label="core"]
// END RANK literal_13

raw_14 -> leaf_18
leaf_18  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is for tampering with the global namespace and standard libraries.
"]
// END RANK raw_14

prose_4 -> { raw_19 prespace_20 literal_21 raw_22}
{rank=same; raw_19 prespace_20 literal_21 raw_22}

raw_19 [label="raw"]

prespace_20 [label="prespace"]

literal_21 [label="literal"]

raw_22 [label="raw"]


// END RANK prose_4

raw_19 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It will eventually land in"]
// END RANK raw_19

prespace_20 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_20

literal_21 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label="pylon"]
// END RANK literal_21

raw_22 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_22

codeblock_5 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local core = {}"]
// END RANK codeblock_5

section_6 -> { header_28 prose_29 prose_30 codeblock_31 section_32}
{rank=same; header_28 prose_29 prose_30 codeblock_31 section_32}

header_28 [label="2 : meta"]

prose_29 [label="prose"]

prose_30 [label="prose"]

codeblock_31 [label="code block 21-37"]

section_32 [label="section: 40-64"]


// END RANK section_6

header_28 -> leaf_33
leaf_33  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** meta"]
// END RANK header_28

prose_29 -> { raw_34 prespace_35 literal_36 raw_37 prespace_38 literal_39 raw_40 prespace_41 literal_42 raw_43 prespace_44 literal_45 raw_46 prespace_47 literal_48 raw_49 prespace_50 literal_51 raw_52}
{rank=same; raw_34 prespace_35 literal_36 raw_37 prespace_38 literal_39 raw_40 prespace_41 literal_42 raw_43 prespace_44 literal_45 raw_46 prespace_47 literal_48 raw_49 prespace_50 literal_51 raw_52}

raw_34 [label="raw"]

prespace_35 [label="prespace"]

literal_36 [label="literal"]

raw_37 [label="raw"]

prespace_38 [label="prespace"]

literal_39 [label="literal"]

raw_40 [label="raw"]

prespace_41 [label="prespace"]

literal_42 [label="literal"]

raw_43 [label="raw"]

prespace_44 [label="prespace"]

literal_45 [label="literal"]

raw_46 [label="raw"]

prespace_47 [label="prespace"]

literal_48 [label="literal"]

raw_49 [label="raw"]

prespace_50 [label="prespace"]

literal_51 [label="literal"]

raw_52 [label="raw"]


// END RANK prose_29

raw_34 -> leaf_53
leaf_53  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

We shorten a few of the common Lua keywords:"]
// END RANK raw_34

prespace_35 -> leaf_54
leaf_54  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_35

literal_36 -> leaf_55
leaf_55  [color=Gray,shape=rectangle,fontname=Inconsolata,label="coro"]
// END RANK literal_36

raw_37 -> leaf_56
leaf_56  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" rather than"]
// END RANK raw_37

prespace_38 -> leaf_57
leaf_57  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_38

literal_39 -> leaf_58
leaf_58  [color=Gray,shape=rectangle,fontname=Inconsolata,label="coroutine"]
// END RANK literal_39

raw_40 -> leaf_59
leaf_59  [color=Gray,shape=rectangle,fontname=Inconsolata,label=",
and"]
// END RANK raw_40

prespace_41 -> leaf_60
leaf_60  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_41

literal_42 -> leaf_61
leaf_61  [color=Gray,shape=rectangle,fontname=Inconsolata,label="getmeta"]
// END RANK literal_42

raw_43 -> leaf_62
leaf_62  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_43

prespace_44 -> leaf_63
leaf_63  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_44

literal_45 -> leaf_64
leaf_64  [color=Gray,shape=rectangle,fontname=Inconsolata,label="setmeta"]
// END RANK literal_45

raw_46 -> leaf_65
leaf_65  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" over"]
// END RANK raw_46

prespace_47 -> leaf_66
leaf_66  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_47

literal_48 -> leaf_67
leaf_67  [color=Gray,shape=rectangle,fontname=Inconsolata,label="getmetatable"]
// END RANK literal_48

raw_49 -> leaf_68
leaf_68  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_49

prespace_50 -> leaf_69
leaf_69  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_50

literal_51 -> leaf_70
leaf_70  [color=Gray,shape=rectangle,fontname=Inconsolata,label="setmetatable"]
// END RANK literal_51

raw_52 -> leaf_71
leaf_71  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_52

prose_30 -> { raw_72 prespace_73 literal_74 raw_75}
{rank=same; raw_72 prespace_73 literal_74 raw_75}

raw_72 [label="raw"]

prespace_73 [label="prespace"]

literal_74 [label="literal"]

raw_75 [label="raw"]


// END RANK prose_30

raw_72 -> leaf_76
leaf_76  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
In my code there is a repeated pattern of use that is basic enough that I'm
entering it into the global namespace as simple"]
// END RANK raw_72

prespace_73 -> leaf_77
leaf_77  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_73

literal_74 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label="meta"]
// END RANK literal_74

raw_75 -> leaf_79
leaf_79  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_75

codeblock_31 -> leaf_80
leaf_80  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function core.meta(MT)
   if MT and MT.__index then
      -- inherit
      return setmetatable({}, MT)
   elseif MT then
      -- decorate
      MT.__index = MT
      return MT
   else
      -- new metatable
      local _M = {}
      _M.__index = _M
      return _M
   end
end"]
// END RANK codeblock_31

section_32 -> { header_81 prose_82 prose_83 prose_84 codeblock_85}
{rank=same; header_81 prose_82 prose_83 prose_84 codeblock_85}

header_81 [label="3 : hasmetamethod(tab, mmethod)"]

prose_82 [label="prose"]

prose_83 [label="prose"]

prose_84 [label="prose"]

codeblock_85 [label="code block 51-62"]


// END RANK section_32

header_81 -> leaf_86
leaf_86  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** hasmetamethod(tab, mmethod)"]
// END RANK header_81

prose_82 -> { raw_87 prespace_88 literal_89 raw_90}
{rank=same; raw_87 prespace_88 literal_89 raw_90}

raw_87 [label="raw"]

prespace_88 [label="prespace"]

literal_89 [label="literal"]

raw_90 [label="raw"]


// END RANK prose_82

raw_87 -> leaf_91
leaf_91  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The function of this is clear: given a table, return"]
// END RANK raw_87

prespace_88 -> leaf_92
leaf_92  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_88

literal_89 -> leaf_93
leaf_93  [color=Gray,shape=rectangle,fontname=Inconsolata,label="true"]
// END RANK literal_89

raw_90 -> leaf_94
leaf_94  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" if it can receive
a given metamethod.
"]
// END RANK raw_90

prose_83 -> { raw_95}
{rank=same; raw_95}

raw_95 [label="raw"]


// END RANK prose_83

raw_95 -> leaf_96
leaf_96  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The question is, how magical to make it. I'm going with \"slightly magical\" for
now.  You can leave off the \"__\" in checking for a metamethod.
"]
// END RANK raw_95

prose_84 -> { raw_97 prespace_98 literal_99 raw_100 prespace_101 literal_102 raw_103}
{rank=same; raw_97 prespace_98 literal_99 raw_100 prespace_101 literal_102 raw_103}

raw_97 [label="raw"]

prespace_98 [label="prespace"]

literal_99 [label="literal"]

raw_100 [label="raw"]

prespace_101 [label="prespace"]

literal_102 [label="literal"]

raw_103 [label="raw"]


// END RANK prose_84

raw_97 -> leaf_104
leaf_104  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A successful lookup returns the result, presumable truthy, otherwise"]
// END RANK raw_97

prespace_98 -> leaf_105
leaf_105  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_98

literal_99 -> leaf_106
leaf_106  [color=Gray,shape=rectangle,fontname=Inconsolata,label="false"]
// END RANK literal_99

raw_100 -> leaf_107
leaf_107  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
for a non-table argument and"]
// END RANK raw_100

prespace_101 -> leaf_108
leaf_108  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_101

literal_102 -> leaf_109
leaf_109  [color=Gray,shape=rectangle,fontname=Inconsolata,label="nil"]
// END RANK literal_102

raw_103 -> leaf_110
leaf_110  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" for a failed lookup.
"]
// END RANK raw_103

codeblock_85 -> leaf_111
leaf_111  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local sub = assert(string.sub)

function core.hasmetamethod(tab, mmethod)
   assert(type(mmethod) == \"string\", \"metamethod must be a string\")
   if sub(mmethod,1,2) == \"__\" then
      return type(tab) == \"table\" and tab[mmethod]
   else
      return type(tab) == \"table\" and tab[\"__\" ..mmethod]
   end
end"]
// END RANK codeblock_85

section_7 -> { header_112 prose_113 section_114 section_115 section_116 section_117 section_118 section_119 section_120 section_121}
{rank=same; header_112 prose_113 section_114 section_115 section_116 section_117 section_118 section_119 section_120 section_121}

header_112 [label="2 : Table extensions"]

prose_113 [label="prose"]

section_114 [label="section: 68-95"]

section_115 [label="section: 96-111"]

section_116 [label="section: 112-126"]

section_117 [label="section: 127-151"]

section_118 [label="section: 152-168"]

section_119 [label="section: 169-185"]

section_120 [label="section: 186-200"]

section_121 [label="section: 201-228"]


// END RANK section_7

header_112 -> leaf_122
leaf_122  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Table extensions"]
// END RANK header_112

prose_113 -> { raw_123}
{rank=same; raw_123}

raw_123 [label="raw"]


// END RANK prose_113

raw_123 -> leaf_124
leaf_124  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

"]
// END RANK raw_123

section_114 -> { header_125 prose_126 codeblock_127}
{rank=same; header_125 prose_126 codeblock_127}

header_125 [label="3 : hasfield(field, tab) & hasfield.field(tab)"]

prose_126 [label="prose"]

codeblock_127 [label="code block 73-94"]


// END RANK section_114

header_125 -> leaf_128
leaf_128  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** hasfield(field, tab) & hasfield.field(tab)"]
// END RANK header_125

prose_126 -> { raw_129}
{rank=same; raw_129}

raw_129 [label="raw"]


// END RANK prose_126

raw_129 -> leaf_130
leaf_130  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


A nicety which can be used both for predication and assignment.
"]
// END RANK raw_129

codeblock_127 -> leaf_131
leaf_131  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function _hasfield(field, tab)
   if type(tab) == \"table\" and tab[field] ~= nil then
      return true, tab[field]
   else
      return false
   end
end

function _hf__index(_, field)
   return function(tab)
      return _hasfield(field, tab)
   end
end

function _hf__call(_, field, tab)
   return _hasfield(field, tab)
end

core.hasfield = setmetatable({}, { __index = _hf__index,
                                   __call  = _hf__call })"]
// END RANK codeblock_127

section_115 -> { header_132 prose_133 codeblock_134}
{rank=same; header_132 prose_133 codeblock_134}

header_132 [label="3 : clone(tab)"]

prose_133 [label="prose"]

codeblock_134 [label="code block 100-109"]


// END RANK section_115

header_132 -> leaf_135
leaf_135  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** clone(tab)"]
// END RANK header_132

prose_133 -> { raw_136}
{rank=same; raw_136}

raw_136 [label="raw"]


// END RANK prose_133

raw_136 -> leaf_137
leaf_137  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Performs a shallow clone of table, attaching metatable if available.
"]
// END RANK raw_136

codeblock_134 -> leaf_138
leaf_138  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function core.clone(tab)
   local _M = getmetatable(tab)
   local clone = _M and setmetatable({}, _M) or {}
   for k,v in pairs(tab) do
      clone[k] = v
   end
   return clone
end"]
// END RANK codeblock_134

section_116 -> { header_139 prose_140 codeblock_141}
{rank=same; header_139 prose_140 codeblock_141}

header_139 [label="3 : arrayof(tab)"]

prose_140 [label="prose"]

codeblock_141 [label="code block 116-124"]


// END RANK section_116

header_139 -> leaf_142
leaf_142  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** arrayof(tab)"]
// END RANK header_139

prose_140 -> { raw_143}
{rank=same; raw_143}

raw_143 [label="raw"]


// END RANK prose_140

raw_143 -> leaf_144
leaf_144  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Clones and returns the array portion of a table.
"]
// END RANK raw_143

codeblock_141 -> leaf_145
leaf_145  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function core.arrayof(tab)
   local arr = {}
   for i,v in ipairs(tab) do
      arr[i] = v
   end
   return arr
end"]
// END RANK codeblock_141

section_117 -> { header_146 prose_147 codeblock_148}
{rank=same; header_146 prose_147 codeblock_148}

header_146 [label="3 : select(tab, key)"]

prose_147 [label="prose"]

codeblock_148 [label="code block 131-149"]


// END RANK section_117

header_146 -> leaf_149
leaf_149  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** select(tab, key)"]
// END RANK header_146

prose_147 -> { raw_150 prespace_151 literal_152 raw_153 prespace_154 literal_155 raw_156}
{rank=same; raw_150 prespace_151 literal_152 raw_153 prespace_154 literal_155 raw_156}

raw_150 [label="raw"]

prespace_151 [label="prespace"]

literal_152 [label="literal"]

raw_153 [label="raw"]

prespace_154 [label="prespace"]

literal_155 [label="literal"]

raw_156 [label="raw"]


// END RANK prose_147

raw_150 -> leaf_157
leaf_157  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Recursively return all"]
// END RANK raw_150

prespace_151 -> leaf_158
leaf_158  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_151

literal_152 -> leaf_159
leaf_159  [color=Gray,shape=rectangle,fontname=Inconsolata,label="v"]
// END RANK literal_152

raw_153 -> leaf_160
leaf_160  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" for"]
// END RANK raw_153

prespace_154 -> leaf_161
leaf_161  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_154

literal_155 -> leaf_162
leaf_162  [color=Gray,shape=rectangle,fontname=Inconsolata,label="key"]
// END RANK literal_155

raw_156 -> leaf_163
leaf_163  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" in all subtables of tab
"]
// END RANK raw_156

codeblock_148 -> leaf_164
leaf_164  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function _select(collection, tab, key, cycle)
   cycle = cycle or {}
   for k,v in pairs(tab) do
      if key == k then
         collection[#collection + 1] = v
      end
      if type(v) == \"table\" and not cycle[v] then
         cycle[v] = true
         collection = _select(collection, v, key, cycle)
      end
   end
   return collection
end

function core.select(tab, key)
   return _select({}, tab, key)
end"]
// END RANK codeblock_148

section_118 -> { header_165 prose_166 codeblock_167}
{rank=same; header_165 prose_166 codeblock_167}

header_165 [label="3 : reverse(tab)"]

prose_166 [label="prose"]

codeblock_167 [label="code block 156-166"]


// END RANK section_118

header_165 -> leaf_168
leaf_168  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** reverse(tab)"]
// END RANK header_165

prose_166 -> { raw_169}
{rank=same; raw_169}

raw_169 [label="raw"]


// END RANK prose_166

raw_169 -> leaf_170
leaf_170  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Reverses (only) the array portion of a table, returning a new table.
"]
// END RANK raw_169

codeblock_167 -> leaf_171
leaf_171  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function core.reverse(tab)
   local bat = {}
   for i,v in ipairs(tab) do
      bat[#tab - i + 1] = v
   end
   assert(bat[1])
   assert(bat[#tab])
   return bat
end"]
// END RANK codeblock_167

section_119 -> { header_172 prose_173 codeblock_174}
{rank=same; header_172 prose_173 codeblock_174}

header_172 [label="3 : keys(tab)"]

prose_173 [label="prose"]

codeblock_174 [label="code block 173-183"]


// END RANK section_119

header_172 -> leaf_175
leaf_175  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** keys(tab)"]
// END RANK header_172

prose_173 -> { raw_176}
{rank=same; raw_176}

raw_176 [label="raw"]


// END RANK prose_173

raw_176 -> leaf_177
leaf_177  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Returns an array of the keys of a table.
"]
// END RANK raw_176

codeblock_174 -> leaf_178
leaf_178  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function core.keys(tab)
   assert(type(tab) == \"table\", \"keys must receive a table\")
   local keys = {}
   for k, _ in pairs(tab) do
      keys[#keys + 1] = k
   end

   return keys, #keys
end"]
// END RANK codeblock_174

section_120 -> { header_179 prose_180 codeblock_181}
{rank=same; header_179 prose_180 codeblock_181}

header_179 [label="3 : values(tab)"]

prose_180 [label="prose"]

codeblock_181 [label="code block 188-198"]


// END RANK section_120

header_179 -> leaf_182
leaf_182  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** values(tab)"]
// END RANK header_179

prose_180 -> { raw_183}
{rank=same; raw_183}

raw_183 [label="raw"]


// END RANK prose_180

raw_183 -> leaf_184
leaf_184  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_183

codeblock_181 -> leaf_185
leaf_185  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function core.values(tab)
   assert(type(tab) == \"table\", \"vals must receive a table\")
   local vals = {}
   for _, v in pairs(tab) do
      vals[#vals + 1] = v
   end

   return vals, #vals
end"]
// END RANK codeblock_181

section_121 -> { header_186 prose_187 codeblock_188}
{rank=same; header_186 prose_187 codeblock_188}

header_186 [label="3 : splice(tab, index, into)"]

prose_187 [label="prose"]

codeblock_188 [label="code block 206-226"]


// END RANK section_121

header_186 -> leaf_189
leaf_189  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** splice(tab, index, into)"]
// END RANK header_186

prose_187 -> { raw_190 prespace_191 literal_192 raw_193 prespace_194 literal_195 raw_196 prespace_197 literal_198 raw_199}
{rank=same; raw_190 prespace_191 literal_192 raw_193 prespace_194 literal_195 raw_196 prespace_197 literal_198 raw_199}

raw_190 [label="raw"]

prespace_191 [label="prespace"]

literal_192 [label="literal"]

raw_193 [label="raw"]

prespace_194 [label="prespace"]

literal_195 [label="literal"]

raw_196 [label="raw"]

prespace_197 [label="prespace"]

literal_198 [label="literal"]

raw_199 [label="raw"]


// END RANK prose_187

raw_190 -> leaf_200
leaf_200  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Puts the full contents of"]
// END RANK raw_190

prespace_191 -> leaf_201
leaf_201  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_191

literal_192 -> leaf_202
leaf_202  [color=Gray,shape=rectangle,fontname=Inconsolata,label="into"]
// END RANK literal_192

raw_193 -> leaf_203
leaf_203  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" into"]
// END RANK raw_193

prespace_194 -> leaf_204
leaf_204  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_194

literal_195 -> leaf_205
leaf_205  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tab"]
// END RANK literal_195

raw_196 -> leaf_206
leaf_206  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" at"]
// END RANK raw_196

prespace_197 -> leaf_207
leaf_207  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_197

literal_198 -> leaf_208
leaf_208  [color=Gray,shape=rectangle,fontname=Inconsolata,label="index"]
// END RANK literal_198

raw_199 -> leaf_209
leaf_209  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  The argument order is
compatible with existing functions and method syntax.
"]
// END RANK raw_199

codeblock_188 -> leaf_210
leaf_210  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local insert = table.insert

local sp_er = \"table<core>.splice: \"
local _e_1 = sp_er .. \"$1 must be a table\"
local _e_2 = sp_er .. \"$2 must be a number\"
local _e_3 = sp_er .. \"$3 must be a table\"

function core.splice(tab, idx, into)
   assert(type(tab) == \"table\", _e_1)
   assert(type(idx) == \"number\", _e_2)
   assert(type(into) == \"table\", _e_3)
    idx = idx - 1
    local i = 1
    for j = 1, #into do
        insert(tab,i+idx,into[j])
        i = i + 1
    end
    return tab
end"]
// END RANK codeblock_188

section_8 -> { header_211 prose_212 codeblock_213 section_214 section_215 section_216 section_217 section_218}
{rank=same; header_211 prose_212 codeblock_213 section_214 section_215 section_216 section_217 section_218}

header_211 [label="2 : String extensions"]

prose_212 [label="prose"]

codeblock_213 [label="code block 231-236"]

section_214 [label="section: 238-287"]

section_215 [label="section: 288-345"]

section_216 [label="section: 346-375"]

section_217 [label="section: 376-390"]

section_218 [label="section: 391-426"]


// END RANK section_8

header_211 -> leaf_219
leaf_219  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** String extensions"]
// END RANK header_211

prose_212 -> { raw_220}
{rank=same; raw_220}

raw_220 [label="raw"]


// END RANK prose_212

raw_220 -> leaf_221
leaf_221  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_220

codeblock_213 -> leaf_222
leaf_222  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local byte = assert(string.byte)
local find = assert(string.find)
local sub = assert(string.sub)
local format = assert(string.format)"]
// END RANK codeblock_213

section_214 -> { header_223 prose_224 prose_225 codeblock_226}
{rank=same; header_223 prose_224 prose_225 codeblock_226}

header_223 [label="3 : utf8(char)"]

prose_224 [label="prose"]

prose_225 [label="prose"]

codeblock_226 [label="code block 246-285"]


// END RANK section_214

header_223 -> leaf_227
leaf_227  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** utf8(char)"]
// END RANK header_223

prose_224 -> { raw_228}
{rank=same; raw_228}

raw_228 [label="raw"]


// END RANK prose_224

raw_228 -> leaf_229
leaf_229  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This takes a string and validates the first character.
"]
// END RANK raw_228

prose_225 -> { raw_230}
{rank=same; raw_230}

raw_230 [label="raw"]


// END RANK prose_225

raw_230 -> leaf_231
leaf_231  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Return is either the (valid) length in bytes, or nil and an error string.
"]
// END RANK raw_230

codeblock_226 -> leaf_232
leaf_232  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function continue(c)
   return c >= 128 and c <= 191
end

function core.utf8(c)
   local byte = byte
   local head = byte(c)
   if head < 128 then
      return 1
   elseif head >= 194 and head <= 223 then
      local two = byte(c, 2)
      if continue(two) then
         return 2
      else
         return nil, \"utf8: bad second byte\"
      end
   elseif head >= 224 and head <= 239 then
      local two, three = byte(c, 2), byte(c, 3)
      if continue(two) and continue(three) then
         return 3
      else
         return nil, \"utf8: bad second and/or third byte\"
      end
   elseif head >= 240 and head <= 244 then
      local two, three, four = byte(c, 2), byte(c, 3), byte(c, 4)
      if continue(two) and continue(three) and continue(four) then
         return 4
      else
         return nil, \"utf8: bad second, third, and/or fourth byte\"
      end
   elseif continue(head) then
      return nil, \"utf8: continuation byte at head\"
   elseif head == 192 or head == 193 then
      return nil, \"utf8: 192 or 193 forbidden\"
   else -- head > 245
      return nil, \"utf8: byte > 245\"
   end
end"]
// END RANK codeblock_226

section_215 -> { header_233 prose_234 prose_235 prose_236 prose_237 prose_238 prose_239 prose_240 prose_241 prose_242 prose_243 prose_244 codeblock_245}
{rank=same; header_233 prose_234 prose_235 prose_236 prose_237 prose_238 prose_239 prose_240 prose_241 prose_242 prose_243 prose_244 codeblock_245}

header_233 [label="3 : typeformat(str, ...)"]

prose_234 [label="prose"]

prose_235 [label="prose"]

prose_236 [label="prose"]

prose_237 [label="prose"]

prose_238 [label="prose"]

prose_239 [label="prose"]

prose_240 [label="prose"]

prose_241 [label="prose"]

prose_242 [label="prose"]

prose_243 [label="prose"]

prose_244 [label="prose"]

codeblock_245 [label="code block 327-344"]


// END RANK section_215

header_233 -> leaf_246
leaf_246  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** typeformat(str, ...)"]
// END RANK header_233

prose_234 -> { raw_247}
{rank=same; raw_247}

raw_247 [label="raw"]


// END RANK prose_234

raw_247 -> leaf_248
leaf_248  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Background: I want to start using format in errors and assertions.
"]
// END RANK raw_247

prose_235 -> { raw_249}
{rank=same; raw_249}

raw_249 [label="raw"]


// END RANK prose_235

raw_249 -> leaf_250
leaf_250  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It's not as bad to use concatenation in-place for errors, since evaluating
them is a final step.  Assertions run much faster if passed only arguments.
"]
// END RANK raw_249

prose_236 -> { raw_251 prespace_252 literal_253 raw_254 prespace_255 literal_256 raw_257 prespace_258 literal_259 raw_260}
{rank=same; raw_251 prespace_252 literal_253 raw_254 prespace_255 literal_256 raw_257 prespace_258 literal_259 raw_260}

raw_251 [label="raw"]

prespace_252 [label="prespace"]

literal_253 [label="literal"]

raw_254 [label="raw"]

prespace_255 [label="prespace"]

literal_256 [label="literal"]

raw_257 [label="raw"]

prespace_258 [label="prespace"]

literal_259 [label="literal"]

raw_260 [label="raw"]


// END RANK prose_236

raw_251 -> leaf_261
leaf_261  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Lua peforms a small number of implicit conversions, mostly at the string
boundary. This is an actual feature since the language has both"]
// END RANK raw_251

prespace_252 -> leaf_262
leaf_262  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_252

literal_253 -> leaf_263
leaf_263  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".."]
// END RANK literal_253

raw_254 -> leaf_264
leaf_264  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_254

prespace_255 -> leaf_265
leaf_265  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_255

literal_256 -> leaf_266
leaf_266  [color=Gray,shape=rectangle,fontname=Inconsolata,label="+"]
// END RANK literal_256

raw_257 -> leaf_267
leaf_267  [color=Gray,shape=rectangle,fontname=Inconsolata,label=",
but it leaves a bit to be desired when it comes to"]
// END RANK raw_257

prespace_258 -> leaf_268
leaf_268  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_258

literal_259 -> leaf_269
leaf_269  [color=Gray,shape=rectangle,fontname=Inconsolata,label="string.format"]
// END RANK literal_259

raw_260 -> leaf_270
leaf_270  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_260

prose_237 -> { prespace_271 literal_272 raw_273 prespace_274 literal_275 raw_276 prespace_277 literal_278 raw_279 prespace_280 literal_281 raw_282 prespace_283 literal_284 raw_285 prespace_286 literal_287 raw_288}
{rank=same; prespace_271 literal_272 raw_273 prespace_274 literal_275 raw_276 prespace_277 literal_278 raw_279 prespace_280 literal_281 raw_282 prespace_283 literal_284 raw_285 prespace_286 literal_287 raw_288}

prespace_271 [label="prespace"]

literal_272 [label="literal"]

raw_273 [label="raw"]

prespace_274 [label="prespace"]

literal_275 [label="literal"]

raw_276 [label="raw"]

prespace_277 [label="prespace"]

literal_278 [label="literal"]

raw_279 [label="raw"]

prespace_280 [label="prespace"]

literal_281 [label="literal"]

raw_282 [label="raw"]

prespace_283 [label="prespace"]

literal_284 [label="literal"]

raw_285 [label="raw"]

prespace_286 [label="prespace"]

literal_287 [label="literal"]

raw_288 [label="raw"]


// END RANK prose_237

prespace_271 -> leaf_289
leaf_289  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_271

literal_272 -> leaf_290
leaf_290  [color=Gray,shape=rectangle,fontname=Inconsolata,label="format"]
// END RANK literal_272

raw_273 -> leaf_291
leaf_291  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" treats any"]
// END RANK raw_273

prespace_274 -> leaf_292
leaf_292  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_274

literal_275 -> leaf_293
leaf_293  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%s"]
// END RANK literal_275

raw_276 -> leaf_294
leaf_294  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" as a request to convert"]
// END RANK raw_276

prespace_277 -> leaf_295
leaf_295  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_277

literal_278 -> leaf_296
leaf_296  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tostring"]
// END RANK literal_278

raw_279 -> leaf_297
leaf_297  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", also treating"]
// END RANK raw_279

prespace_280 -> leaf_298
leaf_298  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_280

literal_281 -> leaf_299
leaf_299  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%d"]
// END RANK literal_281

raw_282 -> leaf_300
leaf_300  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" as a call to"]
// END RANK raw_282

prespace_283 -> leaf_301
leaf_301  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_283

literal_284 -> leaf_302
leaf_302  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tonumber"]
// END RANK literal_284

raw_285 -> leaf_303
leaf_303  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  The latter I will allow, I'm struggling to find
a circumstance where casting \"1\" to \"1\" through"]
// END RANK raw_285

prespace_286 -> leaf_304
leaf_304  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_286

literal_287 -> leaf_305
leaf_305  [color=Gray,shape=rectangle,fontname=Inconsolata,label="1"]
// END RANK literal_287

raw_288 -> leaf_306
leaf_306  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is dangerous.
"]
// END RANK raw_288

prose_238 -> { raw_307 prespace_308 literal_309 raw_310}
{rank=same; raw_307 prespace_308 literal_309 raw_310}

raw_307 [label="raw"]

prespace_308 [label="prespace"]

literal_309 [label="literal"]

raw_310 [label="raw"]


// END RANK prose_238

raw_307 -> leaf_311
leaf_311  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
What I want is a type-checked"]
// END RANK raw_307

prespace_308 -> leaf_312
leaf_312  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_308

literal_309 -> leaf_313
leaf_313  [color=Gray,shape=rectangle,fontname=Inconsolata,label="format"]
// END RANK literal_309

raw_310 -> leaf_314
leaf_314  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", which I can extend to use a few more
flexible strategies, depending on the context.
"]
// END RANK raw_310

prose_239 -> { raw_315}
{rank=same; raw_315}

raw_315 [label="raw"]


// END RANK prose_239

raw_315 -> leaf_316
leaf_316  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Less concerned about hostility and more about explicit coding practices. Also
don't want to undermine hardening elsewhere.
"]
// END RANK raw_315

prose_240 -> { raw_317 prespace_318 literal_319 raw_320 prespace_321 literal_322 raw_323 prespace_324 literal_325 raw_326}
{rank=same; raw_317 prespace_318 literal_319 raw_320 prespace_321 literal_322 raw_323 prespace_324 literal_325 raw_326}

raw_317 [label="raw"]

prespace_318 [label="prespace"]

literal_319 [label="literal"]

raw_320 [label="raw"]

prespace_321 [label="prespace"]

literal_322 [label="literal"]

raw_323 [label="raw"]

prespace_324 [label="prespace"]

literal_325 [label="literal"]

raw_326 [label="raw"]


// END RANK prose_240

raw_317 -> leaf_327
leaf_327  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
From the wiki, the full set of numeric parameters is"]
// END RANK raw_317

prespace_318 -> leaf_328
leaf_328  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_318

literal_319 -> leaf_329
leaf_329  [color=Gray,shape=rectangle,fontname=Inconsolata,label="{A,a,c,d,E,e,f,G,g,i,o,u,X,x}"]
// END RANK literal_319

raw_320 -> leaf_330
leaf_330  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  That leaves"]
// END RANK raw_320

prespace_321 -> leaf_331
leaf_331  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_321

literal_322 -> leaf_332
leaf_332  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%q"]
// END RANK literal_322

raw_323 -> leaf_333
leaf_333  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_323

prespace_324 -> leaf_334
leaf_334  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_324

literal_325 -> leaf_335
leaf_335  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%s"]
// END RANK literal_325

raw_326 -> leaf_336
leaf_336  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", the former does
string escaping but of course it is the Lua/C style of escaping.
"]
// END RANK raw_326

prose_241 -> { raw_337 prespace_338 literal_339 raw_340 prespace_341 literal_342 raw_343 prespace_344 literal_345 raw_346 prespace_347 literal_348 raw_349 prespace_350 literal_351 raw_352 prespace_353 literal_354 raw_355 prespace_356 literal_357 raw_358 prespace_359 literal_360 raw_361 prespace_362 literal_363 raw_364}
{rank=same; raw_337 prespace_338 literal_339 raw_340 prespace_341 literal_342 raw_343 prespace_344 literal_345 raw_346 prespace_347 literal_348 raw_349 prespace_350 literal_351 raw_352 prespace_353 literal_354 raw_355 prespace_356 literal_357 raw_358 prespace_359 literal_360 raw_361 prespace_362 literal_363 raw_364}

raw_337 [label="raw"]

prespace_338 [label="prespace"]

literal_339 [label="literal"]

raw_340 [label="raw"]

prespace_341 [label="prespace"]

literal_342 [label="literal"]

raw_343 [label="raw"]

prespace_344 [label="prespace"]

literal_345 [label="literal"]

raw_346 [label="raw"]

prespace_347 [label="prespace"]

literal_348 [label="literal"]

raw_349 [label="raw"]

prespace_350 [label="prespace"]

literal_351 [label="literal"]

raw_352 [label="raw"]

prespace_353 [label="prespace"]

literal_354 [label="literal"]

raw_355 [label="raw"]

prespace_356 [label="prespace"]

literal_357 [label="literal"]

raw_358 [label="raw"]

prespace_359 [label="prespace"]

literal_360 [label="literal"]

raw_361 [label="raw"]

prespace_362 [label="prespace"]

literal_363 [label="literal"]

raw_364 [label="raw"]


// END RANK prose_241

raw_337 -> leaf_365
leaf_365  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We add"]
// END RANK raw_337

prespace_338 -> leaf_366
leaf_366  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_338

literal_339 -> leaf_367
leaf_367  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%t"]
// END RANK literal_339

raw_340 -> leaf_368
leaf_368  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_340

prespace_341 -> leaf_369
leaf_369  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_341

literal_342 -> leaf_370
leaf_370  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%L"]
// END RANK literal_342

raw_343 -> leaf_371
leaf_371  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" (for λ), which call"]
// END RANK raw_343

prespace_344 -> leaf_372
leaf_372  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_344

literal_345 -> leaf_373
leaf_373  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tostring"]
// END RANK literal_345

raw_346 -> leaf_374
leaf_374  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" on a table or a function
respectively.  While we're being thorough,"]
// END RANK raw_346

prespace_347 -> leaf_375
leaf_375  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_347

literal_348 -> leaf_376
leaf_376  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%b"]
// END RANK literal_348

raw_349 -> leaf_377
leaf_377  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" for boolean,"]
// END RANK raw_349

prespace_350 -> leaf_378
leaf_378  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_350

literal_351 -> leaf_379
leaf_379  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%n"]
// END RANK literal_351

raw_352 -> leaf_380
leaf_380  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" for"]
// END RANK raw_352

prespace_353 -> leaf_381
leaf_381  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_353

literal_354 -> leaf_382
leaf_382  [color=Gray,shape=rectangle,fontname=Inconsolata,label="nil"]
// END RANK literal_354

raw_355 -> leaf_383
leaf_383  [color=Gray,shape=rectangle,fontname=Inconsolata,label=",
and"]
// END RANK raw_355

prespace_356 -> leaf_384
leaf_384  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_356

literal_357 -> leaf_385
leaf_385  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%*"]
// END RANK literal_357

raw_358 -> leaf_386
leaf_386  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" for the union type.  Why bother with"]
// END RANK raw_358

prespace_359 -> leaf_387
leaf_387  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_359

literal_360 -> leaf_388
leaf_388  [color=Gray,shape=rectangle,fontname=Inconsolata,label="nil"]
// END RANK literal_360

raw_361 -> leaf_389
leaf_389  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", which we can just write?
Type-checking, of course.  We treat"]
// END RANK raw_361

prespace_362 -> leaf_390
leaf_390  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_362

literal_363 -> leaf_391
leaf_391  [color=Gray,shape=rectangle,fontname=Inconsolata,label="nil"]
// END RANK literal_363

raw_364 -> leaf_392
leaf_392  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" as a full type, because in Lua, it
is.
"]
// END RANK raw_364

prose_242 -> { prespace_393 literal_394 raw_395 prespace_396 literal_397 raw_398 prespace_399 literal_400 raw_401 prespace_402 literal_403 raw_404 prespace_405 literal_406 raw_407 prespace_408 literal_409 raw_410 prespace_411 literal_412 raw_413 prespace_414 literal_415 raw_416}
{rank=same; prespace_393 literal_394 raw_395 prespace_396 literal_397 raw_398 prespace_399 literal_400 raw_401 prespace_402 literal_403 raw_404 prespace_405 literal_406 raw_407 prespace_408 literal_409 raw_410 prespace_411 literal_412 raw_413 prespace_414 literal_415 raw_416}

prespace_393 [label="prespace"]

literal_394 [label="literal"]

raw_395 [label="raw"]

prespace_396 [label="prespace"]

literal_397 [label="literal"]

raw_398 [label="raw"]

prespace_399 [label="prespace"]

literal_400 [label="literal"]

raw_401 [label="raw"]

prespace_402 [label="prespace"]

literal_403 [label="literal"]

raw_404 [label="raw"]

prespace_405 [label="prespace"]

literal_406 [label="literal"]

raw_407 [label="raw"]

prespace_408 [label="prespace"]

literal_409 [label="literal"]

raw_410 [label="raw"]

prespace_411 [label="prespace"]

literal_412 [label="literal"]

raw_413 [label="raw"]

prespace_414 [label="prespace"]

literal_415 [label="literal"]

raw_416 [label="raw"]


// END RANK prose_242

prespace_393 -> leaf_417
leaf_417  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_393

literal_394 -> leaf_418
leaf_418  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%t"]
// END RANK literal_394

raw_395 -> leaf_419
leaf_419  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" will actually accept all remaining compound types:"]
// END RANK raw_395

prespace_396 -> leaf_420
leaf_420  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_396

literal_397 -> leaf_421
leaf_421  [color=Gray,shape=rectangle,fontname=Inconsolata,label="userdata"]
// END RANK literal_397

raw_398 -> leaf_422
leaf_422  [color=Gray,shape=rectangle,fontname=Inconsolata,label=","]
// END RANK raw_398

prespace_399 -> leaf_423
leaf_423  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_399

literal_400 -> leaf_424
leaf_424  [color=Gray,shape=rectangle,fontname=Inconsolata,label="thread"]
// END RANK literal_400

raw_401 -> leaf_425
leaf_425  [color=Gray,shape=rectangle,fontname=Inconsolata,label=",
and"]
// END RANK raw_401

prespace_402 -> leaf_426
leaf_426  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_402

literal_403 -> leaf_427
leaf_427  [color=Gray,shape=rectangle,fontname=Inconsolata,label="cdata"]
// END RANK literal_403

raw_404 -> leaf_428
leaf_428  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  For only tables, we can have"]
// END RANK raw_404

prespace_405 -> leaf_429
leaf_429  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_405

literal_406 -> leaf_430
leaf_430  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%T"]
// END RANK literal_406

raw_407 -> leaf_431
leaf_431  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", and also"]
// END RANK raw_407

prespace_408 -> leaf_432
leaf_432  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_408

literal_409 -> leaf_433
leaf_433  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%U"]
// END RANK literal_409

raw_410 -> leaf_434
leaf_434  [color=Gray,shape=rectangle,fontname=Inconsolata,label=","]
// END RANK raw_410

prespace_411 -> leaf_435
leaf_435  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_411

literal_412 -> leaf_436
leaf_436  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%R"]
// END RANK literal_412

raw_413 -> leaf_437
leaf_437  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" (coRo),
and"]
// END RANK raw_413

prespace_414 -> leaf_438
leaf_438  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_414

literal_415 -> leaf_439
leaf_439  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%C"]
// END RANK literal_415

raw_416 -> leaf_440
leaf_440  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_416

prose_243 -> { raw_441 prespace_442 literal_443 raw_444}
{rank=same; raw_441 prespace_442 literal_443 raw_444}

raw_441 [label="raw"]

prespace_442 [label="prespace"]

literal_443 [label="literal"]

raw_444 [label="raw"]


// END RANK prose_243

raw_441 -> leaf_445
leaf_445  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Note our"]
// END RANK raw_441

prespace_442 -> leaf_446
leaf_446  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_442

literal_443 -> leaf_447
leaf_447  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%L"]
// END RANK literal_443

raw_444 -> leaf_448
leaf_448  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is not the C version.
"]
// END RANK raw_444

prose_244 -> { prespace_449 literal_450 raw_451}
{rank=same; prespace_449 literal_450 raw_451}

prespace_449 [label="prespace"]

literal_450 [label="literal"]

raw_451 [label="raw"]


// END RANK prose_244

prespace_449 -> leaf_452
leaf_452  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_449

literal_450 -> leaf_453
leaf_453  [color=Gray,shape=rectangle,fontname=Inconsolata,label="typeformat"]
// END RANK literal_450

raw_451 -> leaf_454
leaf_454  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" returns the correctly formatted string, or throws an error.
"]
// END RANK raw_451

codeblock_245 -> leaf_455
leaf_455  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local fmt_set = {\"L\", \"q\", \"s\", \"t\"}

for i, v in ipairs(fmt_set) do
   fmt_set[i] = \"%%\" .. v
end

--[[
local function next_fmt(str)
   local head, tail
   for _, v in ipairs(fmt_set) do
      head, tail = 2
end]]

function core.format_safe(str, ...)

end"]
// END RANK codeblock_245

section_216 -> { header_456 prose_457 prose_458 codeblock_459}
{rank=same; header_456 prose_457 prose_458 codeblock_459}

header_456 [label="3 : litpat(s)"]

prose_457 [label="prose"]

prose_458 [label="prose"]

codeblock_459 [label="code block 352-373"]


// END RANK section_216

header_456 -> leaf_460
leaf_460  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** litpat(s)"]
// END RANK header_456

prose_457 -> { raw_461 prespace_462 literal_463 raw_464}
{rank=same; raw_461 prespace_462 literal_463 raw_464}

raw_461 [label="raw"]

prespace_462 [label="prespace"]

literal_463 [label="literal"]

raw_464 [label="raw"]


// END RANK prose_457

raw_461 -> leaf_465
leaf_465  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK raw_461

prespace_462 -> leaf_466
leaf_466  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_462

literal_463 -> leaf_467
leaf_467  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%"]
// END RANK literal_463

raw_464 -> leaf_468
leaf_468  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" escapes all pattern characters.
"]
// END RANK raw_464

prose_458 -> { raw_469 prespace_470 literal_471 raw_472 prespace_473 literal_474 raw_475 prespace_476 literal_477 raw_478}
{rank=same; raw_469 prespace_470 literal_471 raw_472 prespace_473 literal_474 raw_475 prespace_476 literal_477 raw_478}

raw_469 [label="raw"]

prespace_470 [label="prespace"]

literal_471 [label="literal"]

raw_472 [label="raw"]

prespace_473 [label="prespace"]

literal_474 [label="literal"]

raw_475 [label="raw"]

prespace_476 [label="prespace"]

literal_477 [label="literal"]

raw_478 [label="raw"]


// END RANK prose_458

raw_469 -> leaf_479
leaf_479  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The resulting string will literally match"]
// END RANK raw_469

prespace_470 -> leaf_480
leaf_480  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_470

literal_471 -> leaf_481
leaf_481  [color=Gray,shape=rectangle,fontname=Inconsolata,label="s"]
// END RANK literal_471

raw_472 -> leaf_482
leaf_482  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" in"]
// END RANK raw_472

prespace_473 -> leaf_483
leaf_483  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_473

literal_474 -> leaf_484
leaf_484  [color=Gray,shape=rectangle,fontname=Inconsolata,label="sub"]
// END RANK literal_474

raw_475 -> leaf_485
leaf_485  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" or"]
// END RANK raw_475

prespace_476 -> leaf_486
leaf_486  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_476

literal_477 -> leaf_487
leaf_487  [color=Gray,shape=rectangle,fontname=Inconsolata,label="gsub"]
// END RANK literal_477

raw_478 -> leaf_488
leaf_488  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_478

codeblock_459 -> leaf_489
leaf_489  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local matches =
  {
    [\"^\"] = \"%^\";
    [\"$\"] = \"%$\";
    [\"(\"] = \"%(\";
    [\")\"] = \"%)\";
    [\"%\"] = \"%%\";
    [\".\"] = \"%.\";
    [\"[\"] = \"%[\";
    [\"]\"] = \"%]\";
    [\"*\"] = \"%*\";
    [\"+\"] = \"%+\";
    [\"-\"] = \"%-\";
    [\"?\"] = \"%?\";
    [\"\\0\"] = \"%z\";
  }

function core.litpat(s)
    return (s:gsub(\".\", matches))
end"]
// END RANK codeblock_459

section_217 -> { header_490 prose_491 prose_492 codeblock_493}
{rank=same; header_490 prose_491 prose_492 codeblock_493}

header_490 [label="3 : cleave(str, patt)"]

prose_491 [label="prose"]

prose_492 [label="prose"]

codeblock_493 [label="code block 383-388"]


// END RANK section_217

header_490 -> leaf_494
leaf_494  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** cleave(str, patt)"]
// END RANK header_490

prose_491 -> { raw_495 prespace_496 literal_497 raw_498 prespace_499 literal_500 raw_501}
{rank=same; raw_495 prespace_496 literal_497 raw_498 prespace_499 literal_500 raw_501}

raw_495 [label="raw"]

prespace_496 [label="prespace"]

literal_497 [label="literal"]

raw_498 [label="raw"]

prespace_499 [label="prespace"]

literal_500 [label="literal"]

raw_501 [label="raw"]


// END RANK prose_491

raw_495 -> leaf_502
leaf_502  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Performs the common operation of returning one run of bytes up to"]
// END RANK raw_495

prespace_496 -> leaf_503
leaf_503  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_496

literal_497 -> leaf_504
leaf_504  [color=Gray,shape=rectangle,fontname=Inconsolata,label="patt"]
// END RANK literal_497

raw_498 -> leaf_505
leaf_505  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
then the rest of the bytes after"]
// END RANK raw_498

prespace_499 -> leaf_506
leaf_506  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_499

literal_500 -> leaf_507
leaf_507  [color=Gray,shape=rectangle,fontname=Inconsolata,label="patt"]
// END RANK literal_500

raw_501 -> leaf_508
leaf_508  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_501

prose_492 -> { raw_509}
{rank=same; raw_509}

raw_509 [label="raw"]


// END RANK prose_492

raw_509 -> leaf_510
leaf_510  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Can be used to build iterators, either stateful or coroutine-based.
"]
// END RANK raw_509

codeblock_493 -> leaf_511
leaf_511  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function core.cleave(str, pat)
   local at = find(str, pat)
   return sub(str, 1, at - 1), sub(str, at + 1)
end"]
// END RANK codeblock_493

section_218 -> { header_512 prose_513 codeblock_514}
{rank=same; header_512 prose_513 codeblock_514}

header_512 [label="3 : codepoints(str)"]

prose_513 [label="prose"]

codeblock_514 [label="code block 396-424"]


// END RANK section_218

header_512 -> leaf_515
leaf_515  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** codepoints(str)"]
// END RANK header_512

prose_513 -> { raw_516 prespace_517 literal_518 raw_519}
{rank=same; raw_516 prespace_517 literal_518 raw_519}

raw_516 [label="raw"]

prespace_517 [label="prespace"]

literal_518 [label="literal"]

raw_519 [label="raw"]


// END RANK prose_513

raw_516 -> leaf_520
leaf_520  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Returns an array of the utf8 codepoints in"]
// END RANK raw_516

prespace_517 -> leaf_521
leaf_521  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_517

literal_518 -> leaf_522
leaf_522  [color=Gray,shape=rectangle,fontname=Inconsolata,label="str"]
// END RANK literal_518

raw_519 -> leaf_523
leaf_523  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", incidentally validating or
rather filtering the contents into utf8 compliance.
"]
// END RANK raw_519

codeblock_514 -> leaf_524
leaf_524  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
local function split(str, at)
   return sub(str,1, at), sub(str, at + 1)
end

function core.codepoints(str)
   local utf8 = core.utf8
   local codes = {}
   -- propagate nil
   if not str then return nil end
   -- break on bad type
   assert(type(str) == \"string\", \"codepoints must be given a string\")
   while #str > 0 do
      local width, err = utf8(str)
      if width then
         local head, tail = split(str, width)
         codes[#codes + 1] = head
         str = tail
      else
         -- make sure we take a bit off anyway
         str = sub(str, -1)
         -- for debugging
         codes[codes + 1] = { err = err }
      end
   end
   return codes
end"]
// END RANK codeblock_514

section_9 -> { header_525 prose_526 section_527}
{rank=same; header_525 prose_526 section_527}

header_525 [label="2 : Errors and asserts"]

prose_526 [label="prose"]

section_527 [label="section: 430-471"]


// END RANK section_9

header_525 -> leaf_528
leaf_528  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Errors and asserts"]
// END RANK header_525

prose_526 -> { raw_529}
{rank=same; raw_529}

raw_529 [label="raw"]


// END RANK prose_526

raw_529 -> leaf_530
leaf_530  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

"]
// END RANK raw_529

section_527 -> { header_531 prose_532 prose_533 codeblock_534 codeblock_535}
{rank=same; header_531 prose_532 prose_533 codeblock_534 codeblock_535}

header_531 [label="3 : Assertfmt"]

prose_532 [label="prose"]

prose_533 [label="prose"]

codeblock_534 [label="code block 437-447"]

codeblock_535 [label="code block 449-451"]


// END RANK section_527

header_531 -> leaf_536
leaf_536  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Assertfmt"]
// END RANK header_531

prose_532 -> { raw_537}
{rank=same; raw_537}

raw_537 [label="raw"]


// END RANK prose_532

raw_537 -> leaf_538
leaf_538  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

I'll probably just globally replace assert with this over time.
"]
// END RANK raw_537

prose_533 -> { raw_539}
{rank=same; raw_539}

raw_539 [label="raw"]


// END RANK prose_533

raw_539 -> leaf_540
leaf_540  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This avoids doing concatenations and conversions on messages that we never
see in normal use.
"]
// END RANK raw_539

codeblock_534 -> leaf_541
leaf_541  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local format = string.format

function core.assertfmt(pred, msg, ...)
   if pred then
      return pred
   else
      error(format(msg, ...))
   end
end"]
// END RANK codeblock_534

codeblock_535 -> leaf_542
leaf_542  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return core"]
// END RANK codeblock_535


}
