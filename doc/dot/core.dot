digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 571"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-526"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 codeblock_5 section_6 section_7 section_8 section_9}
{rank=same; header_2 prose_3 prose_4 codeblock_5 section_6 section_7 section_8 section_9}

header_2 [label="1 : Core"]

prose_3 [label="prose"]

prose_4 [label="prose"]

codeblock_5 [label="code block 8-10"]

section_6 [label="section: 13-67"]

section_7 [label="section: 95-269"]

section_8 [label="section: 298-488"]

section_9 [label="section: 527-529"]


// END RANK section_1

header_2 -> leaf_10
leaf_10  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Core"]
// END RANK header_2

prose_3 -> { raw_11 prespace_12 literal_13 raw_14}
{rank=same; raw_11 prespace_12 literal_13 raw_14}

raw_11 [label="raw"]

prespace_12 [label="prespace"]

literal_13 [label="literal"]

raw_14 [label="raw"]


// END RANK prose_3

raw_11 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_11

prespace_12 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_12

literal_13 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label="core"]
// END RANK literal_13

raw_14 -> leaf_18
leaf_18  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is for tampering with the global namespace and standard libraries.
"]
// END RANK raw_14

prose_4 -> { raw_19 prespace_20 literal_21 raw_22}
{rank=same; raw_19 prespace_20 literal_21 raw_22}

raw_19 [label="raw"]

prespace_20 [label="prespace"]

literal_21 [label="literal"]

raw_22 [label="raw"]


// END RANK prose_4

raw_19 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It will eventually land in"]
// END RANK raw_19

prespace_20 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_20

literal_21 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label="pylon"]
// END RANK literal_21

raw_22 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_22

codeblock_5 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local core = {}"]
// END RANK codeblock_5

section_6 -> { header_28 prose_29 prose_30 section_31 section_32 section_33}
{rank=same; header_28 prose_29 prose_30 section_31 section_32 section_33}

header_28 [label="2 : Meta Object Protocol"]

prose_29 [label="prose"]

prose_30 [label="prose"]

section_31 [label="section: 20-43"]

section_32 [label="section: 44-67"]

section_33 [label="section: 68-94"]


// END RANK section_6

header_28 -> leaf_34
leaf_34  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Meta Object Protocol"]
// END RANK header_28

prose_29 -> { raw_35}
{rank=same; raw_35}

raw_35 [label="raw"]


// END RANK prose_29

raw_35 -> leaf_36
leaf_36  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This is where we start to design Cluster.
"]
// END RANK raw_35

prose_30 -> { raw_37 prespace_38 literal_39 raw_40 prespace_41 literal_42 raw_43 prespace_44 literal_45 raw_46 prespace_47 literal_48 raw_49 prespace_50 literal_51 raw_52 prespace_53 literal_54 raw_55}
{rank=same; raw_37 prespace_38 literal_39 raw_40 prespace_41 literal_42 raw_43 prespace_44 literal_45 raw_46 prespace_47 literal_48 raw_49 prespace_50 literal_51 raw_52 prespace_53 literal_54 raw_55}

raw_37 [label="raw"]

prespace_38 [label="prespace"]

literal_39 [label="literal"]

raw_40 [label="raw"]

prespace_41 [label="prespace"]

literal_42 [label="literal"]

raw_43 [label="raw"]

prespace_44 [label="prespace"]

literal_45 [label="literal"]

raw_46 [label="raw"]

prespace_47 [label="prespace"]

literal_48 [label="literal"]

raw_49 [label="raw"]

prespace_50 [label="prespace"]

literal_51 [label="literal"]

raw_52 [label="raw"]

prespace_53 [label="prespace"]

literal_54 [label="literal"]

raw_55 [label="raw"]


// END RANK prose_30

raw_37 -> leaf_56
leaf_56  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We shorten a few of the common Lua keywords:"]
// END RANK raw_37

prespace_38 -> leaf_57
leaf_57  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_38

literal_39 -> leaf_58
leaf_58  [color=Gray,shape=rectangle,fontname=Inconsolata,label="coro"]
// END RANK literal_39

raw_40 -> leaf_59
leaf_59  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" rather than"]
// END RANK raw_40

prespace_41 -> leaf_60
leaf_60  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_41

literal_42 -> leaf_61
leaf_61  [color=Gray,shape=rectangle,fontname=Inconsolata,label="coroutine"]
// END RANK literal_42

raw_43 -> leaf_62
leaf_62  [color=Gray,shape=rectangle,fontname=Inconsolata,label=",
and"]
// END RANK raw_43

prespace_44 -> leaf_63
leaf_63  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_44

literal_45 -> leaf_64
leaf_64  [color=Gray,shape=rectangle,fontname=Inconsolata,label="getmeta"]
// END RANK literal_45

raw_46 -> leaf_65
leaf_65  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_46

prespace_47 -> leaf_66
leaf_66  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_47

literal_48 -> leaf_67
leaf_67  [color=Gray,shape=rectangle,fontname=Inconsolata,label="setmeta"]
// END RANK literal_48

raw_49 -> leaf_68
leaf_68  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" over"]
// END RANK raw_49

prespace_50 -> leaf_69
leaf_69  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_50

literal_51 -> leaf_70
leaf_70  [color=Gray,shape=rectangle,fontname=Inconsolata,label="getmetatable"]
// END RANK literal_51

raw_52 -> leaf_71
leaf_71  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_52

prespace_53 -> leaf_72
leaf_72  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_53

literal_54 -> leaf_73
leaf_73  [color=Gray,shape=rectangle,fontname=Inconsolata,label="setmetatable"]
// END RANK literal_54

raw_55 -> leaf_74
leaf_74  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_55

section_31 -> { header_75 prose_76 codeblock_77}
{rank=same; header_75 prose_76 codeblock_77}

header_75 [label="3 : meta"]

prose_76 [label="prose"]

codeblock_77 [label="code block 25-41"]


// END RANK section_31

header_75 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** meta"]
// END RANK header_75

prose_76 -> { raw_79 prespace_80 literal_81 raw_82}
{rank=same; raw_79 prespace_80 literal_81 raw_82}

raw_79 [label="raw"]

prespace_80 [label="prespace"]

literal_81 [label="literal"]

raw_82 [label="raw"]


// END RANK prose_76

raw_79 -> leaf_83
leaf_83  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

In my code there is a repeated pattern of use that is basic enough that I'm
entering it into the global namespace as simple"]
// END RANK raw_79

prespace_80 -> leaf_84
leaf_84  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_80

literal_81 -> leaf_85
leaf_85  [color=Gray,shape=rectangle,fontname=Inconsolata,label="meta"]
// END RANK literal_81

raw_82 -> leaf_86
leaf_86  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_82

codeblock_77 -> leaf_87
leaf_87  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function core.meta(MT)
   if MT and MT.__index then
      -- inherit
      return setmetatable({}, MT)
   elseif MT then
      -- decorate
      MT.__index = MT
      return MT
   else
      -- new metatable
      local _M = {}
      _M.__index = _M
      return _M
   end
end"]
// END RANK codeblock_77

section_32 -> { header_88 prose_89 prose_90 prose_91 codeblock_92}
{rank=same; header_88 prose_89 prose_90 prose_91 codeblock_92}

header_88 [label="3 : hasmetamethod(tab, mmethod)"]

prose_89 [label="prose"]

prose_90 [label="prose"]

prose_91 [label="prose"]

codeblock_92 [label="code block 55-66"]


// END RANK section_32

header_88 -> leaf_93
leaf_93  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** hasmetamethod(tab, mmethod)"]
// END RANK header_88

prose_89 -> { raw_94 prespace_95 literal_96 raw_97}
{rank=same; raw_94 prespace_95 literal_96 raw_97}

raw_94 [label="raw"]

prespace_95 [label="prespace"]

literal_96 [label="literal"]

raw_97 [label="raw"]


// END RANK prose_89

raw_94 -> leaf_98
leaf_98  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The function of this is clear: given a table, return"]
// END RANK raw_94

prespace_95 -> leaf_99
leaf_99  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_95

literal_96 -> leaf_100
leaf_100  [color=Gray,shape=rectangle,fontname=Inconsolata,label="true"]
// END RANK literal_96

raw_97 -> leaf_101
leaf_101  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" if it can receive
a given metamethod.
"]
// END RANK raw_97

prose_90 -> { raw_102}
{rank=same; raw_102}

raw_102 [label="raw"]


// END RANK prose_90

raw_102 -> leaf_103
leaf_103  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The question is, how magical to make it. I'm going with \"slightly magical\" for
now.  You can leave off the \"__\" in checking for a metamethod.
"]
// END RANK raw_102

prose_91 -> { raw_104 prespace_105 literal_106 raw_107 prespace_108 literal_109 raw_110}
{rank=same; raw_104 prespace_105 literal_106 raw_107 prespace_108 literal_109 raw_110}

raw_104 [label="raw"]

prespace_105 [label="prespace"]

literal_106 [label="literal"]

raw_107 [label="raw"]

prespace_108 [label="prespace"]

literal_109 [label="literal"]

raw_110 [label="raw"]


// END RANK prose_91

raw_104 -> leaf_111
leaf_111  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A successful lookup returns the result, presumable truthy, otherwise"]
// END RANK raw_104

prespace_105 -> leaf_112
leaf_112  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_105

literal_106 -> leaf_113
leaf_113  [color=Gray,shape=rectangle,fontname=Inconsolata,label="false"]
// END RANK literal_106

raw_107 -> leaf_114
leaf_114  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
for a non-table argument and"]
// END RANK raw_107

prespace_108 -> leaf_115
leaf_115  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_108

literal_109 -> leaf_116
leaf_116  [color=Gray,shape=rectangle,fontname=Inconsolata,label="nil"]
// END RANK literal_109

raw_110 -> leaf_117
leaf_117  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" for a failed lookup.
"]
// END RANK raw_110

codeblock_92 -> leaf_118
leaf_118  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local sub = assert(string.sub)

function core.hasmetamethod(tab, mmethod)
   assert(type(mmethod) == \"string\", \"metamethod must be a string\")
   if sub(mmethod,1,2) == \"__\" then
      return type(tab) == \"table\" and tab[mmethod]
   else
      return type(tab) == \"table\" and tab[\"__\" ..mmethod]
   end
end"]
// END RANK codeblock_92

section_33 -> { header_119 prose_120 prose_121 prose_122 codeblock_123 prose_124}
{rank=same; header_119 prose_120 prose_121 prose_122 codeblock_123 prose_124}

header_119 [label="3 : endow(Meta)"]

prose_120 [label="prose"]

prose_121 [label="prose"]

prose_122 [label="prose"]

codeblock_123 [label="code block 78-88"]

prose_124 [label="prose"]


// END RANK section_33

header_119 -> leaf_125
leaf_125  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** endow(Meta)"]
// END RANK header_119

prose_120 -> { raw_126}
{rank=same; raw_126}

raw_126 [label="raw"]


// END RANK prose_120

raw_126 -> leaf_127
leaf_127  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Performs a thick copy of the metatable.
"]
// END RANK raw_126

prose_121 -> { raw_128}
{rank=same; raw_128}

raw_128 [label="raw"]


// END RANK prose_121

raw_128 -> leaf_129
leaf_129  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Because this will include __index and the like, this folds an level of
indirection out of inheritance.
"]
// END RANK raw_128

prose_122 -> { raw_130}
{rank=same; raw_130}

raw_130 [label="raw"]


// END RANK prose_122

raw_130 -> leaf_131
leaf_131  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I plan to use this with Nodes when I make a single base class for a complex
Grammar.
"]
// END RANK raw_130

codeblock_123 -> leaf_132
leaf_132  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local pairs = assert(pairs)

function core.endow(Meta)
   local MC = {}
   for k, v in pairs(Meta) do
      MC[k] = v
   end
   return MC
end"]
// END RANK codeblock_123

prose_124 -> { raw_133 prespace_134 literal_135 raw_136}
{rank=same; raw_133 prespace_134 literal_135 raw_136}

raw_133 [label="raw"]

prespace_134 [label="prespace"]

literal_135 [label="literal"]

raw_136 [label="raw"]


// END RANK prose_124

raw_133 -> leaf_137
leaf_137  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
That's just a shallow clone, the subtlety is that if the __index was a
self-table, it now points to"]
// END RANK raw_133

prespace_134 -> leaf_138
leaf_138  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_134

literal_135 -> leaf_139
leaf_139  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Meta"]
// END RANK literal_135

raw_136 -> leaf_140
leaf_140  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", while if Meta was created through
endowment or inheritance it's now out of the picture.

"]
// END RANK raw_136

section_7 -> { header_141 prose_142 section_143 section_144 section_145 section_146 section_147 section_148 section_149 section_150 section_151 section_152}
{rank=same; header_141 prose_142 section_143 section_144 section_145 section_146 section_147 section_148 section_149 section_150 section_151 section_152}

header_141 [label="2 : Table extensions"]

prose_142 [label="prose"]

section_143 [label="section: 97-107"]

section_144 [label="section: 108-136"]

section_145 [label="section: 137-162"]

section_146 [label="section: 163-177"]

section_147 [label="section: 178-194"]

section_148 [label="section: 195-219"]

section_149 [label="section: 220-237"]

section_150 [label="section: 238-254"]

section_151 [label="section: 255-269"]

section_152 [label="section: 270-297"]


// END RANK section_7

header_141 -> leaf_153
leaf_153  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Table extensions"]
// END RANK header_141

prose_142 -> { raw_154}
{rank=same; raw_154}

raw_154 [label="raw"]


// END RANK prose_142

raw_154 -> leaf_155
leaf_155  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_154

section_143 -> { header_156 prose_157 codeblock_158}
{rank=same; header_156 prose_157 codeblock_158}

header_156 [label="3 : pack(...)"]

prose_157 [label="prose"]

codeblock_158 [label="code block 101-105"]


// END RANK section_143

header_156 -> leaf_159
leaf_159  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** pack(...)"]
// END RANK header_156

prose_157 -> { raw_160}
{rank=same; raw_160}

raw_160 [label="raw"]


// END RANK prose_157

raw_160 -> leaf_161
leaf_161  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

A 5.2 shim we won't need forever.
"]
// END RANK raw_160

codeblock_158 -> leaf_162
leaf_162  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function core.pack(...)
   return { n = select('#', ...), ... }
end"]
// END RANK codeblock_158

section_144 -> { header_163 prose_164 codeblock_165}
{rank=same; header_163 prose_164 codeblock_165}

header_163 [label="3 : hasfield(field, tab) & hasfield.field(tab)"]

prose_164 [label="prose"]

codeblock_165 [label="code block 113-134"]


// END RANK section_144

header_163 -> leaf_166
leaf_166  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** hasfield(field, tab) & hasfield.field(tab)"]
// END RANK header_163

prose_164 -> { raw_167}
{rank=same; raw_167}

raw_167 [label="raw"]


// END RANK prose_164

raw_167 -> leaf_168
leaf_168  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


A nicety which can be used both for predication and assignment.
"]
// END RANK raw_167

codeblock_165 -> leaf_169
leaf_169  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function _hasfield(field, tab)
   if type(tab) == \"table\" and tab[field] ~= nil then
      return true, tab[field]
   else
      return false
   end
end

local function _hf__index(_, field)
   return function(tab)
      return _hasfield(field, tab)
   end
end

local function _hf__call(_, field, tab)
   return _hasfield(field, tab)
end

core.hasfield = setmetatable({}, { __index = _hf__index,
                                   __call  = _hf__call })"]
// END RANK codeblock_165

section_145 -> { header_170 prose_171 prose_172 prose_173 codeblock_174}
{rank=same; header_170 prose_171 prose_172 prose_173 codeblock_174}

header_170 [label="3 : clone(tab, depth)"]

prose_171 [label="prose"]

prose_172 [label="prose"]

prose_173 [label="prose"]

codeblock_174 [label="code block 145-160"]


// END RANK section_145

header_170 -> leaf_175
leaf_175  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** clone(tab, depth)"]
// END RANK header_170

prose_171 -> { raw_176}
{rank=same; raw_176}

raw_176 [label="raw"]


// END RANK prose_171

raw_176 -> leaf_177
leaf_177  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Performs a shallow clone of table, attaching metatable if available.
"]
// END RANK raw_176

prose_172 -> { raw_178 prespace_179 literal_180 raw_181}
{rank=same; raw_178 prespace_179 literal_180 raw_181}

raw_178 [label="raw"]

prespace_179 [label="prespace"]

literal_180 [label="literal"]

raw_181 [label="raw"]


// END RANK prose_172

raw_178 -> leaf_182
leaf_182  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Will recurse to"]
// END RANK raw_178

prespace_179 -> leaf_183
leaf_183  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_179

literal_180 -> leaf_184
leaf_184  [color=Gray,shape=rectangle,fontname=Inconsolata,label="depth"]
// END RANK literal_180

raw_181 -> leaf_185
leaf_185  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" if provided.
"]
// END RANK raw_181

prose_173 -> { raw_186}
{rank=same; raw_186}

raw_186 [label="raw"]


// END RANK prose_173

raw_186 -> leaf_187
leaf_187  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This will unroll circular references, which may not be what you want.
"]
// END RANK raw_186

codeblock_174 -> leaf_188
leaf_188  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function _clone(tab, depth)
   depth = depth or 1
   assert(depth > 0, \"depth must be positive \" .. tostring(depth))
   local _M = getmetatable(tab)
   local clone = _M and setmetatable({}, _M) or {}
   for k,v in pairs(tab) do
      if depth > 1 and type(v) == \"table\" then
        v = _clone(v, depth - 1)
      end
      clone[k] = v
   end
   return clone
end
core.clone = _clone"]
// END RANK codeblock_174

section_146 -> { header_189 prose_190 codeblock_191}
{rank=same; header_189 prose_190 codeblock_191}

header_189 [label="3 : arrayof(tab)"]

prose_190 [label="prose"]

codeblock_191 [label="code block 167-175"]


// END RANK section_146

header_189 -> leaf_192
leaf_192  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** arrayof(tab)"]
// END RANK header_189

prose_190 -> { raw_193}
{rank=same; raw_193}

raw_193 [label="raw"]


// END RANK prose_190

raw_193 -> leaf_194
leaf_194  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Clones and returns the array portion of a table.
"]
// END RANK raw_193

codeblock_191 -> leaf_195
leaf_195  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function core.arrayof(tab)
   local arr = {}
   for i,v in ipairs(tab) do
      arr[i] = v
   end
   return arr
end"]
// END RANK codeblock_191

section_147 -> { header_196 prose_197 codeblock_198}
{rank=same; header_196 prose_197 codeblock_198}

header_196 [label="3 : collect(iter, tab)"]

prose_197 [label="prose"]

codeblock_198 [label="code block 183-192"]


// END RANK section_147

header_196 -> leaf_199
leaf_199  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** collect(iter, tab)"]
// END RANK header_196

prose_197 -> { raw_200}
{rank=same; raw_200}

raw_200 [label="raw"]


// END RANK prose_197

raw_200 -> leaf_201
leaf_201  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Collects and returns up to two tables of values, given an iterator and a
table to iterate over.
"]
// END RANK raw_200

codeblock_198 -> leaf_202
leaf_202  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function core.collect(iter, tab)
   local k_tab, v_tab = {}, {}
   for k, v in iter(tab) do
      k_tab[#k_tab + 1] = k
      v_tab[#v_tab + 1] = v
   end
   return k_tab, v_tab
end"]
// END RANK codeblock_198

section_148 -> { header_203 prose_204 codeblock_205}
{rank=same; header_203 prose_204 codeblock_205}

header_203 [label="3 : select(tab, key)"]

prose_204 [label="prose"]

codeblock_205 [label="code block 199-217"]


// END RANK section_148

header_203 -> leaf_206
leaf_206  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** select(tab, key)"]
// END RANK header_203

prose_204 -> { raw_207 prespace_208 literal_209 raw_210 prespace_211 literal_212 raw_213}
{rank=same; raw_207 prespace_208 literal_209 raw_210 prespace_211 literal_212 raw_213}

raw_207 [label="raw"]

prespace_208 [label="prespace"]

literal_209 [label="literal"]

raw_210 [label="raw"]

prespace_211 [label="prespace"]

literal_212 [label="literal"]

raw_213 [label="raw"]


// END RANK prose_204

raw_207 -> leaf_214
leaf_214  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Recursively return all"]
// END RANK raw_207

prespace_208 -> leaf_215
leaf_215  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_208

literal_209 -> leaf_216
leaf_216  [color=Gray,shape=rectangle,fontname=Inconsolata,label="v"]
// END RANK literal_209

raw_210 -> leaf_217
leaf_217  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" for"]
// END RANK raw_210

prespace_211 -> leaf_218
leaf_218  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_211

literal_212 -> leaf_219
leaf_219  [color=Gray,shape=rectangle,fontname=Inconsolata,label="key"]
// END RANK literal_212

raw_213 -> leaf_220
leaf_220  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" in all subtables of tab
"]
// END RANK raw_213

codeblock_205 -> leaf_221
leaf_221  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function _select(collection, tab, key, cycle)
   cycle = cycle or {}
   for k,v in pairs(tab) do
      if key == k then
         collection[#collection + 1] = v
      end
      if type(v) == \"table\" and not cycle[v] then
         cycle[v] = true
         collection = _select(collection, v, key, cycle)
      end
   end
   return collection
end

function core.select(tab, key)
   return _select({}, tab, key)
end"]
// END RANK codeblock_205

section_149 -> { header_222 prose_223 codeblock_224}
{rank=same; header_222 prose_223 codeblock_224}

header_222 [label="3 : reverse(tab)"]

prose_223 [label="prose"]

codeblock_224 [label="code block 224-235"]


// END RANK section_149

header_222 -> leaf_225
leaf_225  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** reverse(tab)"]
// END RANK header_222

prose_223 -> { raw_226}
{rank=same; raw_226}

raw_226 [label="raw"]


// END RANK prose_223

raw_226 -> leaf_227
leaf_227  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Reverses (only) the array portion of a table, returning a new table.
"]
// END RANK raw_226

codeblock_224 -> leaf_228
leaf_228  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function core.reverse(tab)
   if type(tab) ~= \"table\" or #tab == 0 then
      return {}
   end
   local bat = {}
   for i,v in ipairs(tab) do
      bat[#tab - i + 1] = v
   end
   return bat
end"]
// END RANK codeblock_224

section_150 -> { header_229 prose_230 codeblock_231}
{rank=same; header_229 prose_230 codeblock_231}

header_229 [label="3 : keys(tab)"]

prose_230 [label="prose"]

codeblock_231 [label="code block 242-252"]


// END RANK section_150

header_229 -> leaf_232
leaf_232  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** keys(tab)"]
// END RANK header_229

prose_230 -> { raw_233}
{rank=same; raw_233}

raw_233 [label="raw"]


// END RANK prose_230

raw_233 -> leaf_234
leaf_234  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Returns an array of the keys of a table.
"]
// END RANK raw_233

codeblock_231 -> leaf_235
leaf_235  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function core.keys(tab)
   assert(type(tab) == \"table\", \"keys must receive a table\")
   local keys = {}
   for k, _ in pairs(tab) do
      keys[#keys + 1] = k
   end

   return keys, #keys
end"]
// END RANK codeblock_231

section_151 -> { header_236 prose_237 codeblock_238}
{rank=same; header_236 prose_237 codeblock_238}

header_236 [label="3 : values(tab)"]

prose_237 [label="prose"]

codeblock_238 [label="code block 257-267"]


// END RANK section_151

header_236 -> leaf_239
leaf_239  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** values(tab)"]
// END RANK header_236

prose_237 -> { raw_240}
{rank=same; raw_240}

raw_240 [label="raw"]


// END RANK prose_237

raw_240 -> leaf_241
leaf_241  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_240

codeblock_238 -> leaf_242
leaf_242  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function core.values(tab)
   assert(type(tab) == \"table\", \"vals must receive a table\")
   local vals = {}
   for _, v in pairs(tab) do
      vals[#vals + 1] = v
   end

   return vals, #vals
end"]
// END RANK codeblock_238

section_152 -> { header_243 prose_244 codeblock_245}
{rank=same; header_243 prose_244 codeblock_245}

header_243 [label="3 : splice(tab, index, into)"]

prose_244 [label="prose"]

codeblock_245 [label="code block 275-295"]


// END RANK section_152

header_243 -> leaf_246
leaf_246  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** splice(tab, index, into)"]
// END RANK header_243

prose_244 -> { raw_247 prespace_248 literal_249 raw_250 prespace_251 literal_252 raw_253 prespace_254 literal_255 raw_256}
{rank=same; raw_247 prespace_248 literal_249 raw_250 prespace_251 literal_252 raw_253 prespace_254 literal_255 raw_256}

raw_247 [label="raw"]

prespace_248 [label="prespace"]

literal_249 [label="literal"]

raw_250 [label="raw"]

prespace_251 [label="prespace"]

literal_252 [label="literal"]

raw_253 [label="raw"]

prespace_254 [label="prespace"]

literal_255 [label="literal"]

raw_256 [label="raw"]


// END RANK prose_244

raw_247 -> leaf_257
leaf_257  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Puts the full contents of"]
// END RANK raw_247

prespace_248 -> leaf_258
leaf_258  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_248

literal_249 -> leaf_259
leaf_259  [color=Gray,shape=rectangle,fontname=Inconsolata,label="into"]
// END RANK literal_249

raw_250 -> leaf_260
leaf_260  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" into"]
// END RANK raw_250

prespace_251 -> leaf_261
leaf_261  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_251

literal_252 -> leaf_262
leaf_262  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tab"]
// END RANK literal_252

raw_253 -> leaf_263
leaf_263  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" at"]
// END RANK raw_253

prespace_254 -> leaf_264
leaf_264  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_254

literal_255 -> leaf_265
leaf_265  [color=Gray,shape=rectangle,fontname=Inconsolata,label="index"]
// END RANK literal_255

raw_256 -> leaf_266
leaf_266  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  The argument order is
compatible with existing functions and method syntax.
"]
// END RANK raw_256

codeblock_245 -> leaf_267
leaf_267  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local insert = table.insert

local sp_er = \"table<core>.splice: \"
local _e_1 = sp_er .. \"$1 must be a table\"
local _e_2 = sp_er .. \"$2 must be a number\"
local _e_3 = sp_er .. \"$3 must be a table\"

function core.splice(tab, idx, into)
   assert(type(tab) == \"table\", _e_1)
   assert(type(idx) == \"number\", _e_2)
   assert(type(into) == \"table\", _e_3)
    idx = idx - 1
    local i = 1
    for j = 1, #into do
        insert(tab,i+idx,into[j])
        i = i + 1
    end
    return tab
end"]
// END RANK codeblock_245

section_8 -> { header_268 prose_269 codeblock_270 section_271 section_272 section_273 section_274 section_275}
{rank=same; header_268 prose_269 codeblock_270 section_271 section_272 section_273 section_274 section_275}

header_268 [label="2 : String extensions"]

prose_269 [label="prose"]

codeblock_270 [label="code block 300-305"]

section_271 [label="section: 307-356"]

section_272 [label="section: 357-417"]

section_273 [label="section: 418-447"]

section_274 [label="section: 448-488"]

section_275 [label="section: 489-526"]


// END RANK section_8

header_268 -> leaf_276
leaf_276  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** String extensions"]
// END RANK header_268

prose_269 -> { raw_277}
{rank=same; raw_277}

raw_277 [label="raw"]


// END RANK prose_269

raw_277 -> leaf_278
leaf_278  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_277

codeblock_270 -> leaf_279
leaf_279  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local byte = assert(string.byte)
local find = assert(string.find)
local sub = assert(string.sub)
local format = assert(string.format)"]
// END RANK codeblock_270

section_271 -> { header_280 prose_281 prose_282 codeblock_283}
{rank=same; header_280 prose_281 prose_282 codeblock_283}

header_280 [label="3 : utf8(char)"]

prose_281 [label="prose"]

prose_282 [label="prose"]

codeblock_283 [label="code block 315-354"]


// END RANK section_271

header_280 -> leaf_284
leaf_284  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** utf8(char)"]
// END RANK header_280

prose_281 -> { raw_285}
{rank=same; raw_285}

raw_285 [label="raw"]


// END RANK prose_281

raw_285 -> leaf_286
leaf_286  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This takes a string and validates the first character.
"]
// END RANK raw_285

prose_282 -> { raw_287}
{rank=same; raw_287}

raw_287 [label="raw"]


// END RANK prose_282

raw_287 -> leaf_288
leaf_288  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Return is either the (valid) length in bytes, or nil and an error string.
"]
// END RANK raw_287

codeblock_283 -> leaf_289
leaf_289  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function continue(c)
   return c >= 128 and c <= 191
end

function core.utf8(c)
   local byte = byte
   local head = byte(c)
   if head < 128 then
      return 1
   elseif head >= 194 and head <= 223 then
      local two = byte(c, 2)
      if continue(two) then
         return 2
      else
         return nil, \"utf8: bad second byte\"
      end
   elseif head >= 224 and head <= 239 then
      local two, three = byte(c, 2), byte(c, 3)
      if continue(two) and continue(three) then
         return 3
      else
         return nil, \"utf8: bad second and/or third byte\"
      end
   elseif head >= 240 and head <= 244 then
      local two, three, four = byte(c, 2), byte(c, 3), byte(c, 4)
      if continue(two) and continue(three) and continue(four) then
         return 4
      else
         return nil, \"utf8: bad second, third, and/or fourth byte\"
      end
   elseif continue(head) then
      return nil, \"utf8: continuation byte at head\"
   elseif head == 192 or head == 193 then
      return nil, \"utf8: 192 or 193 forbidden\"
   else -- head > 245
      return nil, \"utf8: byte > 245\"
   end
end"]
// END RANK codeblock_283

section_272 -> { header_290 prose_291 prose_292 prose_293 prose_294 prose_295 prose_296 prose_297 prose_298 prose_299 prose_300 prose_301 codeblock_302}
{rank=same; header_290 prose_291 prose_292 prose_293 prose_294 prose_295 prose_296 prose_297 prose_298 prose_299 prose_300 prose_301 codeblock_302}

header_290 [label="3 : typeformat(str, ...)"]

prose_291 [label="prose"]

prose_292 [label="prose"]

prose_293 [label="prose"]

prose_294 [label="prose"]

prose_295 [label="prose"]

prose_296 [label="prose"]

prose_297 [label="prose"]

prose_298 [label="prose"]

prose_299 [label="prose"]

prose_300 [label="prose"]

prose_301 [label="prose"]

codeblock_302 [label="code block 399-416"]


// END RANK section_272

header_290 -> leaf_303
leaf_303  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** typeformat(str, ...)"]
// END RANK header_290

prose_291 -> { raw_304}
{rank=same; raw_304}

raw_304 [label="raw"]


// END RANK prose_291

raw_304 -> leaf_305
leaf_305  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Background: I want to start using format in errors and assertions.
"]
// END RANK raw_304

prose_292 -> { raw_306}
{rank=same; raw_306}

raw_306 [label="raw"]


// END RANK prose_292

raw_306 -> leaf_307
leaf_307  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It's not as bad to use concatenation in-place for errors, since evaluating
them is a final step.  Assertions run much faster if passed only arguments.
"]
// END RANK raw_306

prose_293 -> { raw_308 prespace_309 literal_310 raw_311 prespace_312 literal_313 raw_314 prespace_315 literal_316 raw_317}
{rank=same; raw_308 prespace_309 literal_310 raw_311 prespace_312 literal_313 raw_314 prespace_315 literal_316 raw_317}

raw_308 [label="raw"]

prespace_309 [label="prespace"]

literal_310 [label="literal"]

raw_311 [label="raw"]

prespace_312 [label="prespace"]

literal_313 [label="literal"]

raw_314 [label="raw"]

prespace_315 [label="prespace"]

literal_316 [label="literal"]

raw_317 [label="raw"]


// END RANK prose_293

raw_308 -> leaf_318
leaf_318  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Lua peforms a small number of implicit conversions, mostly at the string
boundary. This is an actual feature since the language has both"]
// END RANK raw_308

prespace_309 -> leaf_319
leaf_319  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_309

literal_310 -> leaf_320
leaf_320  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".."]
// END RANK literal_310

raw_311 -> leaf_321
leaf_321  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_311

prespace_312 -> leaf_322
leaf_322  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_312

literal_313 -> leaf_323
leaf_323  [color=Gray,shape=rectangle,fontname=Inconsolata,label="+"]
// END RANK literal_313

raw_314 -> leaf_324
leaf_324  [color=Gray,shape=rectangle,fontname=Inconsolata,label=",
but it leaves a bit to be desired when it comes to"]
// END RANK raw_314

prespace_315 -> leaf_325
leaf_325  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_315

literal_316 -> leaf_326
leaf_326  [color=Gray,shape=rectangle,fontname=Inconsolata,label="string.format"]
// END RANK literal_316

raw_317 -> leaf_327
leaf_327  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_317

prose_294 -> { prespace_328 literal_329 raw_330 prespace_331 literal_332 raw_333 prespace_334 literal_335 raw_336 prespace_337 literal_338 raw_339 prespace_340 literal_341 raw_342 prespace_343 literal_344 raw_345}
{rank=same; prespace_328 literal_329 raw_330 prespace_331 literal_332 raw_333 prespace_334 literal_335 raw_336 prespace_337 literal_338 raw_339 prespace_340 literal_341 raw_342 prespace_343 literal_344 raw_345}

prespace_328 [label="prespace"]

literal_329 [label="literal"]

raw_330 [label="raw"]

prespace_331 [label="prespace"]

literal_332 [label="literal"]

raw_333 [label="raw"]

prespace_334 [label="prespace"]

literal_335 [label="literal"]

raw_336 [label="raw"]

prespace_337 [label="prespace"]

literal_338 [label="literal"]

raw_339 [label="raw"]

prespace_340 [label="prespace"]

literal_341 [label="literal"]

raw_342 [label="raw"]

prespace_343 [label="prespace"]

literal_344 [label="literal"]

raw_345 [label="raw"]


// END RANK prose_294

prespace_328 -> leaf_346
leaf_346  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_328

literal_329 -> leaf_347
leaf_347  [color=Gray,shape=rectangle,fontname=Inconsolata,label="format"]
// END RANK literal_329

raw_330 -> leaf_348
leaf_348  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" treats any"]
// END RANK raw_330

prespace_331 -> leaf_349
leaf_349  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_331

literal_332 -> leaf_350
leaf_350  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%s"]
// END RANK literal_332

raw_333 -> leaf_351
leaf_351  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" as a request to convert"]
// END RANK raw_333

prespace_334 -> leaf_352
leaf_352  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_334

literal_335 -> leaf_353
leaf_353  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tostring"]
// END RANK literal_335

raw_336 -> leaf_354
leaf_354  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", also treating"]
// END RANK raw_336

prespace_337 -> leaf_355
leaf_355  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_337

literal_338 -> leaf_356
leaf_356  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%d"]
// END RANK literal_338

raw_339 -> leaf_357
leaf_357  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" as a call to"]
// END RANK raw_339

prespace_340 -> leaf_358
leaf_358  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_340

literal_341 -> leaf_359
leaf_359  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tonumber"]
// END RANK literal_341

raw_342 -> leaf_360
leaf_360  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  The latter I will allow, I'm struggling to find
a circumstance where casting \"1\" to \"1\" through"]
// END RANK raw_342

prespace_343 -> leaf_361
leaf_361  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_343

literal_344 -> leaf_362
leaf_362  [color=Gray,shape=rectangle,fontname=Inconsolata,label="1"]
// END RANK literal_344

raw_345 -> leaf_363
leaf_363  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is dangerous.
"]
// END RANK raw_345

prose_295 -> { raw_364 prespace_365 literal_366 raw_367}
{rank=same; raw_364 prespace_365 literal_366 raw_367}

raw_364 [label="raw"]

prespace_365 [label="prespace"]

literal_366 [label="literal"]

raw_367 [label="raw"]


// END RANK prose_295

raw_364 -> leaf_368
leaf_368  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
What I want is a type-checked"]
// END RANK raw_364

prespace_365 -> leaf_369
leaf_369  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_365

literal_366 -> leaf_370
leaf_370  [color=Gray,shape=rectangle,fontname=Inconsolata,label="format"]
// END RANK literal_366

raw_367 -> leaf_371
leaf_371  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", which I can extend to use a few more
flexible strategies, depending on the context.
"]
// END RANK raw_367

prose_296 -> { raw_372}
{rank=same; raw_372}

raw_372 [label="raw"]


// END RANK prose_296

raw_372 -> leaf_373
leaf_373  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Less concerned about hostility and more about explicit coding practices. Also
don't want to undermine hardening elsewhere.
"]
// END RANK raw_372

prose_297 -> { raw_374 prespace_375 literal_376 raw_377 prespace_378 literal_379 raw_380 prespace_381 literal_382 raw_383}
{rank=same; raw_374 prespace_375 literal_376 raw_377 prespace_378 literal_379 raw_380 prespace_381 literal_382 raw_383}

raw_374 [label="raw"]

prespace_375 [label="prespace"]

literal_376 [label="literal"]

raw_377 [label="raw"]

prespace_378 [label="prespace"]

literal_379 [label="literal"]

raw_380 [label="raw"]

prespace_381 [label="prespace"]

literal_382 [label="literal"]

raw_383 [label="raw"]


// END RANK prose_297

raw_374 -> leaf_384
leaf_384  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
From the wiki, the full set of numeric parameters is"]
// END RANK raw_374

prespace_375 -> leaf_385
leaf_385  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_375

literal_376 -> leaf_386
leaf_386  [color=Gray,shape=rectangle,fontname=Inconsolata,label="{A,a,c,d,E,e,f,G,g,i,o,u,X,x}"]
// END RANK literal_376

raw_377 -> leaf_387
leaf_387  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  That leaves"]
// END RANK raw_377

prespace_378 -> leaf_388
leaf_388  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_378

literal_379 -> leaf_389
leaf_389  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%q"]
// END RANK literal_379

raw_380 -> leaf_390
leaf_390  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_380

prespace_381 -> leaf_391
leaf_391  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_381

literal_382 -> leaf_392
leaf_392  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%s"]
// END RANK literal_382

raw_383 -> leaf_393
leaf_393  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", the former does
string escaping but of course it is the Lua/C style of escaping.
"]
// END RANK raw_383

prose_298 -> { raw_394 prespace_395 literal_396 raw_397 prespace_398 literal_399 raw_400 prespace_401 literal_402 raw_403 prespace_404 literal_405 raw_406 prespace_407 literal_408 raw_409 prespace_410 literal_411 raw_412 prespace_413 literal_414 raw_415 prespace_416 literal_417 raw_418 prespace_419 literal_420 raw_421}
{rank=same; raw_394 prespace_395 literal_396 raw_397 prespace_398 literal_399 raw_400 prespace_401 literal_402 raw_403 prespace_404 literal_405 raw_406 prespace_407 literal_408 raw_409 prespace_410 literal_411 raw_412 prespace_413 literal_414 raw_415 prespace_416 literal_417 raw_418 prespace_419 literal_420 raw_421}

raw_394 [label="raw"]

prespace_395 [label="prespace"]

literal_396 [label="literal"]

raw_397 [label="raw"]

prespace_398 [label="prespace"]

literal_399 [label="literal"]

raw_400 [label="raw"]

prespace_401 [label="prespace"]

literal_402 [label="literal"]

raw_403 [label="raw"]

prespace_404 [label="prespace"]

literal_405 [label="literal"]

raw_406 [label="raw"]

prespace_407 [label="prespace"]

literal_408 [label="literal"]

raw_409 [label="raw"]

prespace_410 [label="prespace"]

literal_411 [label="literal"]

raw_412 [label="raw"]

prespace_413 [label="prespace"]

literal_414 [label="literal"]

raw_415 [label="raw"]

prespace_416 [label="prespace"]

literal_417 [label="literal"]

raw_418 [label="raw"]

prespace_419 [label="prespace"]

literal_420 [label="literal"]

raw_421 [label="raw"]


// END RANK prose_298

raw_394 -> leaf_422
leaf_422  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We add"]
// END RANK raw_394

prespace_395 -> leaf_423
leaf_423  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_395

literal_396 -> leaf_424
leaf_424  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%t"]
// END RANK literal_396

raw_397 -> leaf_425
leaf_425  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_397

prespace_398 -> leaf_426
leaf_426  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_398

literal_399 -> leaf_427
leaf_427  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%L"]
// END RANK literal_399

raw_400 -> leaf_428
leaf_428  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" (for λ), which call"]
// END RANK raw_400

prespace_401 -> leaf_429
leaf_429  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_401

literal_402 -> leaf_430
leaf_430  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tostring"]
// END RANK literal_402

raw_403 -> leaf_431
leaf_431  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" on a table or a function
respectively.  While we're being thorough,"]
// END RANK raw_403

prespace_404 -> leaf_432
leaf_432  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_404

literal_405 -> leaf_433
leaf_433  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%b"]
// END RANK literal_405

raw_406 -> leaf_434
leaf_434  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" for boolean,"]
// END RANK raw_406

prespace_407 -> leaf_435
leaf_435  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_407

literal_408 -> leaf_436
leaf_436  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%n"]
// END RANK literal_408

raw_409 -> leaf_437
leaf_437  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" for"]
// END RANK raw_409

prespace_410 -> leaf_438
leaf_438  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_410

literal_411 -> leaf_439
leaf_439  [color=Gray,shape=rectangle,fontname=Inconsolata,label="nil"]
// END RANK literal_411

raw_412 -> leaf_440
leaf_440  [color=Gray,shape=rectangle,fontname=Inconsolata,label=",
and"]
// END RANK raw_412

prespace_413 -> leaf_441
leaf_441  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_413

literal_414 -> leaf_442
leaf_442  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%*"]
// END RANK literal_414

raw_415 -> leaf_443
leaf_443  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" for the union type.  Why bother with"]
// END RANK raw_415

prespace_416 -> leaf_444
leaf_444  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_416

literal_417 -> leaf_445
leaf_445  [color=Gray,shape=rectangle,fontname=Inconsolata,label="nil"]
// END RANK literal_417

raw_418 -> leaf_446
leaf_446  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", which we can just write?
Type-checking, of course.  We treat"]
// END RANK raw_418

prespace_419 -> leaf_447
leaf_447  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_419

literal_420 -> leaf_448
leaf_448  [color=Gray,shape=rectangle,fontname=Inconsolata,label="nil"]
// END RANK literal_420

raw_421 -> leaf_449
leaf_449  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" as a full type, because in Lua, it
is.
"]
// END RANK raw_421

prose_299 -> { prespace_450 literal_451 raw_452 prespace_453 literal_454 raw_455 prespace_456 literal_457 raw_458 prespace_459 literal_460 raw_461 prespace_462 literal_463 raw_464 prespace_465 literal_466 raw_467 prespace_468 literal_469 raw_470 prespace_471 literal_472 raw_473}
{rank=same; prespace_450 literal_451 raw_452 prespace_453 literal_454 raw_455 prespace_456 literal_457 raw_458 prespace_459 literal_460 raw_461 prespace_462 literal_463 raw_464 prespace_465 literal_466 raw_467 prespace_468 literal_469 raw_470 prespace_471 literal_472 raw_473}

prespace_450 [label="prespace"]

literal_451 [label="literal"]

raw_452 [label="raw"]

prespace_453 [label="prespace"]

literal_454 [label="literal"]

raw_455 [label="raw"]

prespace_456 [label="prespace"]

literal_457 [label="literal"]

raw_458 [label="raw"]

prespace_459 [label="prespace"]

literal_460 [label="literal"]

raw_461 [label="raw"]

prespace_462 [label="prespace"]

literal_463 [label="literal"]

raw_464 [label="raw"]

prespace_465 [label="prespace"]

literal_466 [label="literal"]

raw_467 [label="raw"]

prespace_468 [label="prespace"]

literal_469 [label="literal"]

raw_470 [label="raw"]

prespace_471 [label="prespace"]

literal_472 [label="literal"]

raw_473 [label="raw"]


// END RANK prose_299

prespace_450 -> leaf_474
leaf_474  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_450

literal_451 -> leaf_475
leaf_475  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%t"]
// END RANK literal_451

raw_452 -> leaf_476
leaf_476  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" will actually accept all remaining compound types:"]
// END RANK raw_452

prespace_453 -> leaf_477
leaf_477  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_453

literal_454 -> leaf_478
leaf_478  [color=Gray,shape=rectangle,fontname=Inconsolata,label="userdata"]
// END RANK literal_454

raw_455 -> leaf_479
leaf_479  [color=Gray,shape=rectangle,fontname=Inconsolata,label=","]
// END RANK raw_455

prespace_456 -> leaf_480
leaf_480  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_456

literal_457 -> leaf_481
leaf_481  [color=Gray,shape=rectangle,fontname=Inconsolata,label="thread"]
// END RANK literal_457

raw_458 -> leaf_482
leaf_482  [color=Gray,shape=rectangle,fontname=Inconsolata,label=",
and"]
// END RANK raw_458

prespace_459 -> leaf_483
leaf_483  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_459

literal_460 -> leaf_484
leaf_484  [color=Gray,shape=rectangle,fontname=Inconsolata,label="cdata"]
// END RANK literal_460

raw_461 -> leaf_485
leaf_485  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  For only tables, we can have"]
// END RANK raw_461

prespace_462 -> leaf_486
leaf_486  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_462

literal_463 -> leaf_487
leaf_487  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%T"]
// END RANK literal_463

raw_464 -> leaf_488
leaf_488  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", and also"]
// END RANK raw_464

prespace_465 -> leaf_489
leaf_489  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_465

literal_466 -> leaf_490
leaf_490  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%U"]
// END RANK literal_466

raw_467 -> leaf_491
leaf_491  [color=Gray,shape=rectangle,fontname=Inconsolata,label=","]
// END RANK raw_467

prespace_468 -> leaf_492
leaf_492  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_468

literal_469 -> leaf_493
leaf_493  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%R"]
// END RANK literal_469

raw_470 -> leaf_494
leaf_494  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" (coRo),
and"]
// END RANK raw_470

prespace_471 -> leaf_495
leaf_495  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_471

literal_472 -> leaf_496
leaf_496  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%C"]
// END RANK literal_472

raw_473 -> leaf_497
leaf_497  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_473

prose_300 -> { raw_498 prespace_499 literal_500 raw_501 prespace_502 literal_503 raw_504}
{rank=same; raw_498 prespace_499 literal_500 raw_501 prespace_502 literal_503 raw_504}

raw_498 [label="raw"]

prespace_499 [label="prespace"]

literal_500 [label="literal"]

raw_501 [label="raw"]

prespace_502 [label="prespace"]

literal_503 [label="literal"]

raw_504 [label="raw"]


// END RANK prose_300

raw_498 -> leaf_505
leaf_505  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Note our"]
// END RANK raw_498

prespace_499 -> leaf_506
leaf_506  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_499

literal_500 -> leaf_507
leaf_507  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%L"]
// END RANK literal_500

raw_501 -> leaf_508
leaf_508  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is not the C version.  Tempted to have"]
// END RANK raw_501

prespace_502 -> leaf_509
leaf_509  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_502

literal_503 -> leaf_510
leaf_510  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%λ"]
// END RANK literal_503

raw_504 -> leaf_511
leaf_511  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" directly, but
that's a bit weird and it breaks the idea that format sequences are two
bytes long.  While I don't intend to write code that would break in this
case, eh.
"]
// END RANK raw_504

prose_301 -> { prespace_512 literal_513 raw_514}
{rank=same; prespace_512 literal_513 raw_514}

prespace_512 [label="prespace"]

literal_513 [label="literal"]

raw_514 [label="raw"]


// END RANK prose_301

prespace_512 -> leaf_515
leaf_515  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_512

literal_513 -> leaf_516
leaf_516  [color=Gray,shape=rectangle,fontname=Inconsolata,label="typeformat"]
// END RANK literal_513

raw_514 -> leaf_517
leaf_517  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" returns the correctly formatted string, or throws an error.
"]
// END RANK raw_514

codeblock_302 -> leaf_518
leaf_518  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local fmt_set = {\"*\", \"C\", \"L\", \"R\", \"T\", \"U\", \"b\", \"n\", \"q\", \"s\", \"t\" }

for i, v in ipairs(fmt_set) do
   fmt_set[i] = \"%%\" .. v
end

--[[
local function next_fmt(str)
   local head, tail
   for _, v in ipairs(fmt_set) do
      head, tail = 2
end]]

function core.format_safe(str, ...)

end"]
// END RANK codeblock_302

section_273 -> { header_519 prose_520 prose_521 codeblock_522}
{rank=same; header_519 prose_520 prose_521 codeblock_522}

header_519 [label="3 : litpat(s)"]

prose_520 [label="prose"]

prose_521 [label="prose"]

codeblock_522 [label="code block 424-445"]


// END RANK section_273

header_519 -> leaf_523
leaf_523  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** litpat(s)"]
// END RANK header_519

prose_520 -> { raw_524 prespace_525 literal_526 raw_527}
{rank=same; raw_524 prespace_525 literal_526 raw_527}

raw_524 [label="raw"]

prespace_525 [label="prespace"]

literal_526 [label="literal"]

raw_527 [label="raw"]


// END RANK prose_520

raw_524 -> leaf_528
leaf_528  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK raw_524

prespace_525 -> leaf_529
leaf_529  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_525

literal_526 -> leaf_530
leaf_530  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%"]
// END RANK literal_526

raw_527 -> leaf_531
leaf_531  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" escapes all pattern characters.
"]
// END RANK raw_527

prose_521 -> { raw_532 prespace_533 literal_534 raw_535 prespace_536 literal_537 raw_538 prespace_539 literal_540 raw_541}
{rank=same; raw_532 prespace_533 literal_534 raw_535 prespace_536 literal_537 raw_538 prespace_539 literal_540 raw_541}

raw_532 [label="raw"]

prespace_533 [label="prespace"]

literal_534 [label="literal"]

raw_535 [label="raw"]

prespace_536 [label="prespace"]

literal_537 [label="literal"]

raw_538 [label="raw"]

prespace_539 [label="prespace"]

literal_540 [label="literal"]

raw_541 [label="raw"]


// END RANK prose_521

raw_532 -> leaf_542
leaf_542  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The resulting string will literally match"]
// END RANK raw_532

prespace_533 -> leaf_543
leaf_543  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_533

literal_534 -> leaf_544
leaf_544  [color=Gray,shape=rectangle,fontname=Inconsolata,label="s"]
// END RANK literal_534

raw_535 -> leaf_545
leaf_545  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" in"]
// END RANK raw_535

prespace_536 -> leaf_546
leaf_546  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_536

literal_537 -> leaf_547
leaf_547  [color=Gray,shape=rectangle,fontname=Inconsolata,label="sub"]
// END RANK literal_537

raw_538 -> leaf_548
leaf_548  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" or"]
// END RANK raw_538

prespace_539 -> leaf_549
leaf_549  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_539

literal_540 -> leaf_550
leaf_550  [color=Gray,shape=rectangle,fontname=Inconsolata,label="gsub"]
// END RANK literal_540

raw_541 -> leaf_551
leaf_551  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_541

codeblock_522 -> leaf_552
leaf_552  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local matches =
  {
    [\"^\"] = \"%^\";
    [\"$\"] = \"%$\";
    [\"(\"] = \"%(\";
    [\")\"] = \"%)\";
    [\"%\"] = \"%%\";
    [\".\"] = \"%.\";
    [\"[\"] = \"%[\";
    [\"]\"] = \"%]\";
    [\"*\"] = \"%*\";
    [\"+\"] = \"%+\";
    [\"-\"] = \"%-\";
    [\"?\"] = \"%?\";
    [\"\\0\"] = \"%z\";
  }

function core.litpat(s)
    return (s:gsub(\".\", matches))
end"]
// END RANK codeblock_522

section_274 -> { header_553 prose_554 prose_555 codeblock_556 codeblock_557}
{rank=same; header_553 prose_554 prose_555 codeblock_556 codeblock_557}

header_553 [label="3 : cleave(str, patt)"]

prose_554 [label="prose"]

prose_555 [label="prose"]

codeblock_556 [label="code block 455-465"]

codeblock_557 [label="code block 467-486"]


// END RANK section_274

header_553 -> leaf_558
leaf_558  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** cleave(str, patt)"]
// END RANK header_553

prose_554 -> { raw_559 prespace_560 literal_561 raw_562 prespace_563 literal_564 raw_565}
{rank=same; raw_559 prespace_560 literal_561 raw_562 prespace_563 literal_564 raw_565}

raw_559 [label="raw"]

prespace_560 [label="prespace"]

literal_561 [label="literal"]

raw_562 [label="raw"]

prespace_563 [label="prespace"]

literal_564 [label="literal"]

raw_565 [label="raw"]


// END RANK prose_554

raw_559 -> leaf_566
leaf_566  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Performs the common operation of returning one run of bytes up to"]
// END RANK raw_559

prespace_560 -> leaf_567
leaf_567  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_560

literal_561 -> leaf_568
leaf_568  [color=Gray,shape=rectangle,fontname=Inconsolata,label="patt"]
// END RANK literal_561

raw_562 -> leaf_569
leaf_569  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
then the rest of the bytes after"]
// END RANK raw_562

prespace_563 -> leaf_570
leaf_570  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_563

literal_564 -> leaf_571
leaf_571  [color=Gray,shape=rectangle,fontname=Inconsolata,label="patt"]
// END RANK literal_564

raw_565 -> leaf_572
leaf_572  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_565

prose_555 -> { raw_573}
{rank=same; raw_573}

raw_573 [label="raw"]


// END RANK prose_555

raw_573 -> leaf_574
leaf_574  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Can be used to build iterators, either stateful or coroutine-based.
"]
// END RANK raw_573

codeblock_556 -> leaf_575
leaf_575  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function cleave(str, pat)
   local at = find(str, pat)
   if at then
      return sub(str, 1, at - 1), sub(str, at + 1)
   else
      return nil
   end
end
core.cleave = cleave"]
// END RANK codeblock_556

codeblock_557 -> leaf_576
leaf_576  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local yield, wrap = assert(coroutine.yield), assert(coroutine.wrap)

local function _lines(str)
   if str == \"\" or not str then return nil end
   local line, rem = cleave(str, \"\\n\")
   if line then
      yield(line)
   else
      yield(str)
   end
   _lines(rem)
end

local function lines(str)
  return coroutine.wrap(function() return _lines(str) end)
end

core.lines = lines"]
// END RANK codeblock_557

section_275 -> { header_577 prose_578 codeblock_579}
{rank=same; header_577 prose_578 codeblock_579}

header_577 [label="3 : codepoints(str)"]

prose_578 [label="prose"]

codeblock_579 [label="code block 494-524"]


// END RANK section_275

header_577 -> leaf_580
leaf_580  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** codepoints(str)"]
// END RANK header_577

prose_578 -> { raw_581 prespace_582 literal_583 raw_584}
{rank=same; raw_581 prespace_582 literal_583 raw_584}

raw_581 [label="raw"]

prespace_582 [label="prespace"]

literal_583 [label="literal"]

raw_584 [label="raw"]


// END RANK prose_578

raw_581 -> leaf_585
leaf_585  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Returns an array of the utf8 codepoints in"]
// END RANK raw_581

prespace_582 -> leaf_586
leaf_586  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_582

literal_583 -> leaf_587
leaf_587  [color=Gray,shape=rectangle,fontname=Inconsolata,label="str"]
// END RANK literal_583

raw_584 -> leaf_588
leaf_588  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", incidentally validating or
rather filtering the contents into utf8 compliance.
"]
// END RANK raw_584

codeblock_579 -> leaf_589
leaf_589  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
local function split(str, at)
   return sub(str,1, at), sub(str, at + 1)
end



function core.codepoints(str)
   local utf8 = core.utf8
   local codes = {}
   -- propagate nil
   if not str then return nil end
   -- break on bad type
   assert(type(str) == \"string\", \"codepoints must be given a string\")
   while #str > 0 do
      local width, err = utf8(str)
      if width then
         local head, tail = split(str, width)
         codes[#codes + 1] = head
         str = tail
      else
         -- make sure we take a bit off anyway
         str = sub(str, -1)
         -- for debugging
         codes[codes + 1] = { err = err }
      end
   end
   return codes
end"]
// END RANK codeblock_579

section_9 -> { header_590 prose_591 section_592}
{rank=same; header_590 prose_591 section_592}

header_590 [label="2 : Errors and asserts"]

prose_591 [label="prose"]

section_592 [label="section: 530-571"]


// END RANK section_9

header_590 -> leaf_593
leaf_593  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Errors and asserts"]
// END RANK header_590

prose_591 -> { raw_594}
{rank=same; raw_594}

raw_594 [label="raw"]


// END RANK prose_591

raw_594 -> leaf_595
leaf_595  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

"]
// END RANK raw_594

section_592 -> { header_596 prose_597 prose_598 codeblock_599 codeblock_600}
{rank=same; header_596 prose_597 prose_598 codeblock_599 codeblock_600}

header_596 [label="3 : Assertfmt"]

prose_597 [label="prose"]

prose_598 [label="prose"]

codeblock_599 [label="code block 537-547"]

codeblock_600 [label="code block 549-551"]


// END RANK section_592

header_596 -> leaf_601
leaf_601  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Assertfmt"]
// END RANK header_596

prose_597 -> { raw_602}
{rank=same; raw_602}

raw_602 [label="raw"]


// END RANK prose_597

raw_602 -> leaf_603
leaf_603  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

I'll probably just globally replace assert with this over time.
"]
// END RANK raw_602

prose_598 -> { raw_604}
{rank=same; raw_604}

raw_604 [label="raw"]


// END RANK prose_598

raw_604 -> leaf_605
leaf_605  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This avoids doing concatenations and conversions on messages that we never
see in normal use.
"]
// END RANK raw_604

codeblock_599 -> leaf_606
leaf_606  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local format = string.format

function core.assertfmt(pred, msg, ...)
   if pred then
      return pred
   else
      error(format(msg, ...))
   end
end"]
// END RANK codeblock_599

codeblock_600 -> leaf_607
leaf_607  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return core"]
// END RANK codeblock_600


}
