digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 338"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-123"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 codeblock_5 section_6 section_7 section_8}
{rank=same; header_2 prose_3 prose_4 codeblock_5 section_6 section_7 section_8}

header_2 [label="1 : Core"]

prose_3 [label="prose"]

prose_4 [label="prose"]

codeblock_5 [label="code block 8-10"]

section_6 [label="section: 13-39"]

section_7 [label="section: 40-95"]

section_8 [label="section: 124-280"]


// END RANK section_1

header_2 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Core"]
// END RANK header_2

prose_3 -> { raw_10 prespace_11 literal_12 raw_13}
{rank=same; raw_10 prespace_11 literal_12 raw_13}

raw_10 [label="raw"]

prespace_11 [label="prespace"]

literal_12 [label="literal"]

raw_13 [label="raw"]


// END RANK prose_3

raw_10 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_10

prespace_11 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_11

literal_12 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label="core"]
// END RANK literal_12

raw_13 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is for tampering with the global namespace and standard libraries.
"]
// END RANK raw_13

prose_4 -> { raw_18 prespace_19 literal_20 raw_21}
{rank=same; raw_18 prespace_19 literal_20 raw_21}

raw_18 [label="raw"]

prespace_19 [label="prespace"]

literal_20 [label="literal"]

raw_21 [label="raw"]


// END RANK prose_4

raw_18 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It will eventually land in"]
// END RANK raw_18

prespace_19 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_19

literal_20 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label="pylon"]
// END RANK literal_20

raw_21 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_21

codeblock_5 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local core = {}"]
// END RANK codeblock_5

section_6 -> { header_27 prose_28 prose_29 codeblock_30}
{rank=same; header_27 prose_28 prose_29 codeblock_30}

header_27 [label="2 : meta"]

prose_28 [label="prose"]

prose_29 [label="prose"]

codeblock_30 [label="code block 21-37"]


// END RANK section_6

header_27 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** meta"]
// END RANK header_27

prose_28 -> { raw_32 prespace_33 literal_34 raw_35 prespace_36 literal_37 raw_38 prespace_39 literal_40 raw_41 prespace_42 literal_43 raw_44 prespace_45 literal_46 raw_47 prespace_48 literal_49 raw_50}
{rank=same; raw_32 prespace_33 literal_34 raw_35 prespace_36 literal_37 raw_38 prespace_39 literal_40 raw_41 prespace_42 literal_43 raw_44 prespace_45 literal_46 raw_47 prespace_48 literal_49 raw_50}

raw_32 [label="raw"]

prespace_33 [label="prespace"]

literal_34 [label="literal"]

raw_35 [label="raw"]

prespace_36 [label="prespace"]

literal_37 [label="literal"]

raw_38 [label="raw"]

prespace_39 [label="prespace"]

literal_40 [label="literal"]

raw_41 [label="raw"]

prespace_42 [label="prespace"]

literal_43 [label="literal"]

raw_44 [label="raw"]

prespace_45 [label="prespace"]

literal_46 [label="literal"]

raw_47 [label="raw"]

prespace_48 [label="prespace"]

literal_49 [label="literal"]

raw_50 [label="raw"]


// END RANK prose_28

raw_32 -> leaf_51
leaf_51  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

We shorten a few of the common Lua keywords:"]
// END RANK raw_32

prespace_33 -> leaf_52
leaf_52  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_33

literal_34 -> leaf_53
leaf_53  [color=Gray,shape=rectangle,fontname=Inconsolata,label="coro"]
// END RANK literal_34

raw_35 -> leaf_54
leaf_54  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" rather than"]
// END RANK raw_35

prespace_36 -> leaf_55
leaf_55  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_36

literal_37 -> leaf_56
leaf_56  [color=Gray,shape=rectangle,fontname=Inconsolata,label="coroutine"]
// END RANK literal_37

raw_38 -> leaf_57
leaf_57  [color=Gray,shape=rectangle,fontname=Inconsolata,label=",
and"]
// END RANK raw_38

prespace_39 -> leaf_58
leaf_58  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_39

literal_40 -> leaf_59
leaf_59  [color=Gray,shape=rectangle,fontname=Inconsolata,label="getmeta"]
// END RANK literal_40

raw_41 -> leaf_60
leaf_60  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_41

prespace_42 -> leaf_61
leaf_61  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_42

literal_43 -> leaf_62
leaf_62  [color=Gray,shape=rectangle,fontname=Inconsolata,label="setmeta"]
// END RANK literal_43

raw_44 -> leaf_63
leaf_63  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" over"]
// END RANK raw_44

prespace_45 -> leaf_64
leaf_64  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_45

literal_46 -> leaf_65
leaf_65  [color=Gray,shape=rectangle,fontname=Inconsolata,label="getmetatable"]
// END RANK literal_46

raw_47 -> leaf_66
leaf_66  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_47

prespace_48 -> leaf_67
leaf_67  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_48

literal_49 -> leaf_68
leaf_68  [color=Gray,shape=rectangle,fontname=Inconsolata,label="setmetatable"]
// END RANK literal_49

raw_50 -> leaf_69
leaf_69  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_50

prose_29 -> { raw_70 prespace_71 literal_72 raw_73}
{rank=same; raw_70 prespace_71 literal_72 raw_73}

raw_70 [label="raw"]

prespace_71 [label="prespace"]

literal_72 [label="literal"]

raw_73 [label="raw"]


// END RANK prose_29

raw_70 -> leaf_74
leaf_74  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
In my code there is a repeated pattern of use that is basic enough that I'm
entering it into the global namespace as simple"]
// END RANK raw_70

prespace_71 -> leaf_75
leaf_75  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_71

literal_72 -> leaf_76
leaf_76  [color=Gray,shape=rectangle,fontname=Inconsolata,label="meta"]
// END RANK literal_72

raw_73 -> leaf_77
leaf_77  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_73

codeblock_30 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function core.meta(MT)
   if MT and MT.__index then
      -- inherit
      return setmetatable({}, MT)
   elseif MT then
      -- decorate
      MT.__index = MT
      return MT
   else
      -- new metatable
      local _M = {}
      _M.__index = _M
      return _M
   end
end"]
// END RANK codeblock_30

section_7 -> { header_79 prose_80 section_81 section_82 section_83 section_84}
{rank=same; header_79 prose_80 section_81 section_82 section_83 section_84}

header_79 [label="2 : Table extensions"]

prose_80 [label="prose"]

section_81 [label="section: 42-57"]

section_82 [label="section: 58-72"]

section_83 [label="section: 73-95"]

section_84 [label="section: 96-123"]


// END RANK section_7

header_79 -> leaf_85
leaf_85  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Table extensions"]
// END RANK header_79

prose_80 -> { raw_86}
{rank=same; raw_86}

raw_86 [label="raw"]


// END RANK prose_80

raw_86 -> leaf_87
leaf_87  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_86

section_81 -> { header_88 prose_89 codeblock_90}
{rank=same; header_88 prose_89 codeblock_90}

header_88 [label="3 : clone(tab)"]

prose_89 [label="prose"]

codeblock_90 [label="code block 46-55"]


// END RANK section_81

header_88 -> leaf_91
leaf_91  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** clone(tab)"]
// END RANK header_88

prose_89 -> { raw_92}
{rank=same; raw_92}

raw_92 [label="raw"]


// END RANK prose_89

raw_92 -> leaf_93
leaf_93  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Performs a shallow clone of table, attaching metatable if available.
"]
// END RANK raw_92

codeblock_90 -> leaf_94
leaf_94  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function core.clone(tab)
   local _M = getmetatable(tab)
   local clone = _M and setmetatable({}, _M) or {}
   for k,v in pairs(tab) do
      clone[k] = v
   end
   return clone
end"]
// END RANK codeblock_90

section_82 -> { header_95 prose_96 codeblock_97}
{rank=same; header_95 prose_96 codeblock_97}

header_95 [label="3 : arrayof(tab)"]

prose_96 [label="prose"]

codeblock_97 [label="code block 62-70"]


// END RANK section_82

header_95 -> leaf_98
leaf_98  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** arrayof(tab)"]
// END RANK header_95

prose_96 -> { raw_99}
{rank=same; raw_99}

raw_99 [label="raw"]


// END RANK prose_96

raw_99 -> leaf_100
leaf_100  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Clones and returns the array portion of a table.
"]
// END RANK raw_99

codeblock_97 -> leaf_101
leaf_101  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function core.arrayof(tab)
   local arr = {}
   for i,v in ipairs(tab) do
      arr[i] = v
   end
   return arr
end"]
// END RANK codeblock_97

section_83 -> { header_102 prose_103 codeblock_104}
{rank=same; header_102 prose_103 codeblock_104}

header_102 [label="3 : select(tab, key)"]

prose_103 [label="prose"]

codeblock_104 [label="code block 77-94"]


// END RANK section_83

header_102 -> leaf_105
leaf_105  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** select(tab, key)"]
// END RANK header_102

prose_103 -> { raw_106 prespace_107 literal_108 raw_109 prespace_110 literal_111 raw_112}
{rank=same; raw_106 prespace_107 literal_108 raw_109 prespace_110 literal_111 raw_112}

raw_106 [label="raw"]

prespace_107 [label="prespace"]

literal_108 [label="literal"]

raw_109 [label="raw"]

prespace_110 [label="prespace"]

literal_111 [label="literal"]

raw_112 [label="raw"]


// END RANK prose_103

raw_106 -> leaf_113
leaf_113  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Recursively return all"]
// END RANK raw_106

prespace_107 -> leaf_114
leaf_114  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_107

literal_108 -> leaf_115
leaf_115  [color=Gray,shape=rectangle,fontname=Inconsolata,label="v"]
// END RANK literal_108

raw_109 -> leaf_116
leaf_116  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" for"]
// END RANK raw_109

prespace_110 -> leaf_117
leaf_117  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_110

literal_111 -> leaf_118
leaf_118  [color=Gray,shape=rectangle,fontname=Inconsolata,label="key"]
// END RANK literal_111

raw_112 -> leaf_119
leaf_119  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" in all subtables of tab
"]
// END RANK raw_112

codeblock_104 -> leaf_120
leaf_120  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function _select(collection, tab, key, cycle)
   for k,v in pairs(tab) do
      if key == k then
         collection[#collection + 1] = v
      end
      if type(v) == \"table\" and not cycle[v] then
         cycle[v] = true
         collection = _select(collection, v, key, cycle)
      end
   end
   return collection
end

function core.select(tab, key)
   return _select({}, tab, key, {})
end"]
// END RANK codeblock_104

section_84 -> { header_121 prose_122 codeblock_123}
{rank=same; header_121 prose_122 codeblock_123}

header_121 [label="3 : splice(tab, index, into)"]

prose_122 [label="prose"]

codeblock_123 [label="code block 101-121"]


// END RANK section_84

header_121 -> leaf_124
leaf_124  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** splice(tab, index, into)"]
// END RANK header_121

prose_122 -> { raw_125 prespace_126 literal_127 raw_128 prespace_129 literal_130 raw_131 prespace_132 literal_133 raw_134}
{rank=same; raw_125 prespace_126 literal_127 raw_128 prespace_129 literal_130 raw_131 prespace_132 literal_133 raw_134}

raw_125 [label="raw"]

prespace_126 [label="prespace"]

literal_127 [label="literal"]

raw_128 [label="raw"]

prespace_129 [label="prespace"]

literal_130 [label="literal"]

raw_131 [label="raw"]

prespace_132 [label="prespace"]

literal_133 [label="literal"]

raw_134 [label="raw"]


// END RANK prose_122

raw_125 -> leaf_135
leaf_135  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Puts the full contents of"]
// END RANK raw_125

prespace_126 -> leaf_136
leaf_136  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_126

literal_127 -> leaf_137
leaf_137  [color=Gray,shape=rectangle,fontname=Inconsolata,label="into"]
// END RANK literal_127

raw_128 -> leaf_138
leaf_138  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" into"]
// END RANK raw_128

prespace_129 -> leaf_139
leaf_139  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_129

literal_130 -> leaf_140
leaf_140  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tab"]
// END RANK literal_130

raw_131 -> leaf_141
leaf_141  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" at"]
// END RANK raw_131

prespace_132 -> leaf_142
leaf_142  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_132

literal_133 -> leaf_143
leaf_143  [color=Gray,shape=rectangle,fontname=Inconsolata,label="index"]
// END RANK literal_133

raw_134 -> leaf_144
leaf_144  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  The argument order is
compatible with existing functions and method syntax.
"]
// END RANK raw_134

codeblock_123 -> leaf_145
leaf_145  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local insert = table.insert

local sp_er = \"table<core>.splice: \"
local _e_1 = sp_er .. \"$1 must be a table\"
local _e_2 = sp_er .. \"$2 must be a number\"
local _e_3 = sp_er .. \"$3 must be a table\"

function core.splice(tab, idx, into)
   assert(type(tab) == \"table\", _e_1)
   assert(type(idx) == \"number\", _e_2)
   assert(type(into) == \"table\", _e_3)
    idx = idx - 1
    local i = 1
    for j = 1, #into do
        insert(tab,i+idx,into[j])
        i = i + 1
    end
    return tab
end"]
// END RANK codeblock_123

section_8 -> { header_146 prose_147 codeblock_148 section_149 section_150 section_151 section_152 section_153}
{rank=same; header_146 prose_147 codeblock_148 section_149 section_150 section_151 section_152 section_153}

header_146 [label="2 : String extensions"]

prose_147 [label="prose"]

codeblock_148 [label="code block 126-131"]

section_149 [label="section: 133-182"]

section_150 [label="section: 183-235"]

section_151 [label="section: 236-265"]

section_152 [label="section: 266-280"]

section_153 [label="section: 281-338"]


// END RANK section_8

header_146 -> leaf_154
leaf_154  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** String extensions"]
// END RANK header_146

prose_147 -> { raw_155}
{rank=same; raw_155}

raw_155 [label="raw"]


// END RANK prose_147

raw_155 -> leaf_156
leaf_156  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_155

codeblock_148 -> leaf_157
leaf_157  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local byte = assert(string.byte)
local find = assert(string.find)
local sub = assert(string.sub)
local format = assert(string.format)"]
// END RANK codeblock_148

section_149 -> { header_158 prose_159 prose_160 codeblock_161}
{rank=same; header_158 prose_159 prose_160 codeblock_161}

header_158 [label="3 : utf8(char)"]

prose_159 [label="prose"]

prose_160 [label="prose"]

codeblock_161 [label="code block 141-180"]


// END RANK section_149

header_158 -> leaf_162
leaf_162  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** utf8(char)"]
// END RANK header_158

prose_159 -> { raw_163}
{rank=same; raw_163}

raw_163 [label="raw"]


// END RANK prose_159

raw_163 -> leaf_164
leaf_164  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This takes a string and validates the first character.
"]
// END RANK raw_163

prose_160 -> { raw_165}
{rank=same; raw_165}

raw_165 [label="raw"]


// END RANK prose_160

raw_165 -> leaf_166
leaf_166  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Return is either the (valid) length in bytes, or nil and an error string.
"]
// END RANK raw_165

codeblock_161 -> leaf_167
leaf_167  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function continue(c)
   return c >= 128 and c <= 191
end

function core.utf8(c)
   local byte = byte
   local head = byte(c)
   if head < 128 then
      return 1
   elseif head >= 194 and head <= 223 then
      local two = byte(c, 2)
      if continue(two) then
         return 2
      else
         return nil, \"utf8: bad second byte\"
      end
   elseif head >= 224 and head <= 239 then
      local two, three = byte(c, 2), byte(c, 3)
      if continue(two) and continue(three) then
         return 3
      else
         return nil, \"utf8: bad second and/or third byte\"
      end
   elseif head >= 240 and head <= 244 then
      local two, three, four = byte(c, 2), byte(c, 3), byte(c, 4)
      if continue(two) and continue(three) and continue(four) then
         return 4
      else
         return nil, \"utf8: bad second, third, and/or fourth byte\"
      end
   elseif continue(head) then
      return nil, \"utf8: continuation byte at head\"
   elseif head == 192 or head == 193 then
      return nil, \"utf8: 192 or 193 forbidden\"
   else -- head > 245
      return nil, \"utf8: byte > 245\"
   end
end"]
// END RANK codeblock_161

section_150 -> { header_168 prose_169 structure_170 prose_171 prose_172 prose_173 prose_174 prose_175 prose_176 prose_177 codeblock_178}
{rank=same; header_168 prose_169 structure_170 prose_171 prose_172 prose_173 prose_174 prose_175 prose_176 prose_177 codeblock_178}

header_168 [label="3 : format_safe(str, ...)"]

prose_169 [label="prose"]

structure_170 [label="structure"]

prose_171 [label="prose"]

prose_172 [label="prose"]

prose_173 [label="prose"]

prose_174 [label="prose"]

prose_175 [label="prose"]

prose_176 [label="prose"]

prose_177 [label="prose"]

codeblock_178 [label="code block 217-234"]


// END RANK section_150

header_168 -> leaf_179
leaf_179  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** format_safe(str, ...)"]
// END RANK header_168

prose_169 -> { raw_180}
{rank=same; raw_180}

raw_180 [label="raw"]


// END RANK prose_169

raw_180 -> leaf_181
leaf_181  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_180

structure_170 -> { hashline_182}
{rank=same; hashline_182}

hashline_182 [label="hashline"]


// END RANK structure_170

hashline_182 -> { hashtag_183}
{rank=same; hashtag_183}

hashtag_183 [label="hashtag"]


// END RANK hashline_182

hashtag_183 -> leaf_184
leaf_184  [color=Gray,shape=rectangle,fontname=Inconsolata,label="NB"]
// END RANK hashtag_183

prose_171 -> { prespace_185 literal_186 raw_187 prespace_188 literal_189 raw_190 prespace_191 literal_192 raw_193}
{rank=same; prespace_185 literal_186 raw_187 prespace_188 literal_189 raw_190 prespace_191 literal_192 raw_193}

prespace_185 [label="prespace"]

literal_186 [label="literal"]

raw_187 [label="raw"]

prespace_188 [label="prespace"]

literal_189 [label="literal"]

raw_190 [label="raw"]

prespace_191 [label="prespace"]

literal_192 [label="literal"]

raw_193 [label="raw"]


// END RANK prose_171

prespace_185 -> leaf_194
leaf_194  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_185

literal_186 -> leaf_195
leaf_195  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%d"]
// END RANK literal_186

raw_187 -> leaf_196
leaf_196  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" as a call to"]
// END RANK raw_187

prespace_188 -> leaf_197
leaf_197  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_188

literal_189 -> leaf_198
leaf_198  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tonumber"]
// END RANK literal_189

raw_190 -> leaf_199
leaf_199  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  The latter I will allow, I'm struggling to find
a circumstance where casting \"1\" to \"1\" through"]
// END RANK raw_190

prespace_191 -> leaf_200
leaf_200  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_191

literal_192 -> leaf_201
leaf_201  [color=Gray,shape=rectangle,fontname=Inconsolata,label="1"]
// END RANK literal_192

raw_193 -> leaf_202
leaf_202  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is dangerous.
"]
// END RANK raw_193

prose_172 -> { raw_203 prespace_204 literal_205 raw_206 prespace_207 literal_208 raw_209 prespace_210 literal_211 raw_212}
{rank=same; raw_203 prespace_204 literal_205 raw_206 prespace_207 literal_208 raw_209 prespace_210 literal_211 raw_212}

raw_203 [label="raw"]

prespace_204 [label="prespace"]

literal_205 [label="literal"]

raw_206 [label="raw"]

prespace_207 [label="prespace"]

literal_208 [label="literal"]

raw_209 [label="raw"]

prespace_210 [label="prespace"]

literal_211 [label="literal"]

raw_212 [label="raw"]


// END RANK prose_172

raw_203 -> leaf_213
leaf_213  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This isn't \"safe\" in the sense of preventing injections, all it does is check
that its arguments are of a valid type, prohibiting implicit"]
// END RANK raw_203

prespace_204 -> leaf_214
leaf_214  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_204

literal_205 -> leaf_215
leaf_215  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tostring"]
// END RANK literal_205

raw_206 -> leaf_216
leaf_216  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
conversions.  So"]
// END RANK raw_206

prespace_207 -> leaf_217
leaf_217  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_207

literal_208 -> leaf_218
leaf_218  [color=Gray,shape=rectangle,fontname=Inconsolata,label="format(\"select %s from ...\", \"';drop table users;\")"]
// END RANK literal_208

raw_209 -> leaf_219
leaf_219  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" will
get through, but not"]
// END RANK raw_209

prespace_210 -> leaf_220
leaf_220  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_210

literal_211 -> leaf_221
leaf_221  [color=Gray,shape=rectangle,fontname=Inconsolata,label="format(\"%s\", setmeta({}, {__tostring = function() return \"'; drop...\"}))"]
// END RANK literal_211

raw_212 -> leaf_222
leaf_222  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_212

prose_173 -> { raw_223}
{rank=same; raw_223}

raw_223 [label="raw"]


// END RANK prose_173

raw_223 -> leaf_224
leaf_224  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Less concerned about hostility and more about explicit coding practices. Also
don't want to undermine hardening elsewhere.
"]
// END RANK raw_223

prose_174 -> { raw_225 prespace_226 literal_227 raw_228 prespace_229 literal_230 raw_231 prespace_232 literal_233 raw_234}
{rank=same; raw_225 prespace_226 literal_227 raw_228 prespace_229 literal_230 raw_231 prespace_232 literal_233 raw_234}

raw_225 [label="raw"]

prespace_226 [label="prespace"]

literal_227 [label="literal"]

raw_228 [label="raw"]

prespace_229 [label="prespace"]

literal_230 [label="literal"]

raw_231 [label="raw"]

prespace_232 [label="prespace"]

literal_233 [label="literal"]

raw_234 [label="raw"]


// END RANK prose_174

raw_225 -> leaf_235
leaf_235  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
From the wiki, the full set of numeric parameters is"]
// END RANK raw_225

prespace_226 -> leaf_236
leaf_236  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_226

literal_227 -> leaf_237
leaf_237  [color=Gray,shape=rectangle,fontname=Inconsolata,label="{A,a,c,d,E,e,f,G,g,i,o,u,X,x}"]
// END RANK literal_227

raw_228 -> leaf_238
leaf_238  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  That leaves"]
// END RANK raw_228

prespace_229 -> leaf_239
leaf_239  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_229

literal_230 -> leaf_240
leaf_240  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%q"]
// END RANK literal_230

raw_231 -> leaf_241
leaf_241  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_231

prespace_232 -> leaf_242
leaf_242  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_232

literal_233 -> leaf_243
leaf_243  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%s"]
// END RANK literal_233

raw_234 -> leaf_244
leaf_244  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", the former does
string escaping but of course it is the Lua/C style of escaping.
"]
// END RANK raw_234

prose_175 -> { raw_245 prespace_246 literal_247 raw_248 prespace_249 literal_250 raw_251 prespace_252 literal_253 raw_254 prespace_255 literal_256 raw_257 prespace_258 literal_259 raw_260 prespace_261 literal_262 raw_263 prespace_264 literal_265 raw_266 prespace_267 literal_268 raw_269 prespace_270 literal_271 raw_272}
{rank=same; raw_245 prespace_246 literal_247 raw_248 prespace_249 literal_250 raw_251 prespace_252 literal_253 raw_254 prespace_255 literal_256 raw_257 prespace_258 literal_259 raw_260 prespace_261 literal_262 raw_263 prespace_264 literal_265 raw_266 prespace_267 literal_268 raw_269 prespace_270 literal_271 raw_272}

raw_245 [label="raw"]

prespace_246 [label="prespace"]

literal_247 [label="literal"]

raw_248 [label="raw"]

prespace_249 [label="prespace"]

literal_250 [label="literal"]

raw_251 [label="raw"]

prespace_252 [label="prespace"]

literal_253 [label="literal"]

raw_254 [label="raw"]

prespace_255 [label="prespace"]

literal_256 [label="literal"]

raw_257 [label="raw"]

prespace_258 [label="prespace"]

literal_259 [label="literal"]

raw_260 [label="raw"]

prespace_261 [label="prespace"]

literal_262 [label="literal"]

raw_263 [label="raw"]

prespace_264 [label="prespace"]

literal_265 [label="literal"]

raw_266 [label="raw"]

prespace_267 [label="prespace"]

literal_268 [label="literal"]

raw_269 [label="raw"]

prespace_270 [label="prespace"]

literal_271 [label="literal"]

raw_272 [label="raw"]


// END RANK prose_175

raw_245 -> leaf_273
leaf_273  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We add"]
// END RANK raw_245

prespace_246 -> leaf_274
leaf_274  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_246

literal_247 -> leaf_275
leaf_275  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%t"]
// END RANK literal_247

raw_248 -> leaf_276
leaf_276  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_248

prespace_249 -> leaf_277
leaf_277  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_249

literal_250 -> leaf_278
leaf_278  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%L"]
// END RANK literal_250

raw_251 -> leaf_279
leaf_279  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" (for λ), which call"]
// END RANK raw_251

prespace_252 -> leaf_280
leaf_280  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_252

literal_253 -> leaf_281
leaf_281  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tostring"]
// END RANK literal_253

raw_254 -> leaf_282
leaf_282  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" on a table or a function
respectively. "]
// END RANK raw_254

prespace_255 -> leaf_283
leaf_283  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_255

literal_256 -> leaf_284
leaf_284  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%t"]
// END RANK literal_256

raw_257 -> leaf_285
leaf_285  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" will actually accept all remaining compound types:"]
// END RANK raw_257

prespace_258 -> leaf_286
leaf_286  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_258

literal_259 -> leaf_287
leaf_287  [color=Gray,shape=rectangle,fontname=Inconsolata,label="userdata"]
// END RANK literal_259

raw_260 -> leaf_288
leaf_288  [color=Gray,shape=rectangle,fontname=Inconsolata,label=","]
// END RANK raw_260

prespace_261 -> leaf_289
leaf_289  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_261

literal_262 -> leaf_290
leaf_290  [color=Gray,shape=rectangle,fontname=Inconsolata,label="thread"]
// END RANK literal_262

raw_263 -> leaf_291
leaf_291  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", and"]
// END RANK raw_263

prespace_264 -> leaf_292
leaf_292  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_264

literal_265 -> leaf_293
leaf_293  [color=Gray,shape=rectangle,fontname=Inconsolata,label="cdata"]
// END RANK literal_265

raw_266 -> leaf_294
leaf_294  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  While we're being thorough,"]
// END RANK raw_266

prespace_267 -> leaf_295
leaf_295  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_267

literal_268 -> leaf_296
leaf_296  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%b"]
// END RANK literal_268

raw_269 -> leaf_297
leaf_297  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" for
boolean.  Perhaps"]
// END RANK raw_269

prespace_270 -> leaf_298
leaf_298  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_270

literal_271 -> leaf_299
leaf_299  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%*"]
// END RANK literal_271

raw_272 -> leaf_300
leaf_300  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" as a wildcard?
"]
// END RANK raw_272

prose_176 -> { raw_301 prespace_302 literal_303 raw_304}
{rank=same; raw_301 prespace_302 literal_303 raw_304}

raw_301 [label="raw"]

prespace_302 [label="prespace"]

literal_303 [label="literal"]

raw_304 [label="raw"]


// END RANK prose_176

raw_301 -> leaf_305
leaf_305  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Note our"]
// END RANK raw_301

prespace_302 -> leaf_306
leaf_306  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_302

literal_303 -> leaf_307
leaf_307  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%L"]
// END RANK literal_303

raw_304 -> leaf_308
leaf_308  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is not the C version.
"]
// END RANK raw_304

prose_177 -> { prespace_309 literal_310 raw_311}
{rank=same; prespace_309 literal_310 raw_311}

prespace_309 [label="prespace"]

literal_310 [label="literal"]

raw_311 [label="raw"]


// END RANK prose_177

prespace_309 -> leaf_312
leaf_312  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_309

literal_310 -> leaf_313
leaf_313  [color=Gray,shape=rectangle,fontname=Inconsolata,label="format_safe"]
// END RANK literal_310

raw_311 -> leaf_314
leaf_314  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" returns the correctly formatted string, or throws an error.
"]
// END RANK raw_311

codeblock_178 -> leaf_315
leaf_315  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local fmt_set = {\"L\", \"q\", \"s\", \"t\"}

for i, v in ipairs(fmt_set) do
   fmt_set[i] = \"%%\" .. v
end

--[[
local function next_fmt(str)
   local head, tail
   for _, v in ipairs(fmt_set) do
      head, tail = 2
end]]

function core.format_safe(str, ...)

end"]
// END RANK codeblock_178

section_151 -> { header_316 prose_317 prose_318 codeblock_319}
{rank=same; header_316 prose_317 prose_318 codeblock_319}

header_316 [label="3 : litpat(s)"]

prose_317 [label="prose"]

prose_318 [label="prose"]

codeblock_319 [label="code block 242-263"]


// END RANK section_151

header_316 -> leaf_320
leaf_320  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** litpat(s)"]
// END RANK header_316

prose_317 -> { raw_321 prespace_322 literal_323 raw_324}
{rank=same; raw_321 prespace_322 literal_323 raw_324}

raw_321 [label="raw"]

prespace_322 [label="prespace"]

literal_323 [label="literal"]

raw_324 [label="raw"]


// END RANK prose_317

raw_321 -> leaf_325
leaf_325  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK raw_321

prespace_322 -> leaf_326
leaf_326  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_322

literal_323 -> leaf_327
leaf_327  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%"]
// END RANK literal_323

raw_324 -> leaf_328
leaf_328  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" escapes all pattern characters.
"]
// END RANK raw_324

prose_318 -> { raw_329 prespace_330 literal_331 raw_332 prespace_333 literal_334 raw_335 prespace_336 literal_337 raw_338}
{rank=same; raw_329 prespace_330 literal_331 raw_332 prespace_333 literal_334 raw_335 prespace_336 literal_337 raw_338}

raw_329 [label="raw"]

prespace_330 [label="prespace"]

literal_331 [label="literal"]

raw_332 [label="raw"]

prespace_333 [label="prespace"]

literal_334 [label="literal"]

raw_335 [label="raw"]

prespace_336 [label="prespace"]

literal_337 [label="literal"]

raw_338 [label="raw"]


// END RANK prose_318

raw_329 -> leaf_339
leaf_339  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The resulting string will literally match"]
// END RANK raw_329

prespace_330 -> leaf_340
leaf_340  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_330

literal_331 -> leaf_341
leaf_341  [color=Gray,shape=rectangle,fontname=Inconsolata,label="s"]
// END RANK literal_331

raw_332 -> leaf_342
leaf_342  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" in"]
// END RANK raw_332

prespace_333 -> leaf_343
leaf_343  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_333

literal_334 -> leaf_344
leaf_344  [color=Gray,shape=rectangle,fontname=Inconsolata,label="sub"]
// END RANK literal_334

raw_335 -> leaf_345
leaf_345  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" or"]
// END RANK raw_335

prespace_336 -> leaf_346
leaf_346  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_336

literal_337 -> leaf_347
leaf_347  [color=Gray,shape=rectangle,fontname=Inconsolata,label="gsub"]
// END RANK literal_337

raw_338 -> leaf_348
leaf_348  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_338

codeblock_319 -> leaf_349
leaf_349  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local matches =
  {
    [\"^\"] = \"%^\";
    [\"$\"] = \"%$\";
    [\"(\"] = \"%(\";
    [\")\"] = \"%)\";
    [\"%\"] = \"%%\";
    [\".\"] = \"%.\";
    [\"[\"] = \"%[\";
    [\"]\"] = \"%]\";
    [\"*\"] = \"%*\";
    [\"+\"] = \"%+\";
    [\"-\"] = \"%-\";
    [\"?\"] = \"%?\";
    [\"\\0\"] = \"%z\";
  }

function core.litpat(s)
    return (s:gsub(\".\", matches))
end"]
// END RANK codeblock_319

section_152 -> { header_350 prose_351 prose_352 codeblock_353}
{rank=same; header_350 prose_351 prose_352 codeblock_353}

header_350 [label="3 : cleave(str, patt)"]

prose_351 [label="prose"]

prose_352 [label="prose"]

codeblock_353 [label="code block 273-278"]


// END RANK section_152

header_350 -> leaf_354
leaf_354  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** cleave(str, patt)"]
// END RANK header_350

prose_351 -> { raw_355 prespace_356 literal_357 raw_358 prespace_359 literal_360 raw_361}
{rank=same; raw_355 prespace_356 literal_357 raw_358 prespace_359 literal_360 raw_361}

raw_355 [label="raw"]

prespace_356 [label="prespace"]

literal_357 [label="literal"]

raw_358 [label="raw"]

prespace_359 [label="prespace"]

literal_360 [label="literal"]

raw_361 [label="raw"]


// END RANK prose_351

raw_355 -> leaf_362
leaf_362  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Performs the common operation of returning one run of bytes up to"]
// END RANK raw_355

prespace_356 -> leaf_363
leaf_363  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_356

literal_357 -> leaf_364
leaf_364  [color=Gray,shape=rectangle,fontname=Inconsolata,label="patt"]
// END RANK literal_357

raw_358 -> leaf_365
leaf_365  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
then the rest of the bytes after"]
// END RANK raw_358

prespace_359 -> leaf_366
leaf_366  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_359

literal_360 -> leaf_367
leaf_367  [color=Gray,shape=rectangle,fontname=Inconsolata,label="patt"]
// END RANK literal_360

raw_361 -> leaf_368
leaf_368  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_361

prose_352 -> { raw_369}
{rank=same; raw_369}

raw_369 [label="raw"]


// END RANK prose_352

raw_369 -> leaf_370
leaf_370  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Can be used to build iterators, either stateful or coroutine-based.
"]
// END RANK raw_369

codeblock_353 -> leaf_371
leaf_371  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function core.cleave(str, pat)
   local at = find(str, pat)
   return sub(str, 1, at - 1), sub(str, at + 1)
end"]
// END RANK codeblock_353

section_153 -> { header_372 prose_373 codeblock_374 codeblock_375}
{rank=same; header_372 prose_373 codeblock_374 codeblock_375}

header_372 [label="3 : codepoints(str)"]

prose_373 [label="prose"]

codeblock_374 [label="code block 286-314"]

codeblock_375 [label="code block 316-318"]


// END RANK section_153

header_372 -> leaf_376
leaf_376  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** codepoints(str)"]
// END RANK header_372

prose_373 -> { raw_377 prespace_378 literal_379 raw_380}
{rank=same; raw_377 prespace_378 literal_379 raw_380}

raw_377 [label="raw"]

prespace_378 [label="prespace"]

literal_379 [label="literal"]

raw_380 [label="raw"]


// END RANK prose_373

raw_377 -> leaf_381
leaf_381  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Returns an array of the utf8 codepoints in"]
// END RANK raw_377

prespace_378 -> leaf_382
leaf_382  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_378

literal_379 -> leaf_383
leaf_383  [color=Gray,shape=rectangle,fontname=Inconsolata,label="str"]
// END RANK literal_379

raw_380 -> leaf_384
leaf_384  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", incidentally validating or
rather filtering the contents into utf8 compliance.
"]
// END RANK raw_380

codeblock_374 -> leaf_385
leaf_385  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
local function split(str, at)
   return sub(str,1, at), sub(str, at + 1)
end

function core.codepoints(str)
   local utf8 = core.utf8
   local codes = {}
   -- propagate nil
   if not str then return nil end
   -- break on bad type
   assert(type(str) == \"string\", \"codepoints must be given a string\")
   while #str > 0 do
      local width, err = utf8(str)
      if width then
         local head, tail = split(str, width)
         codes[#codes + 1] = head
         str = tail
      else
         -- make sure we take a bit off anyway
         str = sub(str, -1)
         -- for debugging
         codes[codes + 1] = { err = err }
      end
   end
   return codes
end"]
// END RANK codeblock_374

codeblock_375 -> leaf_386
leaf_386  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return core"]
// END RANK codeblock_375


}
