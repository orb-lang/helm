digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 425"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-210"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 codeblock_5 section_6 section_7 section_8}
{rank=same; header_2 prose_3 prose_4 codeblock_5 section_6 section_7 section_8}

header_2 [label="1 : Core"]

prose_3 [label="prose"]

prose_4 [label="prose"]

codeblock_5 [label="code block 8-10"]

section_6 [label="section: 13-39"]

section_7 [label="section: 65-182"]

section_8 [label="section: 211-367"]


// END RANK section_1

header_2 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Core"]
// END RANK header_2

prose_3 -> { raw_10 prespace_11 literal_12 raw_13}
{rank=same; raw_10 prespace_11 literal_12 raw_13}

raw_10 [label="raw"]

prespace_11 [label="prespace"]

literal_12 [label="literal"]

raw_13 [label="raw"]


// END RANK prose_3

raw_10 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_10

prespace_11 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_11

literal_12 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label="core"]
// END RANK literal_12

raw_13 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is for tampering with the global namespace and standard libraries.
"]
// END RANK raw_13

prose_4 -> { raw_18 prespace_19 literal_20 raw_21}
{rank=same; raw_18 prespace_19 literal_20 raw_21}

raw_18 [label="raw"]

prespace_19 [label="prespace"]

literal_20 [label="literal"]

raw_21 [label="raw"]


// END RANK prose_4

raw_18 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It will eventually land in"]
// END RANK raw_18

prespace_19 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_19

literal_20 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label="pylon"]
// END RANK literal_20

raw_21 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_21

codeblock_5 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local core = {}"]
// END RANK codeblock_5

section_6 -> { header_27 prose_28 prose_29 codeblock_30 section_31}
{rank=same; header_27 prose_28 prose_29 codeblock_30 section_31}

header_27 [label="2 : meta"]

prose_28 [label="prose"]

prose_29 [label="prose"]

codeblock_30 [label="code block 21-37"]

section_31 [label="section: 40-64"]


// END RANK section_6

header_27 -> leaf_32
leaf_32  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** meta"]
// END RANK header_27

prose_28 -> { raw_33 prespace_34 literal_35 raw_36 prespace_37 literal_38 raw_39 prespace_40 literal_41 raw_42 prespace_43 literal_44 raw_45 prespace_46 literal_47 raw_48 prespace_49 literal_50 raw_51}
{rank=same; raw_33 prespace_34 literal_35 raw_36 prespace_37 literal_38 raw_39 prespace_40 literal_41 raw_42 prespace_43 literal_44 raw_45 prespace_46 literal_47 raw_48 prespace_49 literal_50 raw_51}

raw_33 [label="raw"]

prespace_34 [label="prespace"]

literal_35 [label="literal"]

raw_36 [label="raw"]

prespace_37 [label="prespace"]

literal_38 [label="literal"]

raw_39 [label="raw"]

prespace_40 [label="prespace"]

literal_41 [label="literal"]

raw_42 [label="raw"]

prespace_43 [label="prespace"]

literal_44 [label="literal"]

raw_45 [label="raw"]

prespace_46 [label="prespace"]

literal_47 [label="literal"]

raw_48 [label="raw"]

prespace_49 [label="prespace"]

literal_50 [label="literal"]

raw_51 [label="raw"]


// END RANK prose_28

raw_33 -> leaf_52
leaf_52  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

We shorten a few of the common Lua keywords:"]
// END RANK raw_33

prespace_34 -> leaf_53
leaf_53  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_34

literal_35 -> leaf_54
leaf_54  [color=Gray,shape=rectangle,fontname=Inconsolata,label="coro"]
// END RANK literal_35

raw_36 -> leaf_55
leaf_55  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" rather than"]
// END RANK raw_36

prespace_37 -> leaf_56
leaf_56  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_37

literal_38 -> leaf_57
leaf_57  [color=Gray,shape=rectangle,fontname=Inconsolata,label="coroutine"]
// END RANK literal_38

raw_39 -> leaf_58
leaf_58  [color=Gray,shape=rectangle,fontname=Inconsolata,label=",
and"]
// END RANK raw_39

prespace_40 -> leaf_59
leaf_59  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_40

literal_41 -> leaf_60
leaf_60  [color=Gray,shape=rectangle,fontname=Inconsolata,label="getmeta"]
// END RANK literal_41

raw_42 -> leaf_61
leaf_61  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_42

prespace_43 -> leaf_62
leaf_62  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_43

literal_44 -> leaf_63
leaf_63  [color=Gray,shape=rectangle,fontname=Inconsolata,label="setmeta"]
// END RANK literal_44

raw_45 -> leaf_64
leaf_64  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" over"]
// END RANK raw_45

prespace_46 -> leaf_65
leaf_65  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_46

literal_47 -> leaf_66
leaf_66  [color=Gray,shape=rectangle,fontname=Inconsolata,label="getmetatable"]
// END RANK literal_47

raw_48 -> leaf_67
leaf_67  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_48

prespace_49 -> leaf_68
leaf_68  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_49

literal_50 -> leaf_69
leaf_69  [color=Gray,shape=rectangle,fontname=Inconsolata,label="setmetatable"]
// END RANK literal_50

raw_51 -> leaf_70
leaf_70  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_51

prose_29 -> { raw_71 prespace_72 literal_73 raw_74}
{rank=same; raw_71 prespace_72 literal_73 raw_74}

raw_71 [label="raw"]

prespace_72 [label="prespace"]

literal_73 [label="literal"]

raw_74 [label="raw"]


// END RANK prose_29

raw_71 -> leaf_75
leaf_75  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
In my code there is a repeated pattern of use that is basic enough that I'm
entering it into the global namespace as simple"]
// END RANK raw_71

prespace_72 -> leaf_76
leaf_76  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_72

literal_73 -> leaf_77
leaf_77  [color=Gray,shape=rectangle,fontname=Inconsolata,label="meta"]
// END RANK literal_73

raw_74 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_74

codeblock_30 -> leaf_79
leaf_79  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function core.meta(MT)
   if MT and MT.__index then
      -- inherit
      return setmetatable({}, MT)
   elseif MT then
      -- decorate
      MT.__index = MT
      return MT
   else
      -- new metatable
      local _M = {}
      _M.__index = _M
      return _M
   end
end"]
// END RANK codeblock_30

section_31 -> { header_80 prose_81 prose_82 prose_83 codeblock_84}
{rank=same; header_80 prose_81 prose_82 prose_83 codeblock_84}

header_80 [label="3 : hasmetamethod(tab, mmethod)"]

prose_81 [label="prose"]

prose_82 [label="prose"]

prose_83 [label="prose"]

codeblock_84 [label="code block 51-62"]


// END RANK section_31

header_80 -> leaf_85
leaf_85  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** hasmetamethod(tab, mmethod)"]
// END RANK header_80

prose_81 -> { raw_86 prespace_87 literal_88 raw_89}
{rank=same; raw_86 prespace_87 literal_88 raw_89}

raw_86 [label="raw"]

prespace_87 [label="prespace"]

literal_88 [label="literal"]

raw_89 [label="raw"]


// END RANK prose_81

raw_86 -> leaf_90
leaf_90  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The function of this is clear: given a table, return"]
// END RANK raw_86

prespace_87 -> leaf_91
leaf_91  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_87

literal_88 -> leaf_92
leaf_92  [color=Gray,shape=rectangle,fontname=Inconsolata,label="true"]
// END RANK literal_88

raw_89 -> leaf_93
leaf_93  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" if it can receive
a given metamethod.
"]
// END RANK raw_89

prose_82 -> { raw_94}
{rank=same; raw_94}

raw_94 [label="raw"]


// END RANK prose_82

raw_94 -> leaf_95
leaf_95  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The question is, how magical to make it. I'm going with \"slightly magical\" for
now.  You can leave off the \"__\" in checking for a metamethod.
"]
// END RANK raw_94

prose_83 -> { raw_96 prespace_97 literal_98 raw_99 prespace_100 literal_101 raw_102}
{rank=same; raw_96 prespace_97 literal_98 raw_99 prespace_100 literal_101 raw_102}

raw_96 [label="raw"]

prespace_97 [label="prespace"]

literal_98 [label="literal"]

raw_99 [label="raw"]

prespace_100 [label="prespace"]

literal_101 [label="literal"]

raw_102 [label="raw"]


// END RANK prose_83

raw_96 -> leaf_103
leaf_103  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A successful lookup returns the result, presumable truthy, otherwise"]
// END RANK raw_96

prespace_97 -> leaf_104
leaf_104  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_97

literal_98 -> leaf_105
leaf_105  [color=Gray,shape=rectangle,fontname=Inconsolata,label="false"]
// END RANK literal_98

raw_99 -> leaf_106
leaf_106  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
for a non-table argument and"]
// END RANK raw_99

prespace_100 -> leaf_107
leaf_107  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_100

literal_101 -> leaf_108
leaf_108  [color=Gray,shape=rectangle,fontname=Inconsolata,label="nil"]
// END RANK literal_101

raw_102 -> leaf_109
leaf_109  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" for a failed lookup.
"]
// END RANK raw_102

codeblock_84 -> leaf_110
leaf_110  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local sub = assert(string.sub)

function core.hasmetamethod(tab, mmethod)
   assert(type(mmethod) == \"string\", \"metamethod must be a string\")
   if sub(mmethod,1,2) == \"__\" then
      return type(tab) == \"table\" and tab[mmethod]
   else
      return type(tab) == \"table\" and tab[\"__\" ..mmethod]
   end
end"]
// END RANK codeblock_84

section_7 -> { header_111 prose_112 section_113 section_114 section_115 section_116 section_117 section_118 section_119}
{rank=same; header_111 prose_112 section_113 section_114 section_115 section_116 section_117 section_118 section_119}

header_111 [label="2 : Table extensions"]

prose_112 [label="prose"]

section_113 [label="section: 68-95"]

section_114 [label="section: 96-111"]

section_115 [label="section: 112-126"]

section_116 [label="section: 127-150"]

section_117 [label="section: 151-167"]

section_118 [label="section: 168-182"]

section_119 [label="section: 183-210"]


// END RANK section_7

header_111 -> leaf_120
leaf_120  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Table extensions"]
// END RANK header_111

prose_112 -> { raw_121}
{rank=same; raw_121}

raw_121 [label="raw"]


// END RANK prose_112

raw_121 -> leaf_122
leaf_122  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

"]
// END RANK raw_121

section_113 -> { header_123 prose_124 codeblock_125}
{rank=same; header_123 prose_124 codeblock_125}

header_123 [label="3 : hasfield(field, tab) & hasfield.field(tab)"]

prose_124 [label="prose"]

codeblock_125 [label="code block 73-94"]


// END RANK section_113

header_123 -> leaf_126
leaf_126  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** hasfield(field, tab) & hasfield.field(tab)"]
// END RANK header_123

prose_124 -> { raw_127}
{rank=same; raw_127}

raw_127 [label="raw"]


// END RANK prose_124

raw_127 -> leaf_128
leaf_128  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


A nicety which can be used both for predication and assignment.
"]
// END RANK raw_127

codeblock_125 -> leaf_129
leaf_129  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function _hasfield(field, tab)
   if type(tab) == \"table\" and tab[field] ~= nil then
      return true, tab[field]
   else
      return false
   end
end

function _hf__index(_, field)
   return function(tab)
      return _hasfield(field, tab)
   end
end

function _hf__call(_, field, tab)
   return _hasfield(field, tab)
end

core.hasfield = setmetatable({}, { __index = _hf__index,
                                   __call  = _hf__call })"]
// END RANK codeblock_125

section_114 -> { header_130 prose_131 codeblock_132}
{rank=same; header_130 prose_131 codeblock_132}

header_130 [label="3 : clone(tab)"]

prose_131 [label="prose"]

codeblock_132 [label="code block 100-109"]


// END RANK section_114

header_130 -> leaf_133
leaf_133  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** clone(tab)"]
// END RANK header_130

prose_131 -> { raw_134}
{rank=same; raw_134}

raw_134 [label="raw"]


// END RANK prose_131

raw_134 -> leaf_135
leaf_135  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Performs a shallow clone of table, attaching metatable if available.
"]
// END RANK raw_134

codeblock_132 -> leaf_136
leaf_136  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function core.clone(tab)
   local _M = getmetatable(tab)
   local clone = _M and setmetatable({}, _M) or {}
   for k,v in pairs(tab) do
      clone[k] = v
   end
   return clone
end"]
// END RANK codeblock_132

section_115 -> { header_137 prose_138 codeblock_139}
{rank=same; header_137 prose_138 codeblock_139}

header_137 [label="3 : arrayof(tab)"]

prose_138 [label="prose"]

codeblock_139 [label="code block 116-124"]


// END RANK section_115

header_137 -> leaf_140
leaf_140  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** arrayof(tab)"]
// END RANK header_137

prose_138 -> { raw_141}
{rank=same; raw_141}

raw_141 [label="raw"]


// END RANK prose_138

raw_141 -> leaf_142
leaf_142  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Clones and returns the array portion of a table.
"]
// END RANK raw_141

codeblock_139 -> leaf_143
leaf_143  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function core.arrayof(tab)
   local arr = {}
   for i,v in ipairs(tab) do
      arr[i] = v
   end
   return arr
end"]
// END RANK codeblock_139

section_116 -> { header_144 prose_145 codeblock_146}
{rank=same; header_144 prose_145 codeblock_146}

header_144 [label="3 : select(tab, key)"]

prose_145 [label="prose"]

codeblock_146 [label="code block 131-148"]


// END RANK section_116

header_144 -> leaf_147
leaf_147  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** select(tab, key)"]
// END RANK header_144

prose_145 -> { raw_148 prespace_149 literal_150 raw_151 prespace_152 literal_153 raw_154}
{rank=same; raw_148 prespace_149 literal_150 raw_151 prespace_152 literal_153 raw_154}

raw_148 [label="raw"]

prespace_149 [label="prespace"]

literal_150 [label="literal"]

raw_151 [label="raw"]

prespace_152 [label="prespace"]

literal_153 [label="literal"]

raw_154 [label="raw"]


// END RANK prose_145

raw_148 -> leaf_155
leaf_155  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Recursively return all"]
// END RANK raw_148

prespace_149 -> leaf_156
leaf_156  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_149

literal_150 -> leaf_157
leaf_157  [color=Gray,shape=rectangle,fontname=Inconsolata,label="v"]
// END RANK literal_150

raw_151 -> leaf_158
leaf_158  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" for"]
// END RANK raw_151

prespace_152 -> leaf_159
leaf_159  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_152

literal_153 -> leaf_160
leaf_160  [color=Gray,shape=rectangle,fontname=Inconsolata,label="key"]
// END RANK literal_153

raw_154 -> leaf_161
leaf_161  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" in all subtables of tab
"]
// END RANK raw_154

codeblock_146 -> leaf_162
leaf_162  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function _select(collection, tab, key, cycle)
   for k,v in pairs(tab) do
      if key == k then
         collection[#collection + 1] = v
      end
      if type(v) == \"table\" and not cycle[v] then
         cycle[v] = true
         collection = _select(collection, v, key, cycle)
      end
   end
   return collection
end

function core.select(tab, key)
   return _select({}, tab, key, {})
end"]
// END RANK codeblock_146

section_117 -> { header_163 prose_164 codeblock_165}
{rank=same; header_163 prose_164 codeblock_165}

header_163 [label="3 : reverse(tab)"]

prose_164 [label="prose"]

codeblock_165 [label="code block 155-165"]


// END RANK section_117

header_163 -> leaf_166
leaf_166  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** reverse(tab)"]
// END RANK header_163

prose_164 -> { raw_167}
{rank=same; raw_167}

raw_167 [label="raw"]


// END RANK prose_164

raw_167 -> leaf_168
leaf_168  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Reverses (only) the array portion of a table, returning a new table.
"]
// END RANK raw_167

codeblock_165 -> leaf_169
leaf_169  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function core.reverse(tab)
   local bat = {}
   for i,v in ipairs(tab) do
      bat[#tab - i + 1] = v
   end
   assert(bat[1])
   assert(bat[#tab])
   return bat
end"]
// END RANK codeblock_165

section_118 -> { header_170 prose_171 codeblock_172}
{rank=same; header_170 prose_171 codeblock_172}

header_170 [label="3 : keys(tab)"]

prose_171 [label="prose"]

codeblock_172 [label="code block 172-180"]


// END RANK section_118

header_170 -> leaf_173
leaf_173  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** keys(tab)"]
// END RANK header_170

prose_171 -> { raw_174}
{rank=same; raw_174}

raw_174 [label="raw"]


// END RANK prose_171

raw_174 -> leaf_175
leaf_175  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Returns an array of the keys of a table.
"]
// END RANK raw_174

codeblock_172 -> leaf_176
leaf_176  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function core.keys(tab)
   local keys = {}
   for k,v in pairs(tab) do
      keys[#keys + 1] = k
   end
   return keys, #keys
end"]
// END RANK codeblock_172

section_119 -> { header_177 prose_178 codeblock_179}
{rank=same; header_177 prose_178 codeblock_179}

header_177 [label="3 : splice(tab, index, into)"]

prose_178 [label="prose"]

codeblock_179 [label="code block 188-208"]


// END RANK section_119

header_177 -> leaf_180
leaf_180  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** splice(tab, index, into)"]
// END RANK header_177

prose_178 -> { raw_181 prespace_182 literal_183 raw_184 prespace_185 literal_186 raw_187 prespace_188 literal_189 raw_190}
{rank=same; raw_181 prespace_182 literal_183 raw_184 prespace_185 literal_186 raw_187 prespace_188 literal_189 raw_190}

raw_181 [label="raw"]

prespace_182 [label="prespace"]

literal_183 [label="literal"]

raw_184 [label="raw"]

prespace_185 [label="prespace"]

literal_186 [label="literal"]

raw_187 [label="raw"]

prespace_188 [label="prespace"]

literal_189 [label="literal"]

raw_190 [label="raw"]


// END RANK prose_178

raw_181 -> leaf_191
leaf_191  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Puts the full contents of"]
// END RANK raw_181

prespace_182 -> leaf_192
leaf_192  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_182

literal_183 -> leaf_193
leaf_193  [color=Gray,shape=rectangle,fontname=Inconsolata,label="into"]
// END RANK literal_183

raw_184 -> leaf_194
leaf_194  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" into"]
// END RANK raw_184

prespace_185 -> leaf_195
leaf_195  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_185

literal_186 -> leaf_196
leaf_196  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tab"]
// END RANK literal_186

raw_187 -> leaf_197
leaf_197  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" at"]
// END RANK raw_187

prespace_188 -> leaf_198
leaf_198  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_188

literal_189 -> leaf_199
leaf_199  [color=Gray,shape=rectangle,fontname=Inconsolata,label="index"]
// END RANK literal_189

raw_190 -> leaf_200
leaf_200  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  The argument order is
compatible with existing functions and method syntax.
"]
// END RANK raw_190

codeblock_179 -> leaf_201
leaf_201  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local insert = table.insert

local sp_er = \"table<core>.splice: \"
local _e_1 = sp_er .. \"$1 must be a table\"
local _e_2 = sp_er .. \"$2 must be a number\"
local _e_3 = sp_er .. \"$3 must be a table\"

function core.splice(tab, idx, into)
   assert(type(tab) == \"table\", _e_1)
   assert(type(idx) == \"number\", _e_2)
   assert(type(into) == \"table\", _e_3)
    idx = idx - 1
    local i = 1
    for j = 1, #into do
        insert(tab,i+idx,into[j])
        i = i + 1
    end
    return tab
end"]
// END RANK codeblock_179

section_8 -> { header_202 prose_203 codeblock_204 section_205 section_206 section_207 section_208 section_209}
{rank=same; header_202 prose_203 codeblock_204 section_205 section_206 section_207 section_208 section_209}

header_202 [label="2 : String extensions"]

prose_203 [label="prose"]

codeblock_204 [label="code block 213-218"]

section_205 [label="section: 220-269"]

section_206 [label="section: 270-322"]

section_207 [label="section: 323-352"]

section_208 [label="section: 353-367"]

section_209 [label="section: 368-425"]


// END RANK section_8

header_202 -> leaf_210
leaf_210  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** String extensions"]
// END RANK header_202

prose_203 -> { raw_211}
{rank=same; raw_211}

raw_211 [label="raw"]


// END RANK prose_203

raw_211 -> leaf_212
leaf_212  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_211

codeblock_204 -> leaf_213
leaf_213  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local byte = assert(string.byte)
local find = assert(string.find)
local sub = assert(string.sub)
local format = assert(string.format)"]
// END RANK codeblock_204

section_205 -> { header_214 prose_215 prose_216 codeblock_217}
{rank=same; header_214 prose_215 prose_216 codeblock_217}

header_214 [label="3 : utf8(char)"]

prose_215 [label="prose"]

prose_216 [label="prose"]

codeblock_217 [label="code block 228-267"]


// END RANK section_205

header_214 -> leaf_218
leaf_218  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** utf8(char)"]
// END RANK header_214

prose_215 -> { raw_219}
{rank=same; raw_219}

raw_219 [label="raw"]


// END RANK prose_215

raw_219 -> leaf_220
leaf_220  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This takes a string and validates the first character.
"]
// END RANK raw_219

prose_216 -> { raw_221}
{rank=same; raw_221}

raw_221 [label="raw"]


// END RANK prose_216

raw_221 -> leaf_222
leaf_222  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Return is either the (valid) length in bytes, or nil and an error string.
"]
// END RANK raw_221

codeblock_217 -> leaf_223
leaf_223  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function continue(c)
   return c >= 128 and c <= 191
end

function core.utf8(c)
   local byte = byte
   local head = byte(c)
   if head < 128 then
      return 1
   elseif head >= 194 and head <= 223 then
      local two = byte(c, 2)
      if continue(two) then
         return 2
      else
         return nil, \"utf8: bad second byte\"
      end
   elseif head >= 224 and head <= 239 then
      local two, three = byte(c, 2), byte(c, 3)
      if continue(two) and continue(three) then
         return 3
      else
         return nil, \"utf8: bad second and/or third byte\"
      end
   elseif head >= 240 and head <= 244 then
      local two, three, four = byte(c, 2), byte(c, 3), byte(c, 4)
      if continue(two) and continue(three) and continue(four) then
         return 4
      else
         return nil, \"utf8: bad second, third, and/or fourth byte\"
      end
   elseif continue(head) then
      return nil, \"utf8: continuation byte at head\"
   elseif head == 192 or head == 193 then
      return nil, \"utf8: 192 or 193 forbidden\"
   else -- head > 245
      return nil, \"utf8: byte > 245\"
   end
end"]
// END RANK codeblock_217

section_206 -> { header_224 prose_225 structure_226 prose_227 prose_228 prose_229 prose_230 prose_231 prose_232 prose_233 codeblock_234}
{rank=same; header_224 prose_225 structure_226 prose_227 prose_228 prose_229 prose_230 prose_231 prose_232 prose_233 codeblock_234}

header_224 [label="3 : format_safe(str, ...)"]

prose_225 [label="prose"]

structure_226 [label="structure"]

prose_227 [label="prose"]

prose_228 [label="prose"]

prose_229 [label="prose"]

prose_230 [label="prose"]

prose_231 [label="prose"]

prose_232 [label="prose"]

prose_233 [label="prose"]

codeblock_234 [label="code block 304-321"]


// END RANK section_206

header_224 -> leaf_235
leaf_235  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** format_safe(str, ...)"]
// END RANK header_224

prose_225 -> { raw_236}
{rank=same; raw_236}

raw_236 [label="raw"]


// END RANK prose_225

raw_236 -> leaf_237
leaf_237  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_236

structure_226 -> { hashline_238}
{rank=same; hashline_238}

hashline_238 [label="hashline"]


// END RANK structure_226

hashline_238 -> { hashtag_239}
{rank=same; hashtag_239}

hashtag_239 [label="hashtag"]


// END RANK hashline_238

hashtag_239 -> leaf_240
leaf_240  [color=Gray,shape=rectangle,fontname=Inconsolata,label="NB"]
// END RANK hashtag_239

prose_227 -> { prespace_241 literal_242 raw_243 prespace_244 literal_245 raw_246 prespace_247 literal_248 raw_249}
{rank=same; prespace_241 literal_242 raw_243 prespace_244 literal_245 raw_246 prespace_247 literal_248 raw_249}

prespace_241 [label="prespace"]

literal_242 [label="literal"]

raw_243 [label="raw"]

prespace_244 [label="prespace"]

literal_245 [label="literal"]

raw_246 [label="raw"]

prespace_247 [label="prespace"]

literal_248 [label="literal"]

raw_249 [label="raw"]


// END RANK prose_227

prespace_241 -> leaf_250
leaf_250  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_241

literal_242 -> leaf_251
leaf_251  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%d"]
// END RANK literal_242

raw_243 -> leaf_252
leaf_252  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" as a call to"]
// END RANK raw_243

prespace_244 -> leaf_253
leaf_253  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_244

literal_245 -> leaf_254
leaf_254  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tonumber"]
// END RANK literal_245

raw_246 -> leaf_255
leaf_255  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  The latter I will allow, I'm struggling to find
a circumstance where casting \"1\" to \"1\" through"]
// END RANK raw_246

prespace_247 -> leaf_256
leaf_256  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_247

literal_248 -> leaf_257
leaf_257  [color=Gray,shape=rectangle,fontname=Inconsolata,label="1"]
// END RANK literal_248

raw_249 -> leaf_258
leaf_258  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is dangerous.
"]
// END RANK raw_249

prose_228 -> { raw_259 prespace_260 literal_261 raw_262 prespace_263 literal_264 raw_265 prespace_266 literal_267 raw_268}
{rank=same; raw_259 prespace_260 literal_261 raw_262 prespace_263 literal_264 raw_265 prespace_266 literal_267 raw_268}

raw_259 [label="raw"]

prespace_260 [label="prespace"]

literal_261 [label="literal"]

raw_262 [label="raw"]

prespace_263 [label="prespace"]

literal_264 [label="literal"]

raw_265 [label="raw"]

prespace_266 [label="prespace"]

literal_267 [label="literal"]

raw_268 [label="raw"]


// END RANK prose_228

raw_259 -> leaf_269
leaf_269  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This isn't \"safe\" in the sense of preventing injections, all it does is check
that its arguments are of a valid type, prohibiting implicit"]
// END RANK raw_259

prespace_260 -> leaf_270
leaf_270  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_260

literal_261 -> leaf_271
leaf_271  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tostring"]
// END RANK literal_261

raw_262 -> leaf_272
leaf_272  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
conversions.  So"]
// END RANK raw_262

prespace_263 -> leaf_273
leaf_273  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_263

literal_264 -> leaf_274
leaf_274  [color=Gray,shape=rectangle,fontname=Inconsolata,label="format(\"select %s from ...\", \"';drop table users;\")"]
// END RANK literal_264

raw_265 -> leaf_275
leaf_275  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" will
get through, but not"]
// END RANK raw_265

prespace_266 -> leaf_276
leaf_276  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_266

literal_267 -> leaf_277
leaf_277  [color=Gray,shape=rectangle,fontname=Inconsolata,label="format(\"%s\", setmeta({}, {__tostring = function() return \"'; drop...\"}))"]
// END RANK literal_267

raw_268 -> leaf_278
leaf_278  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_268

prose_229 -> { raw_279}
{rank=same; raw_279}

raw_279 [label="raw"]


// END RANK prose_229

raw_279 -> leaf_280
leaf_280  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Less concerned about hostility and more about explicit coding practices. Also
don't want to undermine hardening elsewhere.
"]
// END RANK raw_279

prose_230 -> { raw_281 prespace_282 literal_283 raw_284 prespace_285 literal_286 raw_287 prespace_288 literal_289 raw_290}
{rank=same; raw_281 prespace_282 literal_283 raw_284 prespace_285 literal_286 raw_287 prespace_288 literal_289 raw_290}

raw_281 [label="raw"]

prespace_282 [label="prespace"]

literal_283 [label="literal"]

raw_284 [label="raw"]

prespace_285 [label="prespace"]

literal_286 [label="literal"]

raw_287 [label="raw"]

prespace_288 [label="prespace"]

literal_289 [label="literal"]

raw_290 [label="raw"]


// END RANK prose_230

raw_281 -> leaf_291
leaf_291  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
From the wiki, the full set of numeric parameters is"]
// END RANK raw_281

prespace_282 -> leaf_292
leaf_292  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_282

literal_283 -> leaf_293
leaf_293  [color=Gray,shape=rectangle,fontname=Inconsolata,label="{A,a,c,d,E,e,f,G,g,i,o,u,X,x}"]
// END RANK literal_283

raw_284 -> leaf_294
leaf_294  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  That leaves"]
// END RANK raw_284

prespace_285 -> leaf_295
leaf_295  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_285

literal_286 -> leaf_296
leaf_296  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%q"]
// END RANK literal_286

raw_287 -> leaf_297
leaf_297  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_287

prespace_288 -> leaf_298
leaf_298  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_288

literal_289 -> leaf_299
leaf_299  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%s"]
// END RANK literal_289

raw_290 -> leaf_300
leaf_300  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", the former does
string escaping but of course it is the Lua/C style of escaping.
"]
// END RANK raw_290

prose_231 -> { raw_301 prespace_302 literal_303 raw_304 prespace_305 literal_306 raw_307 prespace_308 literal_309 raw_310 prespace_311 literal_312 raw_313 prespace_314 literal_315 raw_316 prespace_317 literal_318 raw_319 prespace_320 literal_321 raw_322 prespace_323 literal_324 raw_325 prespace_326 literal_327 raw_328}
{rank=same; raw_301 prespace_302 literal_303 raw_304 prespace_305 literal_306 raw_307 prespace_308 literal_309 raw_310 prespace_311 literal_312 raw_313 prespace_314 literal_315 raw_316 prespace_317 literal_318 raw_319 prespace_320 literal_321 raw_322 prespace_323 literal_324 raw_325 prespace_326 literal_327 raw_328}

raw_301 [label="raw"]

prespace_302 [label="prespace"]

literal_303 [label="literal"]

raw_304 [label="raw"]

prespace_305 [label="prespace"]

literal_306 [label="literal"]

raw_307 [label="raw"]

prespace_308 [label="prespace"]

literal_309 [label="literal"]

raw_310 [label="raw"]

prespace_311 [label="prespace"]

literal_312 [label="literal"]

raw_313 [label="raw"]

prespace_314 [label="prespace"]

literal_315 [label="literal"]

raw_316 [label="raw"]

prespace_317 [label="prespace"]

literal_318 [label="literal"]

raw_319 [label="raw"]

prespace_320 [label="prespace"]

literal_321 [label="literal"]

raw_322 [label="raw"]

prespace_323 [label="prespace"]

literal_324 [label="literal"]

raw_325 [label="raw"]

prespace_326 [label="prespace"]

literal_327 [label="literal"]

raw_328 [label="raw"]


// END RANK prose_231

raw_301 -> leaf_329
leaf_329  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We add"]
// END RANK raw_301

prespace_302 -> leaf_330
leaf_330  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_302

literal_303 -> leaf_331
leaf_331  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%t"]
// END RANK literal_303

raw_304 -> leaf_332
leaf_332  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_304

prespace_305 -> leaf_333
leaf_333  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_305

literal_306 -> leaf_334
leaf_334  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%L"]
// END RANK literal_306

raw_307 -> leaf_335
leaf_335  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" (for λ), which call"]
// END RANK raw_307

prespace_308 -> leaf_336
leaf_336  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_308

literal_309 -> leaf_337
leaf_337  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tostring"]
// END RANK literal_309

raw_310 -> leaf_338
leaf_338  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" on a table or a function
respectively. "]
// END RANK raw_310

prespace_311 -> leaf_339
leaf_339  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_311

literal_312 -> leaf_340
leaf_340  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%t"]
// END RANK literal_312

raw_313 -> leaf_341
leaf_341  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" will actually accept all remaining compound types:"]
// END RANK raw_313

prespace_314 -> leaf_342
leaf_342  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_314

literal_315 -> leaf_343
leaf_343  [color=Gray,shape=rectangle,fontname=Inconsolata,label="userdata"]
// END RANK literal_315

raw_316 -> leaf_344
leaf_344  [color=Gray,shape=rectangle,fontname=Inconsolata,label=","]
// END RANK raw_316

prespace_317 -> leaf_345
leaf_345  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_317

literal_318 -> leaf_346
leaf_346  [color=Gray,shape=rectangle,fontname=Inconsolata,label="thread"]
// END RANK literal_318

raw_319 -> leaf_347
leaf_347  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", and"]
// END RANK raw_319

prespace_320 -> leaf_348
leaf_348  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_320

literal_321 -> leaf_349
leaf_349  [color=Gray,shape=rectangle,fontname=Inconsolata,label="cdata"]
// END RANK literal_321

raw_322 -> leaf_350
leaf_350  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  While we're being thorough,"]
// END RANK raw_322

prespace_323 -> leaf_351
leaf_351  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_323

literal_324 -> leaf_352
leaf_352  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%b"]
// END RANK literal_324

raw_325 -> leaf_353
leaf_353  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" for
boolean.  Perhaps"]
// END RANK raw_325

prespace_326 -> leaf_354
leaf_354  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_326

literal_327 -> leaf_355
leaf_355  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%*"]
// END RANK literal_327

raw_328 -> leaf_356
leaf_356  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" as a wildcard?
"]
// END RANK raw_328

prose_232 -> { raw_357 prespace_358 literal_359 raw_360}
{rank=same; raw_357 prespace_358 literal_359 raw_360}

raw_357 [label="raw"]

prespace_358 [label="prespace"]

literal_359 [label="literal"]

raw_360 [label="raw"]


// END RANK prose_232

raw_357 -> leaf_361
leaf_361  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Note our"]
// END RANK raw_357

prespace_358 -> leaf_362
leaf_362  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_358

literal_359 -> leaf_363
leaf_363  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%L"]
// END RANK literal_359

raw_360 -> leaf_364
leaf_364  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is not the C version.
"]
// END RANK raw_360

prose_233 -> { prespace_365 literal_366 raw_367}
{rank=same; prespace_365 literal_366 raw_367}

prespace_365 [label="prespace"]

literal_366 [label="literal"]

raw_367 [label="raw"]


// END RANK prose_233

prespace_365 -> leaf_368
leaf_368  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_365

literal_366 -> leaf_369
leaf_369  [color=Gray,shape=rectangle,fontname=Inconsolata,label="format_safe"]
// END RANK literal_366

raw_367 -> leaf_370
leaf_370  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" returns the correctly formatted string, or throws an error.
"]
// END RANK raw_367

codeblock_234 -> leaf_371
leaf_371  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local fmt_set = {\"L\", \"q\", \"s\", \"t\"}

for i, v in ipairs(fmt_set) do
   fmt_set[i] = \"%%\" .. v
end

--[[
local function next_fmt(str)
   local head, tail
   for _, v in ipairs(fmt_set) do
      head, tail = 2
end]]

function core.format_safe(str, ...)

end"]
// END RANK codeblock_234

section_207 -> { header_372 prose_373 prose_374 codeblock_375}
{rank=same; header_372 prose_373 prose_374 codeblock_375}

header_372 [label="3 : litpat(s)"]

prose_373 [label="prose"]

prose_374 [label="prose"]

codeblock_375 [label="code block 329-350"]


// END RANK section_207

header_372 -> leaf_376
leaf_376  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** litpat(s)"]
// END RANK header_372

prose_373 -> { raw_377 prespace_378 literal_379 raw_380}
{rank=same; raw_377 prespace_378 literal_379 raw_380}

raw_377 [label="raw"]

prespace_378 [label="prespace"]

literal_379 [label="literal"]

raw_380 [label="raw"]


// END RANK prose_373

raw_377 -> leaf_381
leaf_381  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK raw_377

prespace_378 -> leaf_382
leaf_382  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_378

literal_379 -> leaf_383
leaf_383  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%"]
// END RANK literal_379

raw_380 -> leaf_384
leaf_384  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" escapes all pattern characters.
"]
// END RANK raw_380

prose_374 -> { raw_385 prespace_386 literal_387 raw_388 prespace_389 literal_390 raw_391 prespace_392 literal_393 raw_394}
{rank=same; raw_385 prespace_386 literal_387 raw_388 prespace_389 literal_390 raw_391 prespace_392 literal_393 raw_394}

raw_385 [label="raw"]

prespace_386 [label="prespace"]

literal_387 [label="literal"]

raw_388 [label="raw"]

prespace_389 [label="prespace"]

literal_390 [label="literal"]

raw_391 [label="raw"]

prespace_392 [label="prespace"]

literal_393 [label="literal"]

raw_394 [label="raw"]


// END RANK prose_374

raw_385 -> leaf_395
leaf_395  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The resulting string will literally match"]
// END RANK raw_385

prespace_386 -> leaf_396
leaf_396  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_386

literal_387 -> leaf_397
leaf_397  [color=Gray,shape=rectangle,fontname=Inconsolata,label="s"]
// END RANK literal_387

raw_388 -> leaf_398
leaf_398  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" in"]
// END RANK raw_388

prespace_389 -> leaf_399
leaf_399  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_389

literal_390 -> leaf_400
leaf_400  [color=Gray,shape=rectangle,fontname=Inconsolata,label="sub"]
// END RANK literal_390

raw_391 -> leaf_401
leaf_401  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" or"]
// END RANK raw_391

prespace_392 -> leaf_402
leaf_402  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_392

literal_393 -> leaf_403
leaf_403  [color=Gray,shape=rectangle,fontname=Inconsolata,label="gsub"]
// END RANK literal_393

raw_394 -> leaf_404
leaf_404  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_394

codeblock_375 -> leaf_405
leaf_405  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local matches =
  {
    [\"^\"] = \"%^\";
    [\"$\"] = \"%$\";
    [\"(\"] = \"%(\";
    [\")\"] = \"%)\";
    [\"%\"] = \"%%\";
    [\".\"] = \"%.\";
    [\"[\"] = \"%[\";
    [\"]\"] = \"%]\";
    [\"*\"] = \"%*\";
    [\"+\"] = \"%+\";
    [\"-\"] = \"%-\";
    [\"?\"] = \"%?\";
    [\"\\0\"] = \"%z\";
  }

function core.litpat(s)
    return (s:gsub(\".\", matches))
end"]
// END RANK codeblock_375

section_208 -> { header_406 prose_407 prose_408 codeblock_409}
{rank=same; header_406 prose_407 prose_408 codeblock_409}

header_406 [label="3 : cleave(str, patt)"]

prose_407 [label="prose"]

prose_408 [label="prose"]

codeblock_409 [label="code block 360-365"]


// END RANK section_208

header_406 -> leaf_410
leaf_410  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** cleave(str, patt)"]
// END RANK header_406

prose_407 -> { raw_411 prespace_412 literal_413 raw_414 prespace_415 literal_416 raw_417}
{rank=same; raw_411 prespace_412 literal_413 raw_414 prespace_415 literal_416 raw_417}

raw_411 [label="raw"]

prespace_412 [label="prespace"]

literal_413 [label="literal"]

raw_414 [label="raw"]

prespace_415 [label="prespace"]

literal_416 [label="literal"]

raw_417 [label="raw"]


// END RANK prose_407

raw_411 -> leaf_418
leaf_418  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Performs the common operation of returning one run of bytes up to"]
// END RANK raw_411

prespace_412 -> leaf_419
leaf_419  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_412

literal_413 -> leaf_420
leaf_420  [color=Gray,shape=rectangle,fontname=Inconsolata,label="patt"]
// END RANK literal_413

raw_414 -> leaf_421
leaf_421  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
then the rest of the bytes after"]
// END RANK raw_414

prespace_415 -> leaf_422
leaf_422  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_415

literal_416 -> leaf_423
leaf_423  [color=Gray,shape=rectangle,fontname=Inconsolata,label="patt"]
// END RANK literal_416

raw_417 -> leaf_424
leaf_424  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_417

prose_408 -> { raw_425}
{rank=same; raw_425}

raw_425 [label="raw"]


// END RANK prose_408

raw_425 -> leaf_426
leaf_426  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Can be used to build iterators, either stateful or coroutine-based.
"]
// END RANK raw_425

codeblock_409 -> leaf_427
leaf_427  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function core.cleave(str, pat)
   local at = find(str, pat)
   return sub(str, 1, at - 1), sub(str, at + 1)
end"]
// END RANK codeblock_409

section_209 -> { header_428 prose_429 codeblock_430 codeblock_431}
{rank=same; header_428 prose_429 codeblock_430 codeblock_431}

header_428 [label="3 : codepoints(str)"]

prose_429 [label="prose"]

codeblock_430 [label="code block 373-401"]

codeblock_431 [label="code block 403-405"]


// END RANK section_209

header_428 -> leaf_432
leaf_432  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** codepoints(str)"]
// END RANK header_428

prose_429 -> { raw_433 prespace_434 literal_435 raw_436}
{rank=same; raw_433 prespace_434 literal_435 raw_436}

raw_433 [label="raw"]

prespace_434 [label="prespace"]

literal_435 [label="literal"]

raw_436 [label="raw"]


// END RANK prose_429

raw_433 -> leaf_437
leaf_437  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Returns an array of the utf8 codepoints in"]
// END RANK raw_433

prespace_434 -> leaf_438
leaf_438  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_434

literal_435 -> leaf_439
leaf_439  [color=Gray,shape=rectangle,fontname=Inconsolata,label="str"]
// END RANK literal_435

raw_436 -> leaf_440
leaf_440  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", incidentally validating or
rather filtering the contents into utf8 compliance.
"]
// END RANK raw_436

codeblock_430 -> leaf_441
leaf_441  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
local function split(str, at)
   return sub(str,1, at), sub(str, at + 1)
end

function core.codepoints(str)
   local utf8 = core.utf8
   local codes = {}
   -- propagate nil
   if not str then return nil end
   -- break on bad type
   assert(type(str) == \"string\", \"codepoints must be given a string\")
   while #str > 0 do
      local width, err = utf8(str)
      if width then
         local head, tail = split(str, width)
         codes[#codes + 1] = head
         str = tail
      else
         -- make sure we take a bit off anyway
         str = sub(str, -1)
         -- for debugging
         codes[codes + 1] = { err = err }
      end
   end
   return codes
end"]
// END RANK codeblock_430

codeblock_431 -> leaf_442
leaf_442  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return core"]
// END RANK codeblock_431


}
