digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 611"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-566"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 codeblock_5 section_6 section_7 section_8 section_9}
{rank=same; header_2 prose_3 prose_4 codeblock_5 section_6 section_7 section_8 section_9}

header_2 [label="1 : Core"]

prose_3 [label="prose"]

prose_4 [label="prose"]

codeblock_5 [label="code block 8-10"]

section_6 [label="section: 13-67"]

section_7 [label="section: 95-300"]

section_8 [label="section: 338-528"]

section_9 [label="section: 567-569"]


// END RANK section_1

header_2 -> leaf_10
leaf_10  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Core"]
// END RANK header_2

prose_3 -> { raw_11 prespace_12 literal_13 raw_14}
{rank=same; raw_11 prespace_12 literal_13 raw_14}

raw_11 [label="raw"]

prespace_12 [label="prespace"]

literal_13 [label="literal"]

raw_14 [label="raw"]


// END RANK prose_3

raw_11 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_11

prespace_12 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_12

literal_13 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label="core"]
// END RANK literal_13

raw_14 -> leaf_18
leaf_18  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is for tampering with the global namespace and standard libraries.
"]
// END RANK raw_14

prose_4 -> { raw_19 prespace_20 literal_21 raw_22}
{rank=same; raw_19 prespace_20 literal_21 raw_22}

raw_19 [label="raw"]

prespace_20 [label="prespace"]

literal_21 [label="literal"]

raw_22 [label="raw"]


// END RANK prose_4

raw_19 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It will eventually land in"]
// END RANK raw_19

prespace_20 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_20

literal_21 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label="pylon"]
// END RANK literal_21

raw_22 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_22

codeblock_5 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local core = {}"]
// END RANK codeblock_5

section_6 -> { header_28 prose_29 prose_30 section_31 section_32 section_33}
{rank=same; header_28 prose_29 prose_30 section_31 section_32 section_33}

header_28 [label="2 : Meta Object Protocol"]

prose_29 [label="prose"]

prose_30 [label="prose"]

section_31 [label="section: 20-43"]

section_32 [label="section: 44-67"]

section_33 [label="section: 68-94"]


// END RANK section_6

header_28 -> leaf_34
leaf_34  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Meta Object Protocol"]
// END RANK header_28

prose_29 -> { raw_35}
{rank=same; raw_35}

raw_35 [label="raw"]


// END RANK prose_29

raw_35 -> leaf_36
leaf_36  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This is where we start to design Cluster.
"]
// END RANK raw_35

prose_30 -> { raw_37 prespace_38 literal_39 raw_40 prespace_41 literal_42 raw_43 prespace_44 literal_45 raw_46 prespace_47 literal_48 raw_49 prespace_50 literal_51 raw_52 prespace_53 literal_54 raw_55}
{rank=same; raw_37 prespace_38 literal_39 raw_40 prespace_41 literal_42 raw_43 prespace_44 literal_45 raw_46 prespace_47 literal_48 raw_49 prespace_50 literal_51 raw_52 prespace_53 literal_54 raw_55}

raw_37 [label="raw"]

prespace_38 [label="prespace"]

literal_39 [label="literal"]

raw_40 [label="raw"]

prespace_41 [label="prespace"]

literal_42 [label="literal"]

raw_43 [label="raw"]

prespace_44 [label="prespace"]

literal_45 [label="literal"]

raw_46 [label="raw"]

prespace_47 [label="prespace"]

literal_48 [label="literal"]

raw_49 [label="raw"]

prespace_50 [label="prespace"]

literal_51 [label="literal"]

raw_52 [label="raw"]

prespace_53 [label="prespace"]

literal_54 [label="literal"]

raw_55 [label="raw"]


// END RANK prose_30

raw_37 -> leaf_56
leaf_56  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We shorten a few of the common Lua keywords:"]
// END RANK raw_37

prespace_38 -> leaf_57
leaf_57  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_38

literal_39 -> leaf_58
leaf_58  [color=Gray,shape=rectangle,fontname=Inconsolata,label="coro"]
// END RANK literal_39

raw_40 -> leaf_59
leaf_59  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" rather than"]
// END RANK raw_40

prespace_41 -> leaf_60
leaf_60  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_41

literal_42 -> leaf_61
leaf_61  [color=Gray,shape=rectangle,fontname=Inconsolata,label="coroutine"]
// END RANK literal_42

raw_43 -> leaf_62
leaf_62  [color=Gray,shape=rectangle,fontname=Inconsolata,label=",
and"]
// END RANK raw_43

prespace_44 -> leaf_63
leaf_63  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_44

literal_45 -> leaf_64
leaf_64  [color=Gray,shape=rectangle,fontname=Inconsolata,label="getmeta"]
// END RANK literal_45

raw_46 -> leaf_65
leaf_65  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_46

prespace_47 -> leaf_66
leaf_66  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_47

literal_48 -> leaf_67
leaf_67  [color=Gray,shape=rectangle,fontname=Inconsolata,label="setmeta"]
// END RANK literal_48

raw_49 -> leaf_68
leaf_68  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" over"]
// END RANK raw_49

prespace_50 -> leaf_69
leaf_69  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_50

literal_51 -> leaf_70
leaf_70  [color=Gray,shape=rectangle,fontname=Inconsolata,label="getmetatable"]
// END RANK literal_51

raw_52 -> leaf_71
leaf_71  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_52

prespace_53 -> leaf_72
leaf_72  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_53

literal_54 -> leaf_73
leaf_73  [color=Gray,shape=rectangle,fontname=Inconsolata,label="setmetatable"]
// END RANK literal_54

raw_55 -> leaf_74
leaf_74  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_55

section_31 -> { header_75 prose_76 codeblock_77}
{rank=same; header_75 prose_76 codeblock_77}

header_75 [label="3 : meta"]

prose_76 [label="prose"]

codeblock_77 [label="code block 25-41"]


// END RANK section_31

header_75 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** meta"]
// END RANK header_75

prose_76 -> { raw_79 prespace_80 literal_81 raw_82}
{rank=same; raw_79 prespace_80 literal_81 raw_82}

raw_79 [label="raw"]

prespace_80 [label="prespace"]

literal_81 [label="literal"]

raw_82 [label="raw"]


// END RANK prose_76

raw_79 -> leaf_83
leaf_83  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

In my code there is a repeated pattern of use that is basic enough that I'm
entering it into the global namespace as simple"]
// END RANK raw_79

prespace_80 -> leaf_84
leaf_84  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_80

literal_81 -> leaf_85
leaf_85  [color=Gray,shape=rectangle,fontname=Inconsolata,label="meta"]
// END RANK literal_81

raw_82 -> leaf_86
leaf_86  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_82

codeblock_77 -> leaf_87
leaf_87  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function core.meta(MT)
   if MT and MT.__index then
      -- inherit
      return setmetatable({}, MT)
   elseif MT then
      -- decorate
      MT.__index = MT
      return MT
   else
      -- new metatable
      local _M = {}
      _M.__index = _M
      return _M
   end
end"]
// END RANK codeblock_77

section_32 -> { header_88 prose_89 prose_90 prose_91 codeblock_92}
{rank=same; header_88 prose_89 prose_90 prose_91 codeblock_92}

header_88 [label="3 : hasmetamethod(tab, mmethod)"]

prose_89 [label="prose"]

prose_90 [label="prose"]

prose_91 [label="prose"]

codeblock_92 [label="code block 55-66"]


// END RANK section_32

header_88 -> leaf_93
leaf_93  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** hasmetamethod(tab, mmethod)"]
// END RANK header_88

prose_89 -> { raw_94 prespace_95 literal_96 raw_97}
{rank=same; raw_94 prespace_95 literal_96 raw_97}

raw_94 [label="raw"]

prespace_95 [label="prespace"]

literal_96 [label="literal"]

raw_97 [label="raw"]


// END RANK prose_89

raw_94 -> leaf_98
leaf_98  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The function of this is clear: given a table, return"]
// END RANK raw_94

prespace_95 -> leaf_99
leaf_99  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_95

literal_96 -> leaf_100
leaf_100  [color=Gray,shape=rectangle,fontname=Inconsolata,label="true"]
// END RANK literal_96

raw_97 -> leaf_101
leaf_101  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" if it can receive
a given metamethod.
"]
// END RANK raw_97

prose_90 -> { raw_102}
{rank=same; raw_102}

raw_102 [label="raw"]


// END RANK prose_90

raw_102 -> leaf_103
leaf_103  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The question is, how magical to make it. I'm going with \"slightly magical\" for
now.  You can leave off the \"__\" in checking for a metamethod.
"]
// END RANK raw_102

prose_91 -> { raw_104 prespace_105 literal_106 raw_107 prespace_108 literal_109 raw_110}
{rank=same; raw_104 prespace_105 literal_106 raw_107 prespace_108 literal_109 raw_110}

raw_104 [label="raw"]

prespace_105 [label="prespace"]

literal_106 [label="literal"]

raw_107 [label="raw"]

prespace_108 [label="prespace"]

literal_109 [label="literal"]

raw_110 [label="raw"]


// END RANK prose_91

raw_104 -> leaf_111
leaf_111  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A successful lookup returns the result, presumable truthy, otherwise"]
// END RANK raw_104

prespace_105 -> leaf_112
leaf_112  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_105

literal_106 -> leaf_113
leaf_113  [color=Gray,shape=rectangle,fontname=Inconsolata,label="false"]
// END RANK literal_106

raw_107 -> leaf_114
leaf_114  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
for a non-table argument and"]
// END RANK raw_107

prespace_108 -> leaf_115
leaf_115  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_108

literal_109 -> leaf_116
leaf_116  [color=Gray,shape=rectangle,fontname=Inconsolata,label="nil"]
// END RANK literal_109

raw_110 -> leaf_117
leaf_117  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" for a failed lookup.
"]
// END RANK raw_110

codeblock_92 -> leaf_118
leaf_118  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local sub = assert(string.sub)

function core.hasmetamethod(tab, mmethod)
   assert(type(mmethod) == \"string\", \"metamethod must be a string\")
   if sub(mmethod,1,2) == \"__\" then
      return type(tab) == \"table\" and tab[mmethod]
   else
      return type(tab) == \"table\" and tab[\"__\" ..mmethod]
   end
end"]
// END RANK codeblock_92

section_33 -> { header_119 prose_120 prose_121 prose_122 codeblock_123 prose_124}
{rank=same; header_119 prose_120 prose_121 prose_122 codeblock_123 prose_124}

header_119 [label="3 : endow(Meta)"]

prose_120 [label="prose"]

prose_121 [label="prose"]

prose_122 [label="prose"]

codeblock_123 [label="code block 78-88"]

prose_124 [label="prose"]


// END RANK section_33

header_119 -> leaf_125
leaf_125  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** endow(Meta)"]
// END RANK header_119

prose_120 -> { raw_126}
{rank=same; raw_126}

raw_126 [label="raw"]


// END RANK prose_120

raw_126 -> leaf_127
leaf_127  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Performs a thick copy of the metatable.
"]
// END RANK raw_126

prose_121 -> { raw_128}
{rank=same; raw_128}

raw_128 [label="raw"]


// END RANK prose_121

raw_128 -> leaf_129
leaf_129  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Because this will include __index and the like, this folds an level of
indirection out of inheritance.
"]
// END RANK raw_128

prose_122 -> { raw_130}
{rank=same; raw_130}

raw_130 [label="raw"]


// END RANK prose_122

raw_130 -> leaf_131
leaf_131  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I plan to use this with Nodes when I make a single base class for a complex
Grammar.
"]
// END RANK raw_130

codeblock_123 -> leaf_132
leaf_132  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local pairs = assert(pairs)

function core.endow(Meta)
   local MC = {}
   for k, v in pairs(Meta) do
      MC[k] = v
   end
   return MC
end"]
// END RANK codeblock_123

prose_124 -> { raw_133 prespace_134 literal_135 raw_136}
{rank=same; raw_133 prespace_134 literal_135 raw_136}

raw_133 [label="raw"]

prespace_134 [label="prespace"]

literal_135 [label="literal"]

raw_136 [label="raw"]


// END RANK prose_124

raw_133 -> leaf_137
leaf_137  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
That's just a shallow clone, the subtlety is that if the __index was a
self-table, it now points to"]
// END RANK raw_133

prespace_134 -> leaf_138
leaf_138  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_134

literal_135 -> leaf_139
leaf_139  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Meta"]
// END RANK literal_135

raw_136 -> leaf_140
leaf_140  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", while if Meta was created through
endowment or inheritance it's now out of the picture.

"]
// END RANK raw_136

section_7 -> { header_141 prose_142 section_143 section_144 section_145 section_146 section_147 section_148 section_149 section_150 section_151 section_152 section_153}
{rank=same; header_141 prose_142 section_143 section_144 section_145 section_146 section_147 section_148 section_149 section_150 section_151 section_152 section_153}

header_141 [label="2 : Table extensions"]

prose_142 [label="prose"]

section_143 [label="section: 97-107"]

section_144 [label="section: 108-136"]

section_145 [label="section: 137-162"]

section_146 [label="section: 163-177"]

section_147 [label="section: 178-194"]

section_148 [label="section: 195-223"]

section_149 [label="section: 224-241"]

section_150 [label="section: 242-258"]

section_151 [label="section: 259-273"]

section_152 [label="section: 274-300"]

section_153 [label="section: 301-337"]


// END RANK section_7

header_141 -> leaf_154
leaf_154  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Table extensions"]
// END RANK header_141

prose_142 -> { raw_155}
{rank=same; raw_155}

raw_155 [label="raw"]


// END RANK prose_142

raw_155 -> leaf_156
leaf_156  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_155

section_143 -> { header_157 prose_158 codeblock_159}
{rank=same; header_157 prose_158 codeblock_159}

header_157 [label="3 : pack(...)"]

prose_158 [label="prose"]

codeblock_159 [label="code block 101-105"]


// END RANK section_143

header_157 -> leaf_160
leaf_160  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** pack(...)"]
// END RANK header_157

prose_158 -> { raw_161}
{rank=same; raw_161}

raw_161 [label="raw"]


// END RANK prose_158

raw_161 -> leaf_162
leaf_162  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

A 5.2 shim.
"]
// END RANK raw_161

codeblock_159 -> leaf_163
leaf_163  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function core.pack(...)
   return { n = select('#', ...), ... }
end"]
// END RANK codeblock_159

section_144 -> { header_164 prose_165 codeblock_166}
{rank=same; header_164 prose_165 codeblock_166}

header_164 [label="3 : hasfield(field, tab) & hasfield.field(tab)"]

prose_165 [label="prose"]

codeblock_166 [label="code block 113-134"]


// END RANK section_144

header_164 -> leaf_167
leaf_167  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** hasfield(field, tab) & hasfield.field(tab)"]
// END RANK header_164

prose_165 -> { raw_168}
{rank=same; raw_168}

raw_168 [label="raw"]


// END RANK prose_165

raw_168 -> leaf_169
leaf_169  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


A nicety which can be used both for predication and assignment.
"]
// END RANK raw_168

codeblock_166 -> leaf_170
leaf_170  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function _hasfield(field, tab)
   if type(tab) == \"table\" and tab[field] ~= nil then
      return true, tab[field]
   else
      return false
   end
end

local function _hf__index(_, field)
   return function(tab)
      return _hasfield(field, tab)
   end
end

local function _hf__call(_, field, tab)
   return _hasfield(field, tab)
end

core.hasfield = setmetatable({}, { __index = _hf__index,
                                   __call  = _hf__call })"]
// END RANK codeblock_166

section_145 -> { header_171 prose_172 prose_173 prose_174 codeblock_175}
{rank=same; header_171 prose_172 prose_173 prose_174 codeblock_175}

header_171 [label="3 : clone(tab, depth)"]

prose_172 [label="prose"]

prose_173 [label="prose"]

prose_174 [label="prose"]

codeblock_175 [label="code block 145-160"]


// END RANK section_145

header_171 -> leaf_176
leaf_176  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** clone(tab, depth)"]
// END RANK header_171

prose_172 -> { raw_177}
{rank=same; raw_177}

raw_177 [label="raw"]


// END RANK prose_172

raw_177 -> leaf_178
leaf_178  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Performs a shallow clone of table, attaching metatable if available.
"]
// END RANK raw_177

prose_173 -> { raw_179 prespace_180 literal_181 raw_182}
{rank=same; raw_179 prespace_180 literal_181 raw_182}

raw_179 [label="raw"]

prespace_180 [label="prespace"]

literal_181 [label="literal"]

raw_182 [label="raw"]


// END RANK prose_173

raw_179 -> leaf_183
leaf_183  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Will recurse to"]
// END RANK raw_179

prespace_180 -> leaf_184
leaf_184  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_180

literal_181 -> leaf_185
leaf_185  [color=Gray,shape=rectangle,fontname=Inconsolata,label="depth"]
// END RANK literal_181

raw_182 -> leaf_186
leaf_186  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" if provided.
"]
// END RANK raw_182

prose_174 -> { raw_187}
{rank=same; raw_187}

raw_187 [label="raw"]


// END RANK prose_174

raw_187 -> leaf_188
leaf_188  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This will unroll circular references, which may not be what you want.
"]
// END RANK raw_187

codeblock_175 -> leaf_189
leaf_189  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function _clone(tab, depth)
   depth = depth or 1
   assert(depth > 0, \"depth must be positive \" .. tostring(depth))
   local _M = getmetatable(tab)
   local clone = _M and setmetatable({}, _M) or {}
   for k,v in pairs(tab) do
      if depth > 1 and type(v) == \"table\" then
        v = _clone(v, depth - 1)
      end
      clone[k] = v
   end
   return clone
end
core.clone = _clone"]
// END RANK codeblock_175

section_146 -> { header_190 prose_191 codeblock_192}
{rank=same; header_190 prose_191 codeblock_192}

header_190 [label="3 : arrayof(tab)"]

prose_191 [label="prose"]

codeblock_192 [label="code block 167-175"]


// END RANK section_146

header_190 -> leaf_193
leaf_193  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** arrayof(tab)"]
// END RANK header_190

prose_191 -> { raw_194}
{rank=same; raw_194}

raw_194 [label="raw"]


// END RANK prose_191

raw_194 -> leaf_195
leaf_195  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Clones and returns the array portion of a table.
"]
// END RANK raw_194

codeblock_192 -> leaf_196
leaf_196  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function core.arrayof(tab)
   local arr = {}
   for i,v in ipairs(tab) do
      arr[i] = v
   end
   return arr
end"]
// END RANK codeblock_192

section_147 -> { header_197 prose_198 codeblock_199}
{rank=same; header_197 prose_198 codeblock_199}

header_197 [label="3 : collect(iter, tab)"]

prose_198 [label="prose"]

codeblock_199 [label="code block 183-192"]


// END RANK section_147

header_197 -> leaf_200
leaf_200  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** collect(iter, tab)"]
// END RANK header_197

prose_198 -> { raw_201}
{rank=same; raw_201}

raw_201 [label="raw"]


// END RANK prose_198

raw_201 -> leaf_202
leaf_202  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Collects and returns up to two tables of values, given an iterator and a
table to iterate over.
"]
// END RANK raw_201

codeblock_199 -> leaf_203
leaf_203  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function core.collect(iter, tab)
   local k_tab, v_tab = {}, {}
   for k, v in iter(tab) do
      k_tab[#k_tab + 1] = k
      v_tab[#v_tab + 1] = v
   end
   return k_tab, v_tab
end"]
// END RANK codeblock_199

section_148 -> { header_204 prose_205 structure_206 codeblock_207}
{rank=same; header_204 prose_205 structure_206 codeblock_207}

header_204 [label="3 : select(tab, key)"]

prose_205 [label="prose"]

structure_206 [label="structure"]

codeblock_207 [label="code block 203-221"]


// END RANK section_148

header_204 -> leaf_208
leaf_208  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** select(tab, key)"]
// END RANK header_204

prose_205 -> { raw_209 prespace_210 literal_211 raw_212 prespace_213 literal_214 raw_215}
{rank=same; raw_209 prespace_210 literal_211 raw_212 prespace_213 literal_214 raw_215}

raw_209 [label="raw"]

prespace_210 [label="prespace"]

literal_211 [label="literal"]

raw_212 [label="raw"]

prespace_213 [label="prespace"]

literal_214 [label="literal"]

raw_215 [label="raw"]


// END RANK prose_205

raw_209 -> leaf_216
leaf_216  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Recursively return all"]
// END RANK raw_209

prespace_210 -> leaf_217
leaf_217  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_210

literal_211 -> leaf_218
leaf_218  [color=Gray,shape=rectangle,fontname=Inconsolata,label="v"]
// END RANK literal_211

raw_212 -> leaf_219
leaf_219  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" for"]
// END RANK raw_212

prespace_213 -> leaf_220
leaf_220  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_213

literal_214 -> leaf_221
leaf_221  [color=Gray,shape=rectangle,fontname=Inconsolata,label="key"]
// END RANK literal_214

raw_215 -> leaf_222
leaf_222  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" in all subtables of tab.
"]
// END RANK raw_215

structure_206 -> { hashline_223}
{rank=same; hashline_223}

hashline_223 [label="hashline"]


// END RANK structure_206

hashline_223 -> { hashtag_224}
{rank=same; hashtag_224}

hashtag_224 [label="hashtag"]


// END RANK hashline_223

hashtag_224 -> leaf_225
leaf_225  [color=Gray,shape=rectangle,fontname=Inconsolata,label="NB"]
// END RANK hashtag_224

codeblock_207 -> leaf_226
leaf_226  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function _select(collection, tab, key, cycle)
   cycle = cycle or {}
   for k,v in pairs(tab) do
      if key == k then
         collection[#collection + 1] = v
      end
      if type(v) == \"table\" and not cycle[v] then
         cycle[v] = true
         collection = _select(collection, v, key, cycle)
      end
   end
   return collection
end

function core.select(tab, key)
   return _select({}, tab, key)
end"]
// END RANK codeblock_207

section_149 -> { header_227 prose_228 codeblock_229}
{rank=same; header_227 prose_228 codeblock_229}

header_227 [label="3 : reverse(tab)"]

prose_228 [label="prose"]

codeblock_229 [label="code block 228-239"]


// END RANK section_149

header_227 -> leaf_230
leaf_230  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** reverse(tab)"]
// END RANK header_227

prose_228 -> { raw_231}
{rank=same; raw_231}

raw_231 [label="raw"]


// END RANK prose_228

raw_231 -> leaf_232
leaf_232  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Reverses (only) the array portion of a table, returning a new table.
"]
// END RANK raw_231

codeblock_229 -> leaf_233
leaf_233  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function core.reverse(tab)
   if type(tab) ~= \"table\" or #tab == 0 then
      return {}
   end
   local bat = {}
   for i,v in ipairs(tab) do
      bat[#tab - i + 1] = v
   end
   return bat
end"]
// END RANK codeblock_229

section_150 -> { header_234 prose_235 codeblock_236}
{rank=same; header_234 prose_235 codeblock_236}

header_234 [label="3 : keys(tab)"]

prose_235 [label="prose"]

codeblock_236 [label="code block 246-256"]


// END RANK section_150

header_234 -> leaf_237
leaf_237  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** keys(tab)"]
// END RANK header_234

prose_235 -> { raw_238}
{rank=same; raw_238}

raw_238 [label="raw"]


// END RANK prose_235

raw_238 -> leaf_239
leaf_239  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Returns an array of the keys of a table.
"]
// END RANK raw_238

codeblock_236 -> leaf_240
leaf_240  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function core.keys(tab)
   assert(type(tab) == \"table\", \"keys must receive a table\")
   local keys = {}
   for k, _ in pairs(tab) do
      keys[#keys + 1] = k
   end

   return keys, #keys
end"]
// END RANK codeblock_236

section_151 -> { header_241 prose_242 codeblock_243}
{rank=same; header_241 prose_242 codeblock_243}

header_241 [label="3 : values(tab)"]

prose_242 [label="prose"]

codeblock_243 [label="code block 261-271"]


// END RANK section_151

header_241 -> leaf_244
leaf_244  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** values(tab)"]
// END RANK header_241

prose_242 -> { raw_245}
{rank=same; raw_245}

raw_245 [label="raw"]


// END RANK prose_242

raw_245 -> leaf_246
leaf_246  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_245

codeblock_243 -> leaf_247
leaf_247  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function core.values(tab)
   assert(type(tab) == \"table\", \"vals must receive a table\")
   local vals = {}
   for _, v in pairs(tab) do
      vals[#vals + 1] = v
   end

   return vals, #vals
end"]
// END RANK codeblock_243

section_152 -> { header_248 prose_249 codeblock_250}
{rank=same; header_248 prose_249 codeblock_250}

header_248 [label="3 : splice(tab, index, into)"]

prose_249 [label="prose"]

codeblock_250 [label="code block 279-299"]


// END RANK section_152

header_248 -> leaf_251
leaf_251  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** splice(tab, index, into)"]
// END RANK header_248

prose_249 -> { raw_252 prespace_253 literal_254 raw_255 prespace_256 literal_257 raw_258 prespace_259 literal_260 raw_261}
{rank=same; raw_252 prespace_253 literal_254 raw_255 prespace_256 literal_257 raw_258 prespace_259 literal_260 raw_261}

raw_252 [label="raw"]

prespace_253 [label="prespace"]

literal_254 [label="literal"]

raw_255 [label="raw"]

prespace_256 [label="prespace"]

literal_257 [label="literal"]

raw_258 [label="raw"]

prespace_259 [label="prespace"]

literal_260 [label="literal"]

raw_261 [label="raw"]


// END RANK prose_249

raw_252 -> leaf_262
leaf_262  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Puts the full contents of"]
// END RANK raw_252

prespace_253 -> leaf_263
leaf_263  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_253

literal_254 -> leaf_264
leaf_264  [color=Gray,shape=rectangle,fontname=Inconsolata,label="into"]
// END RANK literal_254

raw_255 -> leaf_265
leaf_265  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" into"]
// END RANK raw_255

prespace_256 -> leaf_266
leaf_266  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_256

literal_257 -> leaf_267
leaf_267  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tab"]
// END RANK literal_257

raw_258 -> leaf_268
leaf_268  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" at"]
// END RANK raw_258

prespace_259 -> leaf_269
leaf_269  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_259

literal_260 -> leaf_270
leaf_270  [color=Gray,shape=rectangle,fontname=Inconsolata,label="index"]
// END RANK literal_260

raw_261 -> leaf_271
leaf_271  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  The argument order is
compatible with existing functions and method syntax.
"]
// END RANK raw_261

codeblock_250 -> leaf_272
leaf_272  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local insert = table.insert

local sp_er = \"table<core>.splice: \"
local _e_1 = sp_er .. \"$1 must be a table\"
local _e_2 = sp_er .. \"$2 must be a number\"
local _e_3 = sp_er .. \"$3 must be a table\"

function core.splice(tab, idx, into)
   assert(type(tab) == \"table\", _e_1)
   assert(type(idx) == \"number\", _e_2)
   assert(type(into) == \"table\", _e_3)
    idx = idx - 1
    local i = 1
    for j = 1, #into do
        insert(tab,i+idx,into[j])
        i = i + 1
    end
    return tab
end"]
// END RANK codeblock_250

section_153 -> { header_273 prose_274 codeblock_275}
{rank=same; header_273 prose_274 codeblock_275}

header_273 [label="3 : safeget(tab, key)"]

prose_274 [label="prose"]

codeblock_275 [label="code block 306-335"]


// END RANK section_153

header_273 -> leaf_276
leaf_276  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** safeget(tab, key)"]
// END RANK header_273

prose_274 -> { raw_277}
{rank=same; raw_277}

raw_277 [label="raw"]


// END RANK prose_274

raw_277 -> leaf_278
leaf_278  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This will retrieve a value, given a key, without causing errors if the table
has been made strict.
"]
// END RANK raw_277

codeblock_275 -> leaf_279
leaf_279  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function core.safeget(tab, key)
   local val = rawget(tab, key)
   if val ~= nil then
      return val
   end
   local _M = getmetatable(tab)
   while _M ~= nil and rawget(_M, \"__index\") ~= nil do
      local index_t = type(_M.__index)
      if index_t == \"table\" then
         val = rawget(_M.__index, key)
      elseif index_t == \"function\" then
         local success
         success, val = pcall(_M.__index, table, key)
         if success then
            return val
         else
            val = nil
         end
      else
         error(\"somehow, __index is of type \" .. index_t)
      end
      if val ~= nil then
         return val
      end
      _M = index_t == \"table\" and getmetatable(_M.__index) or nil
   end
   return nil
end"]
// END RANK codeblock_275

section_8 -> { header_280 prose_281 codeblock_282 section_283 section_284 section_285 section_286 section_287}
{rank=same; header_280 prose_281 codeblock_282 section_283 section_284 section_285 section_286 section_287}

header_280 [label="2 : String extensions"]

prose_281 [label="prose"]

codeblock_282 [label="code block 340-345"]

section_283 [label="section: 347-396"]

section_284 [label="section: 397-457"]

section_285 [label="section: 458-487"]

section_286 [label="section: 488-528"]

section_287 [label="section: 529-566"]


// END RANK section_8

header_280 -> leaf_288
leaf_288  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** String extensions"]
// END RANK header_280

prose_281 -> { raw_289}
{rank=same; raw_289}

raw_289 [label="raw"]


// END RANK prose_281

raw_289 -> leaf_290
leaf_290  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_289

codeblock_282 -> leaf_291
leaf_291  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local byte = assert(string.byte)
local find = assert(string.find)
local sub = assert(string.sub)
local format = assert(string.format)"]
// END RANK codeblock_282

section_283 -> { header_292 prose_293 prose_294 codeblock_295}
{rank=same; header_292 prose_293 prose_294 codeblock_295}

header_292 [label="3 : utf8(char)"]

prose_293 [label="prose"]

prose_294 [label="prose"]

codeblock_295 [label="code block 355-394"]


// END RANK section_283

header_292 -> leaf_296
leaf_296  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** utf8(char)"]
// END RANK header_292

prose_293 -> { raw_297}
{rank=same; raw_297}

raw_297 [label="raw"]


// END RANK prose_293

raw_297 -> leaf_298
leaf_298  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This takes a string and validates the first character.
"]
// END RANK raw_297

prose_294 -> { raw_299}
{rank=same; raw_299}

raw_299 [label="raw"]


// END RANK prose_294

raw_299 -> leaf_300
leaf_300  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Return is either the (valid) length in bytes, or nil and an error string.
"]
// END RANK raw_299

codeblock_295 -> leaf_301
leaf_301  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function continue(c)
   return c >= 128 and c <= 191
end

function core.utf8(c)
   local byte = byte
   local head = byte(c)
   if head < 128 then
      return 1
   elseif head >= 194 and head <= 223 then
      local two = byte(c, 2)
      if continue(two) then
         return 2
      else
         return nil, \"utf8: bad second byte\"
      end
   elseif head >= 224 and head <= 239 then
      local two, three = byte(c, 2), byte(c, 3)
      if continue(two) and continue(three) then
         return 3
      else
         return nil, \"utf8: bad second and/or third byte\"
      end
   elseif head >= 240 and head <= 244 then
      local two, three, four = byte(c, 2), byte(c, 3), byte(c, 4)
      if continue(two) and continue(three) and continue(four) then
         return 4
      else
         return nil, \"utf8: bad second, third, and/or fourth byte\"
      end
   elseif continue(head) then
      return nil, \"utf8: continuation byte at head\"
   elseif head == 192 or head == 193 then
      return nil, \"utf8: 192 or 193 forbidden\"
   else -- head > 245
      return nil, \"utf8: byte > 245\"
   end
end"]
// END RANK codeblock_295

section_284 -> { header_302 prose_303 prose_304 prose_305 prose_306 prose_307 prose_308 prose_309 prose_310 prose_311 prose_312 prose_313 codeblock_314}
{rank=same; header_302 prose_303 prose_304 prose_305 prose_306 prose_307 prose_308 prose_309 prose_310 prose_311 prose_312 prose_313 codeblock_314}

header_302 [label="3 : typeformat(str, ...)"]

prose_303 [label="prose"]

prose_304 [label="prose"]

prose_305 [label="prose"]

prose_306 [label="prose"]

prose_307 [label="prose"]

prose_308 [label="prose"]

prose_309 [label="prose"]

prose_310 [label="prose"]

prose_311 [label="prose"]

prose_312 [label="prose"]

prose_313 [label="prose"]

codeblock_314 [label="code block 439-456"]


// END RANK section_284

header_302 -> leaf_315
leaf_315  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** typeformat(str, ...)"]
// END RANK header_302

prose_303 -> { raw_316}
{rank=same; raw_316}

raw_316 [label="raw"]


// END RANK prose_303

raw_316 -> leaf_317
leaf_317  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Background: I want to start using format in errors and assertions.
"]
// END RANK raw_316

prose_304 -> { raw_318}
{rank=same; raw_318}

raw_318 [label="raw"]


// END RANK prose_304

raw_318 -> leaf_319
leaf_319  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It's not as bad to use concatenation in-place for errors, since evaluating
them is a final step.  Assertions run much faster if passed only arguments.
"]
// END RANK raw_318

prose_305 -> { raw_320 prespace_321 literal_322 raw_323 prespace_324 literal_325 raw_326 prespace_327 literal_328 raw_329}
{rank=same; raw_320 prespace_321 literal_322 raw_323 prespace_324 literal_325 raw_326 prespace_327 literal_328 raw_329}

raw_320 [label="raw"]

prespace_321 [label="prespace"]

literal_322 [label="literal"]

raw_323 [label="raw"]

prespace_324 [label="prespace"]

literal_325 [label="literal"]

raw_326 [label="raw"]

prespace_327 [label="prespace"]

literal_328 [label="literal"]

raw_329 [label="raw"]


// END RANK prose_305

raw_320 -> leaf_330
leaf_330  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Lua peforms a small number of implicit conversions, mostly at the string
boundary. This is an actual feature since the language has both"]
// END RANK raw_320

prespace_321 -> leaf_331
leaf_331  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_321

literal_322 -> leaf_332
leaf_332  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".."]
// END RANK literal_322

raw_323 -> leaf_333
leaf_333  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_323

prespace_324 -> leaf_334
leaf_334  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_324

literal_325 -> leaf_335
leaf_335  [color=Gray,shape=rectangle,fontname=Inconsolata,label="+"]
// END RANK literal_325

raw_326 -> leaf_336
leaf_336  [color=Gray,shape=rectangle,fontname=Inconsolata,label=",
but it leaves a bit to be desired when it comes to"]
// END RANK raw_326

prespace_327 -> leaf_337
leaf_337  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_327

literal_328 -> leaf_338
leaf_338  [color=Gray,shape=rectangle,fontname=Inconsolata,label="string.format"]
// END RANK literal_328

raw_329 -> leaf_339
leaf_339  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_329

prose_306 -> { prespace_340 literal_341 raw_342 prespace_343 literal_344 raw_345 prespace_346 literal_347 raw_348 prespace_349 literal_350 raw_351 prespace_352 literal_353 raw_354 prespace_355 literal_356 raw_357}
{rank=same; prespace_340 literal_341 raw_342 prespace_343 literal_344 raw_345 prespace_346 literal_347 raw_348 prespace_349 literal_350 raw_351 prespace_352 literal_353 raw_354 prespace_355 literal_356 raw_357}

prespace_340 [label="prespace"]

literal_341 [label="literal"]

raw_342 [label="raw"]

prespace_343 [label="prespace"]

literal_344 [label="literal"]

raw_345 [label="raw"]

prespace_346 [label="prespace"]

literal_347 [label="literal"]

raw_348 [label="raw"]

prespace_349 [label="prespace"]

literal_350 [label="literal"]

raw_351 [label="raw"]

prespace_352 [label="prespace"]

literal_353 [label="literal"]

raw_354 [label="raw"]

prespace_355 [label="prespace"]

literal_356 [label="literal"]

raw_357 [label="raw"]


// END RANK prose_306

prespace_340 -> leaf_358
leaf_358  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_340

literal_341 -> leaf_359
leaf_359  [color=Gray,shape=rectangle,fontname=Inconsolata,label="format"]
// END RANK literal_341

raw_342 -> leaf_360
leaf_360  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" treats any"]
// END RANK raw_342

prespace_343 -> leaf_361
leaf_361  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_343

literal_344 -> leaf_362
leaf_362  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%s"]
// END RANK literal_344

raw_345 -> leaf_363
leaf_363  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" as a request to convert"]
// END RANK raw_345

prespace_346 -> leaf_364
leaf_364  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_346

literal_347 -> leaf_365
leaf_365  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tostring"]
// END RANK literal_347

raw_348 -> leaf_366
leaf_366  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", also treating"]
// END RANK raw_348

prespace_349 -> leaf_367
leaf_367  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_349

literal_350 -> leaf_368
leaf_368  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%d"]
// END RANK literal_350

raw_351 -> leaf_369
leaf_369  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" as a call to"]
// END RANK raw_351

prespace_352 -> leaf_370
leaf_370  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_352

literal_353 -> leaf_371
leaf_371  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tonumber"]
// END RANK literal_353

raw_354 -> leaf_372
leaf_372  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  The latter I will allow, I'm struggling to find
a circumstance where casting \"1\" to \"1\" through"]
// END RANK raw_354

prespace_355 -> leaf_373
leaf_373  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_355

literal_356 -> leaf_374
leaf_374  [color=Gray,shape=rectangle,fontname=Inconsolata,label="1"]
// END RANK literal_356

raw_357 -> leaf_375
leaf_375  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is dangerous.
"]
// END RANK raw_357

prose_307 -> { raw_376 prespace_377 literal_378 raw_379}
{rank=same; raw_376 prespace_377 literal_378 raw_379}

raw_376 [label="raw"]

prespace_377 [label="prespace"]

literal_378 [label="literal"]

raw_379 [label="raw"]


// END RANK prose_307

raw_376 -> leaf_380
leaf_380  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
What I want is a type-checked"]
// END RANK raw_376

prespace_377 -> leaf_381
leaf_381  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_377

literal_378 -> leaf_382
leaf_382  [color=Gray,shape=rectangle,fontname=Inconsolata,label="format"]
// END RANK literal_378

raw_379 -> leaf_383
leaf_383  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", which I can extend to use a few more
flexible strategies, depending on the context.
"]
// END RANK raw_379

prose_308 -> { raw_384}
{rank=same; raw_384}

raw_384 [label="raw"]


// END RANK prose_308

raw_384 -> leaf_385
leaf_385  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Less concerned about hostility and more about explicit coding practices. Also
don't want to undermine hardening elsewhere.
"]
// END RANK raw_384

prose_309 -> { raw_386 prespace_387 literal_388 raw_389 prespace_390 literal_391 raw_392 prespace_393 literal_394 raw_395}
{rank=same; raw_386 prespace_387 literal_388 raw_389 prespace_390 literal_391 raw_392 prespace_393 literal_394 raw_395}

raw_386 [label="raw"]

prespace_387 [label="prespace"]

literal_388 [label="literal"]

raw_389 [label="raw"]

prespace_390 [label="prespace"]

literal_391 [label="literal"]

raw_392 [label="raw"]

prespace_393 [label="prespace"]

literal_394 [label="literal"]

raw_395 [label="raw"]


// END RANK prose_309

raw_386 -> leaf_396
leaf_396  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
From the wiki, the full set of numeric parameters is"]
// END RANK raw_386

prespace_387 -> leaf_397
leaf_397  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_387

literal_388 -> leaf_398
leaf_398  [color=Gray,shape=rectangle,fontname=Inconsolata,label="{A,a,c,d,E,e,f,G,g,i,o,u,X,x}"]
// END RANK literal_388

raw_389 -> leaf_399
leaf_399  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  That leaves"]
// END RANK raw_389

prespace_390 -> leaf_400
leaf_400  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_390

literal_391 -> leaf_401
leaf_401  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%q"]
// END RANK literal_391

raw_392 -> leaf_402
leaf_402  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_392

prespace_393 -> leaf_403
leaf_403  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_393

literal_394 -> leaf_404
leaf_404  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%s"]
// END RANK literal_394

raw_395 -> leaf_405
leaf_405  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", the former does
string escaping but of course it is the Lua/C style of escaping.
"]
// END RANK raw_395

prose_310 -> { raw_406 prespace_407 literal_408 raw_409 prespace_410 literal_411 raw_412 prespace_413 literal_414 raw_415 prespace_416 literal_417 raw_418 prespace_419 literal_420 raw_421 prespace_422 literal_423 raw_424 prespace_425 literal_426 raw_427 prespace_428 literal_429 raw_430 prespace_431 literal_432 raw_433}
{rank=same; raw_406 prespace_407 literal_408 raw_409 prespace_410 literal_411 raw_412 prespace_413 literal_414 raw_415 prespace_416 literal_417 raw_418 prespace_419 literal_420 raw_421 prespace_422 literal_423 raw_424 prespace_425 literal_426 raw_427 prespace_428 literal_429 raw_430 prespace_431 literal_432 raw_433}

raw_406 [label="raw"]

prespace_407 [label="prespace"]

literal_408 [label="literal"]

raw_409 [label="raw"]

prespace_410 [label="prespace"]

literal_411 [label="literal"]

raw_412 [label="raw"]

prespace_413 [label="prespace"]

literal_414 [label="literal"]

raw_415 [label="raw"]

prespace_416 [label="prespace"]

literal_417 [label="literal"]

raw_418 [label="raw"]

prespace_419 [label="prespace"]

literal_420 [label="literal"]

raw_421 [label="raw"]

prespace_422 [label="prespace"]

literal_423 [label="literal"]

raw_424 [label="raw"]

prespace_425 [label="prespace"]

literal_426 [label="literal"]

raw_427 [label="raw"]

prespace_428 [label="prespace"]

literal_429 [label="literal"]

raw_430 [label="raw"]

prespace_431 [label="prespace"]

literal_432 [label="literal"]

raw_433 [label="raw"]


// END RANK prose_310

raw_406 -> leaf_434
leaf_434  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We add"]
// END RANK raw_406

prespace_407 -> leaf_435
leaf_435  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_407

literal_408 -> leaf_436
leaf_436  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%t"]
// END RANK literal_408

raw_409 -> leaf_437
leaf_437  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_409

prespace_410 -> leaf_438
leaf_438  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_410

literal_411 -> leaf_439
leaf_439  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%L"]
// END RANK literal_411

raw_412 -> leaf_440
leaf_440  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" (for λ), which call"]
// END RANK raw_412

prespace_413 -> leaf_441
leaf_441  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_413

literal_414 -> leaf_442
leaf_442  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tostring"]
// END RANK literal_414

raw_415 -> leaf_443
leaf_443  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" on a table or a function
respectively.  While we're being thorough,"]
// END RANK raw_415

prespace_416 -> leaf_444
leaf_444  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_416

literal_417 -> leaf_445
leaf_445  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%b"]
// END RANK literal_417

raw_418 -> leaf_446
leaf_446  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" for boolean,"]
// END RANK raw_418

prespace_419 -> leaf_447
leaf_447  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_419

literal_420 -> leaf_448
leaf_448  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%n"]
// END RANK literal_420

raw_421 -> leaf_449
leaf_449  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" for"]
// END RANK raw_421

prespace_422 -> leaf_450
leaf_450  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_422

literal_423 -> leaf_451
leaf_451  [color=Gray,shape=rectangle,fontname=Inconsolata,label="nil"]
// END RANK literal_423

raw_424 -> leaf_452
leaf_452  [color=Gray,shape=rectangle,fontname=Inconsolata,label=",
and"]
// END RANK raw_424

prespace_425 -> leaf_453
leaf_453  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_425

literal_426 -> leaf_454
leaf_454  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%*"]
// END RANK literal_426

raw_427 -> leaf_455
leaf_455  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" for the union type.  Why bother with"]
// END RANK raw_427

prespace_428 -> leaf_456
leaf_456  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_428

literal_429 -> leaf_457
leaf_457  [color=Gray,shape=rectangle,fontname=Inconsolata,label="nil"]
// END RANK literal_429

raw_430 -> leaf_458
leaf_458  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", which we can just write?
Type-checking, of course.  We treat"]
// END RANK raw_430

prespace_431 -> leaf_459
leaf_459  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_431

literal_432 -> leaf_460
leaf_460  [color=Gray,shape=rectangle,fontname=Inconsolata,label="nil"]
// END RANK literal_432

raw_433 -> leaf_461
leaf_461  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" as a full type, because in Lua, it
is.
"]
// END RANK raw_433

prose_311 -> { prespace_462 literal_463 raw_464 prespace_465 literal_466 raw_467 prespace_468 literal_469 raw_470 prespace_471 literal_472 raw_473 prespace_474 literal_475 raw_476 prespace_477 literal_478 raw_479 prespace_480 literal_481 raw_482 prespace_483 literal_484 raw_485}
{rank=same; prespace_462 literal_463 raw_464 prespace_465 literal_466 raw_467 prespace_468 literal_469 raw_470 prespace_471 literal_472 raw_473 prespace_474 literal_475 raw_476 prespace_477 literal_478 raw_479 prespace_480 literal_481 raw_482 prespace_483 literal_484 raw_485}

prespace_462 [label="prespace"]

literal_463 [label="literal"]

raw_464 [label="raw"]

prespace_465 [label="prespace"]

literal_466 [label="literal"]

raw_467 [label="raw"]

prespace_468 [label="prespace"]

literal_469 [label="literal"]

raw_470 [label="raw"]

prespace_471 [label="prespace"]

literal_472 [label="literal"]

raw_473 [label="raw"]

prespace_474 [label="prespace"]

literal_475 [label="literal"]

raw_476 [label="raw"]

prespace_477 [label="prespace"]

literal_478 [label="literal"]

raw_479 [label="raw"]

prespace_480 [label="prespace"]

literal_481 [label="literal"]

raw_482 [label="raw"]

prespace_483 [label="prespace"]

literal_484 [label="literal"]

raw_485 [label="raw"]


// END RANK prose_311

prespace_462 -> leaf_486
leaf_486  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_462

literal_463 -> leaf_487
leaf_487  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%t"]
// END RANK literal_463

raw_464 -> leaf_488
leaf_488  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" will actually accept all remaining compound types:"]
// END RANK raw_464

prespace_465 -> leaf_489
leaf_489  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_465

literal_466 -> leaf_490
leaf_490  [color=Gray,shape=rectangle,fontname=Inconsolata,label="userdata"]
// END RANK literal_466

raw_467 -> leaf_491
leaf_491  [color=Gray,shape=rectangle,fontname=Inconsolata,label=","]
// END RANK raw_467

prespace_468 -> leaf_492
leaf_492  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_468

literal_469 -> leaf_493
leaf_493  [color=Gray,shape=rectangle,fontname=Inconsolata,label="thread"]
// END RANK literal_469

raw_470 -> leaf_494
leaf_494  [color=Gray,shape=rectangle,fontname=Inconsolata,label=",
and"]
// END RANK raw_470

prespace_471 -> leaf_495
leaf_495  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_471

literal_472 -> leaf_496
leaf_496  [color=Gray,shape=rectangle,fontname=Inconsolata,label="cdata"]
// END RANK literal_472

raw_473 -> leaf_497
leaf_497  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  For only tables, we can have"]
// END RANK raw_473

prespace_474 -> leaf_498
leaf_498  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_474

literal_475 -> leaf_499
leaf_499  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%T"]
// END RANK literal_475

raw_476 -> leaf_500
leaf_500  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", and also"]
// END RANK raw_476

prespace_477 -> leaf_501
leaf_501  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_477

literal_478 -> leaf_502
leaf_502  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%U"]
// END RANK literal_478

raw_479 -> leaf_503
leaf_503  [color=Gray,shape=rectangle,fontname=Inconsolata,label=","]
// END RANK raw_479

prespace_480 -> leaf_504
leaf_504  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_480

literal_481 -> leaf_505
leaf_505  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%R"]
// END RANK literal_481

raw_482 -> leaf_506
leaf_506  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" (coRo),
and"]
// END RANK raw_482

prespace_483 -> leaf_507
leaf_507  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_483

literal_484 -> leaf_508
leaf_508  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%C"]
// END RANK literal_484

raw_485 -> leaf_509
leaf_509  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_485

prose_312 -> { raw_510 prespace_511 literal_512 raw_513 prespace_514 literal_515 raw_516}
{rank=same; raw_510 prespace_511 literal_512 raw_513 prespace_514 literal_515 raw_516}

raw_510 [label="raw"]

prespace_511 [label="prespace"]

literal_512 [label="literal"]

raw_513 [label="raw"]

prespace_514 [label="prespace"]

literal_515 [label="literal"]

raw_516 [label="raw"]


// END RANK prose_312

raw_510 -> leaf_517
leaf_517  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Note our"]
// END RANK raw_510

prespace_511 -> leaf_518
leaf_518  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_511

literal_512 -> leaf_519
leaf_519  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%L"]
// END RANK literal_512

raw_513 -> leaf_520
leaf_520  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is not the C version.  Tempted to have"]
// END RANK raw_513

prespace_514 -> leaf_521
leaf_521  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_514

literal_515 -> leaf_522
leaf_522  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%λ"]
// END RANK literal_515

raw_516 -> leaf_523
leaf_523  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" directly, but
that's a bit weird and it breaks the idea that format sequences are two
bytes long.  While I don't intend to write code that would break in this
case, eh.
"]
// END RANK raw_516

prose_313 -> { prespace_524 literal_525 raw_526}
{rank=same; prespace_524 literal_525 raw_526}

prespace_524 [label="prespace"]

literal_525 [label="literal"]

raw_526 [label="raw"]


// END RANK prose_313

prespace_524 -> leaf_527
leaf_527  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_524

literal_525 -> leaf_528
leaf_528  [color=Gray,shape=rectangle,fontname=Inconsolata,label="typeformat"]
// END RANK literal_525

raw_526 -> leaf_529
leaf_529  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" returns the correctly formatted string, or throws an error.
"]
// END RANK raw_526

codeblock_314 -> leaf_530
leaf_530  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local fmt_set = {\"*\", \"C\", \"L\", \"R\", \"T\", \"U\", \"b\", \"n\", \"q\", \"s\", \"t\" }

for i, v in ipairs(fmt_set) do
   fmt_set[i] = \"%%\" .. v
end

--[[
local function next_fmt(str)
   local head, tail
   for _, v in ipairs(fmt_set) do
      head, tail = 2
end]]

function core.format_safe(str, ...)

end"]
// END RANK codeblock_314

section_285 -> { header_531 prose_532 prose_533 codeblock_534}
{rank=same; header_531 prose_532 prose_533 codeblock_534}

header_531 [label="3 : litpat(s)"]

prose_532 [label="prose"]

prose_533 [label="prose"]

codeblock_534 [label="code block 464-485"]


// END RANK section_285

header_531 -> leaf_535
leaf_535  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** litpat(s)"]
// END RANK header_531

prose_532 -> { raw_536 prespace_537 literal_538 raw_539}
{rank=same; raw_536 prespace_537 literal_538 raw_539}

raw_536 [label="raw"]

prespace_537 [label="prespace"]

literal_538 [label="literal"]

raw_539 [label="raw"]


// END RANK prose_532

raw_536 -> leaf_540
leaf_540  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK raw_536

prespace_537 -> leaf_541
leaf_541  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_537

literal_538 -> leaf_542
leaf_542  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%"]
// END RANK literal_538

raw_539 -> leaf_543
leaf_543  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" escapes all pattern characters.
"]
// END RANK raw_539

prose_533 -> { raw_544 prespace_545 literal_546 raw_547 prespace_548 literal_549 raw_550 prespace_551 literal_552 raw_553}
{rank=same; raw_544 prespace_545 literal_546 raw_547 prespace_548 literal_549 raw_550 prespace_551 literal_552 raw_553}

raw_544 [label="raw"]

prespace_545 [label="prespace"]

literal_546 [label="literal"]

raw_547 [label="raw"]

prespace_548 [label="prespace"]

literal_549 [label="literal"]

raw_550 [label="raw"]

prespace_551 [label="prespace"]

literal_552 [label="literal"]

raw_553 [label="raw"]


// END RANK prose_533

raw_544 -> leaf_554
leaf_554  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The resulting string will literally match"]
// END RANK raw_544

prespace_545 -> leaf_555
leaf_555  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_545

literal_546 -> leaf_556
leaf_556  [color=Gray,shape=rectangle,fontname=Inconsolata,label="s"]
// END RANK literal_546

raw_547 -> leaf_557
leaf_557  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" in"]
// END RANK raw_547

prespace_548 -> leaf_558
leaf_558  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_548

literal_549 -> leaf_559
leaf_559  [color=Gray,shape=rectangle,fontname=Inconsolata,label="sub"]
// END RANK literal_549

raw_550 -> leaf_560
leaf_560  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" or"]
// END RANK raw_550

prespace_551 -> leaf_561
leaf_561  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_551

literal_552 -> leaf_562
leaf_562  [color=Gray,shape=rectangle,fontname=Inconsolata,label="gsub"]
// END RANK literal_552

raw_553 -> leaf_563
leaf_563  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_553

codeblock_534 -> leaf_564
leaf_564  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local matches =
  {
    [\"^\"] = \"%^\";
    [\"$\"] = \"%$\";
    [\"(\"] = \"%(\";
    [\")\"] = \"%)\";
    [\"%\"] = \"%%\";
    [\".\"] = \"%.\";
    [\"[\"] = \"%[\";
    [\"]\"] = \"%]\";
    [\"*\"] = \"%*\";
    [\"+\"] = \"%+\";
    [\"-\"] = \"%-\";
    [\"?\"] = \"%?\";
    [\"\\0\"] = \"%z\";
  }

function core.litpat(s)
    return (s:gsub(\".\", matches))
end"]
// END RANK codeblock_534

section_286 -> { header_565 prose_566 prose_567 codeblock_568 codeblock_569}
{rank=same; header_565 prose_566 prose_567 codeblock_568 codeblock_569}

header_565 [label="3 : cleave(str, patt)"]

prose_566 [label="prose"]

prose_567 [label="prose"]

codeblock_568 [label="code block 495-505"]

codeblock_569 [label="code block 507-526"]


// END RANK section_286

header_565 -> leaf_570
leaf_570  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** cleave(str, patt)"]
// END RANK header_565

prose_566 -> { raw_571 prespace_572 literal_573 raw_574 prespace_575 literal_576 raw_577}
{rank=same; raw_571 prespace_572 literal_573 raw_574 prespace_575 literal_576 raw_577}

raw_571 [label="raw"]

prespace_572 [label="prespace"]

literal_573 [label="literal"]

raw_574 [label="raw"]

prespace_575 [label="prespace"]

literal_576 [label="literal"]

raw_577 [label="raw"]


// END RANK prose_566

raw_571 -> leaf_578
leaf_578  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Performs the common operation of returning one run of bytes up to"]
// END RANK raw_571

prespace_572 -> leaf_579
leaf_579  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_572

literal_573 -> leaf_580
leaf_580  [color=Gray,shape=rectangle,fontname=Inconsolata,label="patt"]
// END RANK literal_573

raw_574 -> leaf_581
leaf_581  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
then the rest of the bytes after"]
// END RANK raw_574

prespace_575 -> leaf_582
leaf_582  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_575

literal_576 -> leaf_583
leaf_583  [color=Gray,shape=rectangle,fontname=Inconsolata,label="patt"]
// END RANK literal_576

raw_577 -> leaf_584
leaf_584  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_577

prose_567 -> { raw_585}
{rank=same; raw_585}

raw_585 [label="raw"]


// END RANK prose_567

raw_585 -> leaf_586
leaf_586  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Can be used to build iterators, either stateful or coroutine-based.
"]
// END RANK raw_585

codeblock_568 -> leaf_587
leaf_587  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function cleave(str, pat)
   local at = find(str, pat)
   if at then
      return sub(str, 1, at - 1), sub(str, at + 1)
   else
      return nil
   end
end
core.cleave = cleave"]
// END RANK codeblock_568

codeblock_569 -> leaf_588
leaf_588  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local yield, wrap = assert(coroutine.yield), assert(coroutine.wrap)

local function _lines(str)
   if str == \"\" or not str then return nil end
   local line, rem = cleave(str, \"\\n\")
   if line then
      yield(line)
   else
      yield(str)
   end
   _lines(rem)
end

local function lines(str)
  return coroutine.wrap(function() return _lines(str) end)
end

core.lines = lines"]
// END RANK codeblock_569

section_287 -> { header_589 prose_590 codeblock_591}
{rank=same; header_589 prose_590 codeblock_591}

header_589 [label="3 : codepoints(str)"]

prose_590 [label="prose"]

codeblock_591 [label="code block 534-564"]


// END RANK section_287

header_589 -> leaf_592
leaf_592  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** codepoints(str)"]
// END RANK header_589

prose_590 -> { raw_593 prespace_594 literal_595 raw_596}
{rank=same; raw_593 prespace_594 literal_595 raw_596}

raw_593 [label="raw"]

prespace_594 [label="prespace"]

literal_595 [label="literal"]

raw_596 [label="raw"]


// END RANK prose_590

raw_593 -> leaf_597
leaf_597  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Returns an array of the utf8 codepoints in"]
// END RANK raw_593

prespace_594 -> leaf_598
leaf_598  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_594

literal_595 -> leaf_599
leaf_599  [color=Gray,shape=rectangle,fontname=Inconsolata,label="str"]
// END RANK literal_595

raw_596 -> leaf_600
leaf_600  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", incidentally validating or
rather filtering the contents into utf8 compliance.
"]
// END RANK raw_596

codeblock_591 -> leaf_601
leaf_601  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
local function split(str, at)
   return sub(str,1, at), sub(str, at + 1)
end



function core.codepoints(str)
   local utf8 = core.utf8
   local codes = {}
   -- propagate nil
   if not str then return nil end
   -- break on bad type
   assert(type(str) == \"string\", \"codepoints must be given a string\")
   while #str > 0 do
      local width, err = utf8(str)
      if width then
         local head, tail = split(str, width)
         codes[#codes + 1] = head
         str = tail
      else
         -- make sure we take a bit off anyway
         str = sub(str, -1)
         -- for debugging
         codes[codes + 1] = { err = err }
      end
   end
   return codes
end"]
// END RANK codeblock_591

section_9 -> { header_602 prose_603 section_604}
{rank=same; header_602 prose_603 section_604}

header_602 [label="2 : Errors and asserts"]

prose_603 [label="prose"]

section_604 [label="section: 570-611"]


// END RANK section_9

header_602 -> leaf_605
leaf_605  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Errors and asserts"]
// END RANK header_602

prose_603 -> { raw_606}
{rank=same; raw_606}

raw_606 [label="raw"]


// END RANK prose_603

raw_606 -> leaf_607
leaf_607  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

"]
// END RANK raw_606

section_604 -> { header_608 prose_609 prose_610 codeblock_611 codeblock_612}
{rank=same; header_608 prose_609 prose_610 codeblock_611 codeblock_612}

header_608 [label="3 : Assertfmt"]

prose_609 [label="prose"]

prose_610 [label="prose"]

codeblock_611 [label="code block 577-587"]

codeblock_612 [label="code block 589-591"]


// END RANK section_604

header_608 -> leaf_613
leaf_613  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Assertfmt"]
// END RANK header_608

prose_609 -> { raw_614}
{rank=same; raw_614}

raw_614 [label="raw"]


// END RANK prose_609

raw_614 -> leaf_615
leaf_615  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

I'll probably just globally replace assert with this over time.
"]
// END RANK raw_614

prose_610 -> { raw_616}
{rank=same; raw_616}

raw_616 [label="raw"]


// END RANK prose_610

raw_616 -> leaf_617
leaf_617  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This avoids doing concatenations and conversions on messages that we never
see in normal use.
"]
// END RANK raw_616

codeblock_611 -> leaf_618
leaf_618  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local format = string.format

function core.assertfmt(pred, msg, ...)
   if pred then
      return pred
   else
      error(format(msg, ...))
   end
end"]
// END RANK codeblock_611

codeblock_612 -> leaf_619
leaf_619  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return core"]
// END RANK codeblock_612


}
