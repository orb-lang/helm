digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 356"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-141"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 codeblock_5 section_6 section_7 section_8}
{rank=same; header_2 prose_3 prose_4 codeblock_5 section_6 section_7 section_8}

header_2 [label="1 : Core"]

prose_3 [label="prose"]

prose_4 [label="prose"]

codeblock_5 [label="code block 8-10"]

section_6 [label="section: 13-39"]

section_7 [label="section: 40-113"]

section_8 [label="section: 142-298"]


// END RANK section_1

header_2 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Core"]
// END RANK header_2

prose_3 -> { raw_10 prespace_11 literal_12 raw_13}
{rank=same; raw_10 prespace_11 literal_12 raw_13}

raw_10 [label="raw"]

prespace_11 [label="prespace"]

literal_12 [label="literal"]

raw_13 [label="raw"]


// END RANK prose_3

raw_10 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_10

prespace_11 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_11

literal_12 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label="core"]
// END RANK literal_12

raw_13 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is for tampering with the global namespace and standard libraries.
"]
// END RANK raw_13

prose_4 -> { raw_18 prespace_19 literal_20 raw_21}
{rank=same; raw_18 prespace_19 literal_20 raw_21}

raw_18 [label="raw"]

prespace_19 [label="prespace"]

literal_20 [label="literal"]

raw_21 [label="raw"]


// END RANK prose_4

raw_18 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It will eventually land in"]
// END RANK raw_18

prespace_19 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_19

literal_20 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label="pylon"]
// END RANK literal_20

raw_21 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_21

codeblock_5 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local core = {}"]
// END RANK codeblock_5

section_6 -> { header_27 prose_28 prose_29 codeblock_30}
{rank=same; header_27 prose_28 prose_29 codeblock_30}

header_27 [label="2 : meta"]

prose_28 [label="prose"]

prose_29 [label="prose"]

codeblock_30 [label="code block 21-37"]


// END RANK section_6

header_27 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** meta"]
// END RANK header_27

prose_28 -> { raw_32 prespace_33 literal_34 raw_35 prespace_36 literal_37 raw_38 prespace_39 literal_40 raw_41 prespace_42 literal_43 raw_44 prespace_45 literal_46 raw_47 prespace_48 literal_49 raw_50}
{rank=same; raw_32 prespace_33 literal_34 raw_35 prespace_36 literal_37 raw_38 prespace_39 literal_40 raw_41 prespace_42 literal_43 raw_44 prespace_45 literal_46 raw_47 prespace_48 literal_49 raw_50}

raw_32 [label="raw"]

prespace_33 [label="prespace"]

literal_34 [label="literal"]

raw_35 [label="raw"]

prespace_36 [label="prespace"]

literal_37 [label="literal"]

raw_38 [label="raw"]

prespace_39 [label="prespace"]

literal_40 [label="literal"]

raw_41 [label="raw"]

prespace_42 [label="prespace"]

literal_43 [label="literal"]

raw_44 [label="raw"]

prespace_45 [label="prespace"]

literal_46 [label="literal"]

raw_47 [label="raw"]

prespace_48 [label="prespace"]

literal_49 [label="literal"]

raw_50 [label="raw"]


// END RANK prose_28

raw_32 -> leaf_51
leaf_51  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

We shorten a few of the common Lua keywords:"]
// END RANK raw_32

prespace_33 -> leaf_52
leaf_52  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_33

literal_34 -> leaf_53
leaf_53  [color=Gray,shape=rectangle,fontname=Inconsolata,label="coro"]
// END RANK literal_34

raw_35 -> leaf_54
leaf_54  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" rather than"]
// END RANK raw_35

prespace_36 -> leaf_55
leaf_55  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_36

literal_37 -> leaf_56
leaf_56  [color=Gray,shape=rectangle,fontname=Inconsolata,label="coroutine"]
// END RANK literal_37

raw_38 -> leaf_57
leaf_57  [color=Gray,shape=rectangle,fontname=Inconsolata,label=",
and"]
// END RANK raw_38

prespace_39 -> leaf_58
leaf_58  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_39

literal_40 -> leaf_59
leaf_59  [color=Gray,shape=rectangle,fontname=Inconsolata,label="getmeta"]
// END RANK literal_40

raw_41 -> leaf_60
leaf_60  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_41

prespace_42 -> leaf_61
leaf_61  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_42

literal_43 -> leaf_62
leaf_62  [color=Gray,shape=rectangle,fontname=Inconsolata,label="setmeta"]
// END RANK literal_43

raw_44 -> leaf_63
leaf_63  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" over"]
// END RANK raw_44

prespace_45 -> leaf_64
leaf_64  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_45

literal_46 -> leaf_65
leaf_65  [color=Gray,shape=rectangle,fontname=Inconsolata,label="getmetatable"]
// END RANK literal_46

raw_47 -> leaf_66
leaf_66  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_47

prespace_48 -> leaf_67
leaf_67  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_48

literal_49 -> leaf_68
leaf_68  [color=Gray,shape=rectangle,fontname=Inconsolata,label="setmetatable"]
// END RANK literal_49

raw_50 -> leaf_69
leaf_69  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_50

prose_29 -> { raw_70 prespace_71 literal_72 raw_73}
{rank=same; raw_70 prespace_71 literal_72 raw_73}

raw_70 [label="raw"]

prespace_71 [label="prespace"]

literal_72 [label="literal"]

raw_73 [label="raw"]


// END RANK prose_29

raw_70 -> leaf_74
leaf_74  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
In my code there is a repeated pattern of use that is basic enough that I'm
entering it into the global namespace as simple"]
// END RANK raw_70

prespace_71 -> leaf_75
leaf_75  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_71

literal_72 -> leaf_76
leaf_76  [color=Gray,shape=rectangle,fontname=Inconsolata,label="meta"]
// END RANK literal_72

raw_73 -> leaf_77
leaf_77  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_73

codeblock_30 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function core.meta(MT)
   if MT and MT.__index then
      -- inherit
      return setmetatable({}, MT)
   elseif MT then
      -- decorate
      MT.__index = MT
      return MT
   else
      -- new metatable
      local _M = {}
      _M.__index = _M
      return _M
   end
end"]
// END RANK codeblock_30

section_7 -> { header_79 prose_80 section_81 section_82 section_83 section_84 section_85}
{rank=same; header_79 prose_80 section_81 section_82 section_83 section_84 section_85}

header_79 [label="2 : Table extensions"]

prose_80 [label="prose"]

section_81 [label="section: 42-57"]

section_82 [label="section: 58-72"]

section_83 [label="section: 73-96"]

section_84 [label="section: 97-113"]

section_85 [label="section: 114-141"]


// END RANK section_7

header_79 -> leaf_86
leaf_86  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Table extensions"]
// END RANK header_79

prose_80 -> { raw_87}
{rank=same; raw_87}

raw_87 [label="raw"]


// END RANK prose_80

raw_87 -> leaf_88
leaf_88  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_87

section_81 -> { header_89 prose_90 codeblock_91}
{rank=same; header_89 prose_90 codeblock_91}

header_89 [label="3 : clone(tab)"]

prose_90 [label="prose"]

codeblock_91 [label="code block 46-55"]


// END RANK section_81

header_89 -> leaf_92
leaf_92  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** clone(tab)"]
// END RANK header_89

prose_90 -> { raw_93}
{rank=same; raw_93}

raw_93 [label="raw"]


// END RANK prose_90

raw_93 -> leaf_94
leaf_94  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Performs a shallow clone of table, attaching metatable if available.
"]
// END RANK raw_93

codeblock_91 -> leaf_95
leaf_95  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function core.clone(tab)
   local _M = getmetatable(tab)
   local clone = _M and setmetatable({}, _M) or {}
   for k,v in pairs(tab) do
      clone[k] = v
   end
   return clone
end"]
// END RANK codeblock_91

section_82 -> { header_96 prose_97 codeblock_98}
{rank=same; header_96 prose_97 codeblock_98}

header_96 [label="3 : arrayof(tab)"]

prose_97 [label="prose"]

codeblock_98 [label="code block 62-70"]


// END RANK section_82

header_96 -> leaf_99
leaf_99  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** arrayof(tab)"]
// END RANK header_96

prose_97 -> { raw_100}
{rank=same; raw_100}

raw_100 [label="raw"]


// END RANK prose_97

raw_100 -> leaf_101
leaf_101  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Clones and returns the array portion of a table.
"]
// END RANK raw_100

codeblock_98 -> leaf_102
leaf_102  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function core.arrayof(tab)
   local arr = {}
   for i,v in ipairs(tab) do
      arr[i] = v
   end
   return arr
end"]
// END RANK codeblock_98

section_83 -> { header_103 prose_104 codeblock_105}
{rank=same; header_103 prose_104 codeblock_105}

header_103 [label="3 : select(tab, key)"]

prose_104 [label="prose"]

codeblock_105 [label="code block 77-94"]


// END RANK section_83

header_103 -> leaf_106
leaf_106  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** select(tab, key)"]
// END RANK header_103

prose_104 -> { raw_107 prespace_108 literal_109 raw_110 prespace_111 literal_112 raw_113}
{rank=same; raw_107 prespace_108 literal_109 raw_110 prespace_111 literal_112 raw_113}

raw_107 [label="raw"]

prespace_108 [label="prespace"]

literal_109 [label="literal"]

raw_110 [label="raw"]

prespace_111 [label="prespace"]

literal_112 [label="literal"]

raw_113 [label="raw"]


// END RANK prose_104

raw_107 -> leaf_114
leaf_114  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Recursively return all"]
// END RANK raw_107

prespace_108 -> leaf_115
leaf_115  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_108

literal_109 -> leaf_116
leaf_116  [color=Gray,shape=rectangle,fontname=Inconsolata,label="v"]
// END RANK literal_109

raw_110 -> leaf_117
leaf_117  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" for"]
// END RANK raw_110

prespace_111 -> leaf_118
leaf_118  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_111

literal_112 -> leaf_119
leaf_119  [color=Gray,shape=rectangle,fontname=Inconsolata,label="key"]
// END RANK literal_112

raw_113 -> leaf_120
leaf_120  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" in all subtables of tab
"]
// END RANK raw_113

codeblock_105 -> leaf_121
leaf_121  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function _select(collection, tab, key, cycle)
   for k,v in pairs(tab) do
      if key == k then
         collection[#collection + 1] = v
      end
      if type(v) == \"table\" and not cycle[v] then
         cycle[v] = true
         collection = _select(collection, v, key, cycle)
      end
   end
   return collection
end

function core.select(tab, key)
   return _select({}, tab, key, {})
end"]
// END RANK codeblock_105

section_84 -> { header_122 prose_123 codeblock_124}
{rank=same; header_122 prose_123 codeblock_124}

header_122 [label="3 : reverse(tab)"]

prose_123 [label="prose"]

codeblock_124 [label="code block 101-111"]


// END RANK section_84

header_122 -> leaf_125
leaf_125  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** reverse(tab)"]
// END RANK header_122

prose_123 -> { raw_126}
{rank=same; raw_126}

raw_126 [label="raw"]


// END RANK prose_123

raw_126 -> leaf_127
leaf_127  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Reverses (only) the array portion of a table, returning a new table.
"]
// END RANK raw_126

codeblock_124 -> leaf_128
leaf_128  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function core.reverse(tab)
   local bat = {}
   for i,v in ipairs(tab) do
      bat[#tab - i + 1] = v
   end
   assert(bat[1])
   assert(bat[#tab])
   return bat
end"]
// END RANK codeblock_124

section_85 -> { header_129 prose_130 codeblock_131}
{rank=same; header_129 prose_130 codeblock_131}

header_129 [label="3 : splice(tab, index, into)"]

prose_130 [label="prose"]

codeblock_131 [label="code block 119-139"]


// END RANK section_85

header_129 -> leaf_132
leaf_132  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** splice(tab, index, into)"]
// END RANK header_129

prose_130 -> { raw_133 prespace_134 literal_135 raw_136 prespace_137 literal_138 raw_139 prespace_140 literal_141 raw_142}
{rank=same; raw_133 prespace_134 literal_135 raw_136 prespace_137 literal_138 raw_139 prespace_140 literal_141 raw_142}

raw_133 [label="raw"]

prespace_134 [label="prespace"]

literal_135 [label="literal"]

raw_136 [label="raw"]

prespace_137 [label="prespace"]

literal_138 [label="literal"]

raw_139 [label="raw"]

prespace_140 [label="prespace"]

literal_141 [label="literal"]

raw_142 [label="raw"]


// END RANK prose_130

raw_133 -> leaf_143
leaf_143  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Puts the full contents of"]
// END RANK raw_133

prespace_134 -> leaf_144
leaf_144  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_134

literal_135 -> leaf_145
leaf_145  [color=Gray,shape=rectangle,fontname=Inconsolata,label="into"]
// END RANK literal_135

raw_136 -> leaf_146
leaf_146  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" into"]
// END RANK raw_136

prespace_137 -> leaf_147
leaf_147  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_137

literal_138 -> leaf_148
leaf_148  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tab"]
// END RANK literal_138

raw_139 -> leaf_149
leaf_149  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" at"]
// END RANK raw_139

prespace_140 -> leaf_150
leaf_150  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_140

literal_141 -> leaf_151
leaf_151  [color=Gray,shape=rectangle,fontname=Inconsolata,label="index"]
// END RANK literal_141

raw_142 -> leaf_152
leaf_152  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  The argument order is
compatible with existing functions and method syntax.
"]
// END RANK raw_142

codeblock_131 -> leaf_153
leaf_153  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local insert = table.insert

local sp_er = \"table<core>.splice: \"
local _e_1 = sp_er .. \"$1 must be a table\"
local _e_2 = sp_er .. \"$2 must be a number\"
local _e_3 = sp_er .. \"$3 must be a table\"

function core.splice(tab, idx, into)
   assert(type(tab) == \"table\", _e_1)
   assert(type(idx) == \"number\", _e_2)
   assert(type(into) == \"table\", _e_3)
    idx = idx - 1
    local i = 1
    for j = 1, #into do
        insert(tab,i+idx,into[j])
        i = i + 1
    end
    return tab
end"]
// END RANK codeblock_131

section_8 -> { header_154 prose_155 codeblock_156 section_157 section_158 section_159 section_160 section_161}
{rank=same; header_154 prose_155 codeblock_156 section_157 section_158 section_159 section_160 section_161}

header_154 [label="2 : String extensions"]

prose_155 [label="prose"]

codeblock_156 [label="code block 144-149"]

section_157 [label="section: 151-200"]

section_158 [label="section: 201-253"]

section_159 [label="section: 254-283"]

section_160 [label="section: 284-298"]

section_161 [label="section: 299-356"]


// END RANK section_8

header_154 -> leaf_162
leaf_162  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** String extensions"]
// END RANK header_154

prose_155 -> { raw_163}
{rank=same; raw_163}

raw_163 [label="raw"]


// END RANK prose_155

raw_163 -> leaf_164
leaf_164  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_163

codeblock_156 -> leaf_165
leaf_165  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local byte = assert(string.byte)
local find = assert(string.find)
local sub = assert(string.sub)
local format = assert(string.format)"]
// END RANK codeblock_156

section_157 -> { header_166 prose_167 prose_168 codeblock_169}
{rank=same; header_166 prose_167 prose_168 codeblock_169}

header_166 [label="3 : utf8(char)"]

prose_167 [label="prose"]

prose_168 [label="prose"]

codeblock_169 [label="code block 159-198"]


// END RANK section_157

header_166 -> leaf_170
leaf_170  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** utf8(char)"]
// END RANK header_166

prose_167 -> { raw_171}
{rank=same; raw_171}

raw_171 [label="raw"]


// END RANK prose_167

raw_171 -> leaf_172
leaf_172  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This takes a string and validates the first character.
"]
// END RANK raw_171

prose_168 -> { raw_173}
{rank=same; raw_173}

raw_173 [label="raw"]


// END RANK prose_168

raw_173 -> leaf_174
leaf_174  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Return is either the (valid) length in bytes, or nil and an error string.
"]
// END RANK raw_173

codeblock_169 -> leaf_175
leaf_175  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function continue(c)
   return c >= 128 and c <= 191
end

function core.utf8(c)
   local byte = byte
   local head = byte(c)
   if head < 128 then
      return 1
   elseif head >= 194 and head <= 223 then
      local two = byte(c, 2)
      if continue(two) then
         return 2
      else
         return nil, \"utf8: bad second byte\"
      end
   elseif head >= 224 and head <= 239 then
      local two, three = byte(c, 2), byte(c, 3)
      if continue(two) and continue(three) then
         return 3
      else
         return nil, \"utf8: bad second and/or third byte\"
      end
   elseif head >= 240 and head <= 244 then
      local two, three, four = byte(c, 2), byte(c, 3), byte(c, 4)
      if continue(two) and continue(three) and continue(four) then
         return 4
      else
         return nil, \"utf8: bad second, third, and/or fourth byte\"
      end
   elseif continue(head) then
      return nil, \"utf8: continuation byte at head\"
   elseif head == 192 or head == 193 then
      return nil, \"utf8: 192 or 193 forbidden\"
   else -- head > 245
      return nil, \"utf8: byte > 245\"
   end
end"]
// END RANK codeblock_169

section_158 -> { header_176 prose_177 structure_178 prose_179 prose_180 prose_181 prose_182 prose_183 prose_184 prose_185 codeblock_186}
{rank=same; header_176 prose_177 structure_178 prose_179 prose_180 prose_181 prose_182 prose_183 prose_184 prose_185 codeblock_186}

header_176 [label="3 : format_safe(str, ...)"]

prose_177 [label="prose"]

structure_178 [label="structure"]

prose_179 [label="prose"]

prose_180 [label="prose"]

prose_181 [label="prose"]

prose_182 [label="prose"]

prose_183 [label="prose"]

prose_184 [label="prose"]

prose_185 [label="prose"]

codeblock_186 [label="code block 235-252"]


// END RANK section_158

header_176 -> leaf_187
leaf_187  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** format_safe(str, ...)"]
// END RANK header_176

prose_177 -> { raw_188}
{rank=same; raw_188}

raw_188 [label="raw"]


// END RANK prose_177

raw_188 -> leaf_189
leaf_189  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_188

structure_178 -> { hashline_190}
{rank=same; hashline_190}

hashline_190 [label="hashline"]


// END RANK structure_178

hashline_190 -> { hashtag_191}
{rank=same; hashtag_191}

hashtag_191 [label="hashtag"]


// END RANK hashline_190

hashtag_191 -> leaf_192
leaf_192  [color=Gray,shape=rectangle,fontname=Inconsolata,label="NB"]
// END RANK hashtag_191

prose_179 -> { prespace_193 literal_194 raw_195 prespace_196 literal_197 raw_198 prespace_199 literal_200 raw_201}
{rank=same; prespace_193 literal_194 raw_195 prespace_196 literal_197 raw_198 prespace_199 literal_200 raw_201}

prespace_193 [label="prespace"]

literal_194 [label="literal"]

raw_195 [label="raw"]

prespace_196 [label="prespace"]

literal_197 [label="literal"]

raw_198 [label="raw"]

prespace_199 [label="prespace"]

literal_200 [label="literal"]

raw_201 [label="raw"]


// END RANK prose_179

prespace_193 -> leaf_202
leaf_202  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_193

literal_194 -> leaf_203
leaf_203  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%d"]
// END RANK literal_194

raw_195 -> leaf_204
leaf_204  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" as a call to"]
// END RANK raw_195

prespace_196 -> leaf_205
leaf_205  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_196

literal_197 -> leaf_206
leaf_206  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tonumber"]
// END RANK literal_197

raw_198 -> leaf_207
leaf_207  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  The latter I will allow, I'm struggling to find
a circumstance where casting \"1\" to \"1\" through"]
// END RANK raw_198

prespace_199 -> leaf_208
leaf_208  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_199

literal_200 -> leaf_209
leaf_209  [color=Gray,shape=rectangle,fontname=Inconsolata,label="1"]
// END RANK literal_200

raw_201 -> leaf_210
leaf_210  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is dangerous.
"]
// END RANK raw_201

prose_180 -> { raw_211 prespace_212 literal_213 raw_214 prespace_215 literal_216 raw_217 prespace_218 literal_219 raw_220}
{rank=same; raw_211 prespace_212 literal_213 raw_214 prespace_215 literal_216 raw_217 prespace_218 literal_219 raw_220}

raw_211 [label="raw"]

prespace_212 [label="prespace"]

literal_213 [label="literal"]

raw_214 [label="raw"]

prespace_215 [label="prespace"]

literal_216 [label="literal"]

raw_217 [label="raw"]

prespace_218 [label="prespace"]

literal_219 [label="literal"]

raw_220 [label="raw"]


// END RANK prose_180

raw_211 -> leaf_221
leaf_221  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This isn't \"safe\" in the sense of preventing injections, all it does is check
that its arguments are of a valid type, prohibiting implicit"]
// END RANK raw_211

prespace_212 -> leaf_222
leaf_222  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_212

literal_213 -> leaf_223
leaf_223  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tostring"]
// END RANK literal_213

raw_214 -> leaf_224
leaf_224  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
conversions.  So"]
// END RANK raw_214

prespace_215 -> leaf_225
leaf_225  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_215

literal_216 -> leaf_226
leaf_226  [color=Gray,shape=rectangle,fontname=Inconsolata,label="format(\"select %s from ...\", \"';drop table users;\")"]
// END RANK literal_216

raw_217 -> leaf_227
leaf_227  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" will
get through, but not"]
// END RANK raw_217

prespace_218 -> leaf_228
leaf_228  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_218

literal_219 -> leaf_229
leaf_229  [color=Gray,shape=rectangle,fontname=Inconsolata,label="format(\"%s\", setmeta({}, {__tostring = function() return \"'; drop...\"}))"]
// END RANK literal_219

raw_220 -> leaf_230
leaf_230  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_220

prose_181 -> { raw_231}
{rank=same; raw_231}

raw_231 [label="raw"]


// END RANK prose_181

raw_231 -> leaf_232
leaf_232  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Less concerned about hostility and more about explicit coding practices. Also
don't want to undermine hardening elsewhere.
"]
// END RANK raw_231

prose_182 -> { raw_233 prespace_234 literal_235 raw_236 prespace_237 literal_238 raw_239 prespace_240 literal_241 raw_242}
{rank=same; raw_233 prespace_234 literal_235 raw_236 prespace_237 literal_238 raw_239 prespace_240 literal_241 raw_242}

raw_233 [label="raw"]

prespace_234 [label="prespace"]

literal_235 [label="literal"]

raw_236 [label="raw"]

prespace_237 [label="prespace"]

literal_238 [label="literal"]

raw_239 [label="raw"]

prespace_240 [label="prespace"]

literal_241 [label="literal"]

raw_242 [label="raw"]


// END RANK prose_182

raw_233 -> leaf_243
leaf_243  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
From the wiki, the full set of numeric parameters is"]
// END RANK raw_233

prespace_234 -> leaf_244
leaf_244  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_234

literal_235 -> leaf_245
leaf_245  [color=Gray,shape=rectangle,fontname=Inconsolata,label="{A,a,c,d,E,e,f,G,g,i,o,u,X,x}"]
// END RANK literal_235

raw_236 -> leaf_246
leaf_246  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  That leaves"]
// END RANK raw_236

prespace_237 -> leaf_247
leaf_247  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_237

literal_238 -> leaf_248
leaf_248  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%q"]
// END RANK literal_238

raw_239 -> leaf_249
leaf_249  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_239

prespace_240 -> leaf_250
leaf_250  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_240

literal_241 -> leaf_251
leaf_251  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%s"]
// END RANK literal_241

raw_242 -> leaf_252
leaf_252  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", the former does
string escaping but of course it is the Lua/C style of escaping.
"]
// END RANK raw_242

prose_183 -> { raw_253 prespace_254 literal_255 raw_256 prespace_257 literal_258 raw_259 prespace_260 literal_261 raw_262 prespace_263 literal_264 raw_265 prespace_266 literal_267 raw_268 prespace_269 literal_270 raw_271 prespace_272 literal_273 raw_274 prespace_275 literal_276 raw_277 prespace_278 literal_279 raw_280}
{rank=same; raw_253 prespace_254 literal_255 raw_256 prespace_257 literal_258 raw_259 prespace_260 literal_261 raw_262 prespace_263 literal_264 raw_265 prespace_266 literal_267 raw_268 prespace_269 literal_270 raw_271 prespace_272 literal_273 raw_274 prespace_275 literal_276 raw_277 prespace_278 literal_279 raw_280}

raw_253 [label="raw"]

prespace_254 [label="prespace"]

literal_255 [label="literal"]

raw_256 [label="raw"]

prespace_257 [label="prespace"]

literal_258 [label="literal"]

raw_259 [label="raw"]

prespace_260 [label="prespace"]

literal_261 [label="literal"]

raw_262 [label="raw"]

prespace_263 [label="prespace"]

literal_264 [label="literal"]

raw_265 [label="raw"]

prespace_266 [label="prespace"]

literal_267 [label="literal"]

raw_268 [label="raw"]

prespace_269 [label="prespace"]

literal_270 [label="literal"]

raw_271 [label="raw"]

prespace_272 [label="prespace"]

literal_273 [label="literal"]

raw_274 [label="raw"]

prespace_275 [label="prespace"]

literal_276 [label="literal"]

raw_277 [label="raw"]

prespace_278 [label="prespace"]

literal_279 [label="literal"]

raw_280 [label="raw"]


// END RANK prose_183

raw_253 -> leaf_281
leaf_281  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We add"]
// END RANK raw_253

prespace_254 -> leaf_282
leaf_282  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_254

literal_255 -> leaf_283
leaf_283  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%t"]
// END RANK literal_255

raw_256 -> leaf_284
leaf_284  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_256

prespace_257 -> leaf_285
leaf_285  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_257

literal_258 -> leaf_286
leaf_286  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%L"]
// END RANK literal_258

raw_259 -> leaf_287
leaf_287  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" (for λ), which call"]
// END RANK raw_259

prespace_260 -> leaf_288
leaf_288  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_260

literal_261 -> leaf_289
leaf_289  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tostring"]
// END RANK literal_261

raw_262 -> leaf_290
leaf_290  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" on a table or a function
respectively. "]
// END RANK raw_262

prespace_263 -> leaf_291
leaf_291  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_263

literal_264 -> leaf_292
leaf_292  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%t"]
// END RANK literal_264

raw_265 -> leaf_293
leaf_293  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" will actually accept all remaining compound types:"]
// END RANK raw_265

prespace_266 -> leaf_294
leaf_294  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_266

literal_267 -> leaf_295
leaf_295  [color=Gray,shape=rectangle,fontname=Inconsolata,label="userdata"]
// END RANK literal_267

raw_268 -> leaf_296
leaf_296  [color=Gray,shape=rectangle,fontname=Inconsolata,label=","]
// END RANK raw_268

prespace_269 -> leaf_297
leaf_297  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_269

literal_270 -> leaf_298
leaf_298  [color=Gray,shape=rectangle,fontname=Inconsolata,label="thread"]
// END RANK literal_270

raw_271 -> leaf_299
leaf_299  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", and"]
// END RANK raw_271

prespace_272 -> leaf_300
leaf_300  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_272

literal_273 -> leaf_301
leaf_301  [color=Gray,shape=rectangle,fontname=Inconsolata,label="cdata"]
// END RANK literal_273

raw_274 -> leaf_302
leaf_302  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  While we're being thorough,"]
// END RANK raw_274

prespace_275 -> leaf_303
leaf_303  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_275

literal_276 -> leaf_304
leaf_304  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%b"]
// END RANK literal_276

raw_277 -> leaf_305
leaf_305  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" for
boolean.  Perhaps"]
// END RANK raw_277

prespace_278 -> leaf_306
leaf_306  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_278

literal_279 -> leaf_307
leaf_307  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%*"]
// END RANK literal_279

raw_280 -> leaf_308
leaf_308  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" as a wildcard?
"]
// END RANK raw_280

prose_184 -> { raw_309 prespace_310 literal_311 raw_312}
{rank=same; raw_309 prespace_310 literal_311 raw_312}

raw_309 [label="raw"]

prespace_310 [label="prespace"]

literal_311 [label="literal"]

raw_312 [label="raw"]


// END RANK prose_184

raw_309 -> leaf_313
leaf_313  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Note our"]
// END RANK raw_309

prespace_310 -> leaf_314
leaf_314  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_310

literal_311 -> leaf_315
leaf_315  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%L"]
// END RANK literal_311

raw_312 -> leaf_316
leaf_316  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is not the C version.
"]
// END RANK raw_312

prose_185 -> { prespace_317 literal_318 raw_319}
{rank=same; prespace_317 literal_318 raw_319}

prespace_317 [label="prespace"]

literal_318 [label="literal"]

raw_319 [label="raw"]


// END RANK prose_185

prespace_317 -> leaf_320
leaf_320  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_317

literal_318 -> leaf_321
leaf_321  [color=Gray,shape=rectangle,fontname=Inconsolata,label="format_safe"]
// END RANK literal_318

raw_319 -> leaf_322
leaf_322  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" returns the correctly formatted string, or throws an error.
"]
// END RANK raw_319

codeblock_186 -> leaf_323
leaf_323  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local fmt_set = {\"L\", \"q\", \"s\", \"t\"}

for i, v in ipairs(fmt_set) do
   fmt_set[i] = \"%%\" .. v
end

--[[
local function next_fmt(str)
   local head, tail
   for _, v in ipairs(fmt_set) do
      head, tail = 2
end]]

function core.format_safe(str, ...)

end"]
// END RANK codeblock_186

section_159 -> { header_324 prose_325 prose_326 codeblock_327}
{rank=same; header_324 prose_325 prose_326 codeblock_327}

header_324 [label="3 : litpat(s)"]

prose_325 [label="prose"]

prose_326 [label="prose"]

codeblock_327 [label="code block 260-281"]


// END RANK section_159

header_324 -> leaf_328
leaf_328  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** litpat(s)"]
// END RANK header_324

prose_325 -> { raw_329 prespace_330 literal_331 raw_332}
{rank=same; raw_329 prespace_330 literal_331 raw_332}

raw_329 [label="raw"]

prespace_330 [label="prespace"]

literal_331 [label="literal"]

raw_332 [label="raw"]


// END RANK prose_325

raw_329 -> leaf_333
leaf_333  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK raw_329

prespace_330 -> leaf_334
leaf_334  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_330

literal_331 -> leaf_335
leaf_335  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%"]
// END RANK literal_331

raw_332 -> leaf_336
leaf_336  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" escapes all pattern characters.
"]
// END RANK raw_332

prose_326 -> { raw_337 prespace_338 literal_339 raw_340 prespace_341 literal_342 raw_343 prespace_344 literal_345 raw_346}
{rank=same; raw_337 prespace_338 literal_339 raw_340 prespace_341 literal_342 raw_343 prespace_344 literal_345 raw_346}

raw_337 [label="raw"]

prespace_338 [label="prespace"]

literal_339 [label="literal"]

raw_340 [label="raw"]

prespace_341 [label="prespace"]

literal_342 [label="literal"]

raw_343 [label="raw"]

prespace_344 [label="prespace"]

literal_345 [label="literal"]

raw_346 [label="raw"]


// END RANK prose_326

raw_337 -> leaf_347
leaf_347  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The resulting string will literally match"]
// END RANK raw_337

prespace_338 -> leaf_348
leaf_348  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_338

literal_339 -> leaf_349
leaf_349  [color=Gray,shape=rectangle,fontname=Inconsolata,label="s"]
// END RANK literal_339

raw_340 -> leaf_350
leaf_350  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" in"]
// END RANK raw_340

prespace_341 -> leaf_351
leaf_351  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_341

literal_342 -> leaf_352
leaf_352  [color=Gray,shape=rectangle,fontname=Inconsolata,label="sub"]
// END RANK literal_342

raw_343 -> leaf_353
leaf_353  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" or"]
// END RANK raw_343

prespace_344 -> leaf_354
leaf_354  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_344

literal_345 -> leaf_355
leaf_355  [color=Gray,shape=rectangle,fontname=Inconsolata,label="gsub"]
// END RANK literal_345

raw_346 -> leaf_356
leaf_356  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_346

codeblock_327 -> leaf_357
leaf_357  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local matches =
  {
    [\"^\"] = \"%^\";
    [\"$\"] = \"%$\";
    [\"(\"] = \"%(\";
    [\")\"] = \"%)\";
    [\"%\"] = \"%%\";
    [\".\"] = \"%.\";
    [\"[\"] = \"%[\";
    [\"]\"] = \"%]\";
    [\"*\"] = \"%*\";
    [\"+\"] = \"%+\";
    [\"-\"] = \"%-\";
    [\"?\"] = \"%?\";
    [\"\\0\"] = \"%z\";
  }

function core.litpat(s)
    return (s:gsub(\".\", matches))
end"]
// END RANK codeblock_327

section_160 -> { header_358 prose_359 prose_360 codeblock_361}
{rank=same; header_358 prose_359 prose_360 codeblock_361}

header_358 [label="3 : cleave(str, patt)"]

prose_359 [label="prose"]

prose_360 [label="prose"]

codeblock_361 [label="code block 291-296"]


// END RANK section_160

header_358 -> leaf_362
leaf_362  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** cleave(str, patt)"]
// END RANK header_358

prose_359 -> { raw_363 prespace_364 literal_365 raw_366 prespace_367 literal_368 raw_369}
{rank=same; raw_363 prespace_364 literal_365 raw_366 prespace_367 literal_368 raw_369}

raw_363 [label="raw"]

prespace_364 [label="prespace"]

literal_365 [label="literal"]

raw_366 [label="raw"]

prespace_367 [label="prespace"]

literal_368 [label="literal"]

raw_369 [label="raw"]


// END RANK prose_359

raw_363 -> leaf_370
leaf_370  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Performs the common operation of returning one run of bytes up to"]
// END RANK raw_363

prespace_364 -> leaf_371
leaf_371  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_364

literal_365 -> leaf_372
leaf_372  [color=Gray,shape=rectangle,fontname=Inconsolata,label="patt"]
// END RANK literal_365

raw_366 -> leaf_373
leaf_373  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
then the rest of the bytes after"]
// END RANK raw_366

prespace_367 -> leaf_374
leaf_374  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_367

literal_368 -> leaf_375
leaf_375  [color=Gray,shape=rectangle,fontname=Inconsolata,label="patt"]
// END RANK literal_368

raw_369 -> leaf_376
leaf_376  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_369

prose_360 -> { raw_377}
{rank=same; raw_377}

raw_377 [label="raw"]


// END RANK prose_360

raw_377 -> leaf_378
leaf_378  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Can be used to build iterators, either stateful or coroutine-based.
"]
// END RANK raw_377

codeblock_361 -> leaf_379
leaf_379  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function core.cleave(str, pat)
   local at = find(str, pat)
   return sub(str, 1, at - 1), sub(str, at + 1)
end"]
// END RANK codeblock_361

section_161 -> { header_380 prose_381 codeblock_382 codeblock_383}
{rank=same; header_380 prose_381 codeblock_382 codeblock_383}

header_380 [label="3 : codepoints(str)"]

prose_381 [label="prose"]

codeblock_382 [label="code block 304-332"]

codeblock_383 [label="code block 334-336"]


// END RANK section_161

header_380 -> leaf_384
leaf_384  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** codepoints(str)"]
// END RANK header_380

prose_381 -> { raw_385 prespace_386 literal_387 raw_388}
{rank=same; raw_385 prespace_386 literal_387 raw_388}

raw_385 [label="raw"]

prespace_386 [label="prespace"]

literal_387 [label="literal"]

raw_388 [label="raw"]


// END RANK prose_381

raw_385 -> leaf_389
leaf_389  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Returns an array of the utf8 codepoints in"]
// END RANK raw_385

prespace_386 -> leaf_390
leaf_390  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_386

literal_387 -> leaf_391
leaf_391  [color=Gray,shape=rectangle,fontname=Inconsolata,label="str"]
// END RANK literal_387

raw_388 -> leaf_392
leaf_392  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", incidentally validating or
rather filtering the contents into utf8 compliance.
"]
// END RANK raw_388

codeblock_382 -> leaf_393
leaf_393  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
local function split(str, at)
   return sub(str,1, at), sub(str, at + 1)
end

function core.codepoints(str)
   local utf8 = core.utf8
   local codes = {}
   -- propagate nil
   if not str then return nil end
   -- break on bad type
   assert(type(str) == \"string\", \"codepoints must be given a string\")
   while #str > 0 do
      local width, err = utf8(str)
      if width then
         local head, tail = split(str, width)
         codes[#codes + 1] = head
         str = tail
      else
         -- make sure we take a bit off anyway
         str = sub(str, -1)
         -- for debugging
         codes[codes + 1] = { err = err }
      end
   end
   return codes
end"]
// END RANK codeblock_382

codeblock_383 -> leaf_394
leaf_394  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return core"]
// END RANK codeblock_383


}
