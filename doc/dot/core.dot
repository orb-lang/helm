digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 550"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-505"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 codeblock_5 section_6 section_7 section_8 section_9}
{rank=same; header_2 prose_3 prose_4 codeblock_5 section_6 section_7 section_8 section_9}

header_2 [label="1 : Core"]

prose_3 [label="prose"]

prose_4 [label="prose"]

codeblock_5 [label="code block 8-10"]

section_6 [label="section: 13-67"]

section_7 [label="section: 95-248"]

section_8 [label="section: 277-467"]

section_9 [label="section: 506-508"]


// END RANK section_1

header_2 -> leaf_10
leaf_10  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Core"]
// END RANK header_2

prose_3 -> { raw_11 prespace_12 literal_13 raw_14}
{rank=same; raw_11 prespace_12 literal_13 raw_14}

raw_11 [label="raw"]

prespace_12 [label="prespace"]

literal_13 [label="literal"]

raw_14 [label="raw"]


// END RANK prose_3

raw_11 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_11

prespace_12 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_12

literal_13 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label="core"]
// END RANK literal_13

raw_14 -> leaf_18
leaf_18  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is for tampering with the global namespace and standard libraries.
"]
// END RANK raw_14

prose_4 -> { raw_19 prespace_20 literal_21 raw_22}
{rank=same; raw_19 prespace_20 literal_21 raw_22}

raw_19 [label="raw"]

prespace_20 [label="prespace"]

literal_21 [label="literal"]

raw_22 [label="raw"]


// END RANK prose_4

raw_19 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It will eventually land in"]
// END RANK raw_19

prespace_20 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_20

literal_21 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label="pylon"]
// END RANK literal_21

raw_22 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_22

codeblock_5 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local core = {}"]
// END RANK codeblock_5

section_6 -> { header_28 prose_29 prose_30 section_31 section_32 section_33}
{rank=same; header_28 prose_29 prose_30 section_31 section_32 section_33}

header_28 [label="2 : Meta Object Protocol"]

prose_29 [label="prose"]

prose_30 [label="prose"]

section_31 [label="section: 20-43"]

section_32 [label="section: 44-67"]

section_33 [label="section: 68-94"]


// END RANK section_6

header_28 -> leaf_34
leaf_34  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Meta Object Protocol"]
// END RANK header_28

prose_29 -> { raw_35}
{rank=same; raw_35}

raw_35 [label="raw"]


// END RANK prose_29

raw_35 -> leaf_36
leaf_36  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This is where we start to design Cluster.
"]
// END RANK raw_35

prose_30 -> { raw_37 prespace_38 literal_39 raw_40 prespace_41 literal_42 raw_43 prespace_44 literal_45 raw_46 prespace_47 literal_48 raw_49 prespace_50 literal_51 raw_52 prespace_53 literal_54 raw_55}
{rank=same; raw_37 prespace_38 literal_39 raw_40 prespace_41 literal_42 raw_43 prespace_44 literal_45 raw_46 prespace_47 literal_48 raw_49 prespace_50 literal_51 raw_52 prespace_53 literal_54 raw_55}

raw_37 [label="raw"]

prespace_38 [label="prespace"]

literal_39 [label="literal"]

raw_40 [label="raw"]

prespace_41 [label="prespace"]

literal_42 [label="literal"]

raw_43 [label="raw"]

prespace_44 [label="prespace"]

literal_45 [label="literal"]

raw_46 [label="raw"]

prespace_47 [label="prespace"]

literal_48 [label="literal"]

raw_49 [label="raw"]

prespace_50 [label="prespace"]

literal_51 [label="literal"]

raw_52 [label="raw"]

prespace_53 [label="prespace"]

literal_54 [label="literal"]

raw_55 [label="raw"]


// END RANK prose_30

raw_37 -> leaf_56
leaf_56  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We shorten a few of the common Lua keywords:"]
// END RANK raw_37

prespace_38 -> leaf_57
leaf_57  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_38

literal_39 -> leaf_58
leaf_58  [color=Gray,shape=rectangle,fontname=Inconsolata,label="coro"]
// END RANK literal_39

raw_40 -> leaf_59
leaf_59  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" rather than"]
// END RANK raw_40

prespace_41 -> leaf_60
leaf_60  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_41

literal_42 -> leaf_61
leaf_61  [color=Gray,shape=rectangle,fontname=Inconsolata,label="coroutine"]
// END RANK literal_42

raw_43 -> leaf_62
leaf_62  [color=Gray,shape=rectangle,fontname=Inconsolata,label=",
and"]
// END RANK raw_43

prespace_44 -> leaf_63
leaf_63  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_44

literal_45 -> leaf_64
leaf_64  [color=Gray,shape=rectangle,fontname=Inconsolata,label="getmeta"]
// END RANK literal_45

raw_46 -> leaf_65
leaf_65  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_46

prespace_47 -> leaf_66
leaf_66  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_47

literal_48 -> leaf_67
leaf_67  [color=Gray,shape=rectangle,fontname=Inconsolata,label="setmeta"]
// END RANK literal_48

raw_49 -> leaf_68
leaf_68  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" over"]
// END RANK raw_49

prespace_50 -> leaf_69
leaf_69  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_50

literal_51 -> leaf_70
leaf_70  [color=Gray,shape=rectangle,fontname=Inconsolata,label="getmetatable"]
// END RANK literal_51

raw_52 -> leaf_71
leaf_71  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_52

prespace_53 -> leaf_72
leaf_72  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_53

literal_54 -> leaf_73
leaf_73  [color=Gray,shape=rectangle,fontname=Inconsolata,label="setmetatable"]
// END RANK literal_54

raw_55 -> leaf_74
leaf_74  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_55

section_31 -> { header_75 prose_76 codeblock_77}
{rank=same; header_75 prose_76 codeblock_77}

header_75 [label="3 : meta"]

prose_76 [label="prose"]

codeblock_77 [label="code block 25-41"]


// END RANK section_31

header_75 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** meta"]
// END RANK header_75

prose_76 -> { raw_79 prespace_80 literal_81 raw_82}
{rank=same; raw_79 prespace_80 literal_81 raw_82}

raw_79 [label="raw"]

prespace_80 [label="prespace"]

literal_81 [label="literal"]

raw_82 [label="raw"]


// END RANK prose_76

raw_79 -> leaf_83
leaf_83  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

In my code there is a repeated pattern of use that is basic enough that I'm
entering it into the global namespace as simple"]
// END RANK raw_79

prespace_80 -> leaf_84
leaf_84  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_80

literal_81 -> leaf_85
leaf_85  [color=Gray,shape=rectangle,fontname=Inconsolata,label="meta"]
// END RANK literal_81

raw_82 -> leaf_86
leaf_86  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_82

codeblock_77 -> leaf_87
leaf_87  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function core.meta(MT)
   if MT and MT.__index then
      -- inherit
      return setmetatable({}, MT)
   elseif MT then
      -- decorate
      MT.__index = MT
      return MT
   else
      -- new metatable
      local _M = {}
      _M.__index = _M
      return _M
   end
end"]
// END RANK codeblock_77

section_32 -> { header_88 prose_89 prose_90 prose_91 codeblock_92}
{rank=same; header_88 prose_89 prose_90 prose_91 codeblock_92}

header_88 [label="3 : hasmetamethod(tab, mmethod)"]

prose_89 [label="prose"]

prose_90 [label="prose"]

prose_91 [label="prose"]

codeblock_92 [label="code block 55-66"]


// END RANK section_32

header_88 -> leaf_93
leaf_93  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** hasmetamethod(tab, mmethod)"]
// END RANK header_88

prose_89 -> { raw_94 prespace_95 literal_96 raw_97}
{rank=same; raw_94 prespace_95 literal_96 raw_97}

raw_94 [label="raw"]

prespace_95 [label="prespace"]

literal_96 [label="literal"]

raw_97 [label="raw"]


// END RANK prose_89

raw_94 -> leaf_98
leaf_98  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The function of this is clear: given a table, return"]
// END RANK raw_94

prespace_95 -> leaf_99
leaf_99  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_95

literal_96 -> leaf_100
leaf_100  [color=Gray,shape=rectangle,fontname=Inconsolata,label="true"]
// END RANK literal_96

raw_97 -> leaf_101
leaf_101  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" if it can receive
a given metamethod.
"]
// END RANK raw_97

prose_90 -> { raw_102}
{rank=same; raw_102}

raw_102 [label="raw"]


// END RANK prose_90

raw_102 -> leaf_103
leaf_103  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The question is, how magical to make it. I'm going with \"slightly magical\" for
now.  You can leave off the \"__\" in checking for a metamethod.
"]
// END RANK raw_102

prose_91 -> { raw_104 prespace_105 literal_106 raw_107 prespace_108 literal_109 raw_110}
{rank=same; raw_104 prespace_105 literal_106 raw_107 prespace_108 literal_109 raw_110}

raw_104 [label="raw"]

prespace_105 [label="prespace"]

literal_106 [label="literal"]

raw_107 [label="raw"]

prespace_108 [label="prespace"]

literal_109 [label="literal"]

raw_110 [label="raw"]


// END RANK prose_91

raw_104 -> leaf_111
leaf_111  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A successful lookup returns the result, presumable truthy, otherwise"]
// END RANK raw_104

prespace_105 -> leaf_112
leaf_112  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_105

literal_106 -> leaf_113
leaf_113  [color=Gray,shape=rectangle,fontname=Inconsolata,label="false"]
// END RANK literal_106

raw_107 -> leaf_114
leaf_114  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
for a non-table argument and"]
// END RANK raw_107

prespace_108 -> leaf_115
leaf_115  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_108

literal_109 -> leaf_116
leaf_116  [color=Gray,shape=rectangle,fontname=Inconsolata,label="nil"]
// END RANK literal_109

raw_110 -> leaf_117
leaf_117  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" for a failed lookup.
"]
// END RANK raw_110

codeblock_92 -> leaf_118
leaf_118  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local sub = assert(string.sub)

function core.hasmetamethod(tab, mmethod)
   assert(type(mmethod) == \"string\", \"metamethod must be a string\")
   if sub(mmethod,1,2) == \"__\" then
      return type(tab) == \"table\" and tab[mmethod]
   else
      return type(tab) == \"table\" and tab[\"__\" ..mmethod]
   end
end"]
// END RANK codeblock_92

section_33 -> { header_119 prose_120 prose_121 prose_122 codeblock_123 prose_124}
{rank=same; header_119 prose_120 prose_121 prose_122 codeblock_123 prose_124}

header_119 [label="3 : endow(Meta)"]

prose_120 [label="prose"]

prose_121 [label="prose"]

prose_122 [label="prose"]

codeblock_123 [label="code block 78-88"]

prose_124 [label="prose"]


// END RANK section_33

header_119 -> leaf_125
leaf_125  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** endow(Meta)"]
// END RANK header_119

prose_120 -> { raw_126}
{rank=same; raw_126}

raw_126 [label="raw"]


// END RANK prose_120

raw_126 -> leaf_127
leaf_127  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Performs a thick copy of the metatable.
"]
// END RANK raw_126

prose_121 -> { raw_128}
{rank=same; raw_128}

raw_128 [label="raw"]


// END RANK prose_121

raw_128 -> leaf_129
leaf_129  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Because this will include __index and the like, this folds an level of
indirection out of inheritance.
"]
// END RANK raw_128

prose_122 -> { raw_130}
{rank=same; raw_130}

raw_130 [label="raw"]


// END RANK prose_122

raw_130 -> leaf_131
leaf_131  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I plan to use this with Nodes when I make a single base class for a complex
Grammar.
"]
// END RANK raw_130

codeblock_123 -> leaf_132
leaf_132  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local pairs = assert(pairs)

function core.endow(Meta)
   local MC = {}
   for k, v in pairs(Meta) do
      MC[k] = v
   end
   return MC
end"]
// END RANK codeblock_123

prose_124 -> { raw_133 prespace_134 literal_135 raw_136}
{rank=same; raw_133 prespace_134 literal_135 raw_136}

raw_133 [label="raw"]

prespace_134 [label="prespace"]

literal_135 [label="literal"]

raw_136 [label="raw"]


// END RANK prose_124

raw_133 -> leaf_137
leaf_137  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
That's just a shallow clone, the subtlety is that if the __index was a
self-table, it now points to"]
// END RANK raw_133

prespace_134 -> leaf_138
leaf_138  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_134

literal_135 -> leaf_139
leaf_139  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Meta"]
// END RANK literal_135

raw_136 -> leaf_140
leaf_140  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", while if Meta was created through
endowment or inheritance it's now out of the picture.

"]
// END RANK raw_136

section_7 -> { header_141 prose_142 section_143 section_144 section_145 section_146 section_147 section_148 section_149 section_150 section_151}
{rank=same; header_141 prose_142 section_143 section_144 section_145 section_146 section_147 section_148 section_149 section_150 section_151}

header_141 [label="2 : Table extensions"]

prose_142 [label="prose"]

section_143 [label="section: 98-126"]

section_144 [label="section: 127-142"]

section_145 [label="section: 143-157"]

section_146 [label="section: 158-174"]

section_147 [label="section: 175-199"]

section_148 [label="section: 200-216"]

section_149 [label="section: 217-233"]

section_150 [label="section: 234-248"]

section_151 [label="section: 249-276"]


// END RANK section_7

header_141 -> leaf_152
leaf_152  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Table extensions"]
// END RANK header_141

prose_142 -> { raw_153}
{rank=same; raw_153}

raw_153 [label="raw"]


// END RANK prose_142

raw_153 -> leaf_154
leaf_154  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

"]
// END RANK raw_153

section_143 -> { header_155 prose_156 codeblock_157}
{rank=same; header_155 prose_156 codeblock_157}

header_155 [label="3 : hasfield(field, tab) & hasfield.field(tab)"]

prose_156 [label="prose"]

codeblock_157 [label="code block 103-124"]


// END RANK section_143

header_155 -> leaf_158
leaf_158  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** hasfield(field, tab) & hasfield.field(tab)"]
// END RANK header_155

prose_156 -> { raw_159}
{rank=same; raw_159}

raw_159 [label="raw"]


// END RANK prose_156

raw_159 -> leaf_160
leaf_160  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


A nicety which can be used both for predication and assignment.
"]
// END RANK raw_159

codeblock_157 -> leaf_161
leaf_161  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function _hasfield(field, tab)
   if type(tab) == \"table\" and tab[field] ~= nil then
      return true, tab[field]
   else
      return false
   end
end

function _hf__index(_, field)
   return function(tab)
      return _hasfield(field, tab)
   end
end

function _hf__call(_, field, tab)
   return _hasfield(field, tab)
end

core.hasfield = setmetatable({}, { __index = _hf__index,
                                   __call  = _hf__call })"]
// END RANK codeblock_157

section_144 -> { header_162 prose_163 codeblock_164}
{rank=same; header_162 prose_163 codeblock_164}

header_162 [label="3 : clone(tab)"]

prose_163 [label="prose"]

codeblock_164 [label="code block 131-140"]


// END RANK section_144

header_162 -> leaf_165
leaf_165  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** clone(tab)"]
// END RANK header_162

prose_163 -> { raw_166}
{rank=same; raw_166}

raw_166 [label="raw"]


// END RANK prose_163

raw_166 -> leaf_167
leaf_167  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Performs a shallow clone of table, attaching metatable if available.
"]
// END RANK raw_166

codeblock_164 -> leaf_168
leaf_168  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function core.clone(tab)
   local _M = getmetatable(tab)
   local clone = _M and setmetatable({}, _M) or {}
   for k,v in pairs(tab) do
      clone[k] = v
   end
   return clone
end"]
// END RANK codeblock_164

section_145 -> { header_169 prose_170 codeblock_171}
{rank=same; header_169 prose_170 codeblock_171}

header_169 [label="3 : arrayof(tab)"]

prose_170 [label="prose"]

codeblock_171 [label="code block 147-155"]


// END RANK section_145

header_169 -> leaf_172
leaf_172  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** arrayof(tab)"]
// END RANK header_169

prose_170 -> { raw_173}
{rank=same; raw_173}

raw_173 [label="raw"]


// END RANK prose_170

raw_173 -> leaf_174
leaf_174  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Clones and returns the array portion of a table.
"]
// END RANK raw_173

codeblock_171 -> leaf_175
leaf_175  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function core.arrayof(tab)
   local arr = {}
   for i,v in ipairs(tab) do
      arr[i] = v
   end
   return arr
end"]
// END RANK codeblock_171

section_146 -> { header_176 prose_177 codeblock_178}
{rank=same; header_176 prose_177 codeblock_178}

header_176 [label="3 : collect(iter, tab)"]

prose_177 [label="prose"]

codeblock_178 [label="code block 163-172"]


// END RANK section_146

header_176 -> leaf_179
leaf_179  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** collect(iter, tab)"]
// END RANK header_176

prose_177 -> { raw_180}
{rank=same; raw_180}

raw_180 [label="raw"]


// END RANK prose_177

raw_180 -> leaf_181
leaf_181  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Collects and returns up to two tables of values, given an iterator and a
table to iterate over.
"]
// END RANK raw_180

codeblock_178 -> leaf_182
leaf_182  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function core.collect(iter, tab)
   local k_tab, v_tab = {}, {}
   for k, v in iter(tab) do
      k_tab[#k_tab + 1] = k
      v_tab[#v_tab + 1] = v
   end
   return k_tab, v_tab
end"]
// END RANK codeblock_178

section_147 -> { header_183 prose_184 codeblock_185}
{rank=same; header_183 prose_184 codeblock_185}

header_183 [label="3 : select(tab, key)"]

prose_184 [label="prose"]

codeblock_185 [label="code block 179-197"]


// END RANK section_147

header_183 -> leaf_186
leaf_186  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** select(tab, key)"]
// END RANK header_183

prose_184 -> { raw_187 prespace_188 literal_189 raw_190 prespace_191 literal_192 raw_193}
{rank=same; raw_187 prespace_188 literal_189 raw_190 prespace_191 literal_192 raw_193}

raw_187 [label="raw"]

prespace_188 [label="prespace"]

literal_189 [label="literal"]

raw_190 [label="raw"]

prespace_191 [label="prespace"]

literal_192 [label="literal"]

raw_193 [label="raw"]


// END RANK prose_184

raw_187 -> leaf_194
leaf_194  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Recursively return all"]
// END RANK raw_187

prespace_188 -> leaf_195
leaf_195  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_188

literal_189 -> leaf_196
leaf_196  [color=Gray,shape=rectangle,fontname=Inconsolata,label="v"]
// END RANK literal_189

raw_190 -> leaf_197
leaf_197  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" for"]
// END RANK raw_190

prespace_191 -> leaf_198
leaf_198  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_191

literal_192 -> leaf_199
leaf_199  [color=Gray,shape=rectangle,fontname=Inconsolata,label="key"]
// END RANK literal_192

raw_193 -> leaf_200
leaf_200  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" in all subtables of tab
"]
// END RANK raw_193

codeblock_185 -> leaf_201
leaf_201  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function _select(collection, tab, key, cycle)
   cycle = cycle or {}
   for k,v in pairs(tab) do
      if key == k then
         collection[#collection + 1] = v
      end
      if type(v) == \"table\" and not cycle[v] then
         cycle[v] = true
         collection = _select(collection, v, key, cycle)
      end
   end
   return collection
end

function core.select(tab, key)
   return _select({}, tab, key)
end"]
// END RANK codeblock_185

section_148 -> { header_202 prose_203 codeblock_204}
{rank=same; header_202 prose_203 codeblock_204}

header_202 [label="3 : reverse(tab)"]

prose_203 [label="prose"]

codeblock_204 [label="code block 204-214"]


// END RANK section_148

header_202 -> leaf_205
leaf_205  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** reverse(tab)"]
// END RANK header_202

prose_203 -> { raw_206}
{rank=same; raw_206}

raw_206 [label="raw"]


// END RANK prose_203

raw_206 -> leaf_207
leaf_207  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Reverses (only) the array portion of a table, returning a new table.
"]
// END RANK raw_206

codeblock_204 -> leaf_208
leaf_208  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function core.reverse(tab)
   local bat = {}
   for i,v in ipairs(tab) do
      bat[#tab - i + 1] = v
   end
   assert(bat[1])
   assert(bat[#tab])
   return bat
end"]
// END RANK codeblock_204

section_149 -> { header_209 prose_210 codeblock_211}
{rank=same; header_209 prose_210 codeblock_211}

header_209 [label="3 : keys(tab)"]

prose_210 [label="prose"]

codeblock_211 [label="code block 221-231"]


// END RANK section_149

header_209 -> leaf_212
leaf_212  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** keys(tab)"]
// END RANK header_209

prose_210 -> { raw_213}
{rank=same; raw_213}

raw_213 [label="raw"]


// END RANK prose_210

raw_213 -> leaf_214
leaf_214  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Returns an array of the keys of a table.
"]
// END RANK raw_213

codeblock_211 -> leaf_215
leaf_215  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function core.keys(tab)
   assert(type(tab) == \"table\", \"keys must receive a table\")
   local keys = {}
   for k, _ in pairs(tab) do
      keys[#keys + 1] = k
   end

   return keys, #keys
end"]
// END RANK codeblock_211

section_150 -> { header_216 prose_217 codeblock_218}
{rank=same; header_216 prose_217 codeblock_218}

header_216 [label="3 : values(tab)"]

prose_217 [label="prose"]

codeblock_218 [label="code block 236-246"]


// END RANK section_150

header_216 -> leaf_219
leaf_219  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** values(tab)"]
// END RANK header_216

prose_217 -> { raw_220}
{rank=same; raw_220}

raw_220 [label="raw"]


// END RANK prose_217

raw_220 -> leaf_221
leaf_221  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_220

codeblock_218 -> leaf_222
leaf_222  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function core.values(tab)
   assert(type(tab) == \"table\", \"vals must receive a table\")
   local vals = {}
   for _, v in pairs(tab) do
      vals[#vals + 1] = v
   end

   return vals, #vals
end"]
// END RANK codeblock_218

section_151 -> { header_223 prose_224 codeblock_225}
{rank=same; header_223 prose_224 codeblock_225}

header_223 [label="3 : splice(tab, index, into)"]

prose_224 [label="prose"]

codeblock_225 [label="code block 254-274"]


// END RANK section_151

header_223 -> leaf_226
leaf_226  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** splice(tab, index, into)"]
// END RANK header_223

prose_224 -> { raw_227 prespace_228 literal_229 raw_230 prespace_231 literal_232 raw_233 prespace_234 literal_235 raw_236}
{rank=same; raw_227 prespace_228 literal_229 raw_230 prespace_231 literal_232 raw_233 prespace_234 literal_235 raw_236}

raw_227 [label="raw"]

prespace_228 [label="prespace"]

literal_229 [label="literal"]

raw_230 [label="raw"]

prespace_231 [label="prespace"]

literal_232 [label="literal"]

raw_233 [label="raw"]

prespace_234 [label="prespace"]

literal_235 [label="literal"]

raw_236 [label="raw"]


// END RANK prose_224

raw_227 -> leaf_237
leaf_237  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Puts the full contents of"]
// END RANK raw_227

prespace_228 -> leaf_238
leaf_238  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_228

literal_229 -> leaf_239
leaf_239  [color=Gray,shape=rectangle,fontname=Inconsolata,label="into"]
// END RANK literal_229

raw_230 -> leaf_240
leaf_240  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" into"]
// END RANK raw_230

prespace_231 -> leaf_241
leaf_241  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_231

literal_232 -> leaf_242
leaf_242  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tab"]
// END RANK literal_232

raw_233 -> leaf_243
leaf_243  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" at"]
// END RANK raw_233

prespace_234 -> leaf_244
leaf_244  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_234

literal_235 -> leaf_245
leaf_245  [color=Gray,shape=rectangle,fontname=Inconsolata,label="index"]
// END RANK literal_235

raw_236 -> leaf_246
leaf_246  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  The argument order is
compatible with existing functions and method syntax.
"]
// END RANK raw_236

codeblock_225 -> leaf_247
leaf_247  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local insert = table.insert

local sp_er = \"table<core>.splice: \"
local _e_1 = sp_er .. \"$1 must be a table\"
local _e_2 = sp_er .. \"$2 must be a number\"
local _e_3 = sp_er .. \"$3 must be a table\"

function core.splice(tab, idx, into)
   assert(type(tab) == \"table\", _e_1)
   assert(type(idx) == \"number\", _e_2)
   assert(type(into) == \"table\", _e_3)
    idx = idx - 1
    local i = 1
    for j = 1, #into do
        insert(tab,i+idx,into[j])
        i = i + 1
    end
    return tab
end"]
// END RANK codeblock_225

section_8 -> { header_248 prose_249 codeblock_250 section_251 section_252 section_253 section_254 section_255}
{rank=same; header_248 prose_249 codeblock_250 section_251 section_252 section_253 section_254 section_255}

header_248 [label="2 : String extensions"]

prose_249 [label="prose"]

codeblock_250 [label="code block 279-284"]

section_251 [label="section: 286-335"]

section_252 [label="section: 336-396"]

section_253 [label="section: 397-426"]

section_254 [label="section: 427-467"]

section_255 [label="section: 468-505"]


// END RANK section_8

header_248 -> leaf_256
leaf_256  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** String extensions"]
// END RANK header_248

prose_249 -> { raw_257}
{rank=same; raw_257}

raw_257 [label="raw"]


// END RANK prose_249

raw_257 -> leaf_258
leaf_258  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_257

codeblock_250 -> leaf_259
leaf_259  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local byte = assert(string.byte)
local find = assert(string.find)
local sub = assert(string.sub)
local format = assert(string.format)"]
// END RANK codeblock_250

section_251 -> { header_260 prose_261 prose_262 codeblock_263}
{rank=same; header_260 prose_261 prose_262 codeblock_263}

header_260 [label="3 : utf8(char)"]

prose_261 [label="prose"]

prose_262 [label="prose"]

codeblock_263 [label="code block 294-333"]


// END RANK section_251

header_260 -> leaf_264
leaf_264  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** utf8(char)"]
// END RANK header_260

prose_261 -> { raw_265}
{rank=same; raw_265}

raw_265 [label="raw"]


// END RANK prose_261

raw_265 -> leaf_266
leaf_266  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This takes a string and validates the first character.
"]
// END RANK raw_265

prose_262 -> { raw_267}
{rank=same; raw_267}

raw_267 [label="raw"]


// END RANK prose_262

raw_267 -> leaf_268
leaf_268  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Return is either the (valid) length in bytes, or nil and an error string.
"]
// END RANK raw_267

codeblock_263 -> leaf_269
leaf_269  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function continue(c)
   return c >= 128 and c <= 191
end

function core.utf8(c)
   local byte = byte
   local head = byte(c)
   if head < 128 then
      return 1
   elseif head >= 194 and head <= 223 then
      local two = byte(c, 2)
      if continue(two) then
         return 2
      else
         return nil, \"utf8: bad second byte\"
      end
   elseif head >= 224 and head <= 239 then
      local two, three = byte(c, 2), byte(c, 3)
      if continue(two) and continue(three) then
         return 3
      else
         return nil, \"utf8: bad second and/or third byte\"
      end
   elseif head >= 240 and head <= 244 then
      local two, three, four = byte(c, 2), byte(c, 3), byte(c, 4)
      if continue(two) and continue(three) and continue(four) then
         return 4
      else
         return nil, \"utf8: bad second, third, and/or fourth byte\"
      end
   elseif continue(head) then
      return nil, \"utf8: continuation byte at head\"
   elseif head == 192 or head == 193 then
      return nil, \"utf8: 192 or 193 forbidden\"
   else -- head > 245
      return nil, \"utf8: byte > 245\"
   end
end"]
// END RANK codeblock_263

section_252 -> { header_270 prose_271 prose_272 prose_273 prose_274 prose_275 prose_276 prose_277 prose_278 prose_279 prose_280 prose_281 codeblock_282}
{rank=same; header_270 prose_271 prose_272 prose_273 prose_274 prose_275 prose_276 prose_277 prose_278 prose_279 prose_280 prose_281 codeblock_282}

header_270 [label="3 : typeformat(str, ...)"]

prose_271 [label="prose"]

prose_272 [label="prose"]

prose_273 [label="prose"]

prose_274 [label="prose"]

prose_275 [label="prose"]

prose_276 [label="prose"]

prose_277 [label="prose"]

prose_278 [label="prose"]

prose_279 [label="prose"]

prose_280 [label="prose"]

prose_281 [label="prose"]

codeblock_282 [label="code block 378-395"]


// END RANK section_252

header_270 -> leaf_283
leaf_283  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** typeformat(str, ...)"]
// END RANK header_270

prose_271 -> { raw_284}
{rank=same; raw_284}

raw_284 [label="raw"]


// END RANK prose_271

raw_284 -> leaf_285
leaf_285  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Background: I want to start using format in errors and assertions.
"]
// END RANK raw_284

prose_272 -> { raw_286}
{rank=same; raw_286}

raw_286 [label="raw"]


// END RANK prose_272

raw_286 -> leaf_287
leaf_287  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It's not as bad to use concatenation in-place for errors, since evaluating
them is a final step.  Assertions run much faster if passed only arguments.
"]
// END RANK raw_286

prose_273 -> { raw_288 prespace_289 literal_290 raw_291 prespace_292 literal_293 raw_294 prespace_295 literal_296 raw_297}
{rank=same; raw_288 prespace_289 literal_290 raw_291 prespace_292 literal_293 raw_294 prespace_295 literal_296 raw_297}

raw_288 [label="raw"]

prespace_289 [label="prespace"]

literal_290 [label="literal"]

raw_291 [label="raw"]

prespace_292 [label="prespace"]

literal_293 [label="literal"]

raw_294 [label="raw"]

prespace_295 [label="prespace"]

literal_296 [label="literal"]

raw_297 [label="raw"]


// END RANK prose_273

raw_288 -> leaf_298
leaf_298  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Lua peforms a small number of implicit conversions, mostly at the string
boundary. This is an actual feature since the language has both"]
// END RANK raw_288

prespace_289 -> leaf_299
leaf_299  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_289

literal_290 -> leaf_300
leaf_300  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".."]
// END RANK literal_290

raw_291 -> leaf_301
leaf_301  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_291

prespace_292 -> leaf_302
leaf_302  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_292

literal_293 -> leaf_303
leaf_303  [color=Gray,shape=rectangle,fontname=Inconsolata,label="+"]
// END RANK literal_293

raw_294 -> leaf_304
leaf_304  [color=Gray,shape=rectangle,fontname=Inconsolata,label=",
but it leaves a bit to be desired when it comes to"]
// END RANK raw_294

prespace_295 -> leaf_305
leaf_305  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_295

literal_296 -> leaf_306
leaf_306  [color=Gray,shape=rectangle,fontname=Inconsolata,label="string.format"]
// END RANK literal_296

raw_297 -> leaf_307
leaf_307  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_297

prose_274 -> { prespace_308 literal_309 raw_310 prespace_311 literal_312 raw_313 prespace_314 literal_315 raw_316 prespace_317 literal_318 raw_319 prespace_320 literal_321 raw_322 prespace_323 literal_324 raw_325}
{rank=same; prespace_308 literal_309 raw_310 prespace_311 literal_312 raw_313 prespace_314 literal_315 raw_316 prespace_317 literal_318 raw_319 prespace_320 literal_321 raw_322 prespace_323 literal_324 raw_325}

prespace_308 [label="prespace"]

literal_309 [label="literal"]

raw_310 [label="raw"]

prespace_311 [label="prespace"]

literal_312 [label="literal"]

raw_313 [label="raw"]

prespace_314 [label="prespace"]

literal_315 [label="literal"]

raw_316 [label="raw"]

prespace_317 [label="prespace"]

literal_318 [label="literal"]

raw_319 [label="raw"]

prespace_320 [label="prespace"]

literal_321 [label="literal"]

raw_322 [label="raw"]

prespace_323 [label="prespace"]

literal_324 [label="literal"]

raw_325 [label="raw"]


// END RANK prose_274

prespace_308 -> leaf_326
leaf_326  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_308

literal_309 -> leaf_327
leaf_327  [color=Gray,shape=rectangle,fontname=Inconsolata,label="format"]
// END RANK literal_309

raw_310 -> leaf_328
leaf_328  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" treats any"]
// END RANK raw_310

prespace_311 -> leaf_329
leaf_329  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_311

literal_312 -> leaf_330
leaf_330  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%s"]
// END RANK literal_312

raw_313 -> leaf_331
leaf_331  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" as a request to convert"]
// END RANK raw_313

prespace_314 -> leaf_332
leaf_332  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_314

literal_315 -> leaf_333
leaf_333  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tostring"]
// END RANK literal_315

raw_316 -> leaf_334
leaf_334  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", also treating"]
// END RANK raw_316

prespace_317 -> leaf_335
leaf_335  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_317

literal_318 -> leaf_336
leaf_336  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%d"]
// END RANK literal_318

raw_319 -> leaf_337
leaf_337  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" as a call to"]
// END RANK raw_319

prespace_320 -> leaf_338
leaf_338  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_320

literal_321 -> leaf_339
leaf_339  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tonumber"]
// END RANK literal_321

raw_322 -> leaf_340
leaf_340  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  The latter I will allow, I'm struggling to find
a circumstance where casting \"1\" to \"1\" through"]
// END RANK raw_322

prespace_323 -> leaf_341
leaf_341  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_323

literal_324 -> leaf_342
leaf_342  [color=Gray,shape=rectangle,fontname=Inconsolata,label="1"]
// END RANK literal_324

raw_325 -> leaf_343
leaf_343  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is dangerous.
"]
// END RANK raw_325

prose_275 -> { raw_344 prespace_345 literal_346 raw_347}
{rank=same; raw_344 prespace_345 literal_346 raw_347}

raw_344 [label="raw"]

prespace_345 [label="prespace"]

literal_346 [label="literal"]

raw_347 [label="raw"]


// END RANK prose_275

raw_344 -> leaf_348
leaf_348  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
What I want is a type-checked"]
// END RANK raw_344

prespace_345 -> leaf_349
leaf_349  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_345

literal_346 -> leaf_350
leaf_350  [color=Gray,shape=rectangle,fontname=Inconsolata,label="format"]
// END RANK literal_346

raw_347 -> leaf_351
leaf_351  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", which I can extend to use a few more
flexible strategies, depending on the context.
"]
// END RANK raw_347

prose_276 -> { raw_352}
{rank=same; raw_352}

raw_352 [label="raw"]


// END RANK prose_276

raw_352 -> leaf_353
leaf_353  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Less concerned about hostility and more about explicit coding practices. Also
don't want to undermine hardening elsewhere.
"]
// END RANK raw_352

prose_277 -> { raw_354 prespace_355 literal_356 raw_357 prespace_358 literal_359 raw_360 prespace_361 literal_362 raw_363}
{rank=same; raw_354 prespace_355 literal_356 raw_357 prespace_358 literal_359 raw_360 prespace_361 literal_362 raw_363}

raw_354 [label="raw"]

prespace_355 [label="prespace"]

literal_356 [label="literal"]

raw_357 [label="raw"]

prespace_358 [label="prespace"]

literal_359 [label="literal"]

raw_360 [label="raw"]

prespace_361 [label="prespace"]

literal_362 [label="literal"]

raw_363 [label="raw"]


// END RANK prose_277

raw_354 -> leaf_364
leaf_364  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
From the wiki, the full set of numeric parameters is"]
// END RANK raw_354

prespace_355 -> leaf_365
leaf_365  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_355

literal_356 -> leaf_366
leaf_366  [color=Gray,shape=rectangle,fontname=Inconsolata,label="{A,a,c,d,E,e,f,G,g,i,o,u,X,x}"]
// END RANK literal_356

raw_357 -> leaf_367
leaf_367  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  That leaves"]
// END RANK raw_357

prespace_358 -> leaf_368
leaf_368  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_358

literal_359 -> leaf_369
leaf_369  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%q"]
// END RANK literal_359

raw_360 -> leaf_370
leaf_370  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_360

prespace_361 -> leaf_371
leaf_371  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_361

literal_362 -> leaf_372
leaf_372  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%s"]
// END RANK literal_362

raw_363 -> leaf_373
leaf_373  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", the former does
string escaping but of course it is the Lua/C style of escaping.
"]
// END RANK raw_363

prose_278 -> { raw_374 prespace_375 literal_376 raw_377 prespace_378 literal_379 raw_380 prespace_381 literal_382 raw_383 prespace_384 literal_385 raw_386 prespace_387 literal_388 raw_389 prespace_390 literal_391 raw_392 prespace_393 literal_394 raw_395 prespace_396 literal_397 raw_398 prespace_399 literal_400 raw_401}
{rank=same; raw_374 prespace_375 literal_376 raw_377 prespace_378 literal_379 raw_380 prespace_381 literal_382 raw_383 prespace_384 literal_385 raw_386 prespace_387 literal_388 raw_389 prespace_390 literal_391 raw_392 prespace_393 literal_394 raw_395 prespace_396 literal_397 raw_398 prespace_399 literal_400 raw_401}

raw_374 [label="raw"]

prespace_375 [label="prespace"]

literal_376 [label="literal"]

raw_377 [label="raw"]

prespace_378 [label="prespace"]

literal_379 [label="literal"]

raw_380 [label="raw"]

prespace_381 [label="prespace"]

literal_382 [label="literal"]

raw_383 [label="raw"]

prespace_384 [label="prespace"]

literal_385 [label="literal"]

raw_386 [label="raw"]

prespace_387 [label="prespace"]

literal_388 [label="literal"]

raw_389 [label="raw"]

prespace_390 [label="prespace"]

literal_391 [label="literal"]

raw_392 [label="raw"]

prespace_393 [label="prespace"]

literal_394 [label="literal"]

raw_395 [label="raw"]

prespace_396 [label="prespace"]

literal_397 [label="literal"]

raw_398 [label="raw"]

prespace_399 [label="prespace"]

literal_400 [label="literal"]

raw_401 [label="raw"]


// END RANK prose_278

raw_374 -> leaf_402
leaf_402  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We add"]
// END RANK raw_374

prespace_375 -> leaf_403
leaf_403  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_375

literal_376 -> leaf_404
leaf_404  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%t"]
// END RANK literal_376

raw_377 -> leaf_405
leaf_405  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_377

prespace_378 -> leaf_406
leaf_406  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_378

literal_379 -> leaf_407
leaf_407  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%L"]
// END RANK literal_379

raw_380 -> leaf_408
leaf_408  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" (for λ), which call"]
// END RANK raw_380

prespace_381 -> leaf_409
leaf_409  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_381

literal_382 -> leaf_410
leaf_410  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tostring"]
// END RANK literal_382

raw_383 -> leaf_411
leaf_411  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" on a table or a function
respectively.  While we're being thorough,"]
// END RANK raw_383

prespace_384 -> leaf_412
leaf_412  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_384

literal_385 -> leaf_413
leaf_413  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%b"]
// END RANK literal_385

raw_386 -> leaf_414
leaf_414  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" for boolean,"]
// END RANK raw_386

prespace_387 -> leaf_415
leaf_415  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_387

literal_388 -> leaf_416
leaf_416  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%n"]
// END RANK literal_388

raw_389 -> leaf_417
leaf_417  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" for"]
// END RANK raw_389

prespace_390 -> leaf_418
leaf_418  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_390

literal_391 -> leaf_419
leaf_419  [color=Gray,shape=rectangle,fontname=Inconsolata,label="nil"]
// END RANK literal_391

raw_392 -> leaf_420
leaf_420  [color=Gray,shape=rectangle,fontname=Inconsolata,label=",
and"]
// END RANK raw_392

prespace_393 -> leaf_421
leaf_421  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_393

literal_394 -> leaf_422
leaf_422  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%*"]
// END RANK literal_394

raw_395 -> leaf_423
leaf_423  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" for the union type.  Why bother with"]
// END RANK raw_395

prespace_396 -> leaf_424
leaf_424  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_396

literal_397 -> leaf_425
leaf_425  [color=Gray,shape=rectangle,fontname=Inconsolata,label="nil"]
// END RANK literal_397

raw_398 -> leaf_426
leaf_426  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", which we can just write?
Type-checking, of course.  We treat"]
// END RANK raw_398

prespace_399 -> leaf_427
leaf_427  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_399

literal_400 -> leaf_428
leaf_428  [color=Gray,shape=rectangle,fontname=Inconsolata,label="nil"]
// END RANK literal_400

raw_401 -> leaf_429
leaf_429  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" as a full type, because in Lua, it
is.
"]
// END RANK raw_401

prose_279 -> { prespace_430 literal_431 raw_432 prespace_433 literal_434 raw_435 prespace_436 literal_437 raw_438 prespace_439 literal_440 raw_441 prespace_442 literal_443 raw_444 prespace_445 literal_446 raw_447 prespace_448 literal_449 raw_450 prespace_451 literal_452 raw_453}
{rank=same; prespace_430 literal_431 raw_432 prespace_433 literal_434 raw_435 prespace_436 literal_437 raw_438 prespace_439 literal_440 raw_441 prespace_442 literal_443 raw_444 prespace_445 literal_446 raw_447 prespace_448 literal_449 raw_450 prespace_451 literal_452 raw_453}

prespace_430 [label="prespace"]

literal_431 [label="literal"]

raw_432 [label="raw"]

prespace_433 [label="prespace"]

literal_434 [label="literal"]

raw_435 [label="raw"]

prespace_436 [label="prespace"]

literal_437 [label="literal"]

raw_438 [label="raw"]

prespace_439 [label="prespace"]

literal_440 [label="literal"]

raw_441 [label="raw"]

prespace_442 [label="prespace"]

literal_443 [label="literal"]

raw_444 [label="raw"]

prespace_445 [label="prespace"]

literal_446 [label="literal"]

raw_447 [label="raw"]

prespace_448 [label="prespace"]

literal_449 [label="literal"]

raw_450 [label="raw"]

prespace_451 [label="prespace"]

literal_452 [label="literal"]

raw_453 [label="raw"]


// END RANK prose_279

prespace_430 -> leaf_454
leaf_454  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_430

literal_431 -> leaf_455
leaf_455  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%t"]
// END RANK literal_431

raw_432 -> leaf_456
leaf_456  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" will actually accept all remaining compound types:"]
// END RANK raw_432

prespace_433 -> leaf_457
leaf_457  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_433

literal_434 -> leaf_458
leaf_458  [color=Gray,shape=rectangle,fontname=Inconsolata,label="userdata"]
// END RANK literal_434

raw_435 -> leaf_459
leaf_459  [color=Gray,shape=rectangle,fontname=Inconsolata,label=","]
// END RANK raw_435

prespace_436 -> leaf_460
leaf_460  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_436

literal_437 -> leaf_461
leaf_461  [color=Gray,shape=rectangle,fontname=Inconsolata,label="thread"]
// END RANK literal_437

raw_438 -> leaf_462
leaf_462  [color=Gray,shape=rectangle,fontname=Inconsolata,label=",
and"]
// END RANK raw_438

prespace_439 -> leaf_463
leaf_463  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_439

literal_440 -> leaf_464
leaf_464  [color=Gray,shape=rectangle,fontname=Inconsolata,label="cdata"]
// END RANK literal_440

raw_441 -> leaf_465
leaf_465  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  For only tables, we can have"]
// END RANK raw_441

prespace_442 -> leaf_466
leaf_466  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_442

literal_443 -> leaf_467
leaf_467  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%T"]
// END RANK literal_443

raw_444 -> leaf_468
leaf_468  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", and also"]
// END RANK raw_444

prespace_445 -> leaf_469
leaf_469  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_445

literal_446 -> leaf_470
leaf_470  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%U"]
// END RANK literal_446

raw_447 -> leaf_471
leaf_471  [color=Gray,shape=rectangle,fontname=Inconsolata,label=","]
// END RANK raw_447

prespace_448 -> leaf_472
leaf_472  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_448

literal_449 -> leaf_473
leaf_473  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%R"]
// END RANK literal_449

raw_450 -> leaf_474
leaf_474  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" (coRo),
and"]
// END RANK raw_450

prespace_451 -> leaf_475
leaf_475  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_451

literal_452 -> leaf_476
leaf_476  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%C"]
// END RANK literal_452

raw_453 -> leaf_477
leaf_477  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_453

prose_280 -> { raw_478 prespace_479 literal_480 raw_481 prespace_482 literal_483 raw_484}
{rank=same; raw_478 prespace_479 literal_480 raw_481 prespace_482 literal_483 raw_484}

raw_478 [label="raw"]

prespace_479 [label="prespace"]

literal_480 [label="literal"]

raw_481 [label="raw"]

prespace_482 [label="prespace"]

literal_483 [label="literal"]

raw_484 [label="raw"]


// END RANK prose_280

raw_478 -> leaf_485
leaf_485  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Note our"]
// END RANK raw_478

prespace_479 -> leaf_486
leaf_486  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_479

literal_480 -> leaf_487
leaf_487  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%L"]
// END RANK literal_480

raw_481 -> leaf_488
leaf_488  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is not the C version.  Tempted to have"]
// END RANK raw_481

prespace_482 -> leaf_489
leaf_489  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_482

literal_483 -> leaf_490
leaf_490  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%λ"]
// END RANK literal_483

raw_484 -> leaf_491
leaf_491  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" directly, but
that's a bit weird and it breaks the idea that format sequences are two
bytes long.  While I don't intend to write code that would break in this
case, eh.
"]
// END RANK raw_484

prose_281 -> { prespace_492 literal_493 raw_494}
{rank=same; prespace_492 literal_493 raw_494}

prespace_492 [label="prespace"]

literal_493 [label="literal"]

raw_494 [label="raw"]


// END RANK prose_281

prespace_492 -> leaf_495
leaf_495  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_492

literal_493 -> leaf_496
leaf_496  [color=Gray,shape=rectangle,fontname=Inconsolata,label="typeformat"]
// END RANK literal_493

raw_494 -> leaf_497
leaf_497  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" returns the correctly formatted string, or throws an error.
"]
// END RANK raw_494

codeblock_282 -> leaf_498
leaf_498  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local fmt_set = {\"*\", \"C\", \"L\", \"R\", \"T\", \"U\", \"b\", \"n\", \"q\", \"s\", \"t\" }

for i, v in ipairs(fmt_set) do
   fmt_set[i] = \"%%\" .. v
end

--[[
local function next_fmt(str)
   local head, tail
   for _, v in ipairs(fmt_set) do
      head, tail = 2
end]]

function core.format_safe(str, ...)

end"]
// END RANK codeblock_282

section_253 -> { header_499 prose_500 prose_501 codeblock_502}
{rank=same; header_499 prose_500 prose_501 codeblock_502}

header_499 [label="3 : litpat(s)"]

prose_500 [label="prose"]

prose_501 [label="prose"]

codeblock_502 [label="code block 403-424"]


// END RANK section_253

header_499 -> leaf_503
leaf_503  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** litpat(s)"]
// END RANK header_499

prose_500 -> { raw_504 prespace_505 literal_506 raw_507}
{rank=same; raw_504 prespace_505 literal_506 raw_507}

raw_504 [label="raw"]

prespace_505 [label="prespace"]

literal_506 [label="literal"]

raw_507 [label="raw"]


// END RANK prose_500

raw_504 -> leaf_508
leaf_508  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK raw_504

prespace_505 -> leaf_509
leaf_509  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_505

literal_506 -> leaf_510
leaf_510  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%"]
// END RANK literal_506

raw_507 -> leaf_511
leaf_511  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" escapes all pattern characters.
"]
// END RANK raw_507

prose_501 -> { raw_512 prespace_513 literal_514 raw_515 prespace_516 literal_517 raw_518 prespace_519 literal_520 raw_521}
{rank=same; raw_512 prespace_513 literal_514 raw_515 prespace_516 literal_517 raw_518 prespace_519 literal_520 raw_521}

raw_512 [label="raw"]

prespace_513 [label="prespace"]

literal_514 [label="literal"]

raw_515 [label="raw"]

prespace_516 [label="prespace"]

literal_517 [label="literal"]

raw_518 [label="raw"]

prespace_519 [label="prespace"]

literal_520 [label="literal"]

raw_521 [label="raw"]


// END RANK prose_501

raw_512 -> leaf_522
leaf_522  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The resulting string will literally match"]
// END RANK raw_512

prespace_513 -> leaf_523
leaf_523  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_513

literal_514 -> leaf_524
leaf_524  [color=Gray,shape=rectangle,fontname=Inconsolata,label="s"]
// END RANK literal_514

raw_515 -> leaf_525
leaf_525  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" in"]
// END RANK raw_515

prespace_516 -> leaf_526
leaf_526  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_516

literal_517 -> leaf_527
leaf_527  [color=Gray,shape=rectangle,fontname=Inconsolata,label="sub"]
// END RANK literal_517

raw_518 -> leaf_528
leaf_528  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" or"]
// END RANK raw_518

prespace_519 -> leaf_529
leaf_529  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_519

literal_520 -> leaf_530
leaf_530  [color=Gray,shape=rectangle,fontname=Inconsolata,label="gsub"]
// END RANK literal_520

raw_521 -> leaf_531
leaf_531  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_521

codeblock_502 -> leaf_532
leaf_532  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local matches =
  {
    [\"^\"] = \"%^\";
    [\"$\"] = \"%$\";
    [\"(\"] = \"%(\";
    [\")\"] = \"%)\";
    [\"%\"] = \"%%\";
    [\".\"] = \"%.\";
    [\"[\"] = \"%[\";
    [\"]\"] = \"%]\";
    [\"*\"] = \"%*\";
    [\"+\"] = \"%+\";
    [\"-\"] = \"%-\";
    [\"?\"] = \"%?\";
    [\"\\0\"] = \"%z\";
  }

function core.litpat(s)
    return (s:gsub(\".\", matches))
end"]
// END RANK codeblock_502

section_254 -> { header_533 prose_534 prose_535 codeblock_536 codeblock_537}
{rank=same; header_533 prose_534 prose_535 codeblock_536 codeblock_537}

header_533 [label="3 : cleave(str, patt)"]

prose_534 [label="prose"]

prose_535 [label="prose"]

codeblock_536 [label="code block 434-444"]

codeblock_537 [label="code block 446-465"]


// END RANK section_254

header_533 -> leaf_538
leaf_538  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** cleave(str, patt)"]
// END RANK header_533

prose_534 -> { raw_539 prespace_540 literal_541 raw_542 prespace_543 literal_544 raw_545}
{rank=same; raw_539 prespace_540 literal_541 raw_542 prespace_543 literal_544 raw_545}

raw_539 [label="raw"]

prespace_540 [label="prespace"]

literal_541 [label="literal"]

raw_542 [label="raw"]

prespace_543 [label="prespace"]

literal_544 [label="literal"]

raw_545 [label="raw"]


// END RANK prose_534

raw_539 -> leaf_546
leaf_546  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Performs the common operation of returning one run of bytes up to"]
// END RANK raw_539

prespace_540 -> leaf_547
leaf_547  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_540

literal_541 -> leaf_548
leaf_548  [color=Gray,shape=rectangle,fontname=Inconsolata,label="patt"]
// END RANK literal_541

raw_542 -> leaf_549
leaf_549  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
then the rest of the bytes after"]
// END RANK raw_542

prespace_543 -> leaf_550
leaf_550  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_543

literal_544 -> leaf_551
leaf_551  [color=Gray,shape=rectangle,fontname=Inconsolata,label="patt"]
// END RANK literal_544

raw_545 -> leaf_552
leaf_552  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_545

prose_535 -> { raw_553}
{rank=same; raw_553}

raw_553 [label="raw"]


// END RANK prose_535

raw_553 -> leaf_554
leaf_554  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Can be used to build iterators, either stateful or coroutine-based.
"]
// END RANK raw_553

codeblock_536 -> leaf_555
leaf_555  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function cleave(str, pat)
   local at = find(str, pat)
   if at then
      return sub(str, 1, at - 1), sub(str, at + 1)
   else
      return nil
   end
end
core.cleave = cleave"]
// END RANK codeblock_536

codeblock_537 -> leaf_556
leaf_556  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local yield, wrap = assert(coroutine.yield), assert(coroutine.wrap)

local function _lines(str)
   if str == \"\" or not str then return nil end
   local line, rem = cleave(str, \"\\n\")
   if line then
      yield(line)
   else
      yield(str)
   end
   _lines(rem)
end

local function lines(str)
  return coroutine.wrap(function() return _lines(str) end)
end

core.lines = lines"]
// END RANK codeblock_537

section_255 -> { header_557 prose_558 codeblock_559}
{rank=same; header_557 prose_558 codeblock_559}

header_557 [label="3 : codepoints(str)"]

prose_558 [label="prose"]

codeblock_559 [label="code block 473-503"]


// END RANK section_255

header_557 -> leaf_560
leaf_560  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** codepoints(str)"]
// END RANK header_557

prose_558 -> { raw_561 prespace_562 literal_563 raw_564}
{rank=same; raw_561 prespace_562 literal_563 raw_564}

raw_561 [label="raw"]

prespace_562 [label="prespace"]

literal_563 [label="literal"]

raw_564 [label="raw"]


// END RANK prose_558

raw_561 -> leaf_565
leaf_565  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Returns an array of the utf8 codepoints in"]
// END RANK raw_561

prespace_562 -> leaf_566
leaf_566  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_562

literal_563 -> leaf_567
leaf_567  [color=Gray,shape=rectangle,fontname=Inconsolata,label="str"]
// END RANK literal_563

raw_564 -> leaf_568
leaf_568  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", incidentally validating or
rather filtering the contents into utf8 compliance.
"]
// END RANK raw_564

codeblock_559 -> leaf_569
leaf_569  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
local function split(str, at)
   return sub(str,1, at), sub(str, at + 1)
end



function core.codepoints(str)
   local utf8 = core.utf8
   local codes = {}
   -- propagate nil
   if not str then return nil end
   -- break on bad type
   assert(type(str) == \"string\", \"codepoints must be given a string\")
   while #str > 0 do
      local width, err = utf8(str)
      if width then
         local head, tail = split(str, width)
         codes[#codes + 1] = head
         str = tail
      else
         -- make sure we take a bit off anyway
         str = sub(str, -1)
         -- for debugging
         codes[codes + 1] = { err = err }
      end
   end
   return codes
end"]
// END RANK codeblock_559

section_9 -> { header_570 prose_571 section_572}
{rank=same; header_570 prose_571 section_572}

header_570 [label="2 : Errors and asserts"]

prose_571 [label="prose"]

section_572 [label="section: 509-550"]


// END RANK section_9

header_570 -> leaf_573
leaf_573  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Errors and asserts"]
// END RANK header_570

prose_571 -> { raw_574}
{rank=same; raw_574}

raw_574 [label="raw"]


// END RANK prose_571

raw_574 -> leaf_575
leaf_575  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

"]
// END RANK raw_574

section_572 -> { header_576 prose_577 prose_578 codeblock_579 codeblock_580}
{rank=same; header_576 prose_577 prose_578 codeblock_579 codeblock_580}

header_576 [label="3 : Assertfmt"]

prose_577 [label="prose"]

prose_578 [label="prose"]

codeblock_579 [label="code block 516-526"]

codeblock_580 [label="code block 528-530"]


// END RANK section_572

header_576 -> leaf_581
leaf_581  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Assertfmt"]
// END RANK header_576

prose_577 -> { raw_582}
{rank=same; raw_582}

raw_582 [label="raw"]


// END RANK prose_577

raw_582 -> leaf_583
leaf_583  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

I'll probably just globally replace assert with this over time.
"]
// END RANK raw_582

prose_578 -> { raw_584}
{rank=same; raw_584}

raw_584 [label="raw"]


// END RANK prose_578

raw_584 -> leaf_585
leaf_585  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This avoids doing concatenations and conversions on messages that we never
see in normal use.
"]
// END RANK raw_584

codeblock_579 -> leaf_586
leaf_586  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local format = string.format

function core.assertfmt(pred, msg, ...)
   if pred then
      return pred
   else
      error(format(msg, ...))
   end
end"]
// END RANK codeblock_579

codeblock_580 -> leaf_587
leaf_587  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return core"]
// END RANK codeblock_580


}
