digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 560"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-515"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 codeblock_5 section_6 section_7 section_8 section_9}
{rank=same; header_2 prose_3 prose_4 codeblock_5 section_6 section_7 section_8 section_9}

header_2 [label="1 : Core"]

prose_3 [label="prose"]

prose_4 [label="prose"]

codeblock_5 [label="code block 8-10"]

section_6 [label="section: 13-67"]

section_7 [label="section: 95-258"]

section_8 [label="section: 287-477"]

section_9 [label="section: 516-518"]


// END RANK section_1

header_2 -> leaf_10
leaf_10  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Core"]
// END RANK header_2

prose_3 -> { raw_11 prespace_12 literal_13 raw_14}
{rank=same; raw_11 prespace_12 literal_13 raw_14}

raw_11 [label="raw"]

prespace_12 [label="prespace"]

literal_13 [label="literal"]

raw_14 [label="raw"]


// END RANK prose_3

raw_11 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_11

prespace_12 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_12

literal_13 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label="core"]
// END RANK literal_13

raw_14 -> leaf_18
leaf_18  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is for tampering with the global namespace and standard libraries.
"]
// END RANK raw_14

prose_4 -> { raw_19 prespace_20 literal_21 raw_22}
{rank=same; raw_19 prespace_20 literal_21 raw_22}

raw_19 [label="raw"]

prespace_20 [label="prespace"]

literal_21 [label="literal"]

raw_22 [label="raw"]


// END RANK prose_4

raw_19 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It will eventually land in"]
// END RANK raw_19

prespace_20 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_20

literal_21 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label="pylon"]
// END RANK literal_21

raw_22 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_22

codeblock_5 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local core = {}"]
// END RANK codeblock_5

section_6 -> { header_28 prose_29 prose_30 section_31 section_32 section_33}
{rank=same; header_28 prose_29 prose_30 section_31 section_32 section_33}

header_28 [label="2 : Meta Object Protocol"]

prose_29 [label="prose"]

prose_30 [label="prose"]

section_31 [label="section: 20-43"]

section_32 [label="section: 44-67"]

section_33 [label="section: 68-94"]


// END RANK section_6

header_28 -> leaf_34
leaf_34  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Meta Object Protocol"]
// END RANK header_28

prose_29 -> { raw_35}
{rank=same; raw_35}

raw_35 [label="raw"]


// END RANK prose_29

raw_35 -> leaf_36
leaf_36  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This is where we start to design Cluster.
"]
// END RANK raw_35

prose_30 -> { raw_37 prespace_38 literal_39 raw_40 prespace_41 literal_42 raw_43 prespace_44 literal_45 raw_46 prespace_47 literal_48 raw_49 prespace_50 literal_51 raw_52 prespace_53 literal_54 raw_55}
{rank=same; raw_37 prespace_38 literal_39 raw_40 prespace_41 literal_42 raw_43 prespace_44 literal_45 raw_46 prespace_47 literal_48 raw_49 prespace_50 literal_51 raw_52 prespace_53 literal_54 raw_55}

raw_37 [label="raw"]

prespace_38 [label="prespace"]

literal_39 [label="literal"]

raw_40 [label="raw"]

prespace_41 [label="prespace"]

literal_42 [label="literal"]

raw_43 [label="raw"]

prespace_44 [label="prespace"]

literal_45 [label="literal"]

raw_46 [label="raw"]

prespace_47 [label="prespace"]

literal_48 [label="literal"]

raw_49 [label="raw"]

prespace_50 [label="prespace"]

literal_51 [label="literal"]

raw_52 [label="raw"]

prespace_53 [label="prespace"]

literal_54 [label="literal"]

raw_55 [label="raw"]


// END RANK prose_30

raw_37 -> leaf_56
leaf_56  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We shorten a few of the common Lua keywords:"]
// END RANK raw_37

prespace_38 -> leaf_57
leaf_57  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_38

literal_39 -> leaf_58
leaf_58  [color=Gray,shape=rectangle,fontname=Inconsolata,label="coro"]
// END RANK literal_39

raw_40 -> leaf_59
leaf_59  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" rather than"]
// END RANK raw_40

prespace_41 -> leaf_60
leaf_60  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_41

literal_42 -> leaf_61
leaf_61  [color=Gray,shape=rectangle,fontname=Inconsolata,label="coroutine"]
// END RANK literal_42

raw_43 -> leaf_62
leaf_62  [color=Gray,shape=rectangle,fontname=Inconsolata,label=",
and"]
// END RANK raw_43

prespace_44 -> leaf_63
leaf_63  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_44

literal_45 -> leaf_64
leaf_64  [color=Gray,shape=rectangle,fontname=Inconsolata,label="getmeta"]
// END RANK literal_45

raw_46 -> leaf_65
leaf_65  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_46

prespace_47 -> leaf_66
leaf_66  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_47

literal_48 -> leaf_67
leaf_67  [color=Gray,shape=rectangle,fontname=Inconsolata,label="setmeta"]
// END RANK literal_48

raw_49 -> leaf_68
leaf_68  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" over"]
// END RANK raw_49

prespace_50 -> leaf_69
leaf_69  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_50

literal_51 -> leaf_70
leaf_70  [color=Gray,shape=rectangle,fontname=Inconsolata,label="getmetatable"]
// END RANK literal_51

raw_52 -> leaf_71
leaf_71  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_52

prespace_53 -> leaf_72
leaf_72  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_53

literal_54 -> leaf_73
leaf_73  [color=Gray,shape=rectangle,fontname=Inconsolata,label="setmetatable"]
// END RANK literal_54

raw_55 -> leaf_74
leaf_74  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_55

section_31 -> { header_75 prose_76 codeblock_77}
{rank=same; header_75 prose_76 codeblock_77}

header_75 [label="3 : meta"]

prose_76 [label="prose"]

codeblock_77 [label="code block 25-41"]


// END RANK section_31

header_75 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** meta"]
// END RANK header_75

prose_76 -> { raw_79 prespace_80 literal_81 raw_82}
{rank=same; raw_79 prespace_80 literal_81 raw_82}

raw_79 [label="raw"]

prespace_80 [label="prespace"]

literal_81 [label="literal"]

raw_82 [label="raw"]


// END RANK prose_76

raw_79 -> leaf_83
leaf_83  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

In my code there is a repeated pattern of use that is basic enough that I'm
entering it into the global namespace as simple"]
// END RANK raw_79

prespace_80 -> leaf_84
leaf_84  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_80

literal_81 -> leaf_85
leaf_85  [color=Gray,shape=rectangle,fontname=Inconsolata,label="meta"]
// END RANK literal_81

raw_82 -> leaf_86
leaf_86  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_82

codeblock_77 -> leaf_87
leaf_87  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function core.meta(MT)
   if MT and MT.__index then
      -- inherit
      return setmetatable({}, MT)
   elseif MT then
      -- decorate
      MT.__index = MT
      return MT
   else
      -- new metatable
      local _M = {}
      _M.__index = _M
      return _M
   end
end"]
// END RANK codeblock_77

section_32 -> { header_88 prose_89 prose_90 prose_91 codeblock_92}
{rank=same; header_88 prose_89 prose_90 prose_91 codeblock_92}

header_88 [label="3 : hasmetamethod(tab, mmethod)"]

prose_89 [label="prose"]

prose_90 [label="prose"]

prose_91 [label="prose"]

codeblock_92 [label="code block 55-66"]


// END RANK section_32

header_88 -> leaf_93
leaf_93  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** hasmetamethod(tab, mmethod)"]
// END RANK header_88

prose_89 -> { raw_94 prespace_95 literal_96 raw_97}
{rank=same; raw_94 prespace_95 literal_96 raw_97}

raw_94 [label="raw"]

prespace_95 [label="prespace"]

literal_96 [label="literal"]

raw_97 [label="raw"]


// END RANK prose_89

raw_94 -> leaf_98
leaf_98  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The function of this is clear: given a table, return"]
// END RANK raw_94

prespace_95 -> leaf_99
leaf_99  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_95

literal_96 -> leaf_100
leaf_100  [color=Gray,shape=rectangle,fontname=Inconsolata,label="true"]
// END RANK literal_96

raw_97 -> leaf_101
leaf_101  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" if it can receive
a given metamethod.
"]
// END RANK raw_97

prose_90 -> { raw_102}
{rank=same; raw_102}

raw_102 [label="raw"]


// END RANK prose_90

raw_102 -> leaf_103
leaf_103  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The question is, how magical to make it. I'm going with \"slightly magical\" for
now.  You can leave off the \"__\" in checking for a metamethod.
"]
// END RANK raw_102

prose_91 -> { raw_104 prespace_105 literal_106 raw_107 prespace_108 literal_109 raw_110}
{rank=same; raw_104 prespace_105 literal_106 raw_107 prespace_108 literal_109 raw_110}

raw_104 [label="raw"]

prespace_105 [label="prespace"]

literal_106 [label="literal"]

raw_107 [label="raw"]

prespace_108 [label="prespace"]

literal_109 [label="literal"]

raw_110 [label="raw"]


// END RANK prose_91

raw_104 -> leaf_111
leaf_111  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A successful lookup returns the result, presumable truthy, otherwise"]
// END RANK raw_104

prespace_105 -> leaf_112
leaf_112  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_105

literal_106 -> leaf_113
leaf_113  [color=Gray,shape=rectangle,fontname=Inconsolata,label="false"]
// END RANK literal_106

raw_107 -> leaf_114
leaf_114  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
for a non-table argument and"]
// END RANK raw_107

prespace_108 -> leaf_115
leaf_115  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_108

literal_109 -> leaf_116
leaf_116  [color=Gray,shape=rectangle,fontname=Inconsolata,label="nil"]
// END RANK literal_109

raw_110 -> leaf_117
leaf_117  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" for a failed lookup.
"]
// END RANK raw_110

codeblock_92 -> leaf_118
leaf_118  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local sub = assert(string.sub)

function core.hasmetamethod(tab, mmethod)
   assert(type(mmethod) == \"string\", \"metamethod must be a string\")
   if sub(mmethod,1,2) == \"__\" then
      return type(tab) == \"table\" and tab[mmethod]
   else
      return type(tab) == \"table\" and tab[\"__\" ..mmethod]
   end
end"]
// END RANK codeblock_92

section_33 -> { header_119 prose_120 prose_121 prose_122 codeblock_123 prose_124}
{rank=same; header_119 prose_120 prose_121 prose_122 codeblock_123 prose_124}

header_119 [label="3 : endow(Meta)"]

prose_120 [label="prose"]

prose_121 [label="prose"]

prose_122 [label="prose"]

codeblock_123 [label="code block 78-88"]

prose_124 [label="prose"]


// END RANK section_33

header_119 -> leaf_125
leaf_125  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** endow(Meta)"]
// END RANK header_119

prose_120 -> { raw_126}
{rank=same; raw_126}

raw_126 [label="raw"]


// END RANK prose_120

raw_126 -> leaf_127
leaf_127  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Performs a thick copy of the metatable.
"]
// END RANK raw_126

prose_121 -> { raw_128}
{rank=same; raw_128}

raw_128 [label="raw"]


// END RANK prose_121

raw_128 -> leaf_129
leaf_129  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Because this will include __index and the like, this folds an level of
indirection out of inheritance.
"]
// END RANK raw_128

prose_122 -> { raw_130}
{rank=same; raw_130}

raw_130 [label="raw"]


// END RANK prose_122

raw_130 -> leaf_131
leaf_131  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I plan to use this with Nodes when I make a single base class for a complex
Grammar.
"]
// END RANK raw_130

codeblock_123 -> leaf_132
leaf_132  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local pairs = assert(pairs)

function core.endow(Meta)
   local MC = {}
   for k, v in pairs(Meta) do
      MC[k] = v
   end
   return MC
end"]
// END RANK codeblock_123

prose_124 -> { raw_133 prespace_134 literal_135 raw_136}
{rank=same; raw_133 prespace_134 literal_135 raw_136}

raw_133 [label="raw"]

prespace_134 [label="prespace"]

literal_135 [label="literal"]

raw_136 [label="raw"]


// END RANK prose_124

raw_133 -> leaf_137
leaf_137  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
That's just a shallow clone, the subtlety is that if the __index was a
self-table, it now points to"]
// END RANK raw_133

prespace_134 -> leaf_138
leaf_138  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_134

literal_135 -> leaf_139
leaf_139  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Meta"]
// END RANK literal_135

raw_136 -> leaf_140
leaf_140  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", while if Meta was created through
endowment or inheritance it's now out of the picture.

"]
// END RANK raw_136

section_7 -> { header_141 prose_142 section_143 section_144 section_145 section_146 section_147 section_148 section_149 section_150 section_151 section_152}
{rank=same; header_141 prose_142 section_143 section_144 section_145 section_146 section_147 section_148 section_149 section_150 section_151 section_152}

header_141 [label="2 : Table extensions"]

prose_142 [label="prose"]

section_143 [label="section: 97-107"]

section_144 [label="section: 108-136"]

section_145 [label="section: 137-152"]

section_146 [label="section: 153-167"]

section_147 [label="section: 168-184"]

section_148 [label="section: 185-209"]

section_149 [label="section: 210-226"]

section_150 [label="section: 227-243"]

section_151 [label="section: 244-258"]

section_152 [label="section: 259-286"]


// END RANK section_7

header_141 -> leaf_153
leaf_153  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Table extensions"]
// END RANK header_141

prose_142 -> { raw_154}
{rank=same; raw_154}

raw_154 [label="raw"]


// END RANK prose_142

raw_154 -> leaf_155
leaf_155  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_154

section_143 -> { header_156 prose_157 codeblock_158}
{rank=same; header_156 prose_157 codeblock_158}

header_156 [label="3 : pack(...)"]

prose_157 [label="prose"]

codeblock_158 [label="code block 101-105"]


// END RANK section_143

header_156 -> leaf_159
leaf_159  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** pack(...)"]
// END RANK header_156

prose_157 -> { raw_160}
{rank=same; raw_160}

raw_160 [label="raw"]


// END RANK prose_157

raw_160 -> leaf_161
leaf_161  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

A 5.2 shim we won't need forever.
"]
// END RANK raw_160

codeblock_158 -> leaf_162
leaf_162  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function core.pack(...)
   return { n = select('#', ...), ... }
end"]
// END RANK codeblock_158

section_144 -> { header_163 prose_164 codeblock_165}
{rank=same; header_163 prose_164 codeblock_165}

header_163 [label="3 : hasfield(field, tab) & hasfield.field(tab)"]

prose_164 [label="prose"]

codeblock_165 [label="code block 113-134"]


// END RANK section_144

header_163 -> leaf_166
leaf_166  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** hasfield(field, tab) & hasfield.field(tab)"]
// END RANK header_163

prose_164 -> { raw_167}
{rank=same; raw_167}

raw_167 [label="raw"]


// END RANK prose_164

raw_167 -> leaf_168
leaf_168  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


A nicety which can be used both for predication and assignment.
"]
// END RANK raw_167

codeblock_165 -> leaf_169
leaf_169  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function _hasfield(field, tab)
   if type(tab) == \"table\" and tab[field] ~= nil then
      return true, tab[field]
   else
      return false
   end
end

function _hf__index(_, field)
   return function(tab)
      return _hasfield(field, tab)
   end
end

function _hf__call(_, field, tab)
   return _hasfield(field, tab)
end

core.hasfield = setmetatable({}, { __index = _hf__index,
                                   __call  = _hf__call })"]
// END RANK codeblock_165

section_145 -> { header_170 prose_171 codeblock_172}
{rank=same; header_170 prose_171 codeblock_172}

header_170 [label="3 : clone(tab)"]

prose_171 [label="prose"]

codeblock_172 [label="code block 141-150"]


// END RANK section_145

header_170 -> leaf_173
leaf_173  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** clone(tab)"]
// END RANK header_170

prose_171 -> { raw_174}
{rank=same; raw_174}

raw_174 [label="raw"]


// END RANK prose_171

raw_174 -> leaf_175
leaf_175  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Performs a shallow clone of table, attaching metatable if available.
"]
// END RANK raw_174

codeblock_172 -> leaf_176
leaf_176  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function core.clone(tab)
   local _M = getmetatable(tab)
   local clone = _M and setmetatable({}, _M) or {}
   for k,v in pairs(tab) do
      clone[k] = v
   end
   return clone
end"]
// END RANK codeblock_172

section_146 -> { header_177 prose_178 codeblock_179}
{rank=same; header_177 prose_178 codeblock_179}

header_177 [label="3 : arrayof(tab)"]

prose_178 [label="prose"]

codeblock_179 [label="code block 157-165"]


// END RANK section_146

header_177 -> leaf_180
leaf_180  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** arrayof(tab)"]
// END RANK header_177

prose_178 -> { raw_181}
{rank=same; raw_181}

raw_181 [label="raw"]


// END RANK prose_178

raw_181 -> leaf_182
leaf_182  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Clones and returns the array portion of a table.
"]
// END RANK raw_181

codeblock_179 -> leaf_183
leaf_183  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function core.arrayof(tab)
   local arr = {}
   for i,v in ipairs(tab) do
      arr[i] = v
   end
   return arr
end"]
// END RANK codeblock_179

section_147 -> { header_184 prose_185 codeblock_186}
{rank=same; header_184 prose_185 codeblock_186}

header_184 [label="3 : collect(iter, tab)"]

prose_185 [label="prose"]

codeblock_186 [label="code block 173-182"]


// END RANK section_147

header_184 -> leaf_187
leaf_187  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** collect(iter, tab)"]
// END RANK header_184

prose_185 -> { raw_188}
{rank=same; raw_188}

raw_188 [label="raw"]


// END RANK prose_185

raw_188 -> leaf_189
leaf_189  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Collects and returns up to two tables of values, given an iterator and a
table to iterate over.
"]
// END RANK raw_188

codeblock_186 -> leaf_190
leaf_190  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function core.collect(iter, tab)
   local k_tab, v_tab = {}, {}
   for k, v in iter(tab) do
      k_tab[#k_tab + 1] = k
      v_tab[#v_tab + 1] = v
   end
   return k_tab, v_tab
end"]
// END RANK codeblock_186

section_148 -> { header_191 prose_192 codeblock_193}
{rank=same; header_191 prose_192 codeblock_193}

header_191 [label="3 : select(tab, key)"]

prose_192 [label="prose"]

codeblock_193 [label="code block 189-207"]


// END RANK section_148

header_191 -> leaf_194
leaf_194  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** select(tab, key)"]
// END RANK header_191

prose_192 -> { raw_195 prespace_196 literal_197 raw_198 prespace_199 literal_200 raw_201}
{rank=same; raw_195 prespace_196 literal_197 raw_198 prespace_199 literal_200 raw_201}

raw_195 [label="raw"]

prespace_196 [label="prespace"]

literal_197 [label="literal"]

raw_198 [label="raw"]

prespace_199 [label="prespace"]

literal_200 [label="literal"]

raw_201 [label="raw"]


// END RANK prose_192

raw_195 -> leaf_202
leaf_202  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Recursively return all"]
// END RANK raw_195

prespace_196 -> leaf_203
leaf_203  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_196

literal_197 -> leaf_204
leaf_204  [color=Gray,shape=rectangle,fontname=Inconsolata,label="v"]
// END RANK literal_197

raw_198 -> leaf_205
leaf_205  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" for"]
// END RANK raw_198

prespace_199 -> leaf_206
leaf_206  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_199

literal_200 -> leaf_207
leaf_207  [color=Gray,shape=rectangle,fontname=Inconsolata,label="key"]
// END RANK literal_200

raw_201 -> leaf_208
leaf_208  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" in all subtables of tab
"]
// END RANK raw_201

codeblock_193 -> leaf_209
leaf_209  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function _select(collection, tab, key, cycle)
   cycle = cycle or {}
   for k,v in pairs(tab) do
      if key == k then
         collection[#collection + 1] = v
      end
      if type(v) == \"table\" and not cycle[v] then
         cycle[v] = true
         collection = _select(collection, v, key, cycle)
      end
   end
   return collection
end

function core.select(tab, key)
   return _select({}, tab, key)
end"]
// END RANK codeblock_193

section_149 -> { header_210 prose_211 codeblock_212}
{rank=same; header_210 prose_211 codeblock_212}

header_210 [label="3 : reverse(tab)"]

prose_211 [label="prose"]

codeblock_212 [label="code block 214-224"]


// END RANK section_149

header_210 -> leaf_213
leaf_213  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** reverse(tab)"]
// END RANK header_210

prose_211 -> { raw_214}
{rank=same; raw_214}

raw_214 [label="raw"]


// END RANK prose_211

raw_214 -> leaf_215
leaf_215  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Reverses (only) the array portion of a table, returning a new table.
"]
// END RANK raw_214

codeblock_212 -> leaf_216
leaf_216  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function core.reverse(tab)
   local bat = {}
   for i,v in ipairs(tab) do
      bat[#tab - i + 1] = v
   end
   assert(bat[1])
   assert(bat[#tab])
   return bat
end"]
// END RANK codeblock_212

section_150 -> { header_217 prose_218 codeblock_219}
{rank=same; header_217 prose_218 codeblock_219}

header_217 [label="3 : keys(tab)"]

prose_218 [label="prose"]

codeblock_219 [label="code block 231-241"]


// END RANK section_150

header_217 -> leaf_220
leaf_220  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** keys(tab)"]
// END RANK header_217

prose_218 -> { raw_221}
{rank=same; raw_221}

raw_221 [label="raw"]


// END RANK prose_218

raw_221 -> leaf_222
leaf_222  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Returns an array of the keys of a table.
"]
// END RANK raw_221

codeblock_219 -> leaf_223
leaf_223  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function core.keys(tab)
   assert(type(tab) == \"table\", \"keys must receive a table\")
   local keys = {}
   for k, _ in pairs(tab) do
      keys[#keys + 1] = k
   end

   return keys, #keys
end"]
// END RANK codeblock_219

section_151 -> { header_224 prose_225 codeblock_226}
{rank=same; header_224 prose_225 codeblock_226}

header_224 [label="3 : values(tab)"]

prose_225 [label="prose"]

codeblock_226 [label="code block 246-256"]


// END RANK section_151

header_224 -> leaf_227
leaf_227  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** values(tab)"]
// END RANK header_224

prose_225 -> { raw_228}
{rank=same; raw_228}

raw_228 [label="raw"]


// END RANK prose_225

raw_228 -> leaf_229
leaf_229  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_228

codeblock_226 -> leaf_230
leaf_230  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function core.values(tab)
   assert(type(tab) == \"table\", \"vals must receive a table\")
   local vals = {}
   for _, v in pairs(tab) do
      vals[#vals + 1] = v
   end

   return vals, #vals
end"]
// END RANK codeblock_226

section_152 -> { header_231 prose_232 codeblock_233}
{rank=same; header_231 prose_232 codeblock_233}

header_231 [label="3 : splice(tab, index, into)"]

prose_232 [label="prose"]

codeblock_233 [label="code block 264-284"]


// END RANK section_152

header_231 -> leaf_234
leaf_234  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** splice(tab, index, into)"]
// END RANK header_231

prose_232 -> { raw_235 prespace_236 literal_237 raw_238 prespace_239 literal_240 raw_241 prespace_242 literal_243 raw_244}
{rank=same; raw_235 prespace_236 literal_237 raw_238 prespace_239 literal_240 raw_241 prespace_242 literal_243 raw_244}

raw_235 [label="raw"]

prespace_236 [label="prespace"]

literal_237 [label="literal"]

raw_238 [label="raw"]

prespace_239 [label="prespace"]

literal_240 [label="literal"]

raw_241 [label="raw"]

prespace_242 [label="prespace"]

literal_243 [label="literal"]

raw_244 [label="raw"]


// END RANK prose_232

raw_235 -> leaf_245
leaf_245  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Puts the full contents of"]
// END RANK raw_235

prespace_236 -> leaf_246
leaf_246  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_236

literal_237 -> leaf_247
leaf_247  [color=Gray,shape=rectangle,fontname=Inconsolata,label="into"]
// END RANK literal_237

raw_238 -> leaf_248
leaf_248  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" into"]
// END RANK raw_238

prespace_239 -> leaf_249
leaf_249  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_239

literal_240 -> leaf_250
leaf_250  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tab"]
// END RANK literal_240

raw_241 -> leaf_251
leaf_251  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" at"]
// END RANK raw_241

prespace_242 -> leaf_252
leaf_252  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_242

literal_243 -> leaf_253
leaf_253  [color=Gray,shape=rectangle,fontname=Inconsolata,label="index"]
// END RANK literal_243

raw_244 -> leaf_254
leaf_254  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  The argument order is
compatible with existing functions and method syntax.
"]
// END RANK raw_244

codeblock_233 -> leaf_255
leaf_255  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local insert = table.insert

local sp_er = \"table<core>.splice: \"
local _e_1 = sp_er .. \"$1 must be a table\"
local _e_2 = sp_er .. \"$2 must be a number\"
local _e_3 = sp_er .. \"$3 must be a table\"

function core.splice(tab, idx, into)
   assert(type(tab) == \"table\", _e_1)
   assert(type(idx) == \"number\", _e_2)
   assert(type(into) == \"table\", _e_3)
    idx = idx - 1
    local i = 1
    for j = 1, #into do
        insert(tab,i+idx,into[j])
        i = i + 1
    end
    return tab
end"]
// END RANK codeblock_233

section_8 -> { header_256 prose_257 codeblock_258 section_259 section_260 section_261 section_262 section_263}
{rank=same; header_256 prose_257 codeblock_258 section_259 section_260 section_261 section_262 section_263}

header_256 [label="2 : String extensions"]

prose_257 [label="prose"]

codeblock_258 [label="code block 289-294"]

section_259 [label="section: 296-345"]

section_260 [label="section: 346-406"]

section_261 [label="section: 407-436"]

section_262 [label="section: 437-477"]

section_263 [label="section: 478-515"]


// END RANK section_8

header_256 -> leaf_264
leaf_264  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** String extensions"]
// END RANK header_256

prose_257 -> { raw_265}
{rank=same; raw_265}

raw_265 [label="raw"]


// END RANK prose_257

raw_265 -> leaf_266
leaf_266  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_265

codeblock_258 -> leaf_267
leaf_267  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local byte = assert(string.byte)
local find = assert(string.find)
local sub = assert(string.sub)
local format = assert(string.format)"]
// END RANK codeblock_258

section_259 -> { header_268 prose_269 prose_270 codeblock_271}
{rank=same; header_268 prose_269 prose_270 codeblock_271}

header_268 [label="3 : utf8(char)"]

prose_269 [label="prose"]

prose_270 [label="prose"]

codeblock_271 [label="code block 304-343"]


// END RANK section_259

header_268 -> leaf_272
leaf_272  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** utf8(char)"]
// END RANK header_268

prose_269 -> { raw_273}
{rank=same; raw_273}

raw_273 [label="raw"]


// END RANK prose_269

raw_273 -> leaf_274
leaf_274  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This takes a string and validates the first character.
"]
// END RANK raw_273

prose_270 -> { raw_275}
{rank=same; raw_275}

raw_275 [label="raw"]


// END RANK prose_270

raw_275 -> leaf_276
leaf_276  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Return is either the (valid) length in bytes, or nil and an error string.
"]
// END RANK raw_275

codeblock_271 -> leaf_277
leaf_277  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function continue(c)
   return c >= 128 and c <= 191
end

function core.utf8(c)
   local byte = byte
   local head = byte(c)
   if head < 128 then
      return 1
   elseif head >= 194 and head <= 223 then
      local two = byte(c, 2)
      if continue(two) then
         return 2
      else
         return nil, \"utf8: bad second byte\"
      end
   elseif head >= 224 and head <= 239 then
      local two, three = byte(c, 2), byte(c, 3)
      if continue(two) and continue(three) then
         return 3
      else
         return nil, \"utf8: bad second and/or third byte\"
      end
   elseif head >= 240 and head <= 244 then
      local two, three, four = byte(c, 2), byte(c, 3), byte(c, 4)
      if continue(two) and continue(three) and continue(four) then
         return 4
      else
         return nil, \"utf8: bad second, third, and/or fourth byte\"
      end
   elseif continue(head) then
      return nil, \"utf8: continuation byte at head\"
   elseif head == 192 or head == 193 then
      return nil, \"utf8: 192 or 193 forbidden\"
   else -- head > 245
      return nil, \"utf8: byte > 245\"
   end
end"]
// END RANK codeblock_271

section_260 -> { header_278 prose_279 prose_280 prose_281 prose_282 prose_283 prose_284 prose_285 prose_286 prose_287 prose_288 prose_289 codeblock_290}
{rank=same; header_278 prose_279 prose_280 prose_281 prose_282 prose_283 prose_284 prose_285 prose_286 prose_287 prose_288 prose_289 codeblock_290}

header_278 [label="3 : typeformat(str, ...)"]

prose_279 [label="prose"]

prose_280 [label="prose"]

prose_281 [label="prose"]

prose_282 [label="prose"]

prose_283 [label="prose"]

prose_284 [label="prose"]

prose_285 [label="prose"]

prose_286 [label="prose"]

prose_287 [label="prose"]

prose_288 [label="prose"]

prose_289 [label="prose"]

codeblock_290 [label="code block 388-405"]


// END RANK section_260

header_278 -> leaf_291
leaf_291  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** typeformat(str, ...)"]
// END RANK header_278

prose_279 -> { raw_292}
{rank=same; raw_292}

raw_292 [label="raw"]


// END RANK prose_279

raw_292 -> leaf_293
leaf_293  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Background: I want to start using format in errors and assertions.
"]
// END RANK raw_292

prose_280 -> { raw_294}
{rank=same; raw_294}

raw_294 [label="raw"]


// END RANK prose_280

raw_294 -> leaf_295
leaf_295  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It's not as bad to use concatenation in-place for errors, since evaluating
them is a final step.  Assertions run much faster if passed only arguments.
"]
// END RANK raw_294

prose_281 -> { raw_296 prespace_297 literal_298 raw_299 prespace_300 literal_301 raw_302 prespace_303 literal_304 raw_305}
{rank=same; raw_296 prespace_297 literal_298 raw_299 prespace_300 literal_301 raw_302 prespace_303 literal_304 raw_305}

raw_296 [label="raw"]

prespace_297 [label="prespace"]

literal_298 [label="literal"]

raw_299 [label="raw"]

prespace_300 [label="prespace"]

literal_301 [label="literal"]

raw_302 [label="raw"]

prespace_303 [label="prespace"]

literal_304 [label="literal"]

raw_305 [label="raw"]


// END RANK prose_281

raw_296 -> leaf_306
leaf_306  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Lua peforms a small number of implicit conversions, mostly at the string
boundary. This is an actual feature since the language has both"]
// END RANK raw_296

prespace_297 -> leaf_307
leaf_307  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_297

literal_298 -> leaf_308
leaf_308  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".."]
// END RANK literal_298

raw_299 -> leaf_309
leaf_309  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_299

prespace_300 -> leaf_310
leaf_310  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_300

literal_301 -> leaf_311
leaf_311  [color=Gray,shape=rectangle,fontname=Inconsolata,label="+"]
// END RANK literal_301

raw_302 -> leaf_312
leaf_312  [color=Gray,shape=rectangle,fontname=Inconsolata,label=",
but it leaves a bit to be desired when it comes to"]
// END RANK raw_302

prespace_303 -> leaf_313
leaf_313  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_303

literal_304 -> leaf_314
leaf_314  [color=Gray,shape=rectangle,fontname=Inconsolata,label="string.format"]
// END RANK literal_304

raw_305 -> leaf_315
leaf_315  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_305

prose_282 -> { prespace_316 literal_317 raw_318 prespace_319 literal_320 raw_321 prespace_322 literal_323 raw_324 prespace_325 literal_326 raw_327 prespace_328 literal_329 raw_330 prespace_331 literal_332 raw_333}
{rank=same; prespace_316 literal_317 raw_318 prespace_319 literal_320 raw_321 prespace_322 literal_323 raw_324 prespace_325 literal_326 raw_327 prespace_328 literal_329 raw_330 prespace_331 literal_332 raw_333}

prespace_316 [label="prespace"]

literal_317 [label="literal"]

raw_318 [label="raw"]

prespace_319 [label="prespace"]

literal_320 [label="literal"]

raw_321 [label="raw"]

prespace_322 [label="prespace"]

literal_323 [label="literal"]

raw_324 [label="raw"]

prespace_325 [label="prespace"]

literal_326 [label="literal"]

raw_327 [label="raw"]

prespace_328 [label="prespace"]

literal_329 [label="literal"]

raw_330 [label="raw"]

prespace_331 [label="prespace"]

literal_332 [label="literal"]

raw_333 [label="raw"]


// END RANK prose_282

prespace_316 -> leaf_334
leaf_334  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_316

literal_317 -> leaf_335
leaf_335  [color=Gray,shape=rectangle,fontname=Inconsolata,label="format"]
// END RANK literal_317

raw_318 -> leaf_336
leaf_336  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" treats any"]
// END RANK raw_318

prespace_319 -> leaf_337
leaf_337  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_319

literal_320 -> leaf_338
leaf_338  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%s"]
// END RANK literal_320

raw_321 -> leaf_339
leaf_339  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" as a request to convert"]
// END RANK raw_321

prespace_322 -> leaf_340
leaf_340  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_322

literal_323 -> leaf_341
leaf_341  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tostring"]
// END RANK literal_323

raw_324 -> leaf_342
leaf_342  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", also treating"]
// END RANK raw_324

prespace_325 -> leaf_343
leaf_343  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_325

literal_326 -> leaf_344
leaf_344  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%d"]
// END RANK literal_326

raw_327 -> leaf_345
leaf_345  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" as a call to"]
// END RANK raw_327

prespace_328 -> leaf_346
leaf_346  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_328

literal_329 -> leaf_347
leaf_347  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tonumber"]
// END RANK literal_329

raw_330 -> leaf_348
leaf_348  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  The latter I will allow, I'm struggling to find
a circumstance where casting \"1\" to \"1\" through"]
// END RANK raw_330

prespace_331 -> leaf_349
leaf_349  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_331

literal_332 -> leaf_350
leaf_350  [color=Gray,shape=rectangle,fontname=Inconsolata,label="1"]
// END RANK literal_332

raw_333 -> leaf_351
leaf_351  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is dangerous.
"]
// END RANK raw_333

prose_283 -> { raw_352 prespace_353 literal_354 raw_355}
{rank=same; raw_352 prespace_353 literal_354 raw_355}

raw_352 [label="raw"]

prespace_353 [label="prespace"]

literal_354 [label="literal"]

raw_355 [label="raw"]


// END RANK prose_283

raw_352 -> leaf_356
leaf_356  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
What I want is a type-checked"]
// END RANK raw_352

prespace_353 -> leaf_357
leaf_357  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_353

literal_354 -> leaf_358
leaf_358  [color=Gray,shape=rectangle,fontname=Inconsolata,label="format"]
// END RANK literal_354

raw_355 -> leaf_359
leaf_359  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", which I can extend to use a few more
flexible strategies, depending on the context.
"]
// END RANK raw_355

prose_284 -> { raw_360}
{rank=same; raw_360}

raw_360 [label="raw"]


// END RANK prose_284

raw_360 -> leaf_361
leaf_361  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Less concerned about hostility and more about explicit coding practices. Also
don't want to undermine hardening elsewhere.
"]
// END RANK raw_360

prose_285 -> { raw_362 prespace_363 literal_364 raw_365 prespace_366 literal_367 raw_368 prespace_369 literal_370 raw_371}
{rank=same; raw_362 prespace_363 literal_364 raw_365 prespace_366 literal_367 raw_368 prespace_369 literal_370 raw_371}

raw_362 [label="raw"]

prespace_363 [label="prespace"]

literal_364 [label="literal"]

raw_365 [label="raw"]

prespace_366 [label="prespace"]

literal_367 [label="literal"]

raw_368 [label="raw"]

prespace_369 [label="prespace"]

literal_370 [label="literal"]

raw_371 [label="raw"]


// END RANK prose_285

raw_362 -> leaf_372
leaf_372  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
From the wiki, the full set of numeric parameters is"]
// END RANK raw_362

prespace_363 -> leaf_373
leaf_373  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_363

literal_364 -> leaf_374
leaf_374  [color=Gray,shape=rectangle,fontname=Inconsolata,label="{A,a,c,d,E,e,f,G,g,i,o,u,X,x}"]
// END RANK literal_364

raw_365 -> leaf_375
leaf_375  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  That leaves"]
// END RANK raw_365

prespace_366 -> leaf_376
leaf_376  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_366

literal_367 -> leaf_377
leaf_377  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%q"]
// END RANK literal_367

raw_368 -> leaf_378
leaf_378  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_368

prespace_369 -> leaf_379
leaf_379  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_369

literal_370 -> leaf_380
leaf_380  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%s"]
// END RANK literal_370

raw_371 -> leaf_381
leaf_381  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", the former does
string escaping but of course it is the Lua/C style of escaping.
"]
// END RANK raw_371

prose_286 -> { raw_382 prespace_383 literal_384 raw_385 prespace_386 literal_387 raw_388 prespace_389 literal_390 raw_391 prespace_392 literal_393 raw_394 prespace_395 literal_396 raw_397 prespace_398 literal_399 raw_400 prespace_401 literal_402 raw_403 prespace_404 literal_405 raw_406 prespace_407 literal_408 raw_409}
{rank=same; raw_382 prespace_383 literal_384 raw_385 prespace_386 literal_387 raw_388 prespace_389 literal_390 raw_391 prespace_392 literal_393 raw_394 prespace_395 literal_396 raw_397 prespace_398 literal_399 raw_400 prespace_401 literal_402 raw_403 prespace_404 literal_405 raw_406 prespace_407 literal_408 raw_409}

raw_382 [label="raw"]

prespace_383 [label="prespace"]

literal_384 [label="literal"]

raw_385 [label="raw"]

prespace_386 [label="prespace"]

literal_387 [label="literal"]

raw_388 [label="raw"]

prespace_389 [label="prespace"]

literal_390 [label="literal"]

raw_391 [label="raw"]

prespace_392 [label="prespace"]

literal_393 [label="literal"]

raw_394 [label="raw"]

prespace_395 [label="prespace"]

literal_396 [label="literal"]

raw_397 [label="raw"]

prespace_398 [label="prespace"]

literal_399 [label="literal"]

raw_400 [label="raw"]

prespace_401 [label="prespace"]

literal_402 [label="literal"]

raw_403 [label="raw"]

prespace_404 [label="prespace"]

literal_405 [label="literal"]

raw_406 [label="raw"]

prespace_407 [label="prespace"]

literal_408 [label="literal"]

raw_409 [label="raw"]


// END RANK prose_286

raw_382 -> leaf_410
leaf_410  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We add"]
// END RANK raw_382

prespace_383 -> leaf_411
leaf_411  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_383

literal_384 -> leaf_412
leaf_412  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%t"]
// END RANK literal_384

raw_385 -> leaf_413
leaf_413  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_385

prespace_386 -> leaf_414
leaf_414  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_386

literal_387 -> leaf_415
leaf_415  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%L"]
// END RANK literal_387

raw_388 -> leaf_416
leaf_416  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" (for λ), which call"]
// END RANK raw_388

prespace_389 -> leaf_417
leaf_417  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_389

literal_390 -> leaf_418
leaf_418  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tostring"]
// END RANK literal_390

raw_391 -> leaf_419
leaf_419  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" on a table or a function
respectively.  While we're being thorough,"]
// END RANK raw_391

prespace_392 -> leaf_420
leaf_420  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_392

literal_393 -> leaf_421
leaf_421  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%b"]
// END RANK literal_393

raw_394 -> leaf_422
leaf_422  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" for boolean,"]
// END RANK raw_394

prespace_395 -> leaf_423
leaf_423  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_395

literal_396 -> leaf_424
leaf_424  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%n"]
// END RANK literal_396

raw_397 -> leaf_425
leaf_425  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" for"]
// END RANK raw_397

prespace_398 -> leaf_426
leaf_426  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_398

literal_399 -> leaf_427
leaf_427  [color=Gray,shape=rectangle,fontname=Inconsolata,label="nil"]
// END RANK literal_399

raw_400 -> leaf_428
leaf_428  [color=Gray,shape=rectangle,fontname=Inconsolata,label=",
and"]
// END RANK raw_400

prespace_401 -> leaf_429
leaf_429  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_401

literal_402 -> leaf_430
leaf_430  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%*"]
// END RANK literal_402

raw_403 -> leaf_431
leaf_431  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" for the union type.  Why bother with"]
// END RANK raw_403

prespace_404 -> leaf_432
leaf_432  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_404

literal_405 -> leaf_433
leaf_433  [color=Gray,shape=rectangle,fontname=Inconsolata,label="nil"]
// END RANK literal_405

raw_406 -> leaf_434
leaf_434  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", which we can just write?
Type-checking, of course.  We treat"]
// END RANK raw_406

prespace_407 -> leaf_435
leaf_435  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_407

literal_408 -> leaf_436
leaf_436  [color=Gray,shape=rectangle,fontname=Inconsolata,label="nil"]
// END RANK literal_408

raw_409 -> leaf_437
leaf_437  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" as a full type, because in Lua, it
is.
"]
// END RANK raw_409

prose_287 -> { prespace_438 literal_439 raw_440 prespace_441 literal_442 raw_443 prespace_444 literal_445 raw_446 prespace_447 literal_448 raw_449 prespace_450 literal_451 raw_452 prespace_453 literal_454 raw_455 prespace_456 literal_457 raw_458 prespace_459 literal_460 raw_461}
{rank=same; prespace_438 literal_439 raw_440 prespace_441 literal_442 raw_443 prespace_444 literal_445 raw_446 prespace_447 literal_448 raw_449 prespace_450 literal_451 raw_452 prespace_453 literal_454 raw_455 prespace_456 literal_457 raw_458 prespace_459 literal_460 raw_461}

prespace_438 [label="prespace"]

literal_439 [label="literal"]

raw_440 [label="raw"]

prespace_441 [label="prespace"]

literal_442 [label="literal"]

raw_443 [label="raw"]

prespace_444 [label="prespace"]

literal_445 [label="literal"]

raw_446 [label="raw"]

prespace_447 [label="prespace"]

literal_448 [label="literal"]

raw_449 [label="raw"]

prespace_450 [label="prespace"]

literal_451 [label="literal"]

raw_452 [label="raw"]

prespace_453 [label="prespace"]

literal_454 [label="literal"]

raw_455 [label="raw"]

prespace_456 [label="prespace"]

literal_457 [label="literal"]

raw_458 [label="raw"]

prespace_459 [label="prespace"]

literal_460 [label="literal"]

raw_461 [label="raw"]


// END RANK prose_287

prespace_438 -> leaf_462
leaf_462  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_438

literal_439 -> leaf_463
leaf_463  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%t"]
// END RANK literal_439

raw_440 -> leaf_464
leaf_464  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" will actually accept all remaining compound types:"]
// END RANK raw_440

prespace_441 -> leaf_465
leaf_465  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_441

literal_442 -> leaf_466
leaf_466  [color=Gray,shape=rectangle,fontname=Inconsolata,label="userdata"]
// END RANK literal_442

raw_443 -> leaf_467
leaf_467  [color=Gray,shape=rectangle,fontname=Inconsolata,label=","]
// END RANK raw_443

prespace_444 -> leaf_468
leaf_468  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_444

literal_445 -> leaf_469
leaf_469  [color=Gray,shape=rectangle,fontname=Inconsolata,label="thread"]
// END RANK literal_445

raw_446 -> leaf_470
leaf_470  [color=Gray,shape=rectangle,fontname=Inconsolata,label=",
and"]
// END RANK raw_446

prespace_447 -> leaf_471
leaf_471  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_447

literal_448 -> leaf_472
leaf_472  [color=Gray,shape=rectangle,fontname=Inconsolata,label="cdata"]
// END RANK literal_448

raw_449 -> leaf_473
leaf_473  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  For only tables, we can have"]
// END RANK raw_449

prespace_450 -> leaf_474
leaf_474  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_450

literal_451 -> leaf_475
leaf_475  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%T"]
// END RANK literal_451

raw_452 -> leaf_476
leaf_476  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", and also"]
// END RANK raw_452

prespace_453 -> leaf_477
leaf_477  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_453

literal_454 -> leaf_478
leaf_478  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%U"]
// END RANK literal_454

raw_455 -> leaf_479
leaf_479  [color=Gray,shape=rectangle,fontname=Inconsolata,label=","]
// END RANK raw_455

prespace_456 -> leaf_480
leaf_480  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_456

literal_457 -> leaf_481
leaf_481  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%R"]
// END RANK literal_457

raw_458 -> leaf_482
leaf_482  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" (coRo),
and"]
// END RANK raw_458

prespace_459 -> leaf_483
leaf_483  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_459

literal_460 -> leaf_484
leaf_484  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%C"]
// END RANK literal_460

raw_461 -> leaf_485
leaf_485  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_461

prose_288 -> { raw_486 prespace_487 literal_488 raw_489 prespace_490 literal_491 raw_492}
{rank=same; raw_486 prespace_487 literal_488 raw_489 prespace_490 literal_491 raw_492}

raw_486 [label="raw"]

prespace_487 [label="prespace"]

literal_488 [label="literal"]

raw_489 [label="raw"]

prespace_490 [label="prespace"]

literal_491 [label="literal"]

raw_492 [label="raw"]


// END RANK prose_288

raw_486 -> leaf_493
leaf_493  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Note our"]
// END RANK raw_486

prespace_487 -> leaf_494
leaf_494  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_487

literal_488 -> leaf_495
leaf_495  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%L"]
// END RANK literal_488

raw_489 -> leaf_496
leaf_496  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is not the C version.  Tempted to have"]
// END RANK raw_489

prespace_490 -> leaf_497
leaf_497  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_490

literal_491 -> leaf_498
leaf_498  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%λ"]
// END RANK literal_491

raw_492 -> leaf_499
leaf_499  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" directly, but
that's a bit weird and it breaks the idea that format sequences are two
bytes long.  While I don't intend to write code that would break in this
case, eh.
"]
// END RANK raw_492

prose_289 -> { prespace_500 literal_501 raw_502}
{rank=same; prespace_500 literal_501 raw_502}

prespace_500 [label="prespace"]

literal_501 [label="literal"]

raw_502 [label="raw"]


// END RANK prose_289

prespace_500 -> leaf_503
leaf_503  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_500

literal_501 -> leaf_504
leaf_504  [color=Gray,shape=rectangle,fontname=Inconsolata,label="typeformat"]
// END RANK literal_501

raw_502 -> leaf_505
leaf_505  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" returns the correctly formatted string, or throws an error.
"]
// END RANK raw_502

codeblock_290 -> leaf_506
leaf_506  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local fmt_set = {\"*\", \"C\", \"L\", \"R\", \"T\", \"U\", \"b\", \"n\", \"q\", \"s\", \"t\" }

for i, v in ipairs(fmt_set) do
   fmt_set[i] = \"%%\" .. v
end

--[[
local function next_fmt(str)
   local head, tail
   for _, v in ipairs(fmt_set) do
      head, tail = 2
end]]

function core.format_safe(str, ...)

end"]
// END RANK codeblock_290

section_261 -> { header_507 prose_508 prose_509 codeblock_510}
{rank=same; header_507 prose_508 prose_509 codeblock_510}

header_507 [label="3 : litpat(s)"]

prose_508 [label="prose"]

prose_509 [label="prose"]

codeblock_510 [label="code block 413-434"]


// END RANK section_261

header_507 -> leaf_511
leaf_511  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** litpat(s)"]
// END RANK header_507

prose_508 -> { raw_512 prespace_513 literal_514 raw_515}
{rank=same; raw_512 prespace_513 literal_514 raw_515}

raw_512 [label="raw"]

prespace_513 [label="prespace"]

literal_514 [label="literal"]

raw_515 [label="raw"]


// END RANK prose_508

raw_512 -> leaf_516
leaf_516  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK raw_512

prespace_513 -> leaf_517
leaf_517  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_513

literal_514 -> leaf_518
leaf_518  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%"]
// END RANK literal_514

raw_515 -> leaf_519
leaf_519  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" escapes all pattern characters.
"]
// END RANK raw_515

prose_509 -> { raw_520 prespace_521 literal_522 raw_523 prespace_524 literal_525 raw_526 prespace_527 literal_528 raw_529}
{rank=same; raw_520 prespace_521 literal_522 raw_523 prespace_524 literal_525 raw_526 prespace_527 literal_528 raw_529}

raw_520 [label="raw"]

prespace_521 [label="prespace"]

literal_522 [label="literal"]

raw_523 [label="raw"]

prespace_524 [label="prespace"]

literal_525 [label="literal"]

raw_526 [label="raw"]

prespace_527 [label="prespace"]

literal_528 [label="literal"]

raw_529 [label="raw"]


// END RANK prose_509

raw_520 -> leaf_530
leaf_530  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The resulting string will literally match"]
// END RANK raw_520

prespace_521 -> leaf_531
leaf_531  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_521

literal_522 -> leaf_532
leaf_532  [color=Gray,shape=rectangle,fontname=Inconsolata,label="s"]
// END RANK literal_522

raw_523 -> leaf_533
leaf_533  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" in"]
// END RANK raw_523

prespace_524 -> leaf_534
leaf_534  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_524

literal_525 -> leaf_535
leaf_535  [color=Gray,shape=rectangle,fontname=Inconsolata,label="sub"]
// END RANK literal_525

raw_526 -> leaf_536
leaf_536  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" or"]
// END RANK raw_526

prespace_527 -> leaf_537
leaf_537  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_527

literal_528 -> leaf_538
leaf_538  [color=Gray,shape=rectangle,fontname=Inconsolata,label="gsub"]
// END RANK literal_528

raw_529 -> leaf_539
leaf_539  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_529

codeblock_510 -> leaf_540
leaf_540  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local matches =
  {
    [\"^\"] = \"%^\";
    [\"$\"] = \"%$\";
    [\"(\"] = \"%(\";
    [\")\"] = \"%)\";
    [\"%\"] = \"%%\";
    [\".\"] = \"%.\";
    [\"[\"] = \"%[\";
    [\"]\"] = \"%]\";
    [\"*\"] = \"%*\";
    [\"+\"] = \"%+\";
    [\"-\"] = \"%-\";
    [\"?\"] = \"%?\";
    [\"\\0\"] = \"%z\";
  }

function core.litpat(s)
    return (s:gsub(\".\", matches))
end"]
// END RANK codeblock_510

section_262 -> { header_541 prose_542 prose_543 codeblock_544 codeblock_545}
{rank=same; header_541 prose_542 prose_543 codeblock_544 codeblock_545}

header_541 [label="3 : cleave(str, patt)"]

prose_542 [label="prose"]

prose_543 [label="prose"]

codeblock_544 [label="code block 444-454"]

codeblock_545 [label="code block 456-475"]


// END RANK section_262

header_541 -> leaf_546
leaf_546  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** cleave(str, patt)"]
// END RANK header_541

prose_542 -> { raw_547 prespace_548 literal_549 raw_550 prespace_551 literal_552 raw_553}
{rank=same; raw_547 prespace_548 literal_549 raw_550 prespace_551 literal_552 raw_553}

raw_547 [label="raw"]

prespace_548 [label="prespace"]

literal_549 [label="literal"]

raw_550 [label="raw"]

prespace_551 [label="prespace"]

literal_552 [label="literal"]

raw_553 [label="raw"]


// END RANK prose_542

raw_547 -> leaf_554
leaf_554  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Performs the common operation of returning one run of bytes up to"]
// END RANK raw_547

prespace_548 -> leaf_555
leaf_555  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_548

literal_549 -> leaf_556
leaf_556  [color=Gray,shape=rectangle,fontname=Inconsolata,label="patt"]
// END RANK literal_549

raw_550 -> leaf_557
leaf_557  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
then the rest of the bytes after"]
// END RANK raw_550

prespace_551 -> leaf_558
leaf_558  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_551

literal_552 -> leaf_559
leaf_559  [color=Gray,shape=rectangle,fontname=Inconsolata,label="patt"]
// END RANK literal_552

raw_553 -> leaf_560
leaf_560  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_553

prose_543 -> { raw_561}
{rank=same; raw_561}

raw_561 [label="raw"]


// END RANK prose_543

raw_561 -> leaf_562
leaf_562  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Can be used to build iterators, either stateful or coroutine-based.
"]
// END RANK raw_561

codeblock_544 -> leaf_563
leaf_563  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function cleave(str, pat)
   local at = find(str, pat)
   if at then
      return sub(str, 1, at - 1), sub(str, at + 1)
   else
      return nil
   end
end
core.cleave = cleave"]
// END RANK codeblock_544

codeblock_545 -> leaf_564
leaf_564  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local yield, wrap = assert(coroutine.yield), assert(coroutine.wrap)

local function _lines(str)
   if str == \"\" or not str then return nil end
   local line, rem = cleave(str, \"\\n\")
   if line then
      yield(line)
   else
      yield(str)
   end
   _lines(rem)
end

local function lines(str)
  return coroutine.wrap(function() return _lines(str) end)
end

core.lines = lines"]
// END RANK codeblock_545

section_263 -> { header_565 prose_566 codeblock_567}
{rank=same; header_565 prose_566 codeblock_567}

header_565 [label="3 : codepoints(str)"]

prose_566 [label="prose"]

codeblock_567 [label="code block 483-513"]


// END RANK section_263

header_565 -> leaf_568
leaf_568  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** codepoints(str)"]
// END RANK header_565

prose_566 -> { raw_569 prespace_570 literal_571 raw_572}
{rank=same; raw_569 prespace_570 literal_571 raw_572}

raw_569 [label="raw"]

prespace_570 [label="prespace"]

literal_571 [label="literal"]

raw_572 [label="raw"]


// END RANK prose_566

raw_569 -> leaf_573
leaf_573  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Returns an array of the utf8 codepoints in"]
// END RANK raw_569

prespace_570 -> leaf_574
leaf_574  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_570

literal_571 -> leaf_575
leaf_575  [color=Gray,shape=rectangle,fontname=Inconsolata,label="str"]
// END RANK literal_571

raw_572 -> leaf_576
leaf_576  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", incidentally validating or
rather filtering the contents into utf8 compliance.
"]
// END RANK raw_572

codeblock_567 -> leaf_577
leaf_577  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
local function split(str, at)
   return sub(str,1, at), sub(str, at + 1)
end



function core.codepoints(str)
   local utf8 = core.utf8
   local codes = {}
   -- propagate nil
   if not str then return nil end
   -- break on bad type
   assert(type(str) == \"string\", \"codepoints must be given a string\")
   while #str > 0 do
      local width, err = utf8(str)
      if width then
         local head, tail = split(str, width)
         codes[#codes + 1] = head
         str = tail
      else
         -- make sure we take a bit off anyway
         str = sub(str, -1)
         -- for debugging
         codes[codes + 1] = { err = err }
      end
   end
   return codes
end"]
// END RANK codeblock_567

section_9 -> { header_578 prose_579 section_580}
{rank=same; header_578 prose_579 section_580}

header_578 [label="2 : Errors and asserts"]

prose_579 [label="prose"]

section_580 [label="section: 519-560"]


// END RANK section_9

header_578 -> leaf_581
leaf_581  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Errors and asserts"]
// END RANK header_578

prose_579 -> { raw_582}
{rank=same; raw_582}

raw_582 [label="raw"]


// END RANK prose_579

raw_582 -> leaf_583
leaf_583  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

"]
// END RANK raw_582

section_580 -> { header_584 prose_585 prose_586 codeblock_587 codeblock_588}
{rank=same; header_584 prose_585 prose_586 codeblock_587 codeblock_588}

header_584 [label="3 : Assertfmt"]

prose_585 [label="prose"]

prose_586 [label="prose"]

codeblock_587 [label="code block 526-536"]

codeblock_588 [label="code block 538-540"]


// END RANK section_580

header_584 -> leaf_589
leaf_589  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Assertfmt"]
// END RANK header_584

prose_585 -> { raw_590}
{rank=same; raw_590}

raw_590 [label="raw"]


// END RANK prose_585

raw_590 -> leaf_591
leaf_591  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

I'll probably just globally replace assert with this over time.
"]
// END RANK raw_590

prose_586 -> { raw_592}
{rank=same; raw_592}

raw_592 [label="raw"]


// END RANK prose_586

raw_592 -> leaf_593
leaf_593  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This avoids doing concatenations and conversions on messages that we never
see in normal use.
"]
// END RANK raw_592

codeblock_587 -> leaf_594
leaf_594  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local format = string.format

function core.assertfmt(pred, msg, ...)
   if pred then
      return pred
   else
      error(format(msg, ...))
   end
end"]
// END RANK codeblock_587

codeblock_588 -> leaf_595
leaf_595  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return core"]
// END RANK codeblock_588


}
