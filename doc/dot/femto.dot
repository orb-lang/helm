digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 338"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-209"]


// END RANK doc_0

section_1 -> { header_2 prose_3 section_4 section_5 section_6 section_7}
{rank=same; header_2 prose_3 section_4 section_5 section_6 section_7}

header_2 [label="1 : Femto"]

prose_3 [label="prose"]

section_4 [label="section: 6-54"]

section_5 [label="section: 61-173"]

section_6 [label="section: 187-209"]

section_7 [label="section: 210-215"]


// END RANK section_1

header_2 -> leaf_8
leaf_8  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*  Femto"]
// END RANK header_2

prose_3 -> { raw_9 prespace_10 literal_11 raw_12}
{rank=same; raw_9 prespace_10 literal_11 raw_12}

raw_9 [label="raw"]

prespace_10 [label="prespace"]

literal_11 [label="literal"]

raw_12 [label="raw"]


// END RANK prose_3

raw_9 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_9

prespace_10 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_10

literal_11 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label="femto"]
// END RANK literal_11

raw_12 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is our repl.
"]
// END RANK raw_12

section_4 -> { header_17 prose_18 section_19 section_20}
{rank=same; header_17 prose_18 section_19 section_20}

header_17 [label="2 : includes"]

prose_18 [label="prose"]

section_19 [label="section: 9-54"]

section_20 [label="section: 55-60"]


// END RANK section_4

header_17 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**  includes"]
// END RANK header_17

prose_18 -> { raw_22}
{rank=same; raw_22}

raw_22 [label="raw"]


// END RANK prose_18

raw_22 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

"]
// END RANK raw_22

section_19 -> { header_24 prose_25 prose_26 codeblock_27 prose_28 codeblock_29}
{rank=same; header_24 prose_25 prose_26 codeblock_27 prose_28 codeblock_29}

header_24 [label="4 : Intercept _G"]

prose_25 [label="prose"]

prose_26 [label="prose"]

codeblock_27 [label="code block 17-22"]

prose_28 [label="prose"]

codeblock_29 [label="code block 26-52"]


// END RANK section_19

header_24 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Intercept _G"]
// END RANK header_24

prose_25 -> { raw_31 prespace_32 literal_33 raw_34 prespace_35 literal_36 raw_37}
{rank=same; raw_31 prespace_32 literal_33 raw_34 prespace_35 literal_36 raw_37}

raw_31 [label="raw"]

prespace_32 [label="prespace"]

literal_33 [label="literal"]

raw_34 [label="raw"]

prespace_35 [label="prespace"]

literal_36 [label="literal"]

raw_37 [label="raw"]


// END RANK prose_25

raw_31 -> leaf_38
leaf_38  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

We don't want to put"]
// END RANK raw_31

prespace_32 -> leaf_39
leaf_39  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_32

literal_33 -> leaf_40
leaf_40  [color=Gray,shape=rectangle,fontname=Inconsolata,label="femto"]
// END RANK literal_33

raw_34 -> leaf_41
leaf_41  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" into the environment of the codebase under
examination, so we replace the global environment with a table which falls
back to"]
// END RANK raw_34

prespace_35 -> leaf_42
leaf_42  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_35

literal_36 -> leaf_43
leaf_43  [color=Gray,shape=rectangle,fontname=Inconsolata,label="_G"]
// END RANK literal_36

raw_37 -> leaf_44
leaf_44  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_37

prose_26 -> { raw_45}
{rank=same; raw_45}

raw_45 [label="raw"]


// END RANK prose_26

raw_45 -> leaf_46
leaf_46  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Man.  I really like having first-class environments.
"]
// END RANK raw_45

codeblock_27 -> leaf_47
leaf_47  [color=Gray,shape=rectangle,fontname=Inconsolata,label="__G = setmetatable({}, {__index = _G})

setfenv(0, __G)
local function _femto(_ENV)"]
// END RANK codeblock_27

prose_28 -> { raw_48}
{rank=same; raw_48}

raw_48 [label="raw"]


// END RANK prose_28

raw_48 -> leaf_49
leaf_49  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
No sense wasting a level of indent on a wrapper imho
"]
// END RANK raw_48

codeblock_29 -> leaf_50
leaf_50  [color=Gray,shape=rectangle,fontname=Inconsolata,label="setfenv(1, _ENV)

L    = require \"lpeg\"
lfs  = require \"lfs\"
ffi  = require \"ffi\"
bit  = require \"bit\"
uv   = require \"luv\"
utf8 = require \"lua-utf8\"

-- replace string lib with utf8 equivalents
for k,v in pairs(utf8) do
   if string[k] then
      string[k] = v
   end
end

jit.vmdef = require \"vmdef\"
jit.p = require \"ljprof\"

--apparently this is a hidden, undocumented LuaJIT thing?
require \"table.clear\"

-- sqlayer uses this monkey patch:
ffi.reflect = require \"reflect\"
sql = require \"sqlayer\""]
// END RANK codeblock_29

section_20 -> { header_51 prose_52}
{rank=same; header_51 prose_52}

header_51 [label="3 : Djikstra Insertion Point"]

prose_52 [label="prose"]


// END RANK section_20

header_51 -> leaf_53
leaf_53  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Djikstra Insertion Point"]
// END RANK header_51

prose_52 -> { raw_54}
{rank=same; raw_54}

raw_54 [label="raw"]


// END RANK prose_52

raw_54 -> leaf_55
leaf_55  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Although we're not doing so yet, this is where we will set up Djikstra mode
for participating code.  We then push that up through the layers, and it lands
as close to C level as practical.
"]
// END RANK raw_54

section_5 -> { header_56 prose_57 prose_58 codeblock_59 prose_60 codeblock_61 section_62 section_63}
{rank=same; header_56 prose_57 prose_58 codeblock_59 prose_60 codeblock_61 section_62 section_63}

header_56 [label="2 : core"]

prose_57 [label="prose"]

prose_58 [label="prose"]

codeblock_59 [label="code block 68-94"]

prose_60 [label="prose"]

codeblock_61 [label="code block 98-103"]

section_62 [label="section: 105-173"]

section_63 [label="section: 174-186"]


// END RANK section_5

header_56 -> leaf_64
leaf_64  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** core"]
// END RANK header_56

prose_57 -> { raw_65 prespace_66 literal_67 raw_68}
{rank=same; raw_65 prespace_66 literal_67 raw_68}

raw_65 [label="raw"]

prespace_66 [label="prespace"]

literal_67 [label="literal"]

raw_68 [label="raw"]


// END RANK prose_57

raw_65 -> leaf_69
leaf_69  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The"]
// END RANK raw_65

prespace_66 -> leaf_70
leaf_70  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_66

literal_67 -> leaf_71
leaf_71  [color=Gray,shape=rectangle,fontname=Inconsolata,label="core"]
// END RANK literal_67

raw_68 -> leaf_72
leaf_72  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" library is shaping up as a place to keep alterations to the global
namespace and standard library.
"]
// END RANK raw_68

prose_58 -> { raw_73 prespace_74 literal_75 raw_76 prespace_77 literal_78 raw_79}
{rank=same; raw_73 prespace_74 literal_75 raw_76 prespace_77 literal_78 raw_79}

raw_73 [label="raw"]

prespace_74 [label="prespace"]

literal_75 [label="literal"]

raw_76 [label="raw"]

prespace_77 [label="prespace"]

literal_78 [label="literal"]

raw_79 [label="raw"]


// END RANK prose_58

raw_73 -> leaf_80
leaf_80  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This prelude belongs in"]
// END RANK raw_73

prespace_74 -> leaf_81
leaf_81  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_74

literal_75 -> leaf_82
leaf_82  [color=Gray,shape=rectangle,fontname=Inconsolata,label="pylon"]
// END RANK literal_75

raw_76 -> leaf_83
leaf_83  [color=Gray,shape=rectangle,fontname=Inconsolata,label="; it, and"]
// END RANK raw_76

prespace_77 -> leaf_84
leaf_84  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_77

literal_78 -> leaf_85
leaf_85  [color=Gray,shape=rectangle,fontname=Inconsolata,label="core"]
// END RANK literal_78

raw_79 -> leaf_86
leaf_86  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", will eventually end up there.
"]
// END RANK raw_79

codeblock_59 -> leaf_87
leaf_87  [color=Gray,shape=rectangle,fontname=Inconsolata,label="core = require \"core\"
string.cleave, string.litpat = core.cleave, core.litpat
string.utf8 = core.utf8 -- deprecated
string.codepoints = core.codepoints
string.lines = core.lines
table.splice = core.splice
table.clone = core.clone
table.arrayof = core.arrayof
table.collect = core.collect
table.select = core.select
table.reverse = core.reverse
table.hasfield = core.hasfield
table.keys = core.keys

table.pack = rawget(table, \"pack\") and table.pack or core.pack
table.unpack = rawget(table, \"unpack\") and table.unpack or unpack

meta = core.meta
getmeta, setmeta = getmetatable, setmetatable
hasmetamethod, hasfield = core.hasmetamethod, core.hasfield
readOnly = core.readOnly
coro = coroutine
--assert = core.assertfmt

local concat = assert(table.concat)"]
// END RANK codeblock_59

prose_60 -> { raw_88}
{rank=same; raw_88}

raw_88 [label="raw"]


// END RANK prose_60

raw_88 -> leaf_89
leaf_89  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Primitives for terminal manipulation.
"]
// END RANK raw_88

codeblock_61 -> leaf_90
leaf_90  [color=Gray,shape=rectangle,fontname=Inconsolata,label="a = require \"anterm\"
local repr = require \"repr\"
--watch = require \"watcher\"
"]
// END RANK codeblock_61

section_62 -> { header_91 prose_92 prose_93 codeblock_94 prose_95 prose_96 codeblock_97 prose_98 codeblock_99 codeblock_100}
{rank=same; header_91 prose_92 prose_93 codeblock_94 prose_95 prose_96 codeblock_97 prose_98 codeblock_99 codeblock_100}

header_91 [label="3 : Logging"]

prose_92 [label="prose"]

prose_93 [label="prose"]

codeblock_94 [label="code block 113-130"]

prose_95 [label="prose"]

prose_96 [label="prose"]

codeblock_97 [label="code block 135-152"]

prose_98 [label="prose"]

codeblock_99 [label="code block 156-160"]

codeblock_100 [label="code block 162-171"]


// END RANK section_62

header_91 -> leaf_101
leaf_101  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Logging"]
// END RANK header_91

prose_92 -> { raw_102}
{rank=same; raw_102}

raw_102 [label="raw"]


// END RANK prose_92

raw_102 -> leaf_103
leaf_103  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

I'm making the crudest possible logger here.
"]
// END RANK raw_102

prose_93 -> { raw_104}
{rank=same; raw_104}

raw_104 [label="raw"]


// END RANK prose_93

raw_104 -> leaf_105
leaf_105  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This thing sucks tbh, don't think I'm using it and should probably delete.
"]
// END RANK raw_104

codeblock_94 -> leaf_106
leaf_106  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local _log = {}
_log.vals = {}
local format = assert(string.format )
local function __logger(_, fmtstr, ...)
   _log[#_log + 1] = format(fmtstr, ...)
   _log.vals[#_log.vals + 1] = table.pack(...)
end

log = setmeta(_log, {__call = __logger})

log.cache = {}
function cache(a,b,c)
   local tuck = {a,b,c}
   log.cache[#log.cache + 1] = tuck
end
"]
// END RANK codeblock_94

prose_95 -> { raw_107}
{rank=same; raw_107}

raw_107 [label="raw"]


// END RANK prose_95

raw_107 -> leaf_108
leaf_108  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This boot sequence builds on Tim Caswell and the Luvit Author's repl example.
"]
// END RANK raw_107

prose_96 -> { raw_109}
{rank=same; raw_109}

raw_109 [label="raw"]


// END RANK prose_96

raw_109 -> leaf_110
leaf_110  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Couple pieces I'm not using but should:"]
// END RANK raw_109

codeblock_97 -> leaf_111
leaf_111  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local usecolors
stdout = \"\"

if uv.guess_handle(1) == \"tty\" then
  stdout = uv.new_tty(1, false)
  usecolors = true
else
  stdout = uv.new_pipe(false)
  uv.pipe_open(utils.stdout, 1)
  usecolors = false
end

if not usecolors then
   ts = tostring
   -- #todo make this properly black and white ts
end"]
// END RANK codeblock_97

prose_98 -> { raw_112 prespace_113 literal_114 raw_115 prespace_116 literal_117 raw_118}
{rank=same; raw_112 prespace_113 literal_114 raw_115 prespace_116 literal_117 raw_118}

raw_112 [label="raw"]

prespace_113 [label="prespace"]

literal_114 [label="literal"]

raw_115 [label="raw"]

prespace_116 [label="prespace"]

literal_117 [label="literal"]

raw_118 [label="raw"]


// END RANK prose_98

raw_112 -> leaf_119
leaf_119  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Not-blocking"]
// END RANK raw_112

prespace_113 -> leaf_120
leaf_120  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_113

literal_114 -> leaf_121
leaf_121  [color=Gray,shape=rectangle,fontname=Inconsolata,label="write"]
// END RANK literal_114

raw_115 -> leaf_122
leaf_122  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_115

prespace_116 -> leaf_123
leaf_123  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_116

literal_117 -> leaf_124
leaf_124  [color=Gray,shape=rectangle,fontname=Inconsolata,label="print"]
// END RANK literal_117

raw_118 -> leaf_125
leaf_125  [color=Gray,shape=rectangle,fontname=Inconsolata,label=":
"]
// END RANK raw_118

codeblock_99 -> leaf_126
leaf_126  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function write(str)
   uv.write(stdout, str)
end"]
// END RANK codeblock_99

codeblock_100 -> leaf_127
leaf_127  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function print(...)
  local n = select('#', ...)
  local arguments = {...}
  for i = 1, n do
    arguments[i] = tostring(arguments[i])
  end
  uv.write(stdout, concat(arguments, \"\\t\") .. \"\\n\")
end"]
// END RANK codeblock_100

section_63 -> { header_128 prose_129 codeblock_130}
{rank=same; header_128 prose_129 codeblock_130}

header_128 [label="3 : tty setup"]

prose_129 [label="prose"]

codeblock_130 [label="code block 176-184"]


// END RANK section_63

header_128 -> leaf_131
leaf_131  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** tty setup"]
// END RANK header_128

prose_129 -> { raw_132}
{rank=same; raw_132}

raw_132 [label="raw"]


// END RANK prose_129

raw_132 -> leaf_133
leaf_133  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_132

codeblock_130 -> leaf_134
leaf_134  [color=Gray,shape=rectangle,fontname=Inconsolata,label="if uv.guess_handle(0) ~= \"tty\" or
   uv.guess_handle(1) ~= \"tty\" then
  -- Entry point for other consumers!
  error \"stdio must be a tty\"
end

local stdin = uv.new_tty(0, true)"]
// END RANK codeblock_130

section_6 -> { header_135 prose_136 codeblock_137}
{rank=same; header_135 prose_136 codeblock_137}

header_135 [label="2 : Modeselektor"]

prose_136 [label="prose"]

codeblock_137 [label="code block 190-207"]


// END RANK section_6

header_135 -> leaf_138
leaf_138  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Modeselektor"]
// END RANK header_135

prose_136 -> { raw_139}
{rank=same; raw_139}

raw_139 [label="raw"]


// END RANK prose_136

raw_139 -> leaf_140
leaf_140  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

"]
// END RANK raw_139

codeblock_137 -> leaf_141
leaf_141  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
-- Get window size and set up an idler to keep it refreshed

local max_col, max_row = uv.tty_get_winsize(stdin)

modeS = require \"modeselektor\" (max_col, max_row)

local timer = uv.new_timer()
uv.timer_start(timer, 500, 500, function()
   max_col, max_row = uv.tty_get_winsize(stdin)
   if max_col ~= modeS.max_col or max_row ~= modeS.max_row then
      -- reflow screen.
      modeS.max_col, modeS.max_row = max_col, max_row
      modeS:reflow()
   end
end)"]
// END RANK codeblock_137

section_7 -> { header_142 prose_143 section_144}
{rank=same; header_142 prose_143 section_144}

header_142 [label="2 : Reader"]

prose_143 [label="prose"]

section_144 [label="section: 216-327"]


// END RANK section_7

header_142 -> leaf_145
leaf_145  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Reader"]
// END RANK header_142

prose_143 -> { raw_146 prespace_147 literal_148 raw_149 prespace_150 literal_151 raw_152}
{rank=same; raw_146 prespace_147 literal_148 raw_149 prespace_150 literal_151 raw_152}

raw_146 [label="raw"]

prespace_147 [label="prespace"]

literal_148 [label="literal"]

raw_149 [label="raw"]

prespace_150 [label="prespace"]

literal_151 [label="literal"]

raw_152 [label="raw"]


// END RANK prose_143

raw_146 -> leaf_153
leaf_153  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The reader takes a stream of data from"]
// END RANK raw_146

prespace_147 -> leaf_154
leaf_154  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_147

literal_148 -> leaf_155
leaf_155  [color=Gray,shape=rectangle,fontname=Inconsolata,label="stdin"]
// END RANK literal_148

raw_149 -> leaf_156
leaf_156  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", asynchronously, and
processes it into tokens, which stream to the"]
// END RANK raw_149

prespace_150 -> leaf_157
leaf_157  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_150

literal_151 -> leaf_158
leaf_158  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_151

raw_152 -> leaf_159
leaf_159  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".

"]
// END RANK raw_152

section_144 -> { header_160 prose_161 codeblock_162 codeblock_163 section_164}
{rank=same; header_160 prose_161 codeblock_162 codeblock_163 section_164}

header_160 [label="3 : process_escapes(seq)"]

prose_161 [label="prose"]

codeblock_162 [label="code block 218-276"]

codeblock_163 [label="code block 278-326"]

section_164 [label="section: 328-338"]


// END RANK section_144

header_160 -> leaf_165
leaf_165  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** process_escapes(seq)"]
// END RANK header_160

prose_161 -> { raw_166}
{rank=same; raw_166}

raw_166 [label="raw"]


// END RANK prose_161

raw_166 -> leaf_167
leaf_167  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_166

codeblock_162 -> leaf_168
leaf_168  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local byte, sub, codepoints = string.byte, string.sub, string.codepoints
local m_parse, is_mouse = a.mouse.parse_fast, a.mouse.ismousemove
local navigation, is_nav = a.navigation, a.is_nav

local function process_escapes(seq)
   if is_nav(seq) then
      return modeS(\"NAV\", navigation[seq])
   end
   if is_mouse(seq) then
      local m = m_parse(seq)
      return modeS(\"MOUSE\", m)
   elseif #seq == 2 and byte(sub(seq,2,2)) < 128 then
      -- Meta
      local key = \"M-\" .. sub(seq,2,2)
      return modeS(\"ALT\", key)
   else
      return modeS(\"NYI\", seq)
   end
end

local function onseq(err,seq)
   if err then error(err) end
   local head = byte(seq)
   -- ^Q hard coded as quit, for now
   if head == 17 then
      uv.tty_set_mode(stdin, 1)
      write(a.mouse.track(false))
      uv.stop()
      return 0
   end
   -- Escape sequences
   if head == 27 then
      return process_escapes(seq)
   end
   -- Control sequences
   if head <= 31 and not navigation[seq] then
      local ctrl = \"^\" .. string.char(head + 64)
      return modeS(\"CTRL\", ctrl)
   elseif navigation[seq] then
      return modeS(\"NAV\", navigation[seq])
   end
   -- Printables
   if head > 31 and head < 127 then
      if #seq > 1 then
         -- break it up and feed it
         local points = codepoints(seq)
         for _, pt in ipairs(points) do
            onseq(nil, pt)
         end
      else
         return modeS(\"ASCII\", seq)
      end
   else
      -- wchars go here
      return modeS(\"NYI\", seq)
   end
end"]
// END RANK codeblock_162

codeblock_163 -> leaf_169
leaf_169  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
-- read main programme
if arg[1] then
  local prog = table.remove(arg, 1)
  local chunk, err = loadfile(prog)
  if chunk then
     setfenv(chunk, _G)()
  else
     error (\"couldn't load \" .. prog .. \"\\n\" .. err)
  end
end




-- Get names for as many values as possible
-- into the colorizer
repr.allNames(_G)

-- assuming we survived that, set up our repling environment:

-- raw mode
uv.tty_set_mode(stdin, 2)

-- mouse mode
write(a.mouse.track(true))
uv.read_start(stdin, onseq)

-- #todo This should start with a read which saves the cursor location.
-- This switches screens and does a wipe,
-- then puts the cursor at 1,1.
write \"\\x1b[?47h\\x1b[2J\\x1b[H\"

-- paint screen
modeS:paint()

-- main loop
local retcode =  uv.run('default')
-- Restore main screen
print '\\x1b[?47l'

if retcode ~= true then
   error(retcode)
end

print(\"kthxbye\")
return retcode"]
// END RANK codeblock_163

section_164 -> { header_170 prose_171 codeblock_172}
{rank=same; header_170 prose_171 codeblock_172}

header_170 [label="4 : Launch femto"]

prose_171 [label="prose"]

codeblock_172 [label="code block 332-337"]


// END RANK section_164

header_170 -> leaf_173
leaf_173  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Launch femto"]
// END RANK header_170

prose_171 -> { raw_174}
{rank=same; raw_174}

raw_174 [label="raw"]


// END RANK prose_171

raw_174 -> leaf_175
leaf_175  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Here we assign our function a wrapper and get down to business
"]
// END RANK raw_174

codeblock_172 -> leaf_176
leaf_176  [color=Gray,shape=rectangle,fontname=Inconsolata,label="end -- of wrapper
local retcode = _femto(__G)

return retcode"]
// END RANK codeblock_172


}
