digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 273"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-180"]


// END RANK doc_0

section_1 -> { header_2 prose_3 section_4 section_5 section_6 section_7}
{rank=same; header_2 prose_3 section_4 section_5 section_6 section_7}

header_2 [label="1 : Femto"]

prose_3 [label="prose"]

section_4 [label="section: 6-33"]

section_5 [label="section: 40-154"]

section_6 [label="section: 168-180"]

section_7 [label="section: 181-186"]


// END RANK section_1

header_2 -> leaf_8
leaf_8  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*  Femto"]
// END RANK header_2

prose_3 -> { raw_9}
{rank=same; raw_9}

raw_9 [label="raw"]


// END RANK prose_3

raw_9 -> leaf_10
leaf_10  [color=Gray,shape=rectangle,fontname=Inconsolata,label="



"]
// END RANK raw_9

section_4 -> { header_11 prose_12 codeblock_13 section_14}
{rank=same; header_11 prose_12 codeblock_13 section_14}

header_11 [label="2 : includes"]

prose_12 [label="prose"]

codeblock_13 [label="code block 10-31"]

section_14 [label="section: 34-39"]


// END RANK section_4

header_11 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**  includes"]
// END RANK header_11

prose_12 -> { raw_16}
{rank=same; raw_16}

raw_16 [label="raw"]


// END RANK prose_12

raw_16 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This
"]
// END RANK raw_16

codeblock_13 -> leaf_18
leaf_18  [color=Gray,shape=rectangle,fontname=Inconsolata,label="L    = require \"lpeg\"
lfs  = require \"lfs\"
ffi  = require \"ffi\"
bit  = require \"bit\"
uv   = require \"luv\"
utf8 = require \"lua-utf8\"

-- replace string lib with utf8 equivalents
for k,v in pairs(utf8) do
   if string[k] then
      string[k] = v
   end
end

jit.vmdef = require \"vmdef\"
jit.p = require \"ljprof\"

-- sqlayer uses this monkey patch:
ffi.reflect = require \"reflect\"
sql = require \"sqlayer\""]
// END RANK codeblock_13

section_14 -> { header_19 prose_20}
{rank=same; header_19 prose_20}

header_19 [label="3 : Djikstra Insertion Point"]

prose_20 [label="prose"]


// END RANK section_14

header_19 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Djikstra Insertion Point"]
// END RANK header_19

prose_20 -> { raw_22}
{rank=same; raw_22}

raw_22 [label="raw"]


// END RANK prose_20

raw_22 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Although we're not doing so yet, this is where we will set up Djikstra mode
for participating code.  We then push that up through the layers, and it lands
as close to C level as practical.
"]
// END RANK raw_22

section_5 -> { header_24 prose_25 prose_26 codeblock_27 prose_28 prose_29 codeblock_30 section_31 section_32}
{rank=same; header_24 prose_25 prose_26 codeblock_27 prose_28 prose_29 codeblock_30 section_31 section_32}

header_24 [label="2 : core"]

prose_25 [label="prose"]

prose_26 [label="prose"]

codeblock_27 [label="code block 47-72"]

prose_28 [label="prose"]

prose_29 [label="prose"]

codeblock_30 [label="code block 79-86"]

section_31 [label="section: 88-154"]

section_32 [label="section: 155-167"]


// END RANK section_5

header_24 -> leaf_33
leaf_33  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** core"]
// END RANK header_24

prose_25 -> { raw_34 prespace_35 literal_36 raw_37}
{rank=same; raw_34 prespace_35 literal_36 raw_37}

raw_34 [label="raw"]

prespace_35 [label="prespace"]

literal_36 [label="literal"]

raw_37 [label="raw"]


// END RANK prose_25

raw_34 -> leaf_38
leaf_38  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The"]
// END RANK raw_34

prespace_35 -> leaf_39
leaf_39  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_35

literal_36 -> leaf_40
leaf_40  [color=Gray,shape=rectangle,fontname=Inconsolata,label="core"]
// END RANK literal_36

raw_37 -> leaf_41
leaf_41  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" library is shaping up as a place to keep alterations to the global
namespace and standard library.
"]
// END RANK raw_37

prose_26 -> { raw_42 prespace_43 literal_44 raw_45 prespace_46 literal_47 raw_48}
{rank=same; raw_42 prespace_43 literal_44 raw_45 prespace_46 literal_47 raw_48}

raw_42 [label="raw"]

prespace_43 [label="prespace"]

literal_44 [label="literal"]

raw_45 [label="raw"]

prespace_46 [label="prespace"]

literal_47 [label="literal"]

raw_48 [label="raw"]


// END RANK prose_26

raw_42 -> leaf_49
leaf_49  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This prelude belongs in"]
// END RANK raw_42

prespace_43 -> leaf_50
leaf_50  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_43

literal_44 -> leaf_51
leaf_51  [color=Gray,shape=rectangle,fontname=Inconsolata,label="pylon"]
// END RANK literal_44

raw_45 -> leaf_52
leaf_52  [color=Gray,shape=rectangle,fontname=Inconsolata,label="; it, and"]
// END RANK raw_45

prespace_46 -> leaf_53
leaf_53  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_46

literal_47 -> leaf_54
leaf_54  [color=Gray,shape=rectangle,fontname=Inconsolata,label="core"]
// END RANK literal_47

raw_48 -> leaf_55
leaf_55  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", will eventually end up there.
"]
// END RANK raw_48

codeblock_27 -> leaf_56
leaf_56  [color=Gray,shape=rectangle,fontname=Inconsolata,label="core = require \"core\"
string.cleave, string.litpat = core.cleave, core.litpat
string.utf8 = core.utf8 -- deprecated
string.codepoints = core.codepoints
string.lines = core.lines
table.splice = core.splice
table.clone = core.clone
table.arrayof = core.arrayof
table.collect = core.collect
table.select = core.select
table.reverse = core.reverse
table.hasfield = core.hasfield

table.pack = rawget(table, \"pack\") and table.pack or core.pack
table.unpack = rawget(table, \"unpack\") and table.unpack or unpack

codepoints = core.codepoints
meta = core.meta
getmeta, setmeta = getmetatable, setmetatable
hasmetamethod, hasfield = core.hasmetamethod, core.hasfield
coro = coroutine
assert = core.assertfmt

local concat = assert(table.concat)"]
// END RANK codeblock_27

prose_28 -> { raw_57}
{rank=same; raw_57}

raw_57 [label="raw"]


// END RANK prose_28

raw_57 -> leaf_58
leaf_58  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Primitives for terminal manipulation.
"]
// END RANK raw_57

prose_29 -> { raw_59 prespace_60 literal_61 raw_62}
{rank=same; raw_59 prespace_60 literal_61 raw_62}

raw_59 [label="raw"]

prespace_60 [label="prespace"]

literal_61 [label="literal"]

raw_62 [label="raw"]


// END RANK prose_29

raw_59 -> leaf_63
leaf_63  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Arguably don't belong here."]
// END RANK raw_59

prespace_60 -> leaf_64
leaf_64  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_60

literal_61 -> leaf_65
leaf_65  [color=Gray,shape=rectangle,fontname=Inconsolata,label="watch"]
// END RANK literal_61

raw_62 -> leaf_66
leaf_66  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is unused at present, it will be useful
in Orb relatively soon.
"]
// END RANK raw_62

codeblock_30 -> leaf_67
leaf_67  [color=Gray,shape=rectangle,fontname=Inconsolata,label="a = require \"anterm\"
color = require \"color\"
ts = color.ts
c = color.color
watch = require \"watcher\"
"]
// END RANK codeblock_30

section_31 -> { header_68 prose_69 prose_70 codeblock_71 prose_72 prose_73 codeblock_74 prose_75 codeblock_76 codeblock_77}
{rank=same; header_68 prose_69 prose_70 codeblock_71 prose_72 prose_73 codeblock_74 prose_75 codeblock_76 codeblock_77}

header_68 [label="3 : Logging"]

prose_69 [label="prose"]

prose_70 [label="prose"]

codeblock_71 [label="code block 94-111"]

prose_72 [label="prose"]

prose_73 [label="prose"]

codeblock_74 [label="code block 116-133"]

prose_75 [label="prose"]

codeblock_76 [label="code block 137-141"]

codeblock_77 [label="code block 143-152"]


// END RANK section_31

header_68 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Logging"]
// END RANK header_68

prose_69 -> { raw_79}
{rank=same; raw_79}

raw_79 [label="raw"]


// END RANK prose_69

raw_79 -> leaf_80
leaf_80  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

I'm making the crudest possible logger here.
"]
// END RANK raw_79

prose_70 -> { raw_81}
{rank=same; raw_81}

raw_81 [label="raw"]


// END RANK prose_70

raw_81 -> leaf_82
leaf_82  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This thing sucks tbh
"]
// END RANK raw_81

codeblock_71 -> leaf_83
leaf_83  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local _log = {}
_log.vals = {}
local format = assert(string.format )
local function __logger(_, fmtstr, ...)
   _log[#_log + 1] = format(fmtstr, ...)
   _log.vals[#_log.vals + 1] = table.pack(...)
end

log = setmeta(_log, {__call = __logger})

log.cache = {}
function cache(a,b,c)
   local tuck = {a,b,c}
   log.cache[#log.cache + 1] = tuck
end
"]
// END RANK codeblock_71

prose_72 -> { raw_84}
{rank=same; raw_84}

raw_84 [label="raw"]


// END RANK prose_72

raw_84 -> leaf_85
leaf_85  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This boot sequence builds on Tim Caswell and the Luvit Author's repl example.
"]
// END RANK raw_84

prose_73 -> { raw_86}
{rank=same; raw_86}

raw_86 [label="raw"]


// END RANK prose_73

raw_86 -> leaf_87
leaf_87  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Couple pieces I'm not using but should:"]
// END RANK raw_86

codeblock_74 -> leaf_88
leaf_88  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local usecolors
stdout = \"\"

if uv.guess_handle(1) == \"tty\" then
  stdout = uv.new_tty(1, false)
  usecolors = true
else
  stdout = uv.new_pipe(false)
  uv.pipe_open(utils.stdout, 1)
  usecolors = false
end

if not usecolors then
   ts = tostring
   -- #todo make this properly black and white ts
end"]
// END RANK codeblock_74

prose_75 -> { raw_89 prespace_90 literal_91 raw_92 prespace_93 literal_94 raw_95}
{rank=same; raw_89 prespace_90 literal_91 raw_92 prespace_93 literal_94 raw_95}

raw_89 [label="raw"]

prespace_90 [label="prespace"]

literal_91 [label="literal"]

raw_92 [label="raw"]

prespace_93 [label="prespace"]

literal_94 [label="literal"]

raw_95 [label="raw"]


// END RANK prose_75

raw_89 -> leaf_96
leaf_96  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Not-blocking"]
// END RANK raw_89

prespace_90 -> leaf_97
leaf_97  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_90

literal_91 -> leaf_98
leaf_98  [color=Gray,shape=rectangle,fontname=Inconsolata,label="write"]
// END RANK literal_91

raw_92 -> leaf_99
leaf_99  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_92

prespace_93 -> leaf_100
leaf_100  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_93

literal_94 -> leaf_101
leaf_101  [color=Gray,shape=rectangle,fontname=Inconsolata,label="print"]
// END RANK literal_94

raw_95 -> leaf_102
leaf_102  [color=Gray,shape=rectangle,fontname=Inconsolata,label=":
"]
// END RANK raw_95

codeblock_76 -> leaf_103
leaf_103  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function write(str)
   uv.write(stdout, str)
end"]
// END RANK codeblock_76

codeblock_77 -> leaf_104
leaf_104  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function print(...)
  local n = select('#', ...)
  local arguments = {...}
  for i = 1, n do
    arguments[i] = tostring(arguments[i])
  end
  uv.write(stdout, concat(arguments, \"\\t\") .. \"\\n\")
end"]
// END RANK codeblock_77

section_32 -> { header_105 prose_106 codeblock_107}
{rank=same; header_105 prose_106 codeblock_107}

header_105 [label="3 : tty setup"]

prose_106 [label="prose"]

codeblock_107 [label="code block 157-165"]


// END RANK section_32

header_105 -> leaf_108
leaf_108  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** tty setup"]
// END RANK header_105

prose_106 -> { raw_109}
{rank=same; raw_109}

raw_109 [label="raw"]


// END RANK prose_106

raw_109 -> leaf_110
leaf_110  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_109

codeblock_107 -> leaf_111
leaf_111  [color=Gray,shape=rectangle,fontname=Inconsolata,label="if uv.guess_handle(0) ~= \"tty\" or
   uv.guess_handle(1) ~= \"tty\" then
  -- Entry point for other consumers!
  error \"stdio must be a tty\"
end

local stdin = uv.new_tty(0, true)"]
// END RANK codeblock_107

section_6 -> { header_112 prose_113 codeblock_114}
{rank=same; header_112 prose_113 codeblock_114}

header_112 [label="2 : Modeselektor"]

prose_113 [label="prose"]

codeblock_114 [label="code block 173-179"]


// END RANK section_6

header_112 -> leaf_115
leaf_115  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Modeselektor"]
// END RANK header_112

prose_113 -> { raw_116}
{rank=same; raw_116}

raw_116 [label="raw"]


// END RANK prose_113

raw_116 -> leaf_117
leaf_117  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This should start with a read which saves the cursor location.

"]
// END RANK raw_116

codeblock_114 -> leaf_118
leaf_118  [color=Gray,shape=rectangle,fontname=Inconsolata,label="-- This switches screens and does a wipe,
-- then puts the cursor at 1,1.
write \"\\x1b[?47h\\x1b[2J\\x1b[H\"
modeS = require \"modeselektor\" ()
modeS.max_row, modeS.max_col = uv.tty_get_winsize(stdin)"]
// END RANK codeblock_114

section_7 -> { header_119 prose_120 section_121}
{rank=same; header_119 prose_120 section_121}

header_119 [label="2 : Reader"]

prose_120 [label="prose"]

section_121 [label="section: 187-273"]


// END RANK section_7

header_119 -> leaf_122
leaf_122  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Reader"]
// END RANK header_119

prose_120 -> { raw_123 prespace_124 literal_125 raw_126 prespace_127 literal_128 raw_129}
{rank=same; raw_123 prespace_124 literal_125 raw_126 prespace_127 literal_128 raw_129}

raw_123 [label="raw"]

prespace_124 [label="prespace"]

literal_125 [label="literal"]

raw_126 [label="raw"]

prespace_127 [label="prespace"]

literal_128 [label="literal"]

raw_129 [label="raw"]


// END RANK prose_120

raw_123 -> leaf_130
leaf_130  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The reader takes a stream of data from"]
// END RANK raw_123

prespace_124 -> leaf_131
leaf_131  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_124

literal_125 -> leaf_132
leaf_132  [color=Gray,shape=rectangle,fontname=Inconsolata,label="stdin"]
// END RANK literal_125

raw_126 -> leaf_133
leaf_133  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", asynchronously, and
processes it into tokens, which stream to the"]
// END RANK raw_126

prespace_127 -> leaf_134
leaf_134  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_127

literal_128 -> leaf_135
leaf_135  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_128

raw_129 -> leaf_136
leaf_136  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".

"]
// END RANK raw_129

section_121 -> { header_137 prose_138 codeblock_139 codeblock_140}
{rank=same; header_137 prose_138 codeblock_139 codeblock_140}

header_137 [label="3 : process_escapes(seq)"]

prose_138 [label="prose"]

codeblock_139 [label="code block 189-246"]

codeblock_140 [label="code block 248-273"]


// END RANK section_121

header_137 -> leaf_141
leaf_141  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** process_escapes(seq)"]
// END RANK header_137

prose_138 -> { raw_142}
{rank=same; raw_142}

raw_142 [label="raw"]


// END RANK prose_138

raw_142 -> leaf_143
leaf_143  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_142

codeblock_139 -> leaf_144
leaf_144  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
local byte, sub = string.byte, string.sub
local m_parse, is_mouse = a.mouse.parse_fast, a.mouse.ismousemove
local navigation, is_nav = a.navigation, a.is_nav

local function process_escapes(seq)
   if is_nav(seq) then
      return modeS(\"NAV\", navigation[seq] )
   elseif #seq == 1 then
      modeS(\"NAV\", \"ESC\") -- I think of escape as navigation in modal systems
   end
   if is_mouse(seq) then
      local m = m_parse(seq)
      return modeS(\"MOUSE\", m)
   elseif #seq == 2 and byte(sub(seq,2,2)) < 128 then
      -- Meta
      local key = \"M-\" .. sub(seq,2,2)
      return modeS(\"ALT\", key)
   else
      return modeS(\"NYI\", seq)
   end
end

local navigation = a.navigation

local function onseq(err,seq)
   if err then error(err) end
   local head = byte(seq)
   -- ^Q hard coded as quit, for now
   if head == 17 then
      uv.tty_set_mode(stdin, 1)
      write(a.mouse.track(false))
      uv.stop()
      return 0
   end
   -- Escape sequences
   if head == 27 then
      return process_escapes(seq)
   end
   -- Control sequences
   if head <= 31 and not navigation[seq] then
      local ctrl = \"^\" .. string.char(head + 64)
      return modeS(\"CTRL\", ctrl)
   elseif navigation[seq] then
      return modeS(\"NAV\", navigation[seq])
   end
   -- Printables
   if head > 31 and head < 127 then
      -- This also includes pastes, and I should probably
      -- signal the distinction at some point
      return modeS(\"ASCII\", seq)
   else
      -- wchars go here
      return modeS(\"NYI\", seq)
   end
end"]
// END RANK codeblock_139

codeblock_140 -> leaf_145
leaf_145  [color=Gray,shape=rectangle,fontname=Inconsolata,label="-- Get names for as many values as possible
-- into the colorizer
color.allNames()

print \"an repl, plz reply uwu 👀\"
write '👉  '

-- raw mode
uv.tty_set_mode(stdin, 2)
-- mouse mode
write(a.mouse.track(true))
uv.read_start(stdin, onseq)

-- main loop
local retcode =  uv.run('default')
-- Restore main screen
print '\\x1b[?47l'

if retcode ~= true then
   error(retcode)
end

print(\"kthxbye\")
return retcode"]
// END RANK codeblock_140


}
