digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 237"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-144"]


// END RANK doc_0

section_1 -> { header_2 prose_3 section_4 section_5 section_6 section_7}
{rank=same; header_2 prose_3 section_4 section_5 section_6 section_7}

header_2 [label="1 : Femto"]

prose_3 [label="prose"]

section_4 [label="section: 6-30"]

section_5 [label="section: 37-121"]

section_6 [label="section: 135-144"]

section_7 [label="section: 145-150"]


// END RANK section_1

header_2 -> leaf_8
leaf_8  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*  Femto"]
// END RANK header_2

prose_3 -> { raw_9}
{rank=same; raw_9}

raw_9 [label="raw"]


// END RANK prose_3

raw_9 -> leaf_10
leaf_10  [color=Gray,shape=rectangle,fontname=Inconsolata,label="



"]
// END RANK raw_9

section_4 -> { header_11 prose_12 prose_13 prose_14 codeblock_15 section_16}
{rank=same; header_11 prose_12 prose_13 prose_14 codeblock_15 section_16}

header_11 [label="2 : includes"]

prose_12 [label="prose"]

prose_13 [label="prose"]

prose_14 [label="prose"]

codeblock_15 [label="code block 15-28"]

section_16 [label="section: 31-36"]


// END RANK section_4

header_11 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**  includes"]
// END RANK header_11

prose_12 -> { raw_18}
{rank=same; raw_18}

raw_18 [label="raw"]


// END RANK prose_12

raw_18 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This all goes into global space for now.  Our more sophisticated loader will
handle namespace isolation. Meanwhile we're building a repl, so.
"]
// END RANK raw_18

prose_13 -> { raw_20}
{rank=same; raw_20}

raw_20 [label="raw"]


// END RANK prose_13

raw_20 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
First we load everything that might reasonable expect a stock namespace.
"]
// END RANK raw_20

prose_14 -> { raw_22}
{rank=same; raw_22}

raw_22 [label="raw"]


// END RANK prose_14

raw_22 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
All of these are exceedingly well-behaved.
"]
// END RANK raw_22

codeblock_15 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label="L   = require \"lpeg\"
lfs = require \"lfs\"
ffi = require \"ffi\"
bit = require \"bit\"
uv  = require \"luv\"

jit.vmdef = require \"vmdef\"
jit.p = require \"ljprof\"

-- sqlayer uses this monkey patch:
ffi.reflect = require \"reflect\"
sql = require \"sqlayer\""]
// END RANK codeblock_15

section_16 -> { header_25 prose_26}
{rank=same; header_25 prose_26}

header_25 [label="3 : Djikstra Insertion Point"]

prose_26 [label="prose"]


// END RANK section_16

header_25 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Djikstra Insertion Point"]
// END RANK header_25

prose_26 -> { raw_28}
{rank=same; raw_28}

raw_28 [label="raw"]


// END RANK prose_26

raw_28 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Although we're not doing so yet, this is where we will set up Djikstra mode
for participating code.  We then push that up through the layers, and it lands
as close to C level as practical.
"]
// END RANK raw_28

section_5 -> { header_30 prose_31 prose_32 codeblock_33 prose_34 prose_35 codeblock_36 prose_37 prose_38 codeblock_39 prose_40 codeblock_41 codeblock_42 section_43}
{rank=same; header_30 prose_31 prose_32 codeblock_33 prose_34 prose_35 codeblock_36 prose_37 prose_38 codeblock_39 prose_40 codeblock_41 codeblock_42 section_43}

header_30 [label="2 : core"]

prose_31 [label="prose"]

prose_32 [label="prose"]

codeblock_33 [label="code block 44-64"]

prose_34 [label="prose"]

prose_35 [label="prose"]

codeblock_36 [label="code block 71-78"]

prose_37 [label="prose"]

prose_38 [label="prose"]

codeblock_39 [label="code block 83-100"]

prose_40 [label="prose"]

codeblock_41 [label="code block 104-108"]

codeblock_42 [label="code block 110-119"]

section_43 [label="section: 122-134"]


// END RANK section_5

header_30 -> leaf_44
leaf_44  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** core"]
// END RANK header_30

prose_31 -> { raw_45 prespace_46 literal_47 raw_48}
{rank=same; raw_45 prespace_46 literal_47 raw_48}

raw_45 [label="raw"]

prespace_46 [label="prespace"]

literal_47 [label="literal"]

raw_48 [label="raw"]


// END RANK prose_31

raw_45 -> leaf_49
leaf_49  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The"]
// END RANK raw_45

prespace_46 -> leaf_50
leaf_50  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_46

literal_47 -> leaf_51
leaf_51  [color=Gray,shape=rectangle,fontname=Inconsolata,label="core"]
// END RANK literal_47

raw_48 -> leaf_52
leaf_52  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" library is shaping up as a place to keep alterations to the global
namespace and standard library.
"]
// END RANK raw_48

prose_32 -> { raw_53 prespace_54 literal_55 raw_56 prespace_57 literal_58 raw_59}
{rank=same; raw_53 prespace_54 literal_55 raw_56 prespace_57 literal_58 raw_59}

raw_53 [label="raw"]

prespace_54 [label="prespace"]

literal_55 [label="literal"]

raw_56 [label="raw"]

prespace_57 [label="prespace"]

literal_58 [label="literal"]

raw_59 [label="raw"]


// END RANK prose_32

raw_53 -> leaf_60
leaf_60  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This prelude belongs in"]
// END RANK raw_53

prespace_54 -> leaf_61
leaf_61  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_54

literal_55 -> leaf_62
leaf_62  [color=Gray,shape=rectangle,fontname=Inconsolata,label="pylon"]
// END RANK literal_55

raw_56 -> leaf_63
leaf_63  [color=Gray,shape=rectangle,fontname=Inconsolata,label="; it, and"]
// END RANK raw_56

prespace_57 -> leaf_64
leaf_64  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_57

literal_58 -> leaf_65
leaf_65  [color=Gray,shape=rectangle,fontname=Inconsolata,label="core"]
// END RANK literal_58

raw_59 -> leaf_66
leaf_66  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", will eventually end up there.
"]
// END RANK raw_59

codeblock_33 -> leaf_67
leaf_67  [color=Gray,shape=rectangle,fontname=Inconsolata,label="core = require \"core\"
string.cleave, string.litpat = core.cleave, core.litpat
string.utf8 = core.utf8
string.codepoints = core.codepoints
table.splice = core.splice
table.clone = core.clone
table.arrayof = core.arrayof
table.select = core.select
table.reverse = core.reverse
table.hasfield = core.hasfield
utf8 = core.utf8
codepoints = core.codepoints
meta = core.meta
getmeta, setmeta = getmetatable, setmetatable
hasmetamethod, hasfield = core.hasmetamethod, core.hasfield
coro = coroutine
assert = core.assertfmt

local concat = assert(table.concat)"]
// END RANK codeblock_33

prose_34 -> { raw_68}
{rank=same; raw_68}

raw_68 [label="raw"]


// END RANK prose_34

raw_68 -> leaf_69
leaf_69  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Primitives for terminal manipulation.
"]
// END RANK raw_68

prose_35 -> { raw_70 prespace_71 literal_72 raw_73}
{rank=same; raw_70 prespace_71 literal_72 raw_73}

raw_70 [label="raw"]

prespace_71 [label="prespace"]

literal_72 [label="literal"]

raw_73 [label="raw"]


// END RANK prose_35

raw_70 -> leaf_74
leaf_74  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Arguably don't belong here."]
// END RANK raw_70

prespace_71 -> leaf_75
leaf_75  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_71

literal_72 -> leaf_76
leaf_76  [color=Gray,shape=rectangle,fontname=Inconsolata,label="watch"]
// END RANK literal_72

raw_73 -> leaf_77
leaf_77  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is unused at present, it will be useful
in Orb relatively soon.
"]
// END RANK raw_73

codeblock_36 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label="a = require \"anterm\"
color = require \"color\"
ts = color.ts
c = color.color
watch = require \"watcher\"
"]
// END RANK codeblock_36

prose_37 -> { raw_79}
{rank=same; raw_79}

raw_79 [label="raw"]


// END RANK prose_37

raw_79 -> leaf_80
leaf_80  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This boot sequence builds on Tim Caswell and the Luvit Author's repl example.
"]
// END RANK raw_79

prose_38 -> { raw_81}
{rank=same; raw_81}

raw_81 [label="raw"]


// END RANK prose_38

raw_81 -> leaf_82
leaf_82  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Couple pieces I'm not using but should:"]
// END RANK raw_81

codeblock_39 -> leaf_83
leaf_83  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local usecolors
stdout = \"\"

if uv.guess_handle(1) == \"tty\" then
  stdout = uv.new_tty(1, false)
  usecolors = true
else
  stdout = uv.new_pipe(false)
  uv.pipe_open(utils.stdout, 1)
  usecolors = false
end

if not usecolors then
   ts = tostring
   -- #todo make this properly black and white ts
end"]
// END RANK codeblock_39

prose_40 -> { raw_84 prespace_85 literal_86 raw_87 prespace_88 literal_89 raw_90}
{rank=same; raw_84 prespace_85 literal_86 raw_87 prespace_88 literal_89 raw_90}

raw_84 [label="raw"]

prespace_85 [label="prespace"]

literal_86 [label="literal"]

raw_87 [label="raw"]

prespace_88 [label="prespace"]

literal_89 [label="literal"]

raw_90 [label="raw"]


// END RANK prose_40

raw_84 -> leaf_91
leaf_91  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Not-blocking"]
// END RANK raw_84

prespace_85 -> leaf_92
leaf_92  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_85

literal_86 -> leaf_93
leaf_93  [color=Gray,shape=rectangle,fontname=Inconsolata,label="write"]
// END RANK literal_86

raw_87 -> leaf_94
leaf_94  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_87

prespace_88 -> leaf_95
leaf_95  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_88

literal_89 -> leaf_96
leaf_96  [color=Gray,shape=rectangle,fontname=Inconsolata,label="print"]
// END RANK literal_89

raw_90 -> leaf_97
leaf_97  [color=Gray,shape=rectangle,fontname=Inconsolata,label=":
"]
// END RANK raw_90

codeblock_41 -> leaf_98
leaf_98  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function write(str)
   uv.write(stdout, str)
end"]
// END RANK codeblock_41

codeblock_42 -> leaf_99
leaf_99  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function print(...)
  local n = select('#', ...)
  local arguments = {...}
  for i = 1, n do
    arguments[i] = tostring(arguments[i])
  end
  uv.write(stdout, concat(arguments, \"\\t\") .. \"\\n\")
end"]
// END RANK codeblock_42

section_43 -> { header_100 prose_101 codeblock_102}
{rank=same; header_100 prose_101 codeblock_102}

header_100 [label="3 : tty setup"]

prose_101 [label="prose"]

codeblock_102 [label="code block 124-132"]


// END RANK section_43

header_100 -> leaf_103
leaf_103  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** tty setup"]
// END RANK header_100

prose_101 -> { raw_104}
{rank=same; raw_104}

raw_104 [label="raw"]


// END RANK prose_101

raw_104 -> leaf_105
leaf_105  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_104

codeblock_102 -> leaf_106
leaf_106  [color=Gray,shape=rectangle,fontname=Inconsolata,label="if uv.guess_handle(0) ~= \"tty\" or
   uv.guess_handle(1) ~= \"tty\" then
  -- Entry point for other consumers!
  error \"stdio must be a tty\"
end

local stdin = uv.new_tty(0, true)"]
// END RANK codeblock_102

section_6 -> { header_107 prose_108 codeblock_109}
{rank=same; header_107 prose_108 codeblock_109}

header_107 [label="2 : Modeselektor"]

prose_108 [label="prose"]

codeblock_109 [label="code block 137-143"]


// END RANK section_6

header_107 -> leaf_110
leaf_110  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Modeselektor"]
// END RANK header_107

prose_108 -> { raw_111}
{rank=same; raw_111}

raw_111 [label="raw"]


// END RANK prose_108

raw_111 -> leaf_112
leaf_112  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_111

codeblock_109 -> leaf_113
leaf_113  [color=Gray,shape=rectangle,fontname=Inconsolata,label="-- This switches screens and does a wipe,
-- then puts the cursor at 1,1.
write \"\\x1b[?47h\\x1b[2J\\x1b[H\"
modeS = require \"modeselektor\" ()
modeS.max_row, modeS.max_col = uv.tty_get_winsize(stdin)"]
// END RANK codeblock_109

section_7 -> { header_114 prose_115 section_116}
{rank=same; header_114 prose_115 section_116}

header_114 [label="2 : Reader"]

prose_115 [label="prose"]

section_116 [label="section: 151-237"]


// END RANK section_7

header_114 -> leaf_117
leaf_117  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Reader"]
// END RANK header_114

prose_115 -> { raw_118 prespace_119 literal_120 raw_121 prespace_122 literal_123 raw_124}
{rank=same; raw_118 prespace_119 literal_120 raw_121 prespace_122 literal_123 raw_124}

raw_118 [label="raw"]

prespace_119 [label="prespace"]

literal_120 [label="literal"]

raw_121 [label="raw"]

prespace_122 [label="prespace"]

literal_123 [label="literal"]

raw_124 [label="raw"]


// END RANK prose_115

raw_118 -> leaf_125
leaf_125  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The reader takes a stream of data from"]
// END RANK raw_118

prespace_119 -> leaf_126
leaf_126  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_119

literal_120 -> leaf_127
leaf_127  [color=Gray,shape=rectangle,fontname=Inconsolata,label="stdin"]
// END RANK literal_120

raw_121 -> leaf_128
leaf_128  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", asynchronously, and
processes it into tokens, which stream to the"]
// END RANK raw_121

prespace_122 -> leaf_129
leaf_129  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_122

literal_123 -> leaf_130
leaf_130  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_123

raw_124 -> leaf_131
leaf_131  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".

"]
// END RANK raw_124

section_116 -> { header_132 prose_133 codeblock_134 codeblock_135}
{rank=same; header_132 prose_133 codeblock_134 codeblock_135}

header_132 [label="3 : process_escapes(seq)"]

prose_133 [label="prose"]

codeblock_134 [label="code block 153-210"]

codeblock_135 [label="code block 212-237"]


// END RANK section_116

header_132 -> leaf_136
leaf_136  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** process_escapes(seq)"]
// END RANK header_132

prose_133 -> { raw_137}
{rank=same; raw_137}

raw_137 [label="raw"]


// END RANK prose_133

raw_137 -> leaf_138
leaf_138  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_137

codeblock_134 -> leaf_139
leaf_139  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
local byte, sub = string.byte, string.sub
local m_parse, is_mouse = a.mouse.parse_fast, a.mouse.ismousemove
local navigation, is_nav = a.navigation, a.is_nav

local function process_escapes(seq)
   if is_nav(seq) then
      return modeS(\"NAV\", navigation[seq] )
   elseif #seq == 1 then
      modeS(\"NAV\", \"ESC\") -- I think of escape as navigation in modal systems
   end
   if is_mouse(seq) then
      local m = m_parse(seq)
      return modeS(\"MOUSE\", m)
   elseif #seq == 2 and byte(sub(seq,2,2)) < 128 then
      -- Meta
      local key = \"M-\" .. sub(seq,2,2)
      return modeS(\"ALT\", key)
   else
      return modeS(\"NYI\", seq)
   end
end

local navigation = a.navigation

local function onseq(err,seq)
   if err then error(err) end
   local head = byte(seq)
   -- ^Q hard coded as quit, for now
   if head == 17 then
      uv.tty_set_mode(stdin, 1)
      write(a.mouse.track(false))
      uv.stop()
      return 0
   end
   -- Escape sequences
   if head == 27 then
      return process_escapes(seq)
   end
   -- Control sequences
   if head <= 31 and not navigation[seq] then
      local ctrl = \"^\" .. string.char(head + 64)
      return modeS(\"CTRL\", ctrl)
   elseif navigation[seq] then
      return modeS(\"NAV\", navigation[seq])
   end
   -- Printables
   if head > 31 and head < 127 then
      -- This also includes pastes, and I should probably
      -- signal the distinction at some point
      return modeS(\"ASCII\", seq)
   else
      -- wchars go here
      return modeS(\"NYI\", seq)
   end
end"]
// END RANK codeblock_134

codeblock_135 -> leaf_140
leaf_140  [color=Gray,shape=rectangle,fontname=Inconsolata,label="-- Get names for as many values as possible
-- into the colorizer
color.allNames()

print \"an repl, plz reply uwu 👀\"
write '👉  '

-- raw mode
uv.tty_set_mode(stdin, 2)
-- mouse mode
write(a.mouse.track(true))
uv.read_start(stdin, onseq)

-- main loop
local retcode =  uv.run('default')
-- Restore main screen
print '\\x1b[?47l'

if retcode ~= true then
   error(retcode)
end

print(\"kthxbye\")
return retcode"]
// END RANK codeblock_135


}
