digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 276"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-183"]


// END RANK doc_0

section_1 -> { header_2 prose_3 section_4 section_5 section_6 section_7}
{rank=same; header_2 prose_3 section_4 section_5 section_6 section_7}

header_2 [label="1 : Femto"]

prose_3 [label="prose"]

section_4 [label="section: 6-38"]

section_5 [label="section: 45-157"]

section_6 [label="section: 171-183"]

section_7 [label="section: 184-189"]


// END RANK section_1

header_2 -> leaf_8
leaf_8  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*  Femto"]
// END RANK header_2

prose_3 -> { raw_9}
{rank=same; raw_9}

raw_9 [label="raw"]


// END RANK prose_3

raw_9 -> leaf_10
leaf_10  [color=Gray,shape=rectangle,fontname=Inconsolata,label="



"]
// END RANK raw_9

section_4 -> { header_11 prose_12 prose_13 prose_14 codeblock_15 section_16}
{rank=same; header_11 prose_12 prose_13 prose_14 codeblock_15 section_16}

header_11 [label="2 : includes"]

prose_12 [label="prose"]

prose_13 [label="prose"]

prose_14 [label="prose"]

codeblock_15 [label="code block 15-36"]

section_16 [label="section: 39-44"]


// END RANK section_4

header_11 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**  includes"]
// END RANK header_11

prose_12 -> { raw_18}
{rank=same; raw_18}

raw_18 [label="raw"]


// END RANK prose_12

raw_18 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This all goes into global space for now.  Our more sophisticated loader will
handle namespace isolation. Meanwhile we're building a repl, so.
"]
// END RANK raw_18

prose_13 -> { raw_20}
{rank=same; raw_20}

raw_20 [label="raw"]


// END RANK prose_13

raw_20 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
First we load everything that might reasonable expect a stock namespace.
"]
// END RANK raw_20

prose_14 -> { raw_22}
{rank=same; raw_22}

raw_22 [label="raw"]


// END RANK prose_14

raw_22 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
All of these are exceedingly well-behaved.
"]
// END RANK raw_22

codeblock_15 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label="L    = require \"lpeg\"
lfs  = require \"lfs\"
ffi  = require \"ffi\"
bit  = require \"bit\"
uv   = require \"luv\"
utf8 = require \"lua-utf8\"

-- replace string lib with utf8 equivalents
for k,v in pairs(utf8) do
   if string[k] then
      string[k] = v
   end
end

jit.vmdef = require \"vmdef\"
jit.p = require \"ljprof\"

-- sqlayer uses this monkey patch:
ffi.reflect = require \"reflect\"
sql = require \"sqlayer\""]
// END RANK codeblock_15

section_16 -> { header_25 prose_26}
{rank=same; header_25 prose_26}

header_25 [label="3 : Djikstra Insertion Point"]

prose_26 [label="prose"]


// END RANK section_16

header_25 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Djikstra Insertion Point"]
// END RANK header_25

prose_26 -> { raw_28}
{rank=same; raw_28}

raw_28 [label="raw"]


// END RANK prose_26

raw_28 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Although we're not doing so yet, this is where we will set up Djikstra mode
for participating code.  We then push that up through the layers, and it lands
as close to C level as practical.
"]
// END RANK raw_28

section_5 -> { header_30 prose_31 prose_32 codeblock_33 prose_34 prose_35 codeblock_36 section_37 section_38}
{rank=same; header_30 prose_31 prose_32 codeblock_33 prose_34 prose_35 codeblock_36 section_37 section_38}

header_30 [label="2 : core"]

prose_31 [label="prose"]

prose_32 [label="prose"]

codeblock_33 [label="code block 52-77"]

prose_34 [label="prose"]

prose_35 [label="prose"]

codeblock_36 [label="code block 84-91"]

section_37 [label="section: 93-157"]

section_38 [label="section: 158-170"]


// END RANK section_5

header_30 -> leaf_39
leaf_39  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** core"]
// END RANK header_30

prose_31 -> { raw_40 prespace_41 literal_42 raw_43}
{rank=same; raw_40 prespace_41 literal_42 raw_43}

raw_40 [label="raw"]

prespace_41 [label="prespace"]

literal_42 [label="literal"]

raw_43 [label="raw"]


// END RANK prose_31

raw_40 -> leaf_44
leaf_44  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The"]
// END RANK raw_40

prespace_41 -> leaf_45
leaf_45  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_41

literal_42 -> leaf_46
leaf_46  [color=Gray,shape=rectangle,fontname=Inconsolata,label="core"]
// END RANK literal_42

raw_43 -> leaf_47
leaf_47  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" library is shaping up as a place to keep alterations to the global
namespace and standard library.
"]
// END RANK raw_43

prose_32 -> { raw_48 prespace_49 literal_50 raw_51 prespace_52 literal_53 raw_54}
{rank=same; raw_48 prespace_49 literal_50 raw_51 prespace_52 literal_53 raw_54}

raw_48 [label="raw"]

prespace_49 [label="prespace"]

literal_50 [label="literal"]

raw_51 [label="raw"]

prespace_52 [label="prespace"]

literal_53 [label="literal"]

raw_54 [label="raw"]


// END RANK prose_32

raw_48 -> leaf_55
leaf_55  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This prelude belongs in"]
// END RANK raw_48

prespace_49 -> leaf_56
leaf_56  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_49

literal_50 -> leaf_57
leaf_57  [color=Gray,shape=rectangle,fontname=Inconsolata,label="pylon"]
// END RANK literal_50

raw_51 -> leaf_58
leaf_58  [color=Gray,shape=rectangle,fontname=Inconsolata,label="; it, and"]
// END RANK raw_51

prespace_52 -> leaf_59
leaf_59  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_52

literal_53 -> leaf_60
leaf_60  [color=Gray,shape=rectangle,fontname=Inconsolata,label="core"]
// END RANK literal_53

raw_54 -> leaf_61
leaf_61  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", will eventually end up there.
"]
// END RANK raw_54

codeblock_33 -> leaf_62
leaf_62  [color=Gray,shape=rectangle,fontname=Inconsolata,label="core = require \"core\"
string.cleave, string.litpat = core.cleave, core.litpat
string.utf8 = core.utf8 -- deprecated
string.codepoints = core.codepoints
string.lines = core.lines
table.splice = core.splice
table.clone = core.clone
table.arrayof = core.arrayof
table.collect = core.collect
table.select = core.select
table.reverse = core.reverse
table.hasfield = core.hasfield

table.pack = rawget(table, \"pack\") and table.pack or core.pack
table.unpack = rawget(table, \"unpack\") and table.unpack or unpack

codepoints = core.codepoints
meta = core.meta
getmeta, setmeta = getmetatable, setmetatable
hasmetamethod, hasfield = core.hasmetamethod, core.hasfield
coro = coroutine
assert = core.assertfmt

local concat = assert(table.concat)"]
// END RANK codeblock_33

prose_34 -> { raw_63}
{rank=same; raw_63}

raw_63 [label="raw"]


// END RANK prose_34

raw_63 -> leaf_64
leaf_64  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Primitives for terminal manipulation.
"]
// END RANK raw_63

prose_35 -> { raw_65 prespace_66 literal_67 raw_68}
{rank=same; raw_65 prespace_66 literal_67 raw_68}

raw_65 [label="raw"]

prespace_66 [label="prespace"]

literal_67 [label="literal"]

raw_68 [label="raw"]


// END RANK prose_35

raw_65 -> leaf_69
leaf_69  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Arguably don't belong here."]
// END RANK raw_65

prespace_66 -> leaf_70
leaf_70  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_66

literal_67 -> leaf_71
leaf_71  [color=Gray,shape=rectangle,fontname=Inconsolata,label="watch"]
// END RANK literal_67

raw_68 -> leaf_72
leaf_72  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is unused at present, it will be useful
in Orb relatively soon.
"]
// END RANK raw_68

codeblock_36 -> leaf_73
leaf_73  [color=Gray,shape=rectangle,fontname=Inconsolata,label="a = require \"anterm\"
color = require \"color\"
ts = color.ts
c = color.color
watch = require \"watcher\"
"]
// END RANK codeblock_36

section_37 -> { header_74 prose_75 codeblock_76 prose_77 prose_78 codeblock_79 prose_80 codeblock_81 codeblock_82}
{rank=same; header_74 prose_75 codeblock_76 prose_77 prose_78 codeblock_79 prose_80 codeblock_81 codeblock_82}

header_74 [label="3 : Logging"]

prose_75 [label="prose"]

codeblock_76 [label="code block 97-114"]

prose_77 [label="prose"]

prose_78 [label="prose"]

codeblock_79 [label="code block 119-136"]

prose_80 [label="prose"]

codeblock_81 [label="code block 140-144"]

codeblock_82 [label="code block 146-155"]


// END RANK section_37

header_74 -> leaf_83
leaf_83  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Logging"]
// END RANK header_74

prose_75 -> { raw_84}
{rank=same; raw_84}

raw_84 [label="raw"]


// END RANK prose_75

raw_84 -> leaf_85
leaf_85  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

I'm making the crudest possible logger here.
"]
// END RANK raw_84

codeblock_76 -> leaf_86
leaf_86  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local _log = {}
_log.vals = {}
local format = assert(string.format )
local function __logger(_, fmtstr, ...)
   _log[#_log + 1] = format(fmtstr, ...)
   _log.vals[#_log.vals + 1] = table.pack(...)
end

log = setmeta(_log, {__call = __logger})

log.cache = {}
function cache(a,b,c)
   local tuck = {a,b,c}
   log.cache[#log.cache + 1] = tuck
end
"]
// END RANK codeblock_76

prose_77 -> { raw_87}
{rank=same; raw_87}

raw_87 [label="raw"]


// END RANK prose_77

raw_87 -> leaf_88
leaf_88  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This boot sequence builds on Tim Caswell and the Luvit Author's repl example.
"]
// END RANK raw_87

prose_78 -> { raw_89}
{rank=same; raw_89}

raw_89 [label="raw"]


// END RANK prose_78

raw_89 -> leaf_90
leaf_90  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Couple pieces I'm not using but should:"]
// END RANK raw_89

codeblock_79 -> leaf_91
leaf_91  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local usecolors
stdout = \"\"

if uv.guess_handle(1) == \"tty\" then
  stdout = uv.new_tty(1, false)
  usecolors = true
else
  stdout = uv.new_pipe(false)
  uv.pipe_open(utils.stdout, 1)
  usecolors = false
end

if not usecolors then
   ts = tostring
   -- #todo make this properly black and white ts
end"]
// END RANK codeblock_79

prose_80 -> { raw_92 prespace_93 literal_94 raw_95 prespace_96 literal_97 raw_98}
{rank=same; raw_92 prespace_93 literal_94 raw_95 prespace_96 literal_97 raw_98}

raw_92 [label="raw"]

prespace_93 [label="prespace"]

literal_94 [label="literal"]

raw_95 [label="raw"]

prespace_96 [label="prespace"]

literal_97 [label="literal"]

raw_98 [label="raw"]


// END RANK prose_80

raw_92 -> leaf_99
leaf_99  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Not-blocking"]
// END RANK raw_92

prespace_93 -> leaf_100
leaf_100  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_93

literal_94 -> leaf_101
leaf_101  [color=Gray,shape=rectangle,fontname=Inconsolata,label="write"]
// END RANK literal_94

raw_95 -> leaf_102
leaf_102  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_95

prespace_96 -> leaf_103
leaf_103  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_96

literal_97 -> leaf_104
leaf_104  [color=Gray,shape=rectangle,fontname=Inconsolata,label="print"]
// END RANK literal_97

raw_98 -> leaf_105
leaf_105  [color=Gray,shape=rectangle,fontname=Inconsolata,label=":
"]
// END RANK raw_98

codeblock_81 -> leaf_106
leaf_106  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function write(str)
   uv.write(stdout, str)
end"]
// END RANK codeblock_81

codeblock_82 -> leaf_107
leaf_107  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function print(...)
  local n = select('#', ...)
  local arguments = {...}
  for i = 1, n do
    arguments[i] = tostring(arguments[i])
  end
  uv.write(stdout, concat(arguments, \"\\t\") .. \"\\n\")
end"]
// END RANK codeblock_82

section_38 -> { header_108 prose_109 codeblock_110}
{rank=same; header_108 prose_109 codeblock_110}

header_108 [label="3 : tty setup"]

prose_109 [label="prose"]

codeblock_110 [label="code block 160-168"]


// END RANK section_38

header_108 -> leaf_111
leaf_111  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** tty setup"]
// END RANK header_108

prose_109 -> { raw_112}
{rank=same; raw_112}

raw_112 [label="raw"]


// END RANK prose_109

raw_112 -> leaf_113
leaf_113  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_112

codeblock_110 -> leaf_114
leaf_114  [color=Gray,shape=rectangle,fontname=Inconsolata,label="if uv.guess_handle(0) ~= \"tty\" or
   uv.guess_handle(1) ~= \"tty\" then
  -- Entry point for other consumers!
  error \"stdio must be a tty\"
end

local stdin = uv.new_tty(0, true)"]
// END RANK codeblock_110

section_6 -> { header_115 prose_116 codeblock_117}
{rank=same; header_115 prose_116 codeblock_117}

header_115 [label="2 : Modeselektor"]

prose_116 [label="prose"]

codeblock_117 [label="code block 176-182"]


// END RANK section_6

header_115 -> leaf_118
leaf_118  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Modeselektor"]
// END RANK header_115

prose_116 -> { raw_119}
{rank=same; raw_119}

raw_119 [label="raw"]


// END RANK prose_116

raw_119 -> leaf_120
leaf_120  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This should start with a read which saves the cursor location.

"]
// END RANK raw_119

codeblock_117 -> leaf_121
leaf_121  [color=Gray,shape=rectangle,fontname=Inconsolata,label="-- This switches screens and does a wipe,
-- then puts the cursor at 1,1.
write \"\\x1b[?47h\\x1b[2J\\x1b[H\"
modeS = require \"modeselektor\" ()
modeS.max_row, modeS.max_col = uv.tty_get_winsize(stdin)"]
// END RANK codeblock_117

section_7 -> { header_122 prose_123 section_124}
{rank=same; header_122 prose_123 section_124}

header_122 [label="2 : Reader"]

prose_123 [label="prose"]

section_124 [label="section: 190-276"]


// END RANK section_7

header_122 -> leaf_125
leaf_125  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Reader"]
// END RANK header_122

prose_123 -> { raw_126 prespace_127 literal_128 raw_129 prespace_130 literal_131 raw_132}
{rank=same; raw_126 prespace_127 literal_128 raw_129 prespace_130 literal_131 raw_132}

raw_126 [label="raw"]

prespace_127 [label="prespace"]

literal_128 [label="literal"]

raw_129 [label="raw"]

prespace_130 [label="prespace"]

literal_131 [label="literal"]

raw_132 [label="raw"]


// END RANK prose_123

raw_126 -> leaf_133
leaf_133  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The reader takes a stream of data from"]
// END RANK raw_126

prespace_127 -> leaf_134
leaf_134  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_127

literal_128 -> leaf_135
leaf_135  [color=Gray,shape=rectangle,fontname=Inconsolata,label="stdin"]
// END RANK literal_128

raw_129 -> leaf_136
leaf_136  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", asynchronously, and
processes it into tokens, which stream to the"]
// END RANK raw_129

prespace_130 -> leaf_137
leaf_137  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_130

literal_131 -> leaf_138
leaf_138  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_131

raw_132 -> leaf_139
leaf_139  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".

"]
// END RANK raw_132

section_124 -> { header_140 prose_141 codeblock_142 codeblock_143}
{rank=same; header_140 prose_141 codeblock_142 codeblock_143}

header_140 [label="3 : process_escapes(seq)"]

prose_141 [label="prose"]

codeblock_142 [label="code block 192-249"]

codeblock_143 [label="code block 251-276"]


// END RANK section_124

header_140 -> leaf_144
leaf_144  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** process_escapes(seq)"]
// END RANK header_140

prose_141 -> { raw_145}
{rank=same; raw_145}

raw_145 [label="raw"]


// END RANK prose_141

raw_145 -> leaf_146
leaf_146  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_145

codeblock_142 -> leaf_147
leaf_147  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
local byte, sub = string.byte, string.sub
local m_parse, is_mouse = a.mouse.parse_fast, a.mouse.ismousemove
local navigation, is_nav = a.navigation, a.is_nav

local function process_escapes(seq)
   if is_nav(seq) then
      return modeS(\"NAV\", navigation[seq] )
   elseif #seq == 1 then
      modeS(\"NAV\", \"ESC\") -- I think of escape as navigation in modal systems
   end
   if is_mouse(seq) then
      local m = m_parse(seq)
      return modeS(\"MOUSE\", m)
   elseif #seq == 2 and byte(sub(seq,2,2)) < 128 then
      -- Meta
      local key = \"M-\" .. sub(seq,2,2)
      return modeS(\"ALT\", key)
   else
      return modeS(\"NYI\", seq)
   end
end

local navigation = a.navigation

local function onseq(err,seq)
   if err then error(err) end
   local head = byte(seq)
   -- ^Q hard coded as quit, for now
   if head == 17 then
      uv.tty_set_mode(stdin, 1)
      write(a.mouse.track(false))
      uv.stop()
      return 0
   end
   -- Escape sequences
   if head == 27 then
      return process_escapes(seq)
   end
   -- Control sequences
   if head <= 31 and not navigation[seq] then
      local ctrl = \"^\" .. string.char(head + 64)
      return modeS(\"CTRL\", ctrl)
   elseif navigation[seq] then
      return modeS(\"NAV\", navigation[seq])
   end
   -- Printables
   if head > 31 and head < 127 then
      -- This also includes pastes, and I should probably
      -- signal the distinction at some point
      return modeS(\"ASCII\", seq)
   else
      -- wchars go here
      return modeS(\"NYI\", seq)
   end
end"]
// END RANK codeblock_142

codeblock_143 -> leaf_148
leaf_148  [color=Gray,shape=rectangle,fontname=Inconsolata,label="-- Get names for as many values as possible
-- into the colorizer
color.allNames()

print \"an repl, plz reply uwu 👀\"
write '👉  '

-- raw mode
uv.tty_set_mode(stdin, 2)
-- mouse mode
write(a.mouse.track(true))
uv.read_start(stdin, onseq)

-- main loop
local retcode =  uv.run('default')
-- Restore main screen
print '\\x1b[?47l'

if retcode ~= true then
   error(retcode)
end

print(\"kthxbye\")
return retcode"]
// END RANK codeblock_143


}
