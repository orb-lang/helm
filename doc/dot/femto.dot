digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 288"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-153"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 section_5 section_6}
{rank=same; header_2 prose_3 prose_4 section_5 section_6}

header_2 [label="1 : Femto"]

prose_3 [label="prose"]

prose_4 [label="prose"]

section_5 [label="section: 9-35"]

section_6 [label="section: 154-183"]


// END RANK section_1

header_2 -> leaf_7
leaf_7  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*  Femto"]
// END RANK header_2

prose_3 -> { raw_8}
{rank=same; raw_8}

raw_8 [label="raw"]


// END RANK prose_3

raw_8 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


I just got orb stood up in the pylon bootloader distribution.
"]
// END RANK raw_8

prose_4 -> { raw_10}
{rank=same; raw_10}

raw_10 [label="raw"]


// END RANK prose_4

raw_10 -> leaf_11
leaf_11  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I am excited about this.

"]
// END RANK raw_10

section_5 -> { header_12 prose_13 codeblock_14 section_15}
{rank=same; header_12 prose_13 codeblock_14 section_15}

header_12 [label="2 : includes"]

prose_13 [label="prose"]

codeblock_14 [label="code block 14-33"]

section_15 [label="section: 36-153"]


// END RANK section_5

header_12 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**  includes"]
// END RANK header_12

prose_13 -> { raw_17}
{rank=same; raw_17}

raw_17 [label="raw"]


// END RANK prose_13

raw_17 -> leaf_18
leaf_18  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This all goes into global space for now.  Our more sophisticated loader will
handle namespace isolation. Meanwhile we're building a repl, so.
"]
// END RANK raw_17

codeblock_14 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label="sql = require \"sqlite\"

lfs = require \"lfs\"
ffi = require \"ffi\"

ffi.reflect = require \"reflect\"

uv = require \"luv\"

L = require \"lpeg\"

a = require \"anterm\"

c = require \"color\"

core = require \"core\"

watch = require \"watcher\""]
// END RANK codeblock_14

section_15 -> { header_20 prose_21 codeblock_22}
{rank=same; header_20 prose_21 codeblock_22}

header_20 [label="4 : utils"]

prose_21 [label="prose"]

codeblock_22 [label="code block 38-151"]


// END RANK section_15

header_20 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** utils"]
// END RANK header_20

prose_21 -> { raw_24}
{rank=same; raw_24}

raw_24 [label="raw"]


// END RANK prose_21

raw_24 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_24

codeblock_22 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
local usecolors
stdout = \"\"

if uv.guess_handle(1) == \"tty\" then
  stdout = uv.new_tty(1, false)
  usecolors = true
else
  stdout = uv.new_pipe(false)
  uv.pipe_open(utils.stdout, 1)
  usecolors = false
end

if not usecolors then
   c.ts = tostring
   -- #todo make this properly black and white ts
end

function print(...)
  local n = select('#', ...)
  local arguments = {...}
  for i = 1, n do
    arguments[i] = tostring(arguments[i])
  end
  uv.write(stdout, table.concat(arguments, \"\\t\") .. \"\\n\")
end

function write(str)
   uv.write(stdout, str)
end


--  *** tty setup

if uv.guess_handle(0) ~= \"tty\" or
   uv.guess_handle(1) ~= \"tty\" then
  -- Entry point for other consumers!
  error \"stdio must be a tty\"
end

local stdin = uv.new_tty(0, true)


--  *** utilities

local function gatherResults(success, ...)
  local n = select('#', ...)
  return success, { n = n, ... }
end

local function printResults(results)
  for i = 1, results.n do
    results[i] = c.ts(results[i])
  end
  print(table.concat(results, '\\t'))
end

local buffer = ''

local function evaluateLine(line)
   if string.byte(line) == 17 then -- ^Q
      uv.stop()
      return 0
   end
   local chunk  = buffer .. line
   local f, err = loadstring('return ' .. chunk, 'REPL') -- first we prefix return

   if not f then
      f, err = loadstring(chunk, 'REPL') -- try again without return
   end

   if f then
      buffer = ''
      local success, results = gatherResults(xpcall(f, debug.traceback))

      if success then
      -- successful call
         if results.n > 0 then
            printResults(results)
         end
      else
      -- error
         print(results[1])
      end
   else
      if err:match \"'<eof>'$\" then
         -- Lua expects some more input; stow it away for next time
         buffer = chunk .. '\\n'
         return '...'
      else
         print(err)
         buffer = ''
      end
   end

   return 'ğŸ‘‰  '
end

local function displayPrompt(prompt)
  uv.write(stdout, prompt)
end

-- Deprecated, but useful if I want, y'know, a REPL
local function onread(err, line)
  if err then error(err) end
  if line then
    local prompt = evaluateLine(line)
    displayPrompt(prompt)
  else
    uv.close(stdin)
  end
end"]
// END RANK codeblock_22

section_6 -> { header_27 prose_28 section_29 section_30}
{rank=same; header_27 prose_28 section_29 section_30}

header_27 [label="2 : Reader"]

prose_28 [label="prose"]

section_29 [label="section: 160-183"]

section_30 [label="section: 184-288"]


// END RANK section_6

header_27 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Reader"]
// END RANK header_27

prose_28 -> { raw_32 prespace_33 literal_34 raw_35}
{rank=same; raw_32 prespace_33 literal_34 raw_35}

raw_32 [label="raw"]

prespace_33 [label="prespace"]

literal_34 [label="literal"]

raw_35 [label="raw"]


// END RANK prose_28

raw_32 -> leaf_36
leaf_36  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The reader takes a stream of data from"]
// END RANK raw_32

prespace_33 -> leaf_37
leaf_37  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_33

literal_34 -> leaf_38
leaf_38  [color=Gray,shape=rectangle,fontname=Inconsolata,label="stdin"]
// END RANK literal_34

raw_35 -> leaf_39
leaf_39  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", asynchronously, and
processes it into tokens, which stream to the recognizer.

"]
// END RANK raw_35

section_29 -> { header_40 prose_41 prose_42 prose_43 codeblock_44}
{rank=same; header_40 prose_41 prose_42 prose_43 codeblock_44}

header_40 [label="4 : keybuf"]

prose_41 [label="prose"]

prose_42 [label="prose"]

prose_43 [label="prose"]

codeblock_44 [label="code block 171-181"]


// END RANK section_29

header_40 -> leaf_45
leaf_45  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** keybuf"]
// END RANK header_40

prose_41 -> { raw_46}
{rank=same; raw_46}

raw_46 [label="raw"]


// END RANK prose_41

raw_46 -> leaf_47
leaf_47  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

 Currently the keybuf is a simple array that holds bytes until we have
enough for the lexer.
"]
// END RANK raw_46

prose_42 -> { raw_48}
{rank=same; raw_48}

raw_48 [label="raw"]


// END RANK prose_42

raw_48 -> leaf_49
leaf_49  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It is cleared and reused, to avoid a glut of allocations and allow the tracer
to follow it.
"]
// END RANK raw_48

prose_43 -> { raw_50 prespace_51 literal_52 raw_53}
{rank=same; raw_50 prespace_51 literal_52 raw_53}

raw_50 [label="raw"]

prespace_51 [label="prespace"]

literal_52 [label="literal"]

raw_53 [label="raw"]


// END RANK prose_43

raw_50 -> leaf_54
leaf_54  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Soon I'll move the remaining local state into an instance table, to make"]
// END RANK raw_50

prespace_51 -> leaf_55
leaf_55  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_51

literal_52 -> leaf_56
leaf_56  [color=Gray,shape=rectangle,fontname=Inconsolata,label="femto"]
// END RANK literal_52

raw_53 -> leaf_57
leaf_57  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" re-entrant.
"]
// END RANK raw_53

codeblock_44 -> leaf_58
leaf_58  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local keybuf = {}
local sub, byte = string.sub, string.byte
local concat = table.concat

local linebuf = { line = \"\",
                  ndx  = 0 }

local max_row, mac_col = uv.tty_get_winsize(stdin)
"]
// END RANK codeblock_44

section_30 -> { header_59 prose_60 codeblock_61 codeblock_62}
{rank=same; header_59 prose_60 codeblock_61 codeblock_62}

header_59 [label="3 : helper functions"]

prose_60 [label="prose"]

codeblock_61 [label="code block 189-256"]

codeblock_62 [label="code block 258-288"]


// END RANK section_30

header_59 -> leaf_63
leaf_63  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** helper functions"]
// END RANK header_59

prose_60 -> { raw_64}
{rank=same; raw_64}

raw_64 [label="raw"]


// END RANK prose_60

raw_64 -> leaf_65
leaf_65  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Writes will eventually happen in their own library.  Right now we're building
the minimum viable loop.
"]
// END RANK raw_64

codeblock_61 -> leaf_66
leaf_66  [color=Gray,shape=rectangle,fontname=Inconsolata,label="-- This will be called parse_digits and be substantially more complex.
--
local function cursor_pos(str)
   local row, col = core.cleave(str, \";\")
   return tonumber(row), tonumber(col)
end

-- more like jumpwrite at this point but w/
local function colwrite(str, col, row)
   col = col or 81
   row = row or 1
   local dash = a.stash()
             .. a.jump(1, col)
             .. a.erase.right()
             .. str
             .. a.pop()

   write(dash)
end

local STAT_ICON = \"â—‰\"

local function isnum(char)
   return char >= \"0\" and char <= \"9\"
end

local function isalpha(char)
   return (char >= \"A\" and char <= \"z\")
      or  (char >= \"a\" and char <= \"z\")
end

local function process_escapes(seq)
   local term = sub(seq, -1)
   local csi  = sub(seq, 2, 2) == \"[\" and true or false
   local payload
   local ltrim = csi and 3 or 2
   if #seq > ltrim then
      payload = sub(seq, ltrim, -1)
   end
   if term == \"R\" then
      local row, col = cursor_pos(payload)
      -- send them along
   elseif term == \"A\" then
      -- up
   elseif term == \"B\" then
      -- down
   elseif term == \"C\" then
      -- left
   elseif term == \"D\" then
      -- right
   else
      return write(seq)
   end
end

local function onseq(err,seq)
   if err then error(err) end

   if byte(seq) == 27 then
      colwrite(a.magenta(STAT_ICON) .. \" : \" .. c.ts(seq))
      process_escapes(seq)
      return
   end
   colwrite(a.green(STAT_ICON) .. \" : \" .. seq)
   write(seq)
end"]
// END RANK codeblock_61

codeblock_62 -> leaf_67
leaf_67  [color=Gray,shape=rectangle,fontname=Inconsolata,label="-- Get names for as many values as possible
-- into the colorizer
c.allNames()
-- This switches screens and does a wipe,
-- then puts the cursor at 1,1.
write '\\27[?47h\\27[2J\\27[H'
print \"an repl, plz reply uwu ğŸ‘€\"
displayPrompt 'ğŸ‘‰  '
-- Crude hack to choose raw mode at runtime
if arg[1] == \"-r\" then
   femto.raw()
   uv.read_start(stdin, onseq)
else
   uv.read_start(stdin, onread)
end



-- main loop
local retcode = uv.run('default')
-- Restore
print '\\27[?47l'

if retcode ~= 0 then
   error(retcode)
end

print(\"kthxbye\")
return retcode"]
// END RANK codeblock_62


}
