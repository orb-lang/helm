digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 334"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-217"]


// END RANK doc_0

section_1 -> { header_2 prose_3 section_4 section_5 section_6 section_7}
{rank=same; header_2 prose_3 section_4 section_5 section_6 section_7}

header_2 [label="1 : Femto"]

prose_3 [label="prose"]

section_4 [label="section: 6-54"]

section_5 [label="section: 61-175"]

section_6 [label="section: 189-217"]

section_7 [label="section: 218-223"]


// END RANK section_1

header_2 -> leaf_8
leaf_8  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*  Femto"]
// END RANK header_2

prose_3 -> { raw_9 prespace_10 literal_11 raw_12}
{rank=same; raw_9 prespace_10 literal_11 raw_12}

raw_9 [label="raw"]

prespace_10 [label="prespace"]

literal_11 [label="literal"]

raw_12 [label="raw"]


// END RANK prose_3

raw_9 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_9

prespace_10 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_10

literal_11 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label="femto"]
// END RANK literal_11

raw_12 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is our repl.
"]
// END RANK raw_12

section_4 -> { header_17 prose_18 section_19 section_20}
{rank=same; header_17 prose_18 section_19 section_20}

header_17 [label="2 : includes"]

prose_18 [label="prose"]

section_19 [label="section: 9-54"]

section_20 [label="section: 55-60"]


// END RANK section_4

header_17 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**  includes"]
// END RANK header_17

prose_18 -> { raw_22}
{rank=same; raw_22}

raw_22 [label="raw"]


// END RANK prose_18

raw_22 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

"]
// END RANK raw_22

section_19 -> { header_24 prose_25 prose_26 codeblock_27 prose_28 codeblock_29}
{rank=same; header_24 prose_25 prose_26 codeblock_27 prose_28 codeblock_29}

header_24 [label="4 : Intercept _G"]

prose_25 [label="prose"]

prose_26 [label="prose"]

codeblock_27 [label="code block 17-22"]

prose_28 [label="prose"]

codeblock_29 [label="code block 26-52"]


// END RANK section_19

header_24 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Intercept _G"]
// END RANK header_24

prose_25 -> { raw_31 prespace_32 literal_33 raw_34 prespace_35 literal_36 raw_37}
{rank=same; raw_31 prespace_32 literal_33 raw_34 prespace_35 literal_36 raw_37}

raw_31 [label="raw"]

prespace_32 [label="prespace"]

literal_33 [label="literal"]

raw_34 [label="raw"]

prespace_35 [label="prespace"]

literal_36 [label="literal"]

raw_37 [label="raw"]


// END RANK prose_25

raw_31 -> leaf_38
leaf_38  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

We don't want to put"]
// END RANK raw_31

prespace_32 -> leaf_39
leaf_39  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_32

literal_33 -> leaf_40
leaf_40  [color=Gray,shape=rectangle,fontname=Inconsolata,label="femto"]
// END RANK literal_33

raw_34 -> leaf_41
leaf_41  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" into the environment of the codebase under
examination, so we replace the global environment with a table which falls
back to"]
// END RANK raw_34

prespace_35 -> leaf_42
leaf_42  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_35

literal_36 -> leaf_43
leaf_43  [color=Gray,shape=rectangle,fontname=Inconsolata,label="_G"]
// END RANK literal_36

raw_37 -> leaf_44
leaf_44  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_37

prose_26 -> { raw_45}
{rank=same; raw_45}

raw_45 [label="raw"]


// END RANK prose_26

raw_45 -> leaf_46
leaf_46  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Man.  I really like having first-class environments.
"]
// END RANK raw_45

codeblock_27 -> leaf_47
leaf_47  [color=Gray,shape=rectangle,fontname=Inconsolata,label="__G = setmetatable({}, {__index = _G})

setfenv(0, __G)
local function _femto(_ENV)"]
// END RANK codeblock_27

prose_28 -> { raw_48}
{rank=same; raw_48}

raw_48 [label="raw"]


// END RANK prose_28

raw_48 -> leaf_49
leaf_49  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
No sense wasting a level of indent on a wrapper imho
"]
// END RANK raw_48

codeblock_29 -> leaf_50
leaf_50  [color=Gray,shape=rectangle,fontname=Inconsolata,label="setfenv(1, _ENV)

L    = require \"lpeg\"
lfs  = require \"lfs\"
ffi  = require \"ffi\"
bit  = require \"bit\"
uv   = require \"luv\"
utf8 = require \"lua-utf8\"

-- replace string lib with utf8 equivalents
for k,v in pairs(utf8) do
   if string[k] then
      string[k] = v
   end
end

jit.vmdef = require \"vmdef\"
jit.p = require \"ljprof\"

--apparently this is a hidden, undocumented LuaJIT thing?
require \"table.clear\"

-- sqlayer uses this monkey patch:
ffi.reflect = require \"reflect\"
sql = require \"sqlayer\""]
// END RANK codeblock_29

section_20 -> { header_51 prose_52}
{rank=same; header_51 prose_52}

header_51 [label="3 : Djikstra Insertion Point"]

prose_52 [label="prose"]


// END RANK section_20

header_51 -> leaf_53
leaf_53  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Djikstra Insertion Point"]
// END RANK header_51

prose_52 -> { raw_54}
{rank=same; raw_54}

raw_54 [label="raw"]


// END RANK prose_52

raw_54 -> leaf_55
leaf_55  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Although we're not doing so yet, this is where we will set up Djikstra mode
for participating code.  We then push that up through the layers, and it lands
as close to C level as practical.
"]
// END RANK raw_54

section_5 -> { header_56 prose_57 prose_58 codeblock_59 prose_60 prose_61 codeblock_62 section_63 section_64}
{rank=same; header_56 prose_57 prose_58 codeblock_59 prose_60 prose_61 codeblock_62 section_63 section_64}

header_56 [label="2 : core"]

prose_57 [label="prose"]

prose_58 [label="prose"]

codeblock_59 [label="code block 68-93"]

prose_60 [label="prose"]

prose_61 [label="prose"]

codeblock_62 [label="code block 100-107"]

section_63 [label="section: 109-175"]

section_64 [label="section: 176-188"]


// END RANK section_5

header_56 -> leaf_65
leaf_65  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** core"]
// END RANK header_56

prose_57 -> { raw_66 prespace_67 literal_68 raw_69}
{rank=same; raw_66 prespace_67 literal_68 raw_69}

raw_66 [label="raw"]

prespace_67 [label="prespace"]

literal_68 [label="literal"]

raw_69 [label="raw"]


// END RANK prose_57

raw_66 -> leaf_70
leaf_70  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The"]
// END RANK raw_66

prespace_67 -> leaf_71
leaf_71  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_67

literal_68 -> leaf_72
leaf_72  [color=Gray,shape=rectangle,fontname=Inconsolata,label="core"]
// END RANK literal_68

raw_69 -> leaf_73
leaf_73  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" library is shaping up as a place to keep alterations to the global
namespace and standard library.
"]
// END RANK raw_69

prose_58 -> { raw_74 prespace_75 literal_76 raw_77 prespace_78 literal_79 raw_80}
{rank=same; raw_74 prespace_75 literal_76 raw_77 prespace_78 literal_79 raw_80}

raw_74 [label="raw"]

prespace_75 [label="prespace"]

literal_76 [label="literal"]

raw_77 [label="raw"]

prespace_78 [label="prespace"]

literal_79 [label="literal"]

raw_80 [label="raw"]


// END RANK prose_58

raw_74 -> leaf_81
leaf_81  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This prelude belongs in"]
// END RANK raw_74

prespace_75 -> leaf_82
leaf_82  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_75

literal_76 -> leaf_83
leaf_83  [color=Gray,shape=rectangle,fontname=Inconsolata,label="pylon"]
// END RANK literal_76

raw_77 -> leaf_84
leaf_84  [color=Gray,shape=rectangle,fontname=Inconsolata,label="; it, and"]
// END RANK raw_77

prespace_78 -> leaf_85
leaf_85  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_78

literal_79 -> leaf_86
leaf_86  [color=Gray,shape=rectangle,fontname=Inconsolata,label="core"]
// END RANK literal_79

raw_80 -> leaf_87
leaf_87  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", will eventually end up there.
"]
// END RANK raw_80

codeblock_59 -> leaf_88
leaf_88  [color=Gray,shape=rectangle,fontname=Inconsolata,label="core = require \"core\"
string.cleave, string.litpat = core.cleave, core.litpat
string.utf8 = core.utf8 -- deprecated
string.codepoints = core.codepoints
string.lines = core.lines
table.splice = core.splice
table.clone = core.clone
table.arrayof = core.arrayof
table.collect = core.collect
table.select = core.select
table.reverse = core.reverse
table.hasfield = core.hasfield
table.keys = core.keys

table.pack = rawget(table, \"pack\") and table.pack or core.pack
table.unpack = rawget(table, \"unpack\") and table.unpack or unpack

meta = core.meta
getmeta, setmeta = getmetatable, setmetatable
hasmetamethod, hasfield = core.hasmetamethod, core.hasfield
coro = coroutine
--assert = core.assertfmt

local concat = assert(table.concat)"]
// END RANK codeblock_59

prose_60 -> { raw_89}
{rank=same; raw_89}

raw_89 [label="raw"]


// END RANK prose_60

raw_89 -> leaf_90
leaf_90  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Primitives for terminal manipulation.
"]
// END RANK raw_89

prose_61 -> { raw_91 prespace_92 literal_93 raw_94}
{rank=same; raw_91 prespace_92 literal_93 raw_94}

raw_91 [label="raw"]

prespace_92 [label="prespace"]

literal_93 [label="literal"]

raw_94 [label="raw"]


// END RANK prose_61

raw_91 -> leaf_95
leaf_95  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Arguably don't belong here."]
// END RANK raw_91

prespace_92 -> leaf_96
leaf_96  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_92

literal_93 -> leaf_97
leaf_97  [color=Gray,shape=rectangle,fontname=Inconsolata,label="watch"]
// END RANK literal_93

raw_94 -> leaf_98
leaf_98  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is unused at present, it will be useful
in Orb relatively soon.
"]
// END RANK raw_94

codeblock_62 -> leaf_99
leaf_99  [color=Gray,shape=rectangle,fontname=Inconsolata,label="a = require \"anterm\"
color = require \"color\"
ts = color.ts
c = color.color
--watch = require \"watcher\"
"]
// END RANK codeblock_62

section_63 -> { header_100 prose_101 prose_102 codeblock_103 prose_104 prose_105 codeblock_106 prose_107 codeblock_108 codeblock_109}
{rank=same; header_100 prose_101 prose_102 codeblock_103 prose_104 prose_105 codeblock_106 prose_107 codeblock_108 codeblock_109}

header_100 [label="3 : Logging"]

prose_101 [label="prose"]

prose_102 [label="prose"]

codeblock_103 [label="code block 115-132"]

prose_104 [label="prose"]

prose_105 [label="prose"]

codeblock_106 [label="code block 137-154"]

prose_107 [label="prose"]

codeblock_108 [label="code block 158-162"]

codeblock_109 [label="code block 164-173"]


// END RANK section_63

header_100 -> leaf_110
leaf_110  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Logging"]
// END RANK header_100

prose_101 -> { raw_111}
{rank=same; raw_111}

raw_111 [label="raw"]


// END RANK prose_101

raw_111 -> leaf_112
leaf_112  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

I'm making the crudest possible logger here.
"]
// END RANK raw_111

prose_102 -> { raw_113}
{rank=same; raw_113}

raw_113 [label="raw"]


// END RANK prose_102

raw_113 -> leaf_114
leaf_114  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This thing sucks tbh
"]
// END RANK raw_113

codeblock_103 -> leaf_115
leaf_115  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local _log = {}
_log.vals = {}
local format = assert(string.format )
local function __logger(_, fmtstr, ...)
   _log[#_log + 1] = format(fmtstr, ...)
   _log.vals[#_log.vals + 1] = table.pack(...)
end

log = setmeta(_log, {__call = __logger})

log.cache = {}
function cache(a,b,c)
   local tuck = {a,b,c}
   log.cache[#log.cache + 1] = tuck
end
"]
// END RANK codeblock_103

prose_104 -> { raw_116}
{rank=same; raw_116}

raw_116 [label="raw"]


// END RANK prose_104

raw_116 -> leaf_117
leaf_117  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This boot sequence builds on Tim Caswell and the Luvit Author's repl example.
"]
// END RANK raw_116

prose_105 -> { raw_118}
{rank=same; raw_118}

raw_118 [label="raw"]


// END RANK prose_105

raw_118 -> leaf_119
leaf_119  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Couple pieces I'm not using but should:"]
// END RANK raw_118

codeblock_106 -> leaf_120
leaf_120  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local usecolors
stdout = \"\"

if uv.guess_handle(1) == \"tty\" then
  stdout = uv.new_tty(1, false)
  usecolors = true
else
  stdout = uv.new_pipe(false)
  uv.pipe_open(utils.stdout, 1)
  usecolors = false
end

if not usecolors then
   ts = tostring
   -- #todo make this properly black and white ts
end"]
// END RANK codeblock_106

prose_107 -> { raw_121 prespace_122 literal_123 raw_124 prespace_125 literal_126 raw_127}
{rank=same; raw_121 prespace_122 literal_123 raw_124 prespace_125 literal_126 raw_127}

raw_121 [label="raw"]

prespace_122 [label="prespace"]

literal_123 [label="literal"]

raw_124 [label="raw"]

prespace_125 [label="prespace"]

literal_126 [label="literal"]

raw_127 [label="raw"]


// END RANK prose_107

raw_121 -> leaf_128
leaf_128  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Not-blocking"]
// END RANK raw_121

prespace_122 -> leaf_129
leaf_129  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_122

literal_123 -> leaf_130
leaf_130  [color=Gray,shape=rectangle,fontname=Inconsolata,label="write"]
// END RANK literal_123

raw_124 -> leaf_131
leaf_131  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_124

prespace_125 -> leaf_132
leaf_132  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_125

literal_126 -> leaf_133
leaf_133  [color=Gray,shape=rectangle,fontname=Inconsolata,label="print"]
// END RANK literal_126

raw_127 -> leaf_134
leaf_134  [color=Gray,shape=rectangle,fontname=Inconsolata,label=":
"]
// END RANK raw_127

codeblock_108 -> leaf_135
leaf_135  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function write(str)
   uv.write(stdout, str)
end"]
// END RANK codeblock_108

codeblock_109 -> leaf_136
leaf_136  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function print(...)
  local n = select('#', ...)
  local arguments = {...}
  for i = 1, n do
    arguments[i] = tostring(arguments[i])
  end
  uv.write(stdout, concat(arguments, \"\\t\") .. \"\\n\")
end"]
// END RANK codeblock_109

section_64 -> { header_137 prose_138 codeblock_139}
{rank=same; header_137 prose_138 codeblock_139}

header_137 [label="3 : tty setup"]

prose_138 [label="prose"]

codeblock_139 [label="code block 178-186"]


// END RANK section_64

header_137 -> leaf_140
leaf_140  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** tty setup"]
// END RANK header_137

prose_138 -> { raw_141}
{rank=same; raw_141}

raw_141 [label="raw"]


// END RANK prose_138

raw_141 -> leaf_142
leaf_142  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_141

codeblock_139 -> leaf_143
leaf_143  [color=Gray,shape=rectangle,fontname=Inconsolata,label="if uv.guess_handle(0) ~= \"tty\" or
   uv.guess_handle(1) ~= \"tty\" then
  -- Entry point for other consumers!
  error \"stdio must be a tty\"
end

local stdin = uv.new_tty(0, true)"]
// END RANK codeblock_139

section_6 -> { header_144 prose_145 codeblock_146}
{rank=same; header_144 prose_145 codeblock_146}

header_144 [label="2 : Modeselektor"]

prose_145 [label="prose"]

codeblock_146 [label="code block 194-215"]


// END RANK section_6

header_144 -> leaf_147
leaf_147  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Modeselektor"]
// END RANK header_144

prose_145 -> { raw_148}
{rank=same; raw_148}

raw_148 [label="raw"]


// END RANK prose_145

raw_148 -> leaf_149
leaf_149  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This should start with a read which saves the cursor location.

"]
// END RANK raw_148

codeblock_146 -> leaf_150
leaf_150  [color=Gray,shape=rectangle,fontname=Inconsolata,label="-- This switches screens and does a wipe,
-- then puts the cursor at 1,1.
write \"\\x1b[?47h\\x1b[2J\\x1b[H\"

-- Get window size and set up an idler to keep it refreshed

local max_col, max_row = uv.tty_get_winsize(stdin)

modeS = require \"modeselektor\" (max_col, max_row)

local timer = uv.new_timer()
uv.timer_start(timer, 500, 500, function()
   max_col, max_row = uv.tty_get_winsize(stdin)
   if max_col ~= modeS.max_col or max_row ~= modeS.max_row then
      -- reflow screen.
      -- for now:
      modeS.max_col, modeS.max_row = max_col, max_row
      modeS:reflow()
   end
end)"]
// END RANK codeblock_146

section_7 -> { header_151 prose_152 section_153}
{rank=same; header_151 prose_152 section_153}

header_151 [label="2 : Reader"]

prose_152 [label="prose"]

section_153 [label="section: 224-323"]


// END RANK section_7

header_151 -> leaf_154
leaf_154  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Reader"]
// END RANK header_151

prose_152 -> { raw_155 prespace_156 literal_157 raw_158 prespace_159 literal_160 raw_161}
{rank=same; raw_155 prespace_156 literal_157 raw_158 prespace_159 literal_160 raw_161}

raw_155 [label="raw"]

prespace_156 [label="prespace"]

literal_157 [label="literal"]

raw_158 [label="raw"]

prespace_159 [label="prespace"]

literal_160 [label="literal"]

raw_161 [label="raw"]


// END RANK prose_152

raw_155 -> leaf_162
leaf_162  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The reader takes a stream of data from"]
// END RANK raw_155

prespace_156 -> leaf_163
leaf_163  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_156

literal_157 -> leaf_164
leaf_164  [color=Gray,shape=rectangle,fontname=Inconsolata,label="stdin"]
// END RANK literal_157

raw_158 -> leaf_165
leaf_165  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", asynchronously, and
processes it into tokens, which stream to the"]
// END RANK raw_158

prespace_159 -> leaf_166
leaf_166  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_159

literal_160 -> leaf_167
leaf_167  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_160

raw_161 -> leaf_168
leaf_168  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".

"]
// END RANK raw_161

section_153 -> { header_169 prose_170 codeblock_171 codeblock_172 section_173}
{rank=same; header_169 prose_170 codeblock_171 codeblock_172 section_173}

header_169 [label="3 : process_escapes(seq)"]

prose_170 [label="prose"]

codeblock_171 [label="code block 226-284"]

codeblock_172 [label="code block 286-322"]

section_173 [label="section: 324-334"]


// END RANK section_153

header_169 -> leaf_174
leaf_174  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** process_escapes(seq)"]
// END RANK header_169

prose_170 -> { raw_175}
{rank=same; raw_175}

raw_175 [label="raw"]


// END RANK prose_170

raw_175 -> leaf_176
leaf_176  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_175

codeblock_171 -> leaf_177
leaf_177  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local byte, sub, codepoints = string.byte, string.sub, string.codepoints
local m_parse, is_mouse = a.mouse.parse_fast, a.mouse.ismousemove
local navigation, is_nav = a.navigation, a.is_nav

local function process_escapes(seq)
   if is_nav(seq) then
      return modeS(\"NAV\", navigation[seq])
   end
   if is_mouse(seq) then
      local m = m_parse(seq)
      return modeS(\"MOUSE\", m)
   elseif #seq == 2 and byte(sub(seq,2,2)) < 128 then
      -- Meta
      local key = \"M-\" .. sub(seq,2,2)
      return modeS(\"ALT\", key)
   else
      return modeS(\"NYI\", seq)
   end
end

local function onseq(err,seq)
   if err then error(err) end
   local head = byte(seq)
   -- ^Q hard coded as quit, for now
   if head == 17 then
      uv.tty_set_mode(stdin, 1)
      write(a.mouse.track(false))
      uv.stop()
      return 0
   end
   -- Escape sequences
   if head == 27 then
      return process_escapes(seq)
   end
   -- Control sequences
   if head <= 31 and not navigation[seq] then
      local ctrl = \"^\" .. string.char(head + 64)
      return modeS(\"CTRL\", ctrl)
   elseif navigation[seq] then
      return modeS(\"NAV\", navigation[seq])
   end
   -- Printables
   if head > 31 and head < 127 then
      if #seq > 1 then
         -- break it up and feed it
         local points = codepoints(seq)
         for _, pt in ipairs(points) do
            onseq(nil, pt)
         end
      else
         return modeS(\"ASCII\", seq)
      end
   else
      -- wchars go here
      return modeS(\"NYI\", seq)
   end
end"]
// END RANK codeblock_171

codeblock_172 -> leaf_178
leaf_178  [color=Gray,shape=rectangle,fontname=Inconsolata,label="-- Get names for as many values as possible
-- into the colorizer
color.allNames()

-- raw mode
uv.tty_set_mode(stdin, 2)
-- mouse mode
write(a.mouse.track(true))
uv.read_start(stdin, onseq)

-- read main programme
-- faked for now
---[[
if arg[1] then
  local chunk = loadfile(arg[1])
  setfenv(chunk,  _G)
  chunk()
end
--]]

-- paint screen

modeS:paint()

-- main loop
local retcode =  uv.run('default')
-- Restore main screen
print '\\x1b[?47l'

if retcode ~= true then
   error(retcode)
end

print(\"kthxbye\")
return retcode"]
// END RANK codeblock_172

section_173 -> { header_179 prose_180 codeblock_181}
{rank=same; header_179 prose_180 codeblock_181}

header_179 [label="4 : Launch femto"]

prose_180 [label="prose"]

codeblock_181 [label="code block 328-333"]


// END RANK section_173

header_179 -> leaf_182
leaf_182  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Launch femto"]
// END RANK header_179

prose_180 -> { raw_183}
{rank=same; raw_183}

raw_183 [label="raw"]


// END RANK prose_180

raw_183 -> leaf_184
leaf_184  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Here we assign our function a wrapper and get down to business
"]
// END RANK raw_183

codeblock_181 -> leaf_185
leaf_185  [color=Gray,shape=rectangle,fontname=Inconsolata,label="end -- of wrapper
local retcode = _femto(__G)

return retcode"]
// END RANK codeblock_181


}
