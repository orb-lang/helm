digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 230"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-159"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 section_5 section_6}
{rank=same; header_2 prose_3 prose_4 section_5 section_6}

header_2 [label="1 : Femto"]

prose_3 [label="prose"]

prose_4 [label="prose"]

section_5 [label="section: 9-35"]

section_6 [label="section: 160-230"]


// END RANK section_1

header_2 -> leaf_7
leaf_7  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*  Femto"]
// END RANK header_2

prose_3 -> { raw_8}
{rank=same; raw_8}

raw_8 [label="raw"]


// END RANK prose_3

raw_8 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


I just got orb stood up in the pylon bootloader distribution.
"]
// END RANK raw_8

prose_4 -> { raw_10}
{rank=same; raw_10}

raw_10 [label="raw"]


// END RANK prose_4

raw_10 -> leaf_11
leaf_11  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I am excited about this.

"]
// END RANK raw_10

section_5 -> { header_12 prose_13 codeblock_14 section_15}
{rank=same; header_12 prose_13 codeblock_14 section_15}

header_12 [label="2 : includes"]

prose_13 [label="prose"]

codeblock_14 [label="code block 14-33"]

section_15 [label="section: 36-159"]


// END RANK section_5

header_12 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**  includes"]
// END RANK header_12

prose_13 -> { raw_17}
{rank=same; raw_17}

raw_17 [label="raw"]


// END RANK prose_13

raw_17 -> leaf_18
leaf_18  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This all goes into global space for now.  Our more sophisticated loader will
handle namespace isolation. Meanwhile we're building a repl, so.
"]
// END RANK raw_17

codeblock_14 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label="sql = require \"sqlite\"

lfs = require \"lfs\"
ffi = require \"ffi\"

ffi.reflect = require \"reflect\"

uv = require \"luv\"

L = require \"lpeg\"

a = require \"anterm\"

c = require \"color\"

core = require \"core\"

watch = require \"watcher\""]
// END RANK codeblock_14

section_15 -> { header_20 prose_21 codeblock_22}
{rank=same; header_20 prose_21 codeblock_22}

header_20 [label="4 : utils"]

prose_21 [label="prose"]

codeblock_22 [label="code block 38-157"]


// END RANK section_15

header_20 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** utils"]
// END RANK header_20

prose_21 -> { raw_24}
{rank=same; raw_24}

raw_24 [label="raw"]


// END RANK prose_21

raw_24 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_24

codeblock_22 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
local usecolors
stdout = \"\"

if uv.guess_handle(1) == \"tty\" then
  stdout = uv.new_tty(1, false)
  usecolors = true
else
  stdout = uv.new_pipe(false)
  uv.pipe_open(utils.stdout, 1)
  usecolors = false
end

if not usecolors then
   c.ts = tostring
   -- #todo make this properly black and white ts
end

function print(...)
  local n = select('#', ...)
  local arguments = {...}
  for i = 1, n do
    arguments[i] = tostring(arguments[i])
  end
  uv.write(stdout, table.concat(arguments, \"\\t\") .. \"\\n\")
end

function write(str)
   uv.write(stdout, str)
end


--  *** tty setup

if uv.guess_handle(0) ~= \"tty\" or
   uv.guess_handle(1) ~= \"tty\" then
  -- Entry point for other consumers!
  error \"stdio must be a tty\"
end

local stdin = uv.new_tty(0, true)


--[[

I'll keep this around for a bit, it looks nice


--]]

--  *** utilities

local function gatherResults(success, ...)
  local n = select('#', ...)
  return success, { n = n, ... }
end

local function printResults(results)
  for i = 1, results.n do
    results[i] = c.ts(results[i])
  end
  print(table.concat(results, '\\t'))
end

local buffer = ''

local function evaluateLine(line)
   if string.byte(line) == 17 then -- ^Q
      uv.stop()
      return 0
   end
   local chunk  = buffer .. line
   local f, err = loadstring('return ' .. chunk, 'REPL') -- first we prefix return

   if not f then
      f, err = loadstring(chunk, 'REPL') -- try again without return
   end

   if f then
      buffer = ''
      local success, results = gatherResults(xpcall(f, debug.traceback))

      if success then
      -- successful call
         if results.n > 0 then
            printResults(results)
         end
      else
      -- error
         print(results[1])
      end
   else
      if err:match \"'<eof>'$\" then
         -- Lua expects some more input; stow it away for next time
         buffer = chunk .. '\\n'
         return '...'
      else
         print(err)
         buffer = ''
      end
   end

   return 'ðŸ‘‰  '
end

local function displayPrompt(prompt)
  uv.write(stdout, prompt)
end

local function onread(err, line)
  if err then error(err) end
  if line then
    local prompt = evaluateLine(line)
    displayPrompt(prompt)
  else
    uv.close(stdin)
  end
end"]
// END RANK codeblock_22

section_6 -> { header_27 prose_28 prose_29 codeblock_30 codeblock_31}
{rank=same; header_27 prose_28 prose_29 codeblock_30 codeblock_31}

header_27 [label="2 : onkey(err, key)"]

prose_28 [label="prose"]

prose_29 [label="prose"]

codeblock_30 [label="code block 167-202"]

codeblock_31 [label="code block 204-230"]


// END RANK section_6

header_27 -> leaf_32
leaf_32  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** onkey(err, key)"]
// END RANK header_27

prose_28 -> { raw_33}
{rank=same; raw_33}

raw_33 [label="raw"]


// END RANK prose_28

raw_33 -> leaf_34
leaf_34  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

We buffer escape sequences, which terminate in an alphabetic value.
"]
// END RANK raw_33

prose_29 -> { raw_35}
{rank=same; raw_35}

raw_35 [label="raw"]


// END RANK prose_29

raw_35 -> leaf_36
leaf_36  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
No special effort to detect \"^[[\" (as opposed to just \"^[\") is made, that is
handled at the recognizer layer.
"]
// END RANK raw_35

codeblock_30 -> leaf_37
leaf_37  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local keybuf = {}
local byte = string.byte
local concat = table.concat

local function recognize(seq)
   uv.write(stdout, seq)
end

local function onkey(err, key)
   if err then error(err) end
   if key == \"\\17\" then
      femto.disableRawMode()
      uv.stop()
      return 0
   end
   if key == \"\\27\" then
      keybuf[#keybuf + 1]  = key
      return
   end
   if #keybuf > 0 then
      local char = byte(key)
      -- [A-Za-z]
      if (char >= 65 and char <= 90)
         or (char >= 97 and char <= 122) then
         local esc_val = concat(keybuf) .. key
         for i, _ in ipairs(keybuf) do keybuf[i] = nil end
         return recognize(esc_val)
      else
         keybuf[#keybuf + 1] = key
         return
      end
   end
   return recognize(key)
end"]
// END RANK codeblock_30

codeblock_31 -> leaf_38
leaf_38  [color=Gray,shape=rectangle,fontname=Inconsolata,label="-- Alternate screen

coroutine.wrap(function()
   -- Get names for as many values as possible
   -- into the colorizer
   c.allNames()
   -- This switches screens and does a wipe,
   -- then puts the cursor at 1,1.
   write '\\27[?47h\\27[2J\\27[H'
   print \"an repl, plz reply uwu ðŸ‘€\"
   displayPrompt 'ðŸ‘‰  '
   femto.enableRawMode()
   uv.read_start(stdin, onkey)
   --uv.read_start(stdin, onread)
end)()



local retcode = uv.run('default')
-- Restore

print '\\27[?47l'

print(\"kthxbye\")
return retcode"]
// END RANK codeblock_31


}
