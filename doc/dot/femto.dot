digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 326"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-211"]


// END RANK doc_0

section_1 -> { header_2 prose_3 section_4 section_5 section_6 section_7}
{rank=same; header_2 prose_3 section_4 section_5 section_6 section_7}

header_2 [label="1 : Femto"]

prose_3 [label="prose"]

section_4 [label="section: 6-48"]

section_5 [label="section: 55-169"]

section_6 [label="section: 183-211"]

section_7 [label="section: 212-217"]


// END RANK section_1

header_2 -> leaf_8
leaf_8  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*  Femto"]
// END RANK header_2

prose_3 -> { raw_9 prespace_10 literal_11 raw_12}
{rank=same; raw_9 prespace_10 literal_11 raw_12}

raw_9 [label="raw"]

prespace_10 [label="prespace"]

literal_11 [label="literal"]

raw_12 [label="raw"]


// END RANK prose_3

raw_9 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_9

prespace_10 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_10

literal_11 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label="femto"]
// END RANK literal_11

raw_12 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is our repl.
"]
// END RANK raw_12

section_4 -> { header_17 prose_18 section_19 section_20}
{rank=same; header_17 prose_18 section_19 section_20}

header_17 [label="2 : includes"]

prose_18 [label="prose"]

section_19 [label="section: 9-48"]

section_20 [label="section: 49-54"]


// END RANK section_4

header_17 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**  includes"]
// END RANK header_17

prose_18 -> { raw_22}
{rank=same; raw_22}

raw_22 [label="raw"]


// END RANK prose_18

raw_22 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

"]
// END RANK raw_22

section_19 -> { header_24 prose_25 codeblock_26 codeblock_27}
{rank=same; header_24 prose_25 codeblock_26 codeblock_27}

header_24 [label="4 : Intercept _G"]

prose_25 [label="prose"]

codeblock_26 [label="code block 11-16"]

codeblock_27 [label="code block 20-46"]


// END RANK section_19

header_24 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Intercept _G"]
// END RANK header_24

prose_25 -> { raw_29}
{rank=same; raw_29}

raw_29 [label="raw"]


// END RANK prose_25

raw_29 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_29

codeblock_26 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label="__G = setmetatable({}, {__index = _G})

setfenv(0, __G)
local function _femto(_ENV)"]
// END RANK codeblock_26

codeblock_27 -> leaf_32
leaf_32  [color=Gray,shape=rectangle,fontname=Inconsolata,label="setfenv(1, _ENV)

L    = require \"lpeg\"
lfs  = require \"lfs\"
ffi  = require \"ffi\"
bit  = require \"bit\"
uv   = require \"luv\"
utf8 = require \"lua-utf8\"

-- replace string lib with utf8 equivalents
for k,v in pairs(utf8) do
   if string[k] then
      string[k] = v
   end
end

jit.vmdef = require \"vmdef\"
jit.p = require \"ljprof\"

--apparently this is a hidden, undocumented LuaJIT thing?
require \"table.clear\"

-- sqlayer uses this monkey patch:
ffi.reflect = require \"reflect\"
sql = require \"sqlayer\""]
// END RANK codeblock_27

section_20 -> { header_33 prose_34}
{rank=same; header_33 prose_34}

header_33 [label="3 : Djikstra Insertion Point"]

prose_34 [label="prose"]


// END RANK section_20

header_33 -> leaf_35
leaf_35  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Djikstra Insertion Point"]
// END RANK header_33

prose_34 -> { raw_36}
{rank=same; raw_36}

raw_36 [label="raw"]


// END RANK prose_34

raw_36 -> leaf_37
leaf_37  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Although we're not doing so yet, this is where we will set up Djikstra mode
for participating code.  We then push that up through the layers, and it lands
as close to C level as practical.
"]
// END RANK raw_36

section_5 -> { header_38 prose_39 prose_40 codeblock_41 prose_42 prose_43 codeblock_44 section_45 section_46}
{rank=same; header_38 prose_39 prose_40 codeblock_41 prose_42 prose_43 codeblock_44 section_45 section_46}

header_38 [label="2 : core"]

prose_39 [label="prose"]

prose_40 [label="prose"]

codeblock_41 [label="code block 62-87"]

prose_42 [label="prose"]

prose_43 [label="prose"]

codeblock_44 [label="code block 94-101"]

section_45 [label="section: 103-169"]

section_46 [label="section: 170-182"]


// END RANK section_5

header_38 -> leaf_47
leaf_47  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** core"]
// END RANK header_38

prose_39 -> { raw_48 prespace_49 literal_50 raw_51}
{rank=same; raw_48 prespace_49 literal_50 raw_51}

raw_48 [label="raw"]

prespace_49 [label="prespace"]

literal_50 [label="literal"]

raw_51 [label="raw"]


// END RANK prose_39

raw_48 -> leaf_52
leaf_52  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The"]
// END RANK raw_48

prespace_49 -> leaf_53
leaf_53  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_49

literal_50 -> leaf_54
leaf_54  [color=Gray,shape=rectangle,fontname=Inconsolata,label="core"]
// END RANK literal_50

raw_51 -> leaf_55
leaf_55  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" library is shaping up as a place to keep alterations to the global
namespace and standard library.
"]
// END RANK raw_51

prose_40 -> { raw_56 prespace_57 literal_58 raw_59 prespace_60 literal_61 raw_62}
{rank=same; raw_56 prespace_57 literal_58 raw_59 prespace_60 literal_61 raw_62}

raw_56 [label="raw"]

prespace_57 [label="prespace"]

literal_58 [label="literal"]

raw_59 [label="raw"]

prespace_60 [label="prespace"]

literal_61 [label="literal"]

raw_62 [label="raw"]


// END RANK prose_40

raw_56 -> leaf_63
leaf_63  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This prelude belongs in"]
// END RANK raw_56

prespace_57 -> leaf_64
leaf_64  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_57

literal_58 -> leaf_65
leaf_65  [color=Gray,shape=rectangle,fontname=Inconsolata,label="pylon"]
// END RANK literal_58

raw_59 -> leaf_66
leaf_66  [color=Gray,shape=rectangle,fontname=Inconsolata,label="; it, and"]
// END RANK raw_59

prespace_60 -> leaf_67
leaf_67  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_60

literal_61 -> leaf_68
leaf_68  [color=Gray,shape=rectangle,fontname=Inconsolata,label="core"]
// END RANK literal_61

raw_62 -> leaf_69
leaf_69  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", will eventually end up there.
"]
// END RANK raw_62

codeblock_41 -> leaf_70
leaf_70  [color=Gray,shape=rectangle,fontname=Inconsolata,label="core = require \"core\"
string.cleave, string.litpat = core.cleave, core.litpat
string.utf8 = core.utf8 -- deprecated
string.codepoints = core.codepoints
string.lines = core.lines
table.splice = core.splice
table.clone = core.clone
table.arrayof = core.arrayof
table.collect = core.collect
table.select = core.select
table.reverse = core.reverse
table.hasfield = core.hasfield
table.keys = core.keys

table.pack = rawget(table, \"pack\") and table.pack or core.pack
table.unpack = rawget(table, \"unpack\") and table.unpack or unpack

meta = core.meta
getmeta, setmeta = getmetatable, setmetatable
hasmetamethod, hasfield = core.hasmetamethod, core.hasfield
coro = coroutine
--assert = core.assertfmt

local concat = assert(table.concat)"]
// END RANK codeblock_41

prose_42 -> { raw_71}
{rank=same; raw_71}

raw_71 [label="raw"]


// END RANK prose_42

raw_71 -> leaf_72
leaf_72  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Primitives for terminal manipulation.
"]
// END RANK raw_71

prose_43 -> { raw_73 prespace_74 literal_75 raw_76}
{rank=same; raw_73 prespace_74 literal_75 raw_76}

raw_73 [label="raw"]

prespace_74 [label="prespace"]

literal_75 [label="literal"]

raw_76 [label="raw"]


// END RANK prose_43

raw_73 -> leaf_77
leaf_77  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Arguably don't belong here."]
// END RANK raw_73

prespace_74 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_74

literal_75 -> leaf_79
leaf_79  [color=Gray,shape=rectangle,fontname=Inconsolata,label="watch"]
// END RANK literal_75

raw_76 -> leaf_80
leaf_80  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is unused at present, it will be useful
in Orb relatively soon.
"]
// END RANK raw_76

codeblock_44 -> leaf_81
leaf_81  [color=Gray,shape=rectangle,fontname=Inconsolata,label="a = require \"anterm\"
color = require \"color\"
ts = color.ts
c = color.color
--watch = require \"watcher\"
"]
// END RANK codeblock_44

section_45 -> { header_82 prose_83 prose_84 codeblock_85 prose_86 prose_87 codeblock_88 prose_89 codeblock_90 codeblock_91}
{rank=same; header_82 prose_83 prose_84 codeblock_85 prose_86 prose_87 codeblock_88 prose_89 codeblock_90 codeblock_91}

header_82 [label="3 : Logging"]

prose_83 [label="prose"]

prose_84 [label="prose"]

codeblock_85 [label="code block 109-126"]

prose_86 [label="prose"]

prose_87 [label="prose"]

codeblock_88 [label="code block 131-148"]

prose_89 [label="prose"]

codeblock_90 [label="code block 152-156"]

codeblock_91 [label="code block 158-167"]


// END RANK section_45

header_82 -> leaf_92
leaf_92  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Logging"]
// END RANK header_82

prose_83 -> { raw_93}
{rank=same; raw_93}

raw_93 [label="raw"]


// END RANK prose_83

raw_93 -> leaf_94
leaf_94  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

I'm making the crudest possible logger here.
"]
// END RANK raw_93

prose_84 -> { raw_95}
{rank=same; raw_95}

raw_95 [label="raw"]


// END RANK prose_84

raw_95 -> leaf_96
leaf_96  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This thing sucks tbh
"]
// END RANK raw_95

codeblock_85 -> leaf_97
leaf_97  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local _log = {}
_log.vals = {}
local format = assert(string.format )
local function __logger(_, fmtstr, ...)
   _log[#_log + 1] = format(fmtstr, ...)
   _log.vals[#_log.vals + 1] = table.pack(...)
end

log = setmeta(_log, {__call = __logger})

log.cache = {}
function cache(a,b,c)
   local tuck = {a,b,c}
   log.cache[#log.cache + 1] = tuck
end
"]
// END RANK codeblock_85

prose_86 -> { raw_98}
{rank=same; raw_98}

raw_98 [label="raw"]


// END RANK prose_86

raw_98 -> leaf_99
leaf_99  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This boot sequence builds on Tim Caswell and the Luvit Author's repl example.
"]
// END RANK raw_98

prose_87 -> { raw_100}
{rank=same; raw_100}

raw_100 [label="raw"]


// END RANK prose_87

raw_100 -> leaf_101
leaf_101  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Couple pieces I'm not using but should:"]
// END RANK raw_100

codeblock_88 -> leaf_102
leaf_102  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local usecolors
stdout = \"\"

if uv.guess_handle(1) == \"tty\" then
  stdout = uv.new_tty(1, false)
  usecolors = true
else
  stdout = uv.new_pipe(false)
  uv.pipe_open(utils.stdout, 1)
  usecolors = false
end

if not usecolors then
   ts = tostring
   -- #todo make this properly black and white ts
end"]
// END RANK codeblock_88

prose_89 -> { raw_103 prespace_104 literal_105 raw_106 prespace_107 literal_108 raw_109}
{rank=same; raw_103 prespace_104 literal_105 raw_106 prespace_107 literal_108 raw_109}

raw_103 [label="raw"]

prespace_104 [label="prespace"]

literal_105 [label="literal"]

raw_106 [label="raw"]

prespace_107 [label="prespace"]

literal_108 [label="literal"]

raw_109 [label="raw"]


// END RANK prose_89

raw_103 -> leaf_110
leaf_110  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Not-blocking"]
// END RANK raw_103

prespace_104 -> leaf_111
leaf_111  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_104

literal_105 -> leaf_112
leaf_112  [color=Gray,shape=rectangle,fontname=Inconsolata,label="write"]
// END RANK literal_105

raw_106 -> leaf_113
leaf_113  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_106

prespace_107 -> leaf_114
leaf_114  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_107

literal_108 -> leaf_115
leaf_115  [color=Gray,shape=rectangle,fontname=Inconsolata,label="print"]
// END RANK literal_108

raw_109 -> leaf_116
leaf_116  [color=Gray,shape=rectangle,fontname=Inconsolata,label=":
"]
// END RANK raw_109

codeblock_90 -> leaf_117
leaf_117  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function write(str)
   uv.write(stdout, str)
end"]
// END RANK codeblock_90

codeblock_91 -> leaf_118
leaf_118  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function print(...)
  local n = select('#', ...)
  local arguments = {...}
  for i = 1, n do
    arguments[i] = tostring(arguments[i])
  end
  uv.write(stdout, concat(arguments, \"\\t\") .. \"\\n\")
end"]
// END RANK codeblock_91

section_46 -> { header_119 prose_120 codeblock_121}
{rank=same; header_119 prose_120 codeblock_121}

header_119 [label="3 : tty setup"]

prose_120 [label="prose"]

codeblock_121 [label="code block 172-180"]


// END RANK section_46

header_119 -> leaf_122
leaf_122  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** tty setup"]
// END RANK header_119

prose_120 -> { raw_123}
{rank=same; raw_123}

raw_123 [label="raw"]


// END RANK prose_120

raw_123 -> leaf_124
leaf_124  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_123

codeblock_121 -> leaf_125
leaf_125  [color=Gray,shape=rectangle,fontname=Inconsolata,label="if uv.guess_handle(0) ~= \"tty\" or
   uv.guess_handle(1) ~= \"tty\" then
  -- Entry point for other consumers!
  error \"stdio must be a tty\"
end

local stdin = uv.new_tty(0, true)"]
// END RANK codeblock_121

section_6 -> { header_126 prose_127 codeblock_128}
{rank=same; header_126 prose_127 codeblock_128}

header_126 [label="2 : Modeselektor"]

prose_127 [label="prose"]

codeblock_128 [label="code block 188-209"]


// END RANK section_6

header_126 -> leaf_129
leaf_129  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Modeselektor"]
// END RANK header_126

prose_127 -> { raw_130}
{rank=same; raw_130}

raw_130 [label="raw"]


// END RANK prose_127

raw_130 -> leaf_131
leaf_131  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This should start with a read which saves the cursor location.

"]
// END RANK raw_130

codeblock_128 -> leaf_132
leaf_132  [color=Gray,shape=rectangle,fontname=Inconsolata,label="-- This switches screens and does a wipe,
-- then puts the cursor at 1,1.
write \"\\x1b[?47h\\x1b[2J\\x1b[H\"

-- Get window size and set up an idler to keep it refreshed

local max_col, max_row = uv.tty_get_winsize(stdin)

modeS = require \"modeselektor\" (max_col, max_row)

local timer = uv.new_timer()
uv.timer_start(timer, 500, 500, function()
   max_col, max_row = uv.tty_get_winsize(stdin)
   if max_col ~= modeS.max_col or max_row ~= modeS.max_row then
      -- reflow screen.
      -- for now:
      modeS.max_col, modeS.max_row = max_col, max_row
      modeS:reflow()
   end
end)"]
// END RANK codeblock_128

section_7 -> { header_133 prose_134 section_135}
{rank=same; header_133 prose_134 section_135}

header_133 [label="2 : Reader"]

prose_134 [label="prose"]

section_135 [label="section: 218-315"]


// END RANK section_7

header_133 -> leaf_136
leaf_136  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Reader"]
// END RANK header_133

prose_134 -> { raw_137 prespace_138 literal_139 raw_140 prespace_141 literal_142 raw_143}
{rank=same; raw_137 prespace_138 literal_139 raw_140 prespace_141 literal_142 raw_143}

raw_137 [label="raw"]

prespace_138 [label="prespace"]

literal_139 [label="literal"]

raw_140 [label="raw"]

prespace_141 [label="prespace"]

literal_142 [label="literal"]

raw_143 [label="raw"]


// END RANK prose_134

raw_137 -> leaf_144
leaf_144  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The reader takes a stream of data from"]
// END RANK raw_137

prespace_138 -> leaf_145
leaf_145  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_138

literal_139 -> leaf_146
leaf_146  [color=Gray,shape=rectangle,fontname=Inconsolata,label="stdin"]
// END RANK literal_139

raw_140 -> leaf_147
leaf_147  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", asynchronously, and
processes it into tokens, which stream to the"]
// END RANK raw_140

prespace_141 -> leaf_148
leaf_148  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_141

literal_142 -> leaf_149
leaf_149  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modeselektor"]
// END RANK literal_142

raw_143 -> leaf_150
leaf_150  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".

"]
// END RANK raw_143

section_135 -> { header_151 prose_152 codeblock_153 codeblock_154 section_155}
{rank=same; header_151 prose_152 codeblock_153 codeblock_154 section_155}

header_151 [label="3 : process_escapes(seq)"]

prose_152 [label="prose"]

codeblock_153 [label="code block 220-278"]

codeblock_154 [label="code block 280-314"]

section_155 [label="section: 316-326"]


// END RANK section_135

header_151 -> leaf_156
leaf_156  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** process_escapes(seq)"]
// END RANK header_151

prose_152 -> { raw_157}
{rank=same; raw_157}

raw_157 [label="raw"]


// END RANK prose_152

raw_157 -> leaf_158
leaf_158  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_157

codeblock_153 -> leaf_159
leaf_159  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local byte, sub, codepoints = string.byte, string.sub, string.codepoints
local m_parse, is_mouse = a.mouse.parse_fast, a.mouse.ismousemove
local navigation, is_nav = a.navigation, a.is_nav

local function process_escapes(seq)
   if is_nav(seq) then
      return modeS(\"NAV\", navigation[seq])
   end
   if is_mouse(seq) then
      local m = m_parse(seq)
      return modeS(\"MOUSE\", m)
   elseif #seq == 2 and byte(sub(seq,2,2)) < 128 then
      -- Meta
      local key = \"M-\" .. sub(seq,2,2)
      return modeS(\"ALT\", key)
   else
      return modeS(\"NYI\", seq)
   end
end

local function onseq(err,seq)
   if err then error(err) end
   local head = byte(seq)
   -- ^Q hard coded as quit, for now
   if head == 17 then
      uv.tty_set_mode(stdin, 1)
      write(a.mouse.track(false))
      uv.stop()
      return 0
   end
   -- Escape sequences
   if head == 27 then
      return process_escapes(seq)
   end
   -- Control sequences
   if head <= 31 and not navigation[seq] then
      local ctrl = \"^\" .. string.char(head + 64)
      return modeS(\"CTRL\", ctrl)
   elseif navigation[seq] then
      return modeS(\"NAV\", navigation[seq])
   end
   -- Printables
   if head > 31 and head < 127 then
      if #seq > 1 then
         -- break it up and feed it
         local points = codepoints(seq)
         for _, pt in ipairs(points) do
            onseq(nil, pt)
         end
      else
         return modeS(\"ASCII\", seq)
      end
   else
      -- wchars go here
      return modeS(\"NYI\", seq)
   end
end"]
// END RANK codeblock_153

codeblock_154 -> leaf_160
leaf_160  [color=Gray,shape=rectangle,fontname=Inconsolata,label="-- Get names for as many values as possible
-- into the colorizer
color.allNames()

-- raw mode
uv.tty_set_mode(stdin, 2)
-- mouse mode
write(a.mouse.track(true))
uv.read_start(stdin, onseq)

-- read main programme
-- faked for now
---[[
local chunk = loadstring \"wobble = 1 + 1\"
setfenv(chunk,  _G)
chunk()
--]]

-- paint screen

modeS:paint()

-- main loop
local retcode =  uv.run('default')
-- Restore main screen
print '\\x1b[?47l'

if retcode ~= true then
   error(retcode)
end

print(\"kthxbye\")
return retcode"]
// END RANK codeblock_154

section_155 -> { header_161 prose_162 codeblock_163}
{rank=same; header_161 prose_162 codeblock_163}

header_161 [label="4 : Launch femto"]

prose_162 [label="prose"]

codeblock_163 [label="code block 320-325"]


// END RANK section_155

header_161 -> leaf_164
leaf_164  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Launch femto"]
// END RANK header_161

prose_162 -> { raw_165}
{rank=same; raw_165}

raw_165 [label="raw"]


// END RANK prose_162

raw_165 -> leaf_166
leaf_166  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Here we assign our function a wrapper and get down to business
"]
// END RANK raw_165

codeblock_163 -> leaf_167
leaf_167  [color=Gray,shape=rectangle,fontname=Inconsolata,label="end -- of wrapper
local retcode = _femto(__G)

return retcode"]
// END RANK codeblock_163


}
