digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 181"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-52"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 prose_5 section_6 section_7}
{rank=same; header_2 prose_3 prose_4 prose_5 section_6 section_7}

header_2 [label="1 : Linebuf"]

prose_3 [label="prose"]

prose_4 [label="prose"]

prose_5 [label="prose"]

section_6 [label="section: 12-27"]

section_7 [label="section: 53-63"]


// END RANK section_1

header_2 -> leaf_8
leaf_8  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Linebuf"]
// END RANK header_2

prose_3 -> { raw_9 prespace_10 literal_11 raw_12}
{rank=same; raw_9 prespace_10 literal_11 raw_12}

raw_9 [label="raw"]

prespace_10 [label="prespace"]

literal_11 [label="literal"]

raw_12 [label="raw"]


// END RANK prose_3

raw_9 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


The"]
// END RANK raw_9

prespace_10 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_10

literal_11 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label="linebuf"]
// END RANK literal_11

raw_12 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" class buffers a single line of text.
"]
// END RANK raw_12

prose_4 -> { raw_17}
{rank=same; raw_17}

raw_17 [label="raw"]


// END RANK prose_4

raw_17 -> leaf_18
leaf_18  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
To make editing practical, we model the line as an array of codepoints when
active, and a simple string otherwise.
"]
// END RANK raw_17

prose_5 -> { prespace_19 literal_20 raw_21 prespace_22 literal_23 raw_24}
{rank=same; prespace_19 literal_20 raw_21 prespace_22 literal_23 raw_24}

prespace_19 [label="prespace"]

literal_20 [label="literal"]

raw_21 [label="raw"]

prespace_22 [label="prespace"]

literal_23 [label="literal"]

raw_24 [label="raw"]


// END RANK prose_5

prespace_19 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_19

literal_20 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label="linebuf"]
// END RANK literal_20

raw_21 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" are promoted to"]
// END RANK raw_21

prespace_22 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_22

literal_23 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label="txtbuf"]
// END RANK literal_23

raw_24 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" if editing needs to span multiple lines.

"]
// END RANK raw_24

section_6 -> { header_31 prose_32 prose_33 prose_34 prose_35 section_36}
{rank=same; header_31 prose_32 prose_33 prose_34 prose_35 section_36}

header_31 [label="2 : Instance fields"]

prose_32 [label="prose"]

prose_33 [label="prose"]

prose_34 [label="prose"]

prose_35 [label="prose"]

section_36 [label="section: 28-52"]


// END RANK section_6

header_31 -> leaf_37
leaf_37  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Instance fields"]
// END RANK header_31

prose_32 -> { raw_38}
{rank=same; raw_38}

raw_38 [label="raw"]


// END RANK prose_32

raw_38 -> leaf_39
leaf_39  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


Instance fields for a linebuf may be read by other code, but should be written
internally.
"]
// END RANK raw_38

prose_33 -> { raw_40}
{rank=same; raw_40}

raw_40 [label="raw"]


// END RANK prose_33

raw_40 -> leaf_41
leaf_41  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- line   :  An array of string fragments
"]
// END RANK raw_40

prose_34 -> { raw_42 prespace_43 literal_44 raw_45}
{rank=same; raw_42 prespace_43 literal_44 raw_45}

raw_42 [label="raw"]

prespace_43 [label="prespace"]

literal_44 [label="literal"]

raw_45 [label="raw"]


// END RANK prose_34

raw_42 -> leaf_46
leaf_46  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- cursor :  An uint representing the number of bytes to be skipped over
            before executing"]
// END RANK raw_42

prespace_43 -> leaf_47
leaf_47  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_43

literal_44 -> leaf_48
leaf_48  [color=Gray,shape=rectangle,fontname=Inconsolata,label="insert()"]
// END RANK literal_44

raw_45 -> leaf_49
leaf_49  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  Not 1-1 the same as the column
            index of the tty cursor.
"]
// END RANK raw_45

prose_35 -> { raw_50}
{rank=same; raw_50}

raw_50 [label="raw"]


// END RANK prose_35

raw_50 -> leaf_51
leaf_51  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
            cursor is moved by linebuf, ensuring we stay on codepoint
            boundaries.

"]
// END RANK raw_50

section_36 -> { header_52 prose_53 codeblock_54 codeblock_55 codeblock_56}
{rank=same; header_52 prose_53 codeblock_54 codeblock_55 codeblock_56}

header_52 [label="4 : imports"]

prose_53 [label="prose"]

codeblock_54 [label="code block 30-34"]

codeblock_55 [label="code block 36-38"]

codeblock_56 [label="code block 40-50"]


// END RANK section_36

header_52 -> leaf_57
leaf_57  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** imports"]
// END RANK header_52

prose_53 -> { raw_58}
{rank=same; raw_58}

raw_58 [label="raw"]


// END RANK prose_53

raw_58 -> leaf_59
leaf_59  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_58

codeblock_54 -> leaf_60
leaf_60  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local sub, byte = assert(string.sub), assert(string.byte)
local gsub = assert(string.gsub)
assert(meta, \"linebuf requires meta\")"]
// END RANK codeblock_54

codeblock_55 -> leaf_61
leaf_61  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Linebuf = meta {}"]
// END RANK codeblock_55

codeblock_56 -> leaf_62
leaf_62  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local concat = table.concat

function Linebuf.__tostring(linebuf)
   if type(linebuf.lines) == \"table\" then
      return concat(linebuf.lines)
   else
      return linebuf.lines
   end
end"]
// END RANK codeblock_56

section_7 -> { header_63 prose_64 prose_65 prose_66 section_67}
{rank=same; header_63 prose_64 prose_65 prose_66 section_67}

header_63 [label="2 : Linebuf.insert(linebuf, frag)"]

prose_64 [label="prose"]

prose_65 [label="prose"]

prose_66 [label="prose"]

section_67 [label="section: 64-181"]


// END RANK section_7

header_63 -> leaf_68
leaf_68  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Linebuf.insert(linebuf, frag)"]
// END RANK header_63

prose_64 -> { raw_69 prespace_70 literal_71 raw_72}
{rank=same; raw_69 prespace_70 literal_71 raw_72}

raw_69 [label="raw"]

prespace_70 [label="prespace"]

literal_71 [label="literal"]

raw_72 [label="raw"]


// END RANK prose_64

raw_69 -> leaf_73
leaf_73  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK raw_69

prespace_70 -> leaf_74
leaf_74  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_70

literal_71 -> leaf_75
leaf_75  [color=Gray,shape=rectangle,fontname=Inconsolata,label="insert"]
// END RANK literal_71

raw_72 -> leaf_76
leaf_76  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" takes a fragment and carefully places it at the cursor point.
"]
// END RANK raw_72

prose_65 -> { raw_77 prespace_78 literal_79 raw_80}
{rank=same; raw_77 prespace_78 literal_79 raw_80}

raw_77 [label="raw"]

prespace_78 [label="prespace"]

literal_79 [label="literal"]

raw_80 [label="raw"]


// END RANK prose_65

raw_77 -> leaf_81
leaf_81  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A"]
// END RANK raw_77

prespace_78 -> leaf_82
leaf_82  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_78

literal_79 -> leaf_83
leaf_83  [color=Gray,shape=rectangle,fontname=Inconsolata,label="frag"]
// END RANK literal_79

raw_80 -> leaf_84
leaf_84  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is any kind of string that we won't want to break into pieces.
"]
// END RANK raw_80

prose_66 -> { raw_85}
{rank=same; raw_85}

raw_85 [label="raw"]


// END RANK prose_66

raw_85 -> leaf_86
leaf_86  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
At first that means pasting long strings will cause syntax highlighting to
fall over. Harmlessly.  Once lexing is working we can trip an interrupt on
long input.

"]
// END RANK raw_85

section_67 -> { header_87 prose_88 codeblock_89 codeblock_90 codeblock_91 codeblock_92 codeblock_93}
{rank=same; header_87 prose_88 codeblock_89 codeblock_90 codeblock_91 codeblock_92 codeblock_93}

header_87 [label="3 : join(token, frag)"]

prose_88 [label="prose"]

codeblock_89 [label="code block 68-139"]

codeblock_90 [label="code block 143-156"]

codeblock_91 [label="code block 158-168"]

codeblock_92 [label="code block 170-177"]

codeblock_93 [label="code block 179-181"]


// END RANK section_67

header_87 -> leaf_94
leaf_94  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** join(token, frag)"]
// END RANK header_87

prose_88 -> { raw_95}
{rank=same; raw_95}

raw_95 [label="raw"]


// END RANK prose_88

raw_95 -> leaf_96
leaf_96  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Decides when to emit a new token.
"]
// END RANK raw_95

codeblock_89 -> leaf_97
leaf_97  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function join(token, frag)
   if sub(token, -1) == \" \" and sub(frag, 1,1) ~= \" \" then
      return token, frag
   else
      return token .. frag, nil
   end
end

local t_insert, splice = assert(table.insert), assert(table.splice)
local utf8, codepoints = string.utf8, string.codepoints

function Linebuf.insert(linebuf, frag)
   local line = linebuf.lines
   if type(line) == \"string\" then
      line = codepoints(line)
      linebuf.lines = line
   end
   local wide_frag = utf8(frag)
   if wide_frag < #frag then -- a paste
      -- Normalize whitespace
      frag = gsub(frag, \"\\r\\n\", \"\\n\"):gsub(\"\\r\", \"\\n\"):gsub(\"\\t\", \"   \")
      wide_frag = codepoints(frag)
   else
      wide_frag = false
   end
   if not wide_frag then
      t_insert(line, linebuf.cursor, frag)
      linebuf.cursor = linebuf.cursor + 1
      return true
   else
      splice(line, linebuf.cursor, wide_frag)
      linebuf.cursor = linebuf.cursor + #wide_frag
      return true
   end

   return false
end

local remove = table.remove

function Linebuf.d_back(linebuf)
   remove(linebuf.lines, linebuf.cursor - 1)
   linebuf.cursor = linebuf.cursor > 1 and linebuf.cursor - 1 or 1
end


function Linebuf.d_fwd(linebuf)
   remove(linebuf.lines, linebuf.cursor)
end

function Linebuf.left(linebuf, disp)
   local disp = disp or 1
   if linebuf.cursor - disp >= 1 then
      linebuf.cursor = linebuf.cursor - disp
      return linebuf.cursor
   else
      linebuf.cursor = 1
      return linebuf.cursor
   end
end

function Linebuf.right(linebuf, disp)
   disp = disp or 1
   if linebuf.cursor + disp <= #linebuf.lines + 1 then
      linebuf.cursor = linebuf.cursor + disp
   else
      linebuf.cursor = #linebuf.lines + 1
   end
   return linebuf.cursor
end"]
// END RANK codeblock_89

codeblock_90 -> leaf_98
leaf_98  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local cl = assert(table.clone, \"table.clone must be provided\")

function Linebuf.suspend(linebuf)
   linebuf.lines = tostring(linebuf)
   return linebuf
end

function Linebuf.resume(linebuf)
   linebuf.lines = codepoints(linebuf.lines)
   linebuf.cursor = #linebuf.lines + 1
   return linebuf
end"]
// END RANK codeblock_90

codeblock_91 -> leaf_99
leaf_99  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Linebuf.clone(linebuf)
   local lb = cl(linebuf)
   if type(lb.lines) == \"table\" then
      lb.lines = cl(lb.lines)
   elseif type(lb.lines) == \"string\" then
      lb:resume()
   end
   return lb
end"]
// END RANK codeblock_91

codeblock_92 -> leaf_100
leaf_100  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function new(line)
   local linebuf = meta(Linebuf)
   linebuf.cursor = line and #line or 1
   linebuf.lines  = line or {}
   return linebuf
end"]
// END RANK codeblock_92

codeblock_93 -> leaf_101
leaf_101  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return new"]
// END RANK codeblock_93


}
