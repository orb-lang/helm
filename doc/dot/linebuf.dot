digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 200"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-71"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 prose_5 prose_6 prose_7 prose_8 prose_9 section_10 section_11}
{rank=same; header_2 prose_3 prose_4 prose_5 prose_6 prose_7 prose_8 prose_9 section_10 section_11}

header_2 [label="1 : Linebuf"]

prose_3 [label="prose"]

prose_4 [label="prose"]

prose_5 [label="prose"]

prose_6 [label="prose"]

prose_7 [label="prose"]

prose_8 [label="prose"]

prose_9 [label="prose"]

section_10 [label="section: 27-71"]

section_11 [label="section: 72-82"]


// END RANK section_1

header_2 -> leaf_12
leaf_12  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Linebuf"]
// END RANK header_2

prose_3 -> { raw_13}
{rank=same; raw_13}

raw_13 [label="raw"]


// END RANK prose_3

raw_13 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


Rather than derive this from [[espalier's Phrase class][@/espalier/phrase]],
I'm going to port it.
"]
// END RANK raw_13

prose_4 -> { raw_15}
{rank=same; raw_15}

raw_15 [label="raw"]


// END RANK prose_4

raw_15 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The concepts are close, but different.
"]
// END RANK raw_15

prose_5 -> { raw_17 link_18 raw_19}
{rank=same; raw_17 link_18 raw_19}

raw_17 [label="raw"]

link_18 [label="link"]

raw_19 [label="raw"]


// END RANK prose_5

raw_17 -> leaf_20
leaf_20  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The main notes on where I'm going with this are under "]
// END RANK raw_17

link_18 -> { anchortext_21 url_22}
{rank=same; anchortext_21 url_22}

anchortext_21 [label="anchortext"]

url_22 [label="url"]


// END RANK link_18

anchortext_21 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="rainbuf"]
// END RANK anchortext_21

url_22 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label="rainbuf"]
// END RANK url_22

raw_19 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label=",
which will build from this class and is a generalization of it to support
complex text types.
"]
// END RANK raw_19

prose_6 -> { raw_26 prespace_27 literal_28 raw_29 prespace_30 literal_31 raw_32 prespace_33 literal_34 raw_35 prespace_36 literal_37 raw_38 prespace_39 literal_40 raw_41}
{rank=same; raw_26 prespace_27 literal_28 raw_29 prespace_30 literal_31 raw_32 prespace_33 literal_34 raw_35 prespace_36 literal_37 raw_38 prespace_39 literal_40 raw_41}

raw_26 [label="raw"]

prespace_27 [label="prespace"]

literal_28 [label="literal"]

raw_29 [label="raw"]

prespace_30 [label="prespace"]

literal_31 [label="literal"]

raw_32 [label="raw"]

prespace_33 [label="prespace"]

literal_34 [label="literal"]

raw_35 [label="raw"]

prespace_36 [label="prespace"]

literal_37 [label="literal"]

raw_38 [label="raw"]

prespace_39 [label="prespace"]

literal_40 [label="literal"]

raw_41 [label="raw"]


// END RANK prose_6

raw_26 -> leaf_42
leaf_42  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I'm realizing that for clarity, a"]
// END RANK raw_26

prespace_27 -> leaf_43
leaf_43  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_27

literal_28 -> leaf_44
leaf_44  [color=Gray,shape=rectangle,fontname=Inconsolata,label="linebuf"]
// END RANK literal_28

raw_29 -> leaf_45
leaf_45  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" needs to be a line, period.  The
recursive container class is a"]
// END RANK raw_29

prespace_30 -> leaf_46
leaf_46  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_30

literal_31 -> leaf_47
leaf_47  [color=Gray,shape=rectangle,fontname=Inconsolata,label="txtbuf"]
// END RANK literal_31

raw_32 -> leaf_48
leaf_48  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", and"]
// END RANK raw_32

prespace_33 -> leaf_49
leaf_49  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_33

literal_34 -> leaf_50
leaf_50  [color=Gray,shape=rectangle,fontname=Inconsolata,label="rainbuf"]
// END RANK literal_34

raw_35 -> leaf_51
leaf_51  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" enhances that and
also makes a"]
// END RANK raw_35

prespace_36 -> leaf_52
leaf_52  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_36

literal_37 -> leaf_53
leaf_53  [color=Gray,shape=rectangle,fontname=Inconsolata,label="rainline"]
// END RANK literal_37

raw_38 -> leaf_54
leaf_54  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" out of each"]
// END RANK raw_38

prespace_39 -> leaf_55
leaf_55  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_39

literal_40 -> leaf_56
leaf_56  [color=Gray,shape=rectangle,fontname=Inconsolata,label="linebuf"]
// END RANK literal_40

raw_41 -> leaf_57
leaf_57  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_41

prose_7 -> { raw_58}
{rank=same; raw_58}

raw_58 [label="raw"]


// END RANK prose_7

raw_58 -> leaf_59
leaf_59  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I'm making this the dumbest thing that can work. The dumbest thing that can
work, has one string per char, period.
"]
// END RANK raw_58

prose_8 -> { raw_60 prespace_61 literal_62 raw_63 prespace_64 literal_65 raw_66}
{rank=same; raw_60 prespace_61 literal_62 raw_63 prespace_64 literal_65 raw_66}

raw_60 [label="raw"]

prespace_61 [label="prespace"]

literal_62 [label="literal"]

raw_63 [label="raw"]

prespace_64 [label="prespace"]

literal_65 [label="literal"]

raw_66 [label="raw"]


// END RANK prose_8

raw_60 -> leaf_67
leaf_67  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The way I'm doing this, a"]
// END RANK raw_60

prespace_61 -> leaf_68
leaf_68  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_61

literal_62 -> leaf_69
leaf_69  [color=Gray,shape=rectangle,fontname=Inconsolata,label="linebuf"]
// END RANK literal_62

raw_63 -> leaf_70
leaf_70  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is used as a pointer to history.  When
it's not in play,"]
// END RANK raw_63

prespace_64 -> leaf_71
leaf_71  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_64

literal_65 -> leaf_72
leaf_72  [color=Gray,shape=rectangle,fontname=Inconsolata,label="linebuf.line"]
// END RANK literal_65

raw_66 -> leaf_73
leaf_73  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is just a string, exploding into an array
of codepoints when edited.
"]
// END RANK raw_66

prose_9 -> { raw_74}
{rank=same; raw_74}

raw_74 [label="raw"]


// END RANK prose_9

raw_74 -> leaf_75
leaf_75  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This lets us load the history without making a bunch of codepoint arrays we
might not ever use.
"]
// END RANK raw_74

section_10 -> { header_76 prose_77 prose_78 prose_79 prose_80 codeblock_81 codeblock_82 codeblock_83}
{rank=same; header_76 prose_77 prose_78 prose_79 prose_80 codeblock_81 codeblock_82 codeblock_83}

header_76 [label="2 : Instance fields"]

prose_77 [label="prose"]

prose_78 [label="prose"]

prose_79 [label="prose"]

prose_80 [label="prose"]

codeblock_81 [label="code block 41-44"]

codeblock_82 [label="code block 46-48"]

codeblock_83 [label="code block 50-69"]


// END RANK section_10

header_76 -> leaf_84
leaf_84  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Instance fields"]
// END RANK header_76

prose_77 -> { raw_85 prespace_86 bold_87 raw_88}
{rank=same; raw_85 prespace_86 bold_87 raw_88}

raw_85 [label="raw"]

prespace_86 [label="prespace"]

bold_87 [label="bold"]

raw_88 [label="raw"]


// END RANK prose_77

raw_85 -> leaf_89
leaf_89  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

- lines :  An array of string fragments
- dsps  :  An array of uint, each corresponds to the number of"]
// END RANK raw_85

prespace_86 -> leaf_90
leaf_90  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_86

bold_87 -> leaf_91
leaf_91  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bytes"]
// END RANK bold_87

raw_88 -> leaf_92
leaf_92  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
          in line[i].
"]
// END RANK raw_88

prose_78 -> { raw_93 prespace_94 literal_95 raw_96}
{rank=same; raw_93 prespace_94 literal_95 raw_96}

raw_93 [label="raw"]

prespace_94 [label="prespace"]

literal_95 [label="literal"]

raw_96 [label="raw"]


// END RANK prose_78

raw_93 -> leaf_97
leaf_97  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- cursor :  An uint representing the number of bytes to be skipped over
            before executing"]
// END RANK raw_93

prespace_94 -> leaf_98
leaf_98  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_94

literal_95 -> leaf_99
leaf_99  [color=Gray,shape=rectangle,fontname=Inconsolata,label="insert()"]
// END RANK literal_95

raw_96 -> leaf_100
leaf_100  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  Not 1-1 the same as the column
            index of the tty cursor.
"]
// END RANK raw_96

prose_79 -> { raw_101}
{rank=same; raw_101}

raw_101 [label="raw"]


// END RANK prose_79

raw_101 -> leaf_102
leaf_102  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
            cursor is moved by linebuf, ensuring we stay on codepoint
            boundaries.
"]
// END RANK raw_101

prose_80 -> { raw_103}
{rank=same; raw_103}

raw_103 [label="raw"]


// END RANK prose_80

raw_103 -> leaf_104
leaf_104  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- len  : sum of dsps."]
// END RANK raw_103

codeblock_81 -> leaf_105
leaf_105  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local sub, byte = assert(string.sub), assert(string.byte)
local gsub = assert(string.gsub)"]
// END RANK codeblock_81

codeblock_82 -> leaf_106
leaf_106  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Linebuf = meta {}"]
// END RANK codeblock_82

codeblock_83 -> leaf_107
leaf_107  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
local function sum(dsps)
   local summa = 0
   for i = 1, #dsps do
      summa = summa + #dsps[i]
   end
   return summa
end

local concat = table.concat

function Linebuf.__tostring(linebuf)
   if type(linebuf.line) == \"table\" then
      return concat(linebuf.line)
   else
      return linebuf.line
   end
end"]
// END RANK codeblock_83

section_11 -> { header_108 prose_109 prose_110 prose_111 section_112}
{rank=same; header_108 prose_109 prose_110 prose_111 section_112}

header_108 [label="2 : Linebuf.insert(linebuf, frag)"]

prose_109 [label="prose"]

prose_110 [label="prose"]

prose_111 [label="prose"]

section_112 [label="section: 83-200"]


// END RANK section_11

header_108 -> leaf_113
leaf_113  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Linebuf.insert(linebuf, frag)"]
// END RANK header_108

prose_109 -> { raw_114 prespace_115 literal_116 raw_117}
{rank=same; raw_114 prespace_115 literal_116 raw_117}

raw_114 [label="raw"]

prespace_115 [label="prespace"]

literal_116 [label="literal"]

raw_117 [label="raw"]


// END RANK prose_109

raw_114 -> leaf_118
leaf_118  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK raw_114

prespace_115 -> leaf_119
leaf_119  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_115

literal_116 -> leaf_120
leaf_120  [color=Gray,shape=rectangle,fontname=Inconsolata,label="insert"]
// END RANK literal_116

raw_117 -> leaf_121
leaf_121  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" takes a fragment and carefully places it at the cursor point.
"]
// END RANK raw_117

prose_110 -> { raw_122 prespace_123 literal_124 raw_125}
{rank=same; raw_122 prespace_123 literal_124 raw_125}

raw_122 [label="raw"]

prespace_123 [label="prespace"]

literal_124 [label="literal"]

raw_125 [label="raw"]


// END RANK prose_110

raw_122 -> leaf_126
leaf_126  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A"]
// END RANK raw_122

prespace_123 -> leaf_127
leaf_127  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_123

literal_124 -> leaf_128
leaf_128  [color=Gray,shape=rectangle,fontname=Inconsolata,label="frag"]
// END RANK literal_124

raw_125 -> leaf_129
leaf_129  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is any kind of string that we won't want to break into pieces.
"]
// END RANK raw_125

prose_111 -> { raw_130}
{rank=same; raw_130}

raw_130 [label="raw"]


// END RANK prose_111

raw_130 -> leaf_131
leaf_131  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
At first that means pasting long strings will cause syntax highlighting to
fall over. Harmlessly.  Once lexing is working we can trip an interrupt on
long input.

"]
// END RANK raw_130

section_112 -> { header_132 prose_133 codeblock_134 codeblock_135 codeblock_136 codeblock_137 codeblock_138}
{rank=same; header_132 prose_133 codeblock_134 codeblock_135 codeblock_136 codeblock_137 codeblock_138}

header_132 [label="3 : join(token, frag)"]

prose_133 [label="prose"]

codeblock_134 [label="code block 87-158"]

codeblock_135 [label="code block 162-175"]

codeblock_136 [label="code block 177-187"]

codeblock_137 [label="code block 189-196"]

codeblock_138 [label="code block 198-200"]


// END RANK section_112

header_132 -> leaf_139
leaf_139  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** join(token, frag)"]
// END RANK header_132

prose_133 -> { raw_140}
{rank=same; raw_140}

raw_140 [label="raw"]


// END RANK prose_133

raw_140 -> leaf_141
leaf_141  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Decides when to emit a new token.
"]
// END RANK raw_140

codeblock_134 -> leaf_142
leaf_142  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function join(token, frag)
   if sub(token, -1) == \" \" and sub(frag, 1,1) ~= \" \" then
      return token, frag
   else
      return token .. frag, nil
   end
end

local t_insert, splice = assert(table.insert), assert(table.splice)
local utf8, codepoints = string.utf8, string.codepoints

function Linebuf.insert(linebuf, frag)
   local line = linebuf.line
   if type(line) == \"string\" then
      line = codepoints(line)
      linebuf.line = line
   end
   local wide_frag = utf8(frag)
   if wide_frag < #frag then -- a paste
      -- handle quirky concepts of a newline
      frag = gsub(frag, \"\\r\\n\", \"\\n\"):gsub(\"\\r\", \"\\n\")
      wide_frag = codepoints(frag)
   else
      wide_frag = false
   end
   if not wide_frag then
      t_insert(line, linebuf.cursor, frag)
      linebuf.cursor = linebuf.cursor + 1
      return true
   else
      splice(line, linebuf.cursor, wide_frag)
      linebuf.cursor = linebuf.cursor + #wide_frag
      return true
   end

   return false
end

local remove = table.remove

function Linebuf.d_back(linebuf)
   remove(linebuf.line, linebuf.cursor - 1)
   linebuf.cursor = linebuf.cursor > 1 and linebuf.cursor - 1 or 1
end


function Linebuf.d_fwd(linebuf)
   remove(linebuf.line, linebuf.cursor)
end

function Linebuf.left(linebuf, disp)
   local disp = disp or 1
   if linebuf.cursor - disp >= 1 then
      linebuf.cursor = linebuf.cursor - disp
      return linebuf.cursor
   else
      linebuf.cursor = 1
      return linebuf.cursor
   end
end

function Linebuf.right(linebuf, disp)
   disp = disp or 1
   if linebuf.cursor + disp <= #linebuf.line + 1 then
      linebuf.cursor = linebuf.cursor + disp
   else
      linebuf.cursor = #linebuf.line + 1
   end
   return linebuf.cursor
end"]
// END RANK codeblock_134

codeblock_135 -> leaf_143
leaf_143  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local cl = assert(table.clone, \"table.clone must be provided\")

function Linebuf.suspend(linebuf)
   linebuf.line = tostring(linebuf)
   return linebuf
end

function Linebuf.resume(linebuf)
   linebuf.line = codepoints(linebuf.line)
   linebuf.cursor = #linebuf.line + 1
   return linebuf
end"]
// END RANK codeblock_135

codeblock_136 -> leaf_144
leaf_144  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Linebuf.clone(linebuf)
   local lb = cl(linebuf)
   if type(lb.line) == \"table\" then
      lb.line = cl(lb.line)
   elseif type(lb.line) == \"string\" then
      lb:resume()
   end
   return lb
end"]
// END RANK codeblock_136

codeblock_137 -> leaf_145
leaf_145  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function new(line)
   local linebuf = meta(Linebuf)
   linebuf.cursor = line and #line or 1
   linebuf.line  = line or {}
   return linebuf
end"]
// END RANK codeblock_137

codeblock_138 -> leaf_146
leaf_146  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return new"]
// END RANK codeblock_138


}
