digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 176"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-47"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 prose_5 section_6 section_7}
{rank=same; header_2 prose_3 prose_4 prose_5 section_6 section_7}

header_2 [label="1 : Linebuf"]

prose_3 [label="prose"]

prose_4 [label="prose"]

prose_5 [label="prose"]

section_6 [label="section: 12-47"]

section_7 [label="section: 48-58"]


// END RANK section_1

header_2 -> leaf_8
leaf_8  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Linebuf"]
// END RANK header_2

prose_3 -> { raw_9 prespace_10 literal_11 raw_12}
{rank=same; raw_9 prespace_10 literal_11 raw_12}

raw_9 [label="raw"]

prespace_10 [label="prespace"]

literal_11 [label="literal"]

raw_12 [label="raw"]


// END RANK prose_3

raw_9 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


The"]
// END RANK raw_9

prespace_10 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_10

literal_11 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label="linebuf"]
// END RANK literal_11

raw_12 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" class buffers a single line of text.
"]
// END RANK raw_12

prose_4 -> { raw_17}
{rank=same; raw_17}

raw_17 [label="raw"]


// END RANK prose_4

raw_17 -> leaf_18
leaf_18  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
To make editing practical, we model the line as an array of codepoints when
active, and a simple string otherwise.
"]
// END RANK raw_17

prose_5 -> { prespace_19 literal_20 raw_21 prespace_22 literal_23 raw_24}
{rank=same; prespace_19 literal_20 raw_21 prespace_22 literal_23 raw_24}

prespace_19 [label="prespace"]

literal_20 [label="literal"]

raw_21 [label="raw"]

prespace_22 [label="prespace"]

literal_23 [label="literal"]

raw_24 [label="raw"]


// END RANK prose_5

prespace_19 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_19

literal_20 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label="linebuf"]
// END RANK literal_20

raw_21 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" are promoted to"]
// END RANK raw_21

prespace_22 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_22

literal_23 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label="txtbuf"]
// END RANK literal_23

raw_24 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" if editing needs to span multiple lines.

"]
// END RANK raw_24

section_6 -> { header_31 prose_32 prose_33 prose_34 prose_35 codeblock_36 codeblock_37 codeblock_38}
{rank=same; header_31 prose_32 prose_33 prose_34 prose_35 codeblock_36 codeblock_37 codeblock_38}

header_31 [label="2 : Instance fields"]

prose_32 [label="prose"]

prose_33 [label="prose"]

prose_34 [label="prose"]

prose_35 [label="prose"]

codeblock_36 [label="code block 26-29"]

codeblock_37 [label="code block 31-33"]

codeblock_38 [label="code block 35-45"]


// END RANK section_6

header_31 -> leaf_39
leaf_39  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Instance fields"]
// END RANK header_31

prose_32 -> { raw_40}
{rank=same; raw_40}

raw_40 [label="raw"]


// END RANK prose_32

raw_40 -> leaf_41
leaf_41  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


Instance fields for a linebuf may be read by other code, but should be written
internally.
"]
// END RANK raw_40

prose_33 -> { raw_42}
{rank=same; raw_42}

raw_42 [label="raw"]


// END RANK prose_33

raw_42 -> leaf_43
leaf_43  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- lines :  An array of string fragments
"]
// END RANK raw_42

prose_34 -> { raw_44 prespace_45 literal_46 raw_47}
{rank=same; raw_44 prespace_45 literal_46 raw_47}

raw_44 [label="raw"]

prespace_45 [label="prespace"]

literal_46 [label="literal"]

raw_47 [label="raw"]


// END RANK prose_34

raw_44 -> leaf_48
leaf_48  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- cursor :  An uint representing the number of bytes to be skipped over
            before executing"]
// END RANK raw_44

prespace_45 -> leaf_49
leaf_49  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_45

literal_46 -> leaf_50
leaf_50  [color=Gray,shape=rectangle,fontname=Inconsolata,label="insert()"]
// END RANK literal_46

raw_47 -> leaf_51
leaf_51  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  Not 1-1 the same as the column
            index of the tty cursor.
"]
// END RANK raw_47

prose_35 -> { raw_52}
{rank=same; raw_52}

raw_52 [label="raw"]


// END RANK prose_35

raw_52 -> leaf_53
leaf_53  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
            cursor is moved by linebuf, ensuring we stay on codepoint
            boundaries."]
// END RANK raw_52

codeblock_36 -> leaf_54
leaf_54  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local sub, byte = assert(string.sub), assert(string.byte)
local gsub = assert(string.gsub)"]
// END RANK codeblock_36

codeblock_37 -> leaf_55
leaf_55  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Linebuf = meta {}"]
// END RANK codeblock_37

codeblock_38 -> leaf_56
leaf_56  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local concat = table.concat

function Linebuf.__tostring(linebuf)
   if type(linebuf.line) == \"table\" then
      return concat(linebuf.line)
   else
      return linebuf.line
   end
end"]
// END RANK codeblock_38

section_7 -> { header_57 prose_58 prose_59 prose_60 section_61}
{rank=same; header_57 prose_58 prose_59 prose_60 section_61}

header_57 [label="2 : Linebuf.insert(linebuf, frag)"]

prose_58 [label="prose"]

prose_59 [label="prose"]

prose_60 [label="prose"]

section_61 [label="section: 59-176"]


// END RANK section_7

header_57 -> leaf_62
leaf_62  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Linebuf.insert(linebuf, frag)"]
// END RANK header_57

prose_58 -> { raw_63 prespace_64 literal_65 raw_66}
{rank=same; raw_63 prespace_64 literal_65 raw_66}

raw_63 [label="raw"]

prespace_64 [label="prespace"]

literal_65 [label="literal"]

raw_66 [label="raw"]


// END RANK prose_58

raw_63 -> leaf_67
leaf_67  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK raw_63

prespace_64 -> leaf_68
leaf_68  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_64

literal_65 -> leaf_69
leaf_69  [color=Gray,shape=rectangle,fontname=Inconsolata,label="insert"]
// END RANK literal_65

raw_66 -> leaf_70
leaf_70  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" takes a fragment and carefully places it at the cursor point.
"]
// END RANK raw_66

prose_59 -> { raw_71 prespace_72 literal_73 raw_74}
{rank=same; raw_71 prespace_72 literal_73 raw_74}

raw_71 [label="raw"]

prespace_72 [label="prespace"]

literal_73 [label="literal"]

raw_74 [label="raw"]


// END RANK prose_59

raw_71 -> leaf_75
leaf_75  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A"]
// END RANK raw_71

prespace_72 -> leaf_76
leaf_76  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_72

literal_73 -> leaf_77
leaf_77  [color=Gray,shape=rectangle,fontname=Inconsolata,label="frag"]
// END RANK literal_73

raw_74 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is any kind of string that we won't want to break into pieces.
"]
// END RANK raw_74

prose_60 -> { raw_79}
{rank=same; raw_79}

raw_79 [label="raw"]


// END RANK prose_60

raw_79 -> leaf_80
leaf_80  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
At first that means pasting long strings will cause syntax highlighting to
fall over. Harmlessly.  Once lexing is working we can trip an interrupt on
long input.

"]
// END RANK raw_79

section_61 -> { header_81 prose_82 codeblock_83 codeblock_84 codeblock_85 codeblock_86 codeblock_87}
{rank=same; header_81 prose_82 codeblock_83 codeblock_84 codeblock_85 codeblock_86 codeblock_87}

header_81 [label="3 : join(token, frag)"]

prose_82 [label="prose"]

codeblock_83 [label="code block 63-134"]

codeblock_84 [label="code block 138-151"]

codeblock_85 [label="code block 153-163"]

codeblock_86 [label="code block 165-172"]

codeblock_87 [label="code block 174-176"]


// END RANK section_61

header_81 -> leaf_88
leaf_88  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** join(token, frag)"]
// END RANK header_81

prose_82 -> { raw_89}
{rank=same; raw_89}

raw_89 [label="raw"]


// END RANK prose_82

raw_89 -> leaf_90
leaf_90  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Decides when to emit a new token.
"]
// END RANK raw_89

codeblock_83 -> leaf_91
leaf_91  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function join(token, frag)
   if sub(token, -1) == \" \" and sub(frag, 1,1) ~= \" \" then
      return token, frag
   else
      return token .. frag, nil
   end
end

local t_insert, splice = assert(table.insert), assert(table.splice)
local utf8, codepoints = string.utf8, string.codepoints

function Linebuf.insert(linebuf, frag)
   local line = linebuf.line
   if type(line) == \"string\" then
      line = codepoints(line)
      linebuf.line = line
   end
   local wide_frag = utf8(frag)
   if wide_frag < #frag then -- a paste
      -- Normalize whitespace
      frag = gsub(frag, \"\\r\\n\", \"\\n\"):gsub(\"\\r\", \"\\n\"):gsub(\"\\t\", \"   \")
      wide_frag = codepoints(frag)
   else
      wide_frag = false
   end
   if not wide_frag then
      t_insert(line, linebuf.cursor, frag)
      linebuf.cursor = linebuf.cursor + 1
      return true
   else
      splice(line, linebuf.cursor, wide_frag)
      linebuf.cursor = linebuf.cursor + #wide_frag
      return true
   end

   return false
end

local remove = table.remove

function Linebuf.d_back(linebuf)
   remove(linebuf.line, linebuf.cursor - 1)
   linebuf.cursor = linebuf.cursor > 1 and linebuf.cursor - 1 or 1
end


function Linebuf.d_fwd(linebuf)
   remove(linebuf.line, linebuf.cursor)
end

function Linebuf.left(linebuf, disp)
   local disp = disp or 1
   if linebuf.cursor - disp >= 1 then
      linebuf.cursor = linebuf.cursor - disp
      return linebuf.cursor
   else
      linebuf.cursor = 1
      return linebuf.cursor
   end
end

function Linebuf.right(linebuf, disp)
   disp = disp or 1
   if linebuf.cursor + disp <= #linebuf.line + 1 then
      linebuf.cursor = linebuf.cursor + disp
   else
      linebuf.cursor = #linebuf.line + 1
   end
   return linebuf.cursor
end"]
// END RANK codeblock_83

codeblock_84 -> leaf_92
leaf_92  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local cl = assert(table.clone, \"table.clone must be provided\")

function Linebuf.suspend(linebuf)
   linebuf.line = tostring(linebuf)
   return linebuf
end

function Linebuf.resume(linebuf)
   linebuf.line = codepoints(linebuf.line)
   linebuf.cursor = #linebuf.line + 1
   return linebuf
end"]
// END RANK codeblock_84

codeblock_85 -> leaf_93
leaf_93  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Linebuf.clone(linebuf)
   local lb = cl(linebuf)
   if type(lb.line) == \"table\" then
      lb.line = cl(lb.line)
   elseif type(lb.line) == \"string\" then
      lb:resume()
   end
   return lb
end"]
// END RANK codeblock_85

codeblock_86 -> leaf_94
leaf_94  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function new(line)
   local linebuf = meta(Linebuf)
   linebuf.cursor = line and #line or 1
   linebuf.line  = line or {}
   return linebuf
end"]
// END RANK codeblock_86

codeblock_87 -> leaf_95
leaf_95  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return new"]
// END RANK codeblock_87


}
