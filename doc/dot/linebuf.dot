digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 118"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-64"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 prose_5 prose_6 prose_7 section_8 section_9}
{rank=same; header_2 prose_3 prose_4 prose_5 prose_6 prose_7 section_8 section_9}

header_2 [label="1 : Linebuf"]

prose_3 [label="prose"]

prose_4 [label="prose"]

prose_5 [label="prose"]

prose_6 [label="prose"]

prose_7 [label="prose"]

section_8 [label="section: 20-64"]

section_9 [label="section: 65-118"]


// END RANK section_1

header_2 -> leaf_10
leaf_10  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Linebuf"]
// END RANK header_2

prose_3 -> { raw_11}
{rank=same; raw_11}

raw_11 [label="raw"]


// END RANK prose_3

raw_11 -> leaf_12
leaf_12  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


Rather than derive this from [[espalier's Phrase class][@/espalier/phrase]],
I'm going to port it.
"]
// END RANK raw_11

prose_4 -> { raw_13}
{rank=same; raw_13}

raw_13 [label="raw"]


// END RANK prose_4

raw_13 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The concepts are close, but different.
"]
// END RANK raw_13

prose_5 -> { raw_15 link_16 raw_17}
{rank=same; raw_15 link_16 raw_17}

raw_15 [label="raw"]

link_16 [label="link"]

raw_17 [label="raw"]


// END RANK prose_5

raw_15 -> leaf_18
leaf_18  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The main notes on where I'm going with this are under "]
// END RANK raw_15

link_16 -> { anchortext_19 url_20}
{rank=same; anchortext_19 url_20}

anchortext_19 [label="anchortext"]

url_20 [label="url"]


// END RANK link_16

anchortext_19 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label="rainbuf"]
// END RANK anchortext_19

url_20 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label="rainbuf"]
// END RANK url_20

raw_17 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label=",
which will build from this class and is a generalization of it to support
complex text types.
"]
// END RANK raw_17

prose_6 -> { raw_24 prespace_25 literal_26 raw_27 prespace_28 literal_29 raw_30 prespace_31 literal_32 raw_33 prespace_34 literal_35 raw_36 prespace_37 literal_38 raw_39}
{rank=same; raw_24 prespace_25 literal_26 raw_27 prespace_28 literal_29 raw_30 prespace_31 literal_32 raw_33 prespace_34 literal_35 raw_36 prespace_37 literal_38 raw_39}

raw_24 [label="raw"]

prespace_25 [label="prespace"]

literal_26 [label="literal"]

raw_27 [label="raw"]

prespace_28 [label="prespace"]

literal_29 [label="literal"]

raw_30 [label="raw"]

prespace_31 [label="prespace"]

literal_32 [label="literal"]

raw_33 [label="raw"]

prespace_34 [label="prespace"]

literal_35 [label="literal"]

raw_36 [label="raw"]

prespace_37 [label="prespace"]

literal_38 [label="literal"]

raw_39 [label="raw"]


// END RANK prose_6

raw_24 -> leaf_40
leaf_40  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I'm realizing that for clarity, a"]
// END RANK raw_24

prespace_25 -> leaf_41
leaf_41  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_25

literal_26 -> leaf_42
leaf_42  [color=Gray,shape=rectangle,fontname=Inconsolata,label="linebuf"]
// END RANK literal_26

raw_27 -> leaf_43
leaf_43  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" needs to be a line, period.  The
recursive container class is a"]
// END RANK raw_27

prespace_28 -> leaf_44
leaf_44  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_28

literal_29 -> leaf_45
leaf_45  [color=Gray,shape=rectangle,fontname=Inconsolata,label="txtbuf"]
// END RANK literal_29

raw_30 -> leaf_46
leaf_46  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", and"]
// END RANK raw_30

prespace_31 -> leaf_47
leaf_47  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_31

literal_32 -> leaf_48
leaf_48  [color=Gray,shape=rectangle,fontname=Inconsolata,label="rainbuf"]
// END RANK literal_32

raw_33 -> leaf_49
leaf_49  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" enhances that and
also makes a"]
// END RANK raw_33

prespace_34 -> leaf_50
leaf_50  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_34

literal_35 -> leaf_51
leaf_51  [color=Gray,shape=rectangle,fontname=Inconsolata,label="rainline"]
// END RANK literal_35

raw_36 -> leaf_52
leaf_52  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" out of each"]
// END RANK raw_36

prespace_37 -> leaf_53
leaf_53  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_37

literal_38 -> leaf_54
leaf_54  [color=Gray,shape=rectangle,fontname=Inconsolata,label="linebuf"]
// END RANK literal_38

raw_39 -> leaf_55
leaf_55  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_39

prose_7 -> { raw_56}
{rank=same; raw_56}

raw_56 [label="raw"]


// END RANK prose_7

raw_56 -> leaf_57
leaf_57  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
linebufs are pretty dumb.  Smart enough to understand utf-8, smart enough to
do a bit of tokenizing on the side.
"]
// END RANK raw_56

section_8 -> { header_58 prose_59 prose_60 prose_61 prose_62 codeblock_63 codeblock_64 codeblock_65}
{rank=same; header_58 prose_59 prose_60 prose_61 prose_62 codeblock_63 codeblock_64 codeblock_65}

header_58 [label="2 : Instance fields"]

prose_59 [label="prose"]

prose_60 [label="prose"]

prose_61 [label="prose"]

prose_62 [label="prose"]

codeblock_63 [label="code block 34-36"]

codeblock_64 [label="code block 38-40"]

codeblock_65 [label="code block 42-62"]


// END RANK section_8

header_58 -> leaf_66
leaf_66  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Instance fields"]
// END RANK header_58

prose_59 -> { raw_67 prespace_68 bold_69 raw_70}
{rank=same; raw_67 prespace_68 bold_69 raw_70}

raw_67 [label="raw"]

prespace_68 [label="prespace"]

bold_69 [label="bold"]

raw_70 [label="raw"]


// END RANK prose_59

raw_67 -> leaf_71
leaf_71  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

- lines :  An array of string fragments
- dsps  :  An array of uint, each corresponds to the number of"]
// END RANK raw_67

prespace_68 -> leaf_72
leaf_72  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_68

bold_69 -> leaf_73
leaf_73  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bytes"]
// END RANK bold_69

raw_70 -> leaf_74
leaf_74  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
          in line[i].
"]
// END RANK raw_70

prose_60 -> { raw_75 prespace_76 literal_77 raw_78}
{rank=same; raw_75 prespace_76 literal_77 raw_78}

raw_75 [label="raw"]

prespace_76 [label="prespace"]

literal_77 [label="literal"]

raw_78 [label="raw"]


// END RANK prose_60

raw_75 -> leaf_79
leaf_79  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- cursor :  An uint representing the number of bytes to be skipped over
            before executing"]
// END RANK raw_75

prespace_76 -> leaf_80
leaf_80  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_76

literal_77 -> leaf_81
leaf_81  [color=Gray,shape=rectangle,fontname=Inconsolata,label="insert()"]
// END RANK literal_77

raw_78 -> leaf_82
leaf_82  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  Not 1-1 the same as the column
            index of the tty cursor.
"]
// END RANK raw_78

prose_61 -> { raw_83}
{rank=same; raw_83}

raw_83 [label="raw"]


// END RANK prose_61

raw_83 -> leaf_84
leaf_84  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
            cursor is moved by linebuf, ensuring we stay on codepoint
            boundaries.
"]
// END RANK raw_83

prose_62 -> { raw_85}
{rank=same; raw_85}

raw_85 [label="raw"]


// END RANK prose_62

raw_85 -> leaf_86
leaf_86  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- len  : sum of dsps."]
// END RANK raw_85

codeblock_63 -> leaf_87
leaf_87  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local sub = assert(string.sub)"]
// END RANK codeblock_63

codeblock_64 -> leaf_88
leaf_88  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Linebuf = meta()"]
// END RANK codeblock_64

codeblock_65 -> leaf_89
leaf_89  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
local function sum(dsps)
   local summa = 0
   for i = 1, #dsps do
      summa = summa + #dsps[i]
   end
   return summa
end

local concat = table.concat
function Linebuf.__tostring(linebuf)
   -- return concat(linebuf.line)
   -- patch to see tok boundaries
   local phrase = \"\"
   for _, tok in ipairs(linebuf.line) do
      phrase = phrase .. tok .. a.red(\"|\")
   end
   return phrase
end"]
// END RANK codeblock_65

section_9 -> { header_90 prose_91 prose_92 prose_93 codeblock_94 codeblock_95 codeblock_96}
{rank=same; header_90 prose_91 prose_92 prose_93 codeblock_94 codeblock_95 codeblock_96}

header_90 [label="2 : Linebuf.insert(linebuf, frag)"]

prose_91 [label="prose"]

prose_92 [label="prose"]

prose_93 [label="prose"]

codeblock_94 [label="code block 75-101"]

codeblock_95 [label="code block 104-114"]

codeblock_96 [label="code block 116-118"]


// END RANK section_9

header_90 -> leaf_97
leaf_97  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Linebuf.insert(linebuf, frag)"]
// END RANK header_90

prose_91 -> { raw_98 prespace_99 literal_100 raw_101}
{rank=same; raw_98 prespace_99 literal_100 raw_101}

raw_98 [label="raw"]

prespace_99 [label="prespace"]

literal_100 [label="literal"]

raw_101 [label="raw"]


// END RANK prose_91

raw_98 -> leaf_102
leaf_102  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK raw_98

prespace_99 -> leaf_103
leaf_103  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_99

literal_100 -> leaf_104
leaf_104  [color=Gray,shape=rectangle,fontname=Inconsolata,label="insert"]
// END RANK literal_100

raw_101 -> leaf_105
leaf_105  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" takes a fragment and carefully places it at the cursor point.
"]
// END RANK raw_101

prose_92 -> { raw_106 prespace_107 literal_108 raw_109}
{rank=same; raw_106 prespace_107 literal_108 raw_109}

raw_106 [label="raw"]

prespace_107 [label="prespace"]

literal_108 [label="literal"]

raw_109 [label="raw"]


// END RANK prose_92

raw_106 -> leaf_110
leaf_110  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A"]
// END RANK raw_106

prespace_107 -> leaf_111
leaf_111  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_107

literal_108 -> leaf_112
leaf_112  [color=Gray,shape=rectangle,fontname=Inconsolata,label="frag"]
// END RANK literal_108

raw_109 -> leaf_113
leaf_113  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is any kind of string that we won't want to break into pieces.
"]
// END RANK raw_109

prose_93 -> { raw_114}
{rank=same; raw_114}

raw_114 [label="raw"]


// END RANK prose_93

raw_114 -> leaf_115
leaf_115  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
At first that means pasting long strings will cause syntax highlighting to
fall over. Harmlessly.  Once lexing is working we can trip an interrupt on
long input.
"]
// END RANK raw_114

codeblock_94 -> leaf_116
leaf_116  [color=Gray,shape=rectangle,fontname=Inconsolata,label="-- a pass through for now
local function join(token, frag)
   if sub(token, -1) == \" \" and sub(frag, 1,1) ~= \" \" then
      return token, frag
   else
      return token .. frag, nil
   end
end

function Linebuf.insert(linebuf, frag)
   assert(linebuf.cursor, \"linebuf must have cursor to insert\")
   local line = linebuf.line
   -- end of line
   if cursor == len then
      local token, new_tok = join(line[#line], frag)
      line[#line] = token
      if new_tok then
         line[#line + 1] = new_tok
      end
      linebuf.len = sum(line)
      linebuf.cursor = linebuf.cursor + #frag
      return true
   end
   return false
end"]
// END RANK codeblock_94

codeblock_95 -> leaf_117
leaf_117  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function new(cursor)
   local linebuf = meta(Linebuf)
   linebuf.back  =  false
   linebuf.len = 0 -- in bytes
   linebuf.line  = {\"\"}
   -- Cursor may be nil
   linebuf.cursor = cursor
   return linebuf
end"]
// END RANK codeblock_95

codeblock_96 -> leaf_118
leaf_118  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return new"]
// END RANK codeblock_96


}
