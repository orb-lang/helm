digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 159"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-61"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 prose_5 prose_6 prose_7 prose_8 section_9 section_10}
{rank=same; header_2 prose_3 prose_4 prose_5 prose_6 prose_7 prose_8 section_9 section_10}

header_2 [label="1 : Linebuf"]

prose_3 [label="prose"]

prose_4 [label="prose"]

prose_5 [label="prose"]

prose_6 [label="prose"]

prose_7 [label="prose"]

prose_8 [label="prose"]

section_9 [label="section: 22-61"]

section_10 [label="section: 62-72"]


// END RANK section_1

header_2 -> leaf_11
leaf_11  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Linebuf"]
// END RANK header_2

prose_3 -> { raw_12}
{rank=same; raw_12}

raw_12 [label="raw"]


// END RANK prose_3

raw_12 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


Rather than derive this from [[espalier's Phrase class][@/espalier/phrase]],
I'm going to port it.
"]
// END RANK raw_12

prose_4 -> { raw_14}
{rank=same; raw_14}

raw_14 [label="raw"]


// END RANK prose_4

raw_14 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The concepts are close, but different.
"]
// END RANK raw_14

prose_5 -> { raw_16 link_17 raw_18}
{rank=same; raw_16 link_17 raw_18}

raw_16 [label="raw"]

link_17 [label="link"]

raw_18 [label="raw"]


// END RANK prose_5

raw_16 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The main notes on where I'm going with this are under "]
// END RANK raw_16

link_17 -> { anchortext_20 url_21}
{rank=same; anchortext_20 url_21}

anchortext_20 [label="anchortext"]

url_21 [label="url"]


// END RANK link_17

anchortext_20 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label="rainbuf"]
// END RANK anchortext_20

url_21 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="rainbuf"]
// END RANK url_21

raw_18 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label=",
which will build from this class and is a generalization of it to support
complex text types.
"]
// END RANK raw_18

prose_6 -> { raw_25 prespace_26 literal_27 raw_28 prespace_29 literal_30 raw_31 prespace_32 literal_33 raw_34 prespace_35 literal_36 raw_37 prespace_38 literal_39 raw_40}
{rank=same; raw_25 prespace_26 literal_27 raw_28 prespace_29 literal_30 raw_31 prespace_32 literal_33 raw_34 prespace_35 literal_36 raw_37 prespace_38 literal_39 raw_40}

raw_25 [label="raw"]

prespace_26 [label="prespace"]

literal_27 [label="literal"]

raw_28 [label="raw"]

prespace_29 [label="prespace"]

literal_30 [label="literal"]

raw_31 [label="raw"]

prespace_32 [label="prespace"]

literal_33 [label="literal"]

raw_34 [label="raw"]

prespace_35 [label="prespace"]

literal_36 [label="literal"]

raw_37 [label="raw"]

prespace_38 [label="prespace"]

literal_39 [label="literal"]

raw_40 [label="raw"]


// END RANK prose_6

raw_25 -> leaf_41
leaf_41  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I'm realizing that for clarity, a"]
// END RANK raw_25

prespace_26 -> leaf_42
leaf_42  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_26

literal_27 -> leaf_43
leaf_43  [color=Gray,shape=rectangle,fontname=Inconsolata,label="linebuf"]
// END RANK literal_27

raw_28 -> leaf_44
leaf_44  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" needs to be a line, period.  The
recursive container class is a"]
// END RANK raw_28

prespace_29 -> leaf_45
leaf_45  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_29

literal_30 -> leaf_46
leaf_46  [color=Gray,shape=rectangle,fontname=Inconsolata,label="txtbuf"]
// END RANK literal_30

raw_31 -> leaf_47
leaf_47  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", and"]
// END RANK raw_31

prespace_32 -> leaf_48
leaf_48  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_32

literal_33 -> leaf_49
leaf_49  [color=Gray,shape=rectangle,fontname=Inconsolata,label="rainbuf"]
// END RANK literal_33

raw_34 -> leaf_50
leaf_50  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" enhances that and
also makes a"]
// END RANK raw_34

prespace_35 -> leaf_51
leaf_51  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_35

literal_36 -> leaf_52
leaf_52  [color=Gray,shape=rectangle,fontname=Inconsolata,label="rainline"]
// END RANK literal_36

raw_37 -> leaf_53
leaf_53  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" out of each"]
// END RANK raw_37

prespace_38 -> leaf_54
leaf_54  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_38

literal_39 -> leaf_55
leaf_55  [color=Gray,shape=rectangle,fontname=Inconsolata,label="linebuf"]
// END RANK literal_39

raw_40 -> leaf_56
leaf_56  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_40

prose_7 -> { raw_57}
{rank=same; raw_57}

raw_57 [label="raw"]


// END RANK prose_7

raw_57 -> leaf_58
leaf_58  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I'm making this the dumbest thing that can work. The dumbest thing that can
work, has one string per char, period.
"]
// END RANK raw_57

prose_8 -> { raw_59 prespace_60 literal_61 raw_62}
{rank=same; raw_59 prespace_60 literal_61 raw_62}

raw_59 [label="raw"]

prespace_60 [label="prespace"]

literal_61 [label="literal"]

raw_62 [label="raw"]


// END RANK prose_8

raw_59 -> leaf_63
leaf_63  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I don't think this approach generalizes to a"]
// END RANK raw_59

prespace_60 -> leaf_64
leaf_64  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_60

literal_61 -> leaf_65
leaf_65  [color=Gray,shape=rectangle,fontname=Inconsolata,label="txtbuf"]
// END RANK literal_61

raw_62 -> leaf_66
leaf_66  [color=Gray,shape=rectangle,fontname=Inconsolata,label=". It'll get us there.
"]
// END RANK raw_62

section_9 -> { header_67 prose_68 prose_69 prose_70 prose_71 codeblock_72 codeblock_73 codeblock_74}
{rank=same; header_67 prose_68 prose_69 prose_70 prose_71 codeblock_72 codeblock_73 codeblock_74}

header_67 [label="2 : Instance fields"]

prose_68 [label="prose"]

prose_69 [label="prose"]

prose_70 [label="prose"]

prose_71 [label="prose"]

codeblock_72 [label="code block 36-38"]

codeblock_73 [label="code block 40-42"]

codeblock_74 [label="code block 44-59"]


// END RANK section_9

header_67 -> leaf_75
leaf_75  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Instance fields"]
// END RANK header_67

prose_68 -> { raw_76 prespace_77 bold_78 raw_79}
{rank=same; raw_76 prespace_77 bold_78 raw_79}

raw_76 [label="raw"]

prespace_77 [label="prespace"]

bold_78 [label="bold"]

raw_79 [label="raw"]


// END RANK prose_68

raw_76 -> leaf_80
leaf_80  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

- lines :  An array of string fragments
- dsps  :  An array of uint, each corresponds to the number of"]
// END RANK raw_76

prespace_77 -> leaf_81
leaf_81  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_77

bold_78 -> leaf_82
leaf_82  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bytes"]
// END RANK bold_78

raw_79 -> leaf_83
leaf_83  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
          in line[i].
"]
// END RANK raw_79

prose_69 -> { raw_84 prespace_85 literal_86 raw_87}
{rank=same; raw_84 prespace_85 literal_86 raw_87}

raw_84 [label="raw"]

prespace_85 [label="prespace"]

literal_86 [label="literal"]

raw_87 [label="raw"]


// END RANK prose_69

raw_84 -> leaf_88
leaf_88  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- cursor :  An uint representing the number of bytes to be skipped over
            before executing"]
// END RANK raw_84

prespace_85 -> leaf_89
leaf_89  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_85

literal_86 -> leaf_90
leaf_90  [color=Gray,shape=rectangle,fontname=Inconsolata,label="insert()"]
// END RANK literal_86

raw_87 -> leaf_91
leaf_91  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  Not 1-1 the same as the column
            index of the tty cursor.
"]
// END RANK raw_87

prose_70 -> { raw_92}
{rank=same; raw_92}

raw_92 [label="raw"]


// END RANK prose_70

raw_92 -> leaf_93
leaf_93  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
            cursor is moved by linebuf, ensuring we stay on codepoint
            boundaries.
"]
// END RANK raw_92

prose_71 -> { raw_94}
{rank=same; raw_94}

raw_94 [label="raw"]


// END RANK prose_71

raw_94 -> leaf_95
leaf_95  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- len  : sum of dsps."]
// END RANK raw_94

codeblock_72 -> leaf_96
leaf_96  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local sub, byte = assert(string.sub), assert(string.byte)"]
// END RANK codeblock_72

codeblock_73 -> leaf_97
leaf_97  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Linebuf = meta()"]
// END RANK codeblock_73

codeblock_74 -> leaf_98
leaf_98  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
local function sum(dsps)
   local summa = 0
   for i = 1, #dsps do
      summa = summa + #dsps[i]
   end
   return summa
end


local concat = table.concat
function Linebuf.__tostring(linebuf)
   return concat(linebuf.line)
end"]
// END RANK codeblock_74

section_10 -> { header_99 prose_100 prose_101 prose_102 section_103}
{rank=same; header_99 prose_100 prose_101 prose_102 section_103}

header_99 [label="2 : Linebuf.insert(linebuf, frag)"]

prose_100 [label="prose"]

prose_101 [label="prose"]

prose_102 [label="prose"]

section_103 [label="section: 73-159"]


// END RANK section_10

header_99 -> leaf_104
leaf_104  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Linebuf.insert(linebuf, frag)"]
// END RANK header_99

prose_100 -> { raw_105 prespace_106 literal_107 raw_108}
{rank=same; raw_105 prespace_106 literal_107 raw_108}

raw_105 [label="raw"]

prespace_106 [label="prespace"]

literal_107 [label="literal"]

raw_108 [label="raw"]


// END RANK prose_100

raw_105 -> leaf_109
leaf_109  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK raw_105

prespace_106 -> leaf_110
leaf_110  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_106

literal_107 -> leaf_111
leaf_111  [color=Gray,shape=rectangle,fontname=Inconsolata,label="insert"]
// END RANK literal_107

raw_108 -> leaf_112
leaf_112  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" takes a fragment and carefully places it at the cursor point.
"]
// END RANK raw_108

prose_101 -> { raw_113 prespace_114 literal_115 raw_116}
{rank=same; raw_113 prespace_114 literal_115 raw_116}

raw_113 [label="raw"]

prespace_114 [label="prespace"]

literal_115 [label="literal"]

raw_116 [label="raw"]


// END RANK prose_101

raw_113 -> leaf_117
leaf_117  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A"]
// END RANK raw_113

prespace_114 -> leaf_118
leaf_118  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_114

literal_115 -> leaf_119
leaf_119  [color=Gray,shape=rectangle,fontname=Inconsolata,label="frag"]
// END RANK literal_115

raw_116 -> leaf_120
leaf_120  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is any kind of string that we won't want to break into pieces.
"]
// END RANK raw_116

prose_102 -> { raw_121}
{rank=same; raw_121}

raw_121 [label="raw"]


// END RANK prose_102

raw_121 -> leaf_122
leaf_122  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
At first that means pasting long strings will cause syntax highlighting to
fall over. Harmlessly.  Once lexing is working we can trip an interrupt on
long input.

"]
// END RANK raw_121

section_103 -> { header_123 prose_124 codeblock_125 codeblock_126 codeblock_127}
{rank=same; header_123 prose_124 codeblock_125 codeblock_126 codeblock_127}

header_123 [label="3 : join(token, frag)"]

prose_124 [label="prose"]

codeblock_125 [label="code block 77-143"]

codeblock_126 [label="code block 146-155"]

codeblock_127 [label="code block 157-159"]


// END RANK section_103

header_123 -> leaf_128
leaf_128  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** join(token, frag)"]
// END RANK header_123

prose_124 -> { raw_129}
{rank=same; raw_129}

raw_129 [label="raw"]


// END RANK prose_124

raw_129 -> leaf_130
leaf_130  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Decides when to emit a new token.
"]
// END RANK raw_129

codeblock_125 -> leaf_131
leaf_131  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function join(token, frag)
   if sub(token, -1) == \" \" and sub(frag, 1,1) ~= \" \" then
      return token, frag
   else
      return token .. frag, nil
   end
end

local t_insert, splice = assert(table.insert), assert(table.splice)
local utf8, codepoints = string.utf8, string.codepoints

function Linebuf.insert(linebuf, frag)
   local line = linebuf.line
   local wide_frag = utf8(frag)
   if wide_frag < #frag then -- a paste
      wide_frag = codepoints(frag)
   else
      wide_frag = false
   end
   if not wide_frag then
      t_insert(line, linebuf.cursor, frag)
      linebuf.cursor = linebuf.cursor + 1
      return true
   else
      splice(line, linebuf.cursor, wide_frag)
      linebuf.cursor = linebuf.cursor + #wide_frag
      return true
   end

   return false
end

local remove = table.remove

function Linebuf.d_back(linebuf)
   remove(linebuf.line, linebuf.cursor - 1)
   linebuf.cursor = linebuf.cursor > 1 and linebuf.cursor - 1 or 1
end


function Linebuf.d_fwd(linebuf)
   remove(linebuf.line, linebuf.cursor)
end

function Linebuf.left(linebuf, disp)
   local disp = disp or 1
   if linebuf.cursor - disp >= 1 then
      linebuf.cursor = linebuf.cursor - disp
      return linebuf.cursor
   else
      linebuf.cursor = 1
      return linebuf.cursor
   end
end

function Linebuf.right(linebuf, disp)
   disp = disp or 1
   if linebuf.cursor + disp <= #linebuf.line + 1 then
      linebuf.cursor = linebuf.cursor + disp
   else
      linebuf.cursor = #linebuf.line + 1
   end
   return linebuf.cursor
end
"]
// END RANK codeblock_125

codeblock_126 -> leaf_132
leaf_132  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function new(cursor)
   local linebuf = meta(Linebuf)
   linebuf.back  =  false
   linebuf.line  = {}
   -- Cursor may be nil, for multi-line
   linebuf.cursor = cursor
   return linebuf
end"]
// END RANK codeblock_126

codeblock_127 -> leaf_133
leaf_133  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return new"]
// END RANK codeblock_127


}
