digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 421"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-296"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 prose_5 section_6 section_7 section_8 section_9 section_10 section_11}
{rank=same; header_2 prose_3 prose_4 prose_5 section_6 section_7 section_8 section_9 section_10 section_11}

header_2 [label="1 : Anterm"]

prose_3 [label="prose"]

prose_4 [label="prose"]

prose_5 [label="prose"]

section_6 [label="section: 12-121"]

section_7 [label="section: 122-170"]

section_8 [label="section: 171-226"]

section_9 [label="section: 227-269"]

section_10 [label="section: 270-296"]

section_11 [label="section: 297-361"]


// END RANK section_1

header_2 -> leaf_12
leaf_12  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Anterm"]
// END RANK header_2

prose_3 -> { raw_13 prespace_14 literal_15 raw_16}
{rank=same; raw_13 prespace_14 literal_15 raw_16}

raw_13 [label="raw"]

prespace_14 [label="prespace"]

literal_15 [label="literal"]

raw_16 [label="raw"]


// END RANK prose_3

raw_13 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_13

prespace_14 -> leaf_18
leaf_18  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_14

literal_15 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label="anterm"]
// END RANK literal_15

raw_16 -> leaf_20
leaf_20  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is actually the protocol.
"]
// END RANK raw_16

prose_4 -> { prespace_21 literal_22 raw_23}
{rank=same; prespace_21 literal_22 raw_23}

prespace_21 [label="prespace"]

literal_22 [label="literal"]

raw_23 [label="raw"]


// END RANK prose_4

prespace_21 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_21

literal_22 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label="anterm.orb"]
// END RANK literal_22

raw_23 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is properly called \"anterm's monster\".
"]
// END RANK raw_23

prose_5 -> { raw_27 prespace_28 literal_29 raw_30 prespace_31 literal_32 raw_33}
{rank=same; raw_27 prespace_28 literal_29 raw_30 prespace_31 literal_32 raw_33}

raw_27 [label="raw"]

prespace_28 [label="prespace"]

literal_29 [label="literal"]

raw_30 [label="raw"]

prespace_31 [label="prespace"]

literal_32 [label="literal"]

raw_33 [label="raw"]


// END RANK prose_5

raw_27 -> leaf_34
leaf_34  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This is actually our raw"]
// END RANK raw_27

prespace_28 -> leaf_35
leaf_35  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_28

literal_29 -> leaf_36
leaf_36  [color=Gray,shape=rectangle,fontname=Inconsolata,label="xterm"]
// END RANK literal_29

raw_30 -> leaf_37
leaf_37  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" handler. "]
// END RANK raw_30

prespace_31 -> leaf_38
leaf_38  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_31

literal_32 -> leaf_39
leaf_39  [color=Gray,shape=rectangle,fontname=Inconsolata,label="anterm"]
// END RANK literal_32

raw_33 -> leaf_40
leaf_40  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" protocol requires a few
platforms which run it.

"]
// END RANK raw_33

section_6 -> { header_41 prose_42 codeblock_43 codeblock_44}
{rank=same; header_41 prose_42 codeblock_43 codeblock_44}

header_41 [label="3 : includes"]

prose_42 [label="prose"]

codeblock_43 [label="code block 14-27"]

codeblock_44 [label="code block 29-119"]


// END RANK section_6

header_41 -> leaf_45
leaf_45  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** includes"]
// END RANK header_41

prose_42 -> { raw_46}
{rank=same; raw_46}

raw_46 [label="raw"]


// END RANK prose_42

raw_46 -> leaf_47
leaf_47  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_46

codeblock_43 -> leaf_48
leaf_48  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local pairs = assert (pairs)
local tostring = assert (tostring)
local setmeta = assert (setmetatable)
local error = assert (error)
local require = assert (require)
local rawget = assert (rawget)

local schar = assert(string.char)
local sub   = assert(string.sub)
local byte  = assert(string.byte)
local bit   = assert(bit, \"anterm requires Luajit 'bit' or compatible in _G\")
local rshift = assert(bit.rshift)"]
// END RANK codeblock_43

codeblock_44 -> leaf_49
leaf_49  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local anterm = {}

local CSI = schar(27)..'['

local colormt = {}

local colors = {
    -- attributes
    attribute = {
        reset = 0,
        clear = 0,
        bright = 1,
        bold = 1,
        dim = 2,
        italic = 3,
        underscore = 4,
        underline = 4,
        reverse = 7,
        hidden = 8},
    -- foreground
    fg = {
        black = 30,
        red = 31,
        green = 32,
        yellow = 33,
        blue = 34,
        magenta = 35,
        cyan = 36,
        white = 37,
        clear_fg = 39  },
    -- background
    bg = {
        onblack = 40,
        onred = 41,
        ongreen = 42,
        onyellow = 43,
        onblue = 44,
        onmagenta = 45,
        oncyan = 46,
        onwhite = 47,
        clear_bg = 49}
}

local function makecolor(value, name, kind)
    local color = {
        value = CSI .. value ..\"m\",
        name = name,
        kind = kind }
    return setmetatable(color, colormt)
end

for kind, val in pairs(colors) do
    for c, v in pairs(val) do
        anterm[c] = makecolor(v, c, kind)
    end
end

function colormt:__tostring()
    return self.value
end

function colormt:__concat(other)
    return tostring(self) .. tostring(other)
end

local clear_fg, clear_bg, clear = anterm.clear_fg, anterm.clear_bg,
                                  anterm.clear

local function reset(color)
    -- given a color, reset its action.
    -- simple for fg and bg
    if color.kind == \"fg\" then
        return clear_fg
    elseif color.kind == \"bg\" then
        return clear_bg
    elseif color.kind == \"attribute\" then
        return clear
    end
end

local __ts = colormt.__tostring

function colormt:__call(s)
    if s then
        return __ts(self) .. s .. reset(self)
    else
        return __ts(self)
    end
end"]
// END RANK codeblock_44

section_7 -> { header_50 prose_51 prose_52 codeblock_53}
{rank=same; header_50 prose_51 prose_52 codeblock_53}

header_50 [label="3 : 256 color"]

prose_51 [label="prose"]

prose_52 [label="prose"]

codeblock_53 [label="code block 128-168"]


// END RANK section_7

header_50 -> leaf_54
leaf_54  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** 256 color"]
// END RANK header_50

prose_51 -> { raw_55 prespace_56 literal_57 raw_58}
{rank=same; raw_55 prespace_56 literal_57 raw_58}

raw_55 [label="raw"]

prespace_56 [label="prespace"]

literal_57 [label="literal"]

raw_58 [label="raw"]


// END RANK prose_51

raw_55 -> leaf_59
leaf_59  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

There are 512"]
// END RANK raw_55

prespace_56 -> leaf_60
leaf_60  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_56

literal_57 -> leaf_61
leaf_61  [color=Gray,shape=rectangle,fontname=Inconsolata,label="xterm"]
// END RANK literal_57

raw_58 -> leaf_62
leaf_62  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" colors available.
"]
// END RANK raw_58

prose_52 -> { raw_63}
{rank=same; raw_63}

raw_63 [label="raw"]


// END RANK prose_52

raw_63 -> leaf_64
leaf_64  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We memoize their creation, giving reference equality between these colors.
"]
// END RANK raw_63

codeblock_53 -> leaf_65
leaf_65  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function byte_panic(byte_p)
   if not byte_p or not (0 <= byte_p and byte_p <= 255) then
      error \"xterm value must be 8 bit unsigned\"
   end
end

local x256_store = setmetatable({}, {__mode = \"v\"})

local function ansi_fg(byte)
    local function make (byte)
        byte_panic(byte)
        local color = { value = schar(27)..\"[38;5;\"..byte..\"m\",
                        kind = \"fg\" }
        return setmetatable(color, colormt)
    end
    if x256_store[byte] then
        return x256_store[byte]
    else
        local color = make(byte)
        x256_store[byte] = color
        return color
    end
end

local function ansi_bg(byte)
    local function make (byte)
        byte_panic(byte)
        local color = { value = schar(27)..\"[48;5;\"..byte..\"m\",
                        kind = \"bg\" }
        return setmetatable(color, colormt)
    end
    if x256_store[byte] then
        return x256_store[byte]
    else
        local color = make(byte)
        x256_store[byte] = color
        return color
    end
end"]
// END RANK codeblock_53

section_8 -> { header_66 prose_67 prose_68 prose_69 prose_70 codeblock_71}
{rank=same; header_66 prose_67 prose_68 prose_69 prose_70 codeblock_71}

header_66 [label="3 : fg24(r,g,b), bg24(r,g,b)"]

prose_67 [label="prose"]

prose_68 [label="prose"]

prose_69 [label="prose"]

prose_70 [label="prose"]

codeblock_71 [label="code block 184-224"]


// END RANK section_8

header_66 -> leaf_72
leaf_72  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** fg24(r,g,b), bg24(r,g,b)"]
// END RANK header_66

prose_67 -> { raw_73}
{rank=same; raw_73}

raw_73 [label="raw"]


// END RANK prose_67

raw_73 -> leaf_74
leaf_74  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This state space is far too large to retain pointers to all colorizers.
"]
// END RANK raw_73

prose_68 -> { raw_75}
{rank=same; raw_75}

raw_75 [label="raw"]


// END RANK prose_68

raw_75 -> leaf_76
leaf_76  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
One might want to write a smooth transition, and would expect the colors to be
garbage collected after.
"]
// END RANK raw_75

prose_69 -> { raw_77}
{rank=same; raw_77}

raw_77 [label="raw"]


// END RANK prose_69

raw_77 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Hence we memoize with a weak table.  The only reliable way to achieve
reference equality between instances of a 24 bit color is to retain a pointer
to it.
"]
// END RANK raw_77

prose_70 -> { raw_79}
{rank=same; raw_79}

raw_79 [label="raw"]


// END RANK prose_70

raw_79 -> leaf_80
leaf_80  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Happily, this is a requirement for any comparsion.
"]
// END RANK raw_79

codeblock_71 -> leaf_81
leaf_81  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
local x24k = setmetatable({}, {__mode = \"v\"})

local fg24pre = schar(27) .. \"[38;2;\"

local function fg24(r,g,b)
   byte_panic(r)
   byte_panic(g)
   byte_panic(b)
   local color = { value = fg24pre
                           .. r .. \";\" .. g .. \";\" .. b .. \"m\",
                   kind = \"fg\" }
   if x24k[color] then
      return x24k[color]
   end
   x24k[color] = color
   return setmetatable(color, colormt)
end

local bg24pre = schar(27) .. \"[48;2;\"

local function bg24(r,g,b)
   byte_panic(r)
   byte_panic(g)
   byte_panic(b)
   local color = { value = bg24pre
                           .. r .. \";\" .. g .. \";\" .. b .. \"m\",
                   kind = \"bg\" }
   if x24k[color] then
      return x24k[color]
   end
   x24k[color] = color
   return setmetatable(color, colormt)
end

anterm[\"fg\"], anterm[\"bg\"] = ansi_fg, ansi_bg

anterm[\"fg24\"], anterm[\"bg24\"] = fg24, bg24
"]
// END RANK codeblock_71

section_9 -> { header_82 prose_83 codeblock_84}
{rank=same; header_82 prose_83 codeblock_84}

header_82 [label="2 : Jumps"]

prose_83 [label="prose"]

codeblock_84 [label="code block 229-267"]


// END RANK section_9

header_82 -> leaf_85
leaf_85  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Jumps"]
// END RANK header_82

prose_83 -> { raw_86}
{rank=same; raw_86}

raw_86 [label="raw"]


// END RANK prose_83

raw_86 -> leaf_87
leaf_87  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_86

codeblock_84 -> leaf_88
leaf_88  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
local jump = {}

jump.up = function(num)
    if not num then num = \"\" end
    return CSI..num..\"A\"
end

jump.down = function(num)
    if not num then num = \"\" end
        return CSI..num..\"B\"
end

jump.forward = function(num)
    if not num then num = \"\" end
    return CSI..num..\"C\"
end

jump.back = function(num)
    if not num then num = \"\" end
    return CSI..num..\"D\"
end

local function Jump(_,row,column)
    return CSI..row..\";\"..column..\"H\"
end

local J = { __call = Jump}
setmetatable(jump,J)

anterm[\"jump\"] = jump

function anterm.rc (row, column)
   return CSI .. row .. \";\" .. column .. \"H\"
end

anterm.rowcol = anterm.rc"]
// END RANK codeblock_84

section_10 -> { header_89 prose_90 codeblock_91}
{rank=same; header_89 prose_90 codeblock_91}

header_89 [label="2 : Erasure"]

prose_90 [label="prose"]

codeblock_91 [label="code block 272-294"]


// END RANK section_10

header_89 -> leaf_92
leaf_92  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Erasure"]
// END RANK header_89

prose_90 -> { raw_93}
{rank=same; raw_93}

raw_93 [label="raw"]


// END RANK prose_90

raw_93 -> leaf_94
leaf_94  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_93

codeblock_91 -> leaf_95
leaf_95  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local erase = {}
anterm.erase = erase

local e__below = CSI .. \"0J\"
local e__above = CSI .. \"1J\"
local e__all   = CSI .. \"2J\"
local e__right = CSI .. \"0K\"
local e__left  = CSI .. \"1K\"
local e__line  = CSI .. \"2K\"

function erase.below() return e__below end

function erase.above() return e__above end

function erase.all()   return e__all   end

function erase.right() return e__right end

function erase.left()  return e__left  end

function erase.line()  return e__line  end"]
// END RANK codeblock_91

section_11 -> { header_96 prose_97 codeblock_98 section_99 section_100}
{rank=same; header_96 prose_97 codeblock_98 section_99 section_100}

header_96 [label="2 : Mouse"]

prose_97 [label="prose"]

codeblock_98 [label="code block 299-304"]

section_99 [label="section: 307-331"]

section_100 [label="section: 362-421"]


// END RANK section_11

header_96 -> leaf_101
leaf_101  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Mouse"]
// END RANK header_96

prose_97 -> { raw_102}
{rank=same; raw_102}

raw_102 [label="raw"]


// END RANK prose_97

raw_102 -> leaf_103
leaf_103  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_102

codeblock_98 -> leaf_104
leaf_104  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local mouse = {}
anterm.mouse = mouse

local buttons = {[0] =\"MB0\", \"MB1\", \"MB2\", \"MBNONE\"}"]
// END RANK codeblock_98

section_99 -> { header_105 prose_106 prose_107 codeblock_108 codeblock_109 section_110}
{rank=same; header_105 prose_106 prose_107 codeblock_108 codeblock_109 section_110}

header_105 [label="3 : mouse.track(on)"]

prose_106 [label="prose"]

prose_107 [label="prose"]

codeblock_108 [label="code block 313-321"]

codeblock_109 [label="code block 323-329"]

section_110 [label="section: 332-361"]


// END RANK section_99

header_105 -> leaf_111
leaf_111  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** mouse.track(on)"]
// END RANK header_105

prose_106 -> { raw_112 prespace_113 literal_114 raw_115}
{rank=same; raw_112 prespace_113 literal_114 raw_115}

raw_112 [label="raw"]

prespace_113 [label="prespace"]

literal_114 [label="literal"]

raw_115 [label="raw"]


// END RANK prose_106

raw_112 -> leaf_116
leaf_116  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

If"]
// END RANK raw_112

prespace_113 -> leaf_117
leaf_117  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_113

literal_114 -> leaf_118
leaf_118  [color=Gray,shape=rectangle,fontname=Inconsolata,label="on == true"]
// END RANK literal_114

raw_115 -> leaf_119
leaf_119  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", turn mouse mode on.
"]
// END RANK raw_115

prose_107 -> { raw_120}
{rank=same; raw_120}

raw_120 [label="raw"]


// END RANK prose_107

raw_120 -> leaf_121
leaf_121  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Off otherwise.
"]
// END RANK raw_120

codeblock_108 -> leaf_122
leaf_122  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function mouse.track(on)
   if on == true then
      return \"\\x1b[?1003h\"
   end

   return \"\\x1b[?1003l\"
end"]
// END RANK codeblock_108

codeblock_109 -> leaf_123
leaf_123  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function mouse.ismousemove(seq)
   if sub(seq, 1, 3) == \"\\x1b[M\" then
      return true
   end
end"]
// END RANK codeblock_109

section_110 -> { header_124 prose_125 prose_126 codeblock_127}
{rank=same; header_124 prose_125 prose_126 codeblock_127}

header_124 [label="4 : mouse.parser_fast(seq)"]

prose_125 [label="prose"]

prose_126 [label="prose"]

codeblock_127 [label="code block 338-358"]


// END RANK section_110

header_124 -> leaf_128
leaf_128  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** mouse.parser_fast(seq)"]
// END RANK header_124

prose_125 -> { raw_129}
{rank=same; raw_129}

raw_129 [label="raw"]


// END RANK prose_125

raw_129 -> leaf_130
leaf_130  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Performs no checks and may silently fail.
"]
// END RANK raw_129

prose_126 -> { raw_131}
{rank=same; raw_131}

raw_131 [label="raw"]


// END RANK prose_126

raw_131 -> leaf_132
leaf_132  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Returns a mouse action.
"]
// END RANK raw_131

codeblock_127 -> leaf_133
leaf_133  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function mouse.parse_fast(seq)
   local kind, col, row = byte(seq,4), byte(seq, 5), byte(seq, 6)
   kind = rshift(kind, 32)
   local m = {row = rshift(row, 5), col = rshift(col, 5)}
   -- Get button
   m.button = buttons[kind % 4]
   -- Get modifiers
   kind = rshift(kind, 2)
   m.shift = kind % 2 == 1
   kind = rshift(kind, 1)
   m.meta = kind % 2 == 1
   kind = rshift(kind, 1)
   m.ctrl = kind % 2 == 1
   kind = rshift(kind, 1)
   m.moving = kind % 2 == 1
   -- we skip a bit that seems to just mirror .moving
   m.scrolling = kind == 2
   return m
end"]
// END RANK codeblock_127

section_100 -> { header_134 prose_135 codeblock_136 codeblock_137}
{rank=same; header_134 prose_135 codeblock_136 codeblock_137}

header_134 [label="3 : Cursor handling"]

prose_135 [label="prose"]

codeblock_136 [label="code block 364-383"]

codeblock_137 [label="code block 388-390"]


// END RANK section_100

header_134 -> leaf_138
leaf_138  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Cursor handling"]
// END RANK header_134

prose_135 -> { raw_139}
{rank=same; raw_139}

raw_139 [label="raw"]


// END RANK prose_135

raw_139 -> leaf_140
leaf_140  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_139

codeblock_136 -> leaf_141
leaf_141  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function anterm.stash()
   return \"\\x1b7\"
end

function anterm.pop()
   return \"\\x1b8\"
end

local cursor = {}
anterm.cursor = cursor

function cursor.hide()
   return \"\\x1b[?25l\"
end

function cursor.show()
   return \"\\x1b[?25h\"
end"]
// END RANK codeblock_136

codeblock_137 -> leaf_142
leaf_142  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return anterm"]
// END RANK codeblock_137


}
