digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 221"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-11"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 prose_5 section_6}
{rank=same; header_2 prose_3 prose_4 prose_5 section_6}

header_2 [label="1 : Anterm"]

prose_3 [label="prose"]

prose_4 [label="prose"]

prose_5 [label="prose"]

section_6 [label="section: 12-221"]


// END RANK section_1

header_2 -> leaf_7
leaf_7  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Anterm"]
// END RANK header_2

prose_3 -> { raw_8 prespace_9 literal_10 raw_11}
{rank=same; raw_8 prespace_9 literal_10 raw_11}

raw_8 [label="raw"]

prespace_9 [label="prespace"]

literal_10 [label="literal"]

raw_11 [label="raw"]


// END RANK prose_3

raw_8 -> leaf_12
leaf_12  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_8

prespace_9 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_9

literal_10 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label="anterm"]
// END RANK literal_10

raw_11 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is actually the protocol.
"]
// END RANK raw_11

prose_4 -> { prespace_16 literal_17 raw_18}
{rank=same; prespace_16 literal_17 raw_18}

prespace_16 [label="prespace"]

literal_17 [label="literal"]

raw_18 [label="raw"]


// END RANK prose_4

prespace_16 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_16

literal_17 -> leaf_20
leaf_20  [color=Gray,shape=rectangle,fontname=Inconsolata,label="anterm.orb"]
// END RANK literal_17

raw_18 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is properly called \"anterm's monster\".
"]
// END RANK raw_18

prose_5 -> { raw_22 prespace_23 literal_24 raw_25 prespace_26 literal_27 raw_28}
{rank=same; raw_22 prespace_23 literal_24 raw_25 prespace_26 literal_27 raw_28}

raw_22 [label="raw"]

prespace_23 [label="prespace"]

literal_24 [label="literal"]

raw_25 [label="raw"]

prespace_26 [label="prespace"]

literal_27 [label="literal"]

raw_28 [label="raw"]


// END RANK prose_5

raw_22 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This is actually our raw"]
// END RANK raw_22

prespace_23 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_23

literal_24 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label="xterm"]
// END RANK literal_24

raw_25 -> leaf_32
leaf_32  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" handler. "]
// END RANK raw_25

prespace_26 -> leaf_33
leaf_33  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_26

literal_27 -> leaf_34
leaf_34  [color=Gray,shape=rectangle,fontname=Inconsolata,label="anterm"]
// END RANK literal_27

raw_28 -> leaf_35
leaf_35  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" protocol requires a few
platforms which run it.

"]
// END RANK raw_28

section_6 -> { header_36 prose_37 codeblock_38 codeblock_39}
{rank=same; header_36 prose_37 codeblock_38 codeblock_39}

header_36 [label="3 : includes"]

prose_37 [label="prose"]

codeblock_38 [label="code block 16-18"]

codeblock_39 [label="code block 20-221"]


// END RANK section_6

header_36 -> leaf_40
leaf_40  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** includes"]
// END RANK header_36

prose_37 -> { raw_41}
{rank=same; raw_41}

raw_41 [label="raw"]


// END RANK prose_37

raw_41 -> leaf_42
leaf_42  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

We'll want lpeg for fuzzy matching.
"]
// END RANK raw_41

codeblock_38 -> leaf_43
leaf_43  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local L = require \"lpeg\""]
// END RANK codeblock_38

codeblock_39 -> leaf_44
leaf_44  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local pairs = pairs
local tostring = tostring
local setmetatable = setmetatable
local error = error
local require = require
local rawget = rawget
local io = io
local schar = string.char

local _M = {}

local CSI = schar(27)..'['

local colormt = {}

local colors = {
    -- attributes
    attribute = {
        reset = 0,
        clear = 0,
        bright = 1,
        bold = 1,
        dim = 2,
        italic = 3,
        underscore = 4,
        blink = 5,
        reverse = 7,
        hidden = 8},
    -- foreground
    fg = {
        black = 30,
        red = 31,
        green = 32,
        yellow = 33,
        blue = 34,
        magenta = 35,
        cyan = 36,
        white = 37,
        clear_fg = 39  },
    -- background
    bg = {
        onblack = 40,
        onred = 41,
        ongreen = 42,
        onyellow = 43,
        onblue = 44,
        onmagenta = 45,
        oncyan = 46,
        onwhite = 47,
        clear_bg = 49}
}

local function makecolor(value, name, kind)
    local color = {
        value = CSI .. value ..\"m\",
        name = name,
        kind = kind }
    return setmetatable(color, colormt)
end

for kind, val in pairs(colors) do
    for c, v in pairs(val) do
        _M[c] = makecolor(v, c, kind)
    end
end

function colormt:__tostring()
    return self.value
end

function colormt:__concat(other)
    return tostring(self) .. tostring(other)
end


local function reset(color)
    -- given a color, reset its action.
    -- simple for fg and bg
    -- complex but tractable for attributes
    if color.kind == \"fg\" then
        return _M.clear_fg
    elseif color.kind == \"bg\" then
        return _M.clear_bg
    elseif color.kind == \"attribute\" then
        --error \"attribute reset NYI\"
        return _M.clear
    end
end

function colormt:__call(s)
    if s then
        return tostring(self) .. s .. reset(self)
    else
        return tostring(self)
    end
end

colormt.__metatable = {}

local function byte_panic(byte_p)
       if not byte_p or not (0 <= byte_p and byte_p <= 255) then
        error \"xterm value must be 8 bit unsigned\"
    end
end

local function ansi_fg(byte)
    local store = {} -- repeated allocation is a sin.
    local function make (byte)
        byte_panic(byte)
        local color = { value = schar(27)..\"[38;5;\"..byte..\"m\",
                        kind = \"fg\" }
        return setmetatable(color, colormt)
    end
    if store[byte] then
        return store[byte]
    else
        local color = make(byte)
        store[byte] = color
        return color
    end
end

local function ansi_bg(byte)
    local store = {}
    local function make (byte)
        byte_panic(byte)
        local color = { value = schar(27)..\"[48;5;\"..byte..\"m\",
                        kind = \"bg\" }
        return setmetatable(color, colormt)
    end
    if store[byte] then
        return store[byte]
    else
        local color = make(byte)
        store[byte] = color
        return color
    end
end

local function fg24(r,g,b)
   byte_panic(r)
   byte_panic(g)
   byte_panic(b)
   local color = { value = schar(27) .. \"[38;2;\"
                           .. r .. \";\" .. g .. \";\" .. b .. \"m\",
                   kind = \"fg\" }
   return setmetatable(color, colormt)
end

local function bg24(r,g,b)
   byte_panic(r)
   byte_panic(g)
   byte_panic(b)
   local color = { value = schar(27) .. \"[48;2;\"
                           .. r .. \";\" .. g .. \";\" .. b .. \"m\",
                   kind = \"bg\" }
   return setmetatable(color, colormt)
end

_M[\"fg\"], _M[\"bg\"] = ansi_fg, ansi_bg

_M[\"fg24\"], _M[\"bg24\"] = fg24, bg24

--- Jumps

local jump = {}

jump.up = function(num)
    if not num then num = \"\" end
    return CSI..num..\"A\"
end

jump.down = function(num)
    if not num then num = \"\" end
        return CSI..num..\"B\"
end

jump.forward = function(num)
    if not num then num = \"\" end
    return CSI..num..\"C\"
end

jump.back = function(num)
    if not num then num = \"\" end
    return CSI..num..\"D\"
end

local function Jump(_,row,column)
    return CSI..row..\";\"..column..\"H\"
end

local J = { __call = Jump}
setmetatable(jump,J)

_M[\"jump\"] = jump


return _M

"]
// END RANK codeblock_39


}
