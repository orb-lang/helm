digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 309"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-269"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 prose_5 section_6 section_7 section_8 section_9 section_10}
{rank=same; header_2 prose_3 prose_4 prose_5 section_6 section_7 section_8 section_9 section_10}

header_2 [label="1 : Anterm"]

prose_3 [label="prose"]

prose_4 [label="prose"]

prose_5 [label="prose"]

section_6 [label="section: 12-121"]

section_7 [label="section: 122-170"]

section_8 [label="section: 171-226"]

section_9 [label="section: 227-269"]

section_10 [label="section: 270-296"]


// END RANK section_1

header_2 -> leaf_11
leaf_11  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Anterm"]
// END RANK header_2

prose_3 -> { raw_12 prespace_13 literal_14 raw_15}
{rank=same; raw_12 prespace_13 literal_14 raw_15}

raw_12 [label="raw"]

prespace_13 [label="prespace"]

literal_14 [label="literal"]

raw_15 [label="raw"]


// END RANK prose_3

raw_12 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_12

prespace_13 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_13

literal_14 -> leaf_18
leaf_18  [color=Gray,shape=rectangle,fontname=Inconsolata,label="anterm"]
// END RANK literal_14

raw_15 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is actually the protocol.
"]
// END RANK raw_15

prose_4 -> { prespace_20 literal_21 raw_22}
{rank=same; prespace_20 literal_21 raw_22}

prespace_20 [label="prespace"]

literal_21 [label="literal"]

raw_22 [label="raw"]


// END RANK prose_4

prespace_20 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_20

literal_21 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label="anterm.orb"]
// END RANK literal_21

raw_22 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is properly called \"anterm's monster\".
"]
// END RANK raw_22

prose_5 -> { raw_26 prespace_27 literal_28 raw_29 prespace_30 literal_31 raw_32}
{rank=same; raw_26 prespace_27 literal_28 raw_29 prespace_30 literal_31 raw_32}

raw_26 [label="raw"]

prespace_27 [label="prespace"]

literal_28 [label="literal"]

raw_29 [label="raw"]

prespace_30 [label="prespace"]

literal_31 [label="literal"]

raw_32 [label="raw"]


// END RANK prose_5

raw_26 -> leaf_33
leaf_33  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This is actually our raw"]
// END RANK raw_26

prespace_27 -> leaf_34
leaf_34  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_27

literal_28 -> leaf_35
leaf_35  [color=Gray,shape=rectangle,fontname=Inconsolata,label="xterm"]
// END RANK literal_28

raw_29 -> leaf_36
leaf_36  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" handler. "]
// END RANK raw_29

prespace_30 -> leaf_37
leaf_37  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_30

literal_31 -> leaf_38
leaf_38  [color=Gray,shape=rectangle,fontname=Inconsolata,label="anterm"]
// END RANK literal_31

raw_32 -> leaf_39
leaf_39  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" protocol requires a few
platforms which run it.

"]
// END RANK raw_32

section_6 -> { header_40 prose_41 codeblock_42 codeblock_43}
{rank=same; header_40 prose_41 codeblock_42 codeblock_43}

header_40 [label="3 : includes"]

prose_41 [label="prose"]

codeblock_42 [label="code block 16-18"]

codeblock_43 [label="code block 20-119"]


// END RANK section_6

header_40 -> leaf_44
leaf_44  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** includes"]
// END RANK header_40

prose_41 -> { raw_45}
{rank=same; raw_45}

raw_45 [label="raw"]


// END RANK prose_41

raw_45 -> leaf_46
leaf_46  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

We'll want lpeg for fuzzy matching.
"]
// END RANK raw_45

codeblock_42 -> leaf_47
leaf_47  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local L = require \"lpeg\""]
// END RANK codeblock_42

codeblock_43 -> leaf_48
leaf_48  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local pairs = pairs
local tostring = tostring
local setmetatable = setmetatable
local error = error
local require = require
local rawget = rawget
local io = io
local schar = string.char

local anterm = {}

local CSI = schar(27)..'['

local colormt = {}

local colors = {
    -- attributes
    attribute = {
        reset = 0,
        clear = 0,
        bright = 1,
        bold = 1,
        dim = 2,
        italic = 3,
        underscore = 4,
        blink = 5,
        reverse = 7,
        hidden = 8},
    -- foreground
    fg = {
        black = 30,
        red = 31,
        green = 32,
        yellow = 33,
        blue = 34,
        magenta = 35,
        cyan = 36,
        white = 37,
        clear_fg = 39  },
    -- background
    bg = {
        onblack = 40,
        onred = 41,
        ongreen = 42,
        onyellow = 43,
        onblue = 44,
        onmagenta = 45,
        oncyan = 46,
        onwhite = 47,
        clear_bg = 49}
}

local function makecolor(value, name, kind)
    local color = {
        value = CSI .. value ..\"m\",
        name = name,
        kind = kind }
    return setmetatable(color, colormt)
end

for kind, val in pairs(colors) do
    for c, v in pairs(val) do
        anterm[c] = makecolor(v, c, kind)
    end
end

function colormt:__tostring()
    return self.value
end

function colormt:__concat(other)
    return tostring(self) .. tostring(other)
end

local clear_fg, clear_bg, clear = anterm.clear_fg, anterm.clear_bg,
                                  anterm.clear

local function reset(color)
    -- given a color, reset its action.
    -- simple for fg and bg
    if color.kind == \"fg\" then
        return clear_fg
    elseif color.kind == \"bg\" then
        return clear_bg
    elseif color.kind == \"attribute\" then
        return clear
    end
end

local __ts = colormt.__tostring

function colormt:__call(s)
    if s then
        return __ts(self) .. s .. reset(self)
    else
        return __ts(self)
    end
end"]
// END RANK codeblock_43

section_7 -> { header_49 prose_50 prose_51 codeblock_52}
{rank=same; header_49 prose_50 prose_51 codeblock_52}

header_49 [label="3 : 256 color"]

prose_50 [label="prose"]

prose_51 [label="prose"]

codeblock_52 [label="code block 128-168"]


// END RANK section_7

header_49 -> leaf_53
leaf_53  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** 256 color"]
// END RANK header_49

prose_50 -> { raw_54 prespace_55 literal_56 raw_57}
{rank=same; raw_54 prespace_55 literal_56 raw_57}

raw_54 [label="raw"]

prespace_55 [label="prespace"]

literal_56 [label="literal"]

raw_57 [label="raw"]


// END RANK prose_50

raw_54 -> leaf_58
leaf_58  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

There are 512"]
// END RANK raw_54

prespace_55 -> leaf_59
leaf_59  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_55

literal_56 -> leaf_60
leaf_60  [color=Gray,shape=rectangle,fontname=Inconsolata,label="xterm"]
// END RANK literal_56

raw_57 -> leaf_61
leaf_61  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" colors available.
"]
// END RANK raw_57

prose_51 -> { raw_62}
{rank=same; raw_62}

raw_62 [label="raw"]


// END RANK prose_51

raw_62 -> leaf_63
leaf_63  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We memoize their creation, giving reference equality between these colors.
"]
// END RANK raw_62

codeblock_52 -> leaf_64
leaf_64  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function byte_panic(byte_p)
       if not byte_p or not (0 <= byte_p and byte_p <= 255) then
        error \"xterm value must be 8 bit unsigned\"
    end
end

local x256_store = {}

local function ansi_fg(byte)
    local function make (byte)
        byte_panic(byte)
        local color = { value = schar(27)..\"[38;5;\"..byte..\"m\",
                        kind = \"fg\" }
        return setmetatable(color, colormt)
    end
    if x256_store[byte] then
        return x256_store[byte]
    else
        local color = make(byte)
        x256_store[byte] = color
        return color
    end
end

local function ansi_bg(byte)
    local function make (byte)
        byte_panic(byte)
        local color = { value = schar(27)..\"[48;5;\"..byte..\"m\",
                        kind = \"bg\" }
        return setmetatable(color, colormt)
    end
    if x256_store[byte] then
        return x256_store[byte]
    else
        local color = make(byte)
        x256_store[byte] = color
        return color
    end
end"]
// END RANK codeblock_52

section_8 -> { header_65 prose_66 prose_67 prose_68 prose_69 codeblock_70}
{rank=same; header_65 prose_66 prose_67 prose_68 prose_69 codeblock_70}

header_65 [label="3 : fg24(r,g,b), bg24(r,g,b)"]

prose_66 [label="prose"]

prose_67 [label="prose"]

prose_68 [label="prose"]

prose_69 [label="prose"]

codeblock_70 [label="code block 184-224"]


// END RANK section_8

header_65 -> leaf_71
leaf_71  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** fg24(r,g,b), bg24(r,g,b)"]
// END RANK header_65

prose_66 -> { raw_72}
{rank=same; raw_72}

raw_72 [label="raw"]


// END RANK prose_66

raw_72 -> leaf_73
leaf_73  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This state space is far too large to retain pointers to all colorizers.
"]
// END RANK raw_72

prose_67 -> { raw_74}
{rank=same; raw_74}

raw_74 [label="raw"]


// END RANK prose_67

raw_74 -> leaf_75
leaf_75  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
One might want to write a smooth transition, and would expect the colors to be
garbage collected after.
"]
// END RANK raw_74

prose_68 -> { raw_76}
{rank=same; raw_76}

raw_76 [label="raw"]


// END RANK prose_68

raw_76 -> leaf_77
leaf_77  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Hence we memoize with a weak table.  The only reliable way to achieve
reference equality between instances of a 24 bit color is to retain a pointer
to it.
"]
// END RANK raw_76

prose_69 -> { raw_78}
{rank=same; raw_78}

raw_78 [label="raw"]


// END RANK prose_69

raw_78 -> leaf_79
leaf_79  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Happily, this is a requirement for any comparsion.
"]
// END RANK raw_78

codeblock_70 -> leaf_80
leaf_80  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
local x24k = setmetatable({}, {__mode = \"v\"})

local fg24pre = schar(27) .. \"[38;2;\"

local function fg24(r,g,b)
   byte_panic(r)
   byte_panic(g)
   byte_panic(b)
   local color = { value = fg24pre
                           .. r .. \";\" .. g .. \";\" .. b .. \"m\",
                   kind = \"fg\" }
   if x24k[color] then
      return x24k[color]
   end
   x24k[color] = color
   return setmetatable(color, colormt)
end

local bg24pre = schar(27) .. \"[48;2;\"

local function bg24(r,g,b)
   byte_panic(r)
   byte_panic(g)
   byte_panic(b)
   local color = { value = bg24pre
                           .. r .. \";\" .. g .. \";\" .. b .. \"m\",
                   kind = \"bg\" }
   if x24k[color] then
      return x24k[color]
   end
   x24k[color] = color
   return setmetatable(color, colormt)
end

anterm[\"fg\"], anterm[\"bg\"] = ansi_fg, ansi_bg

anterm[\"fg24\"], anterm[\"bg24\"] = fg24, bg24
"]
// END RANK codeblock_70

section_9 -> { header_81 prose_82 codeblock_83}
{rank=same; header_81 prose_82 codeblock_83}

header_81 [label="2 : Jumps"]

prose_82 [label="prose"]

codeblock_83 [label="code block 229-267"]


// END RANK section_9

header_81 -> leaf_84
leaf_84  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Jumps"]
// END RANK header_81

prose_82 -> { raw_85}
{rank=same; raw_85}

raw_85 [label="raw"]


// END RANK prose_82

raw_85 -> leaf_86
leaf_86  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_85

codeblock_83 -> leaf_87
leaf_87  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
local jump = {}

jump.up = function(num)
    if not num then num = \"\" end
    return CSI..num..\"A\"
end

jump.down = function(num)
    if not num then num = \"\" end
        return CSI..num..\"B\"
end

jump.forward = function(num)
    if not num then num = \"\" end
    return CSI..num..\"C\"
end

jump.back = function(num)
    if not num then num = \"\" end
    return CSI..num..\"D\"
end

local function Jump(_,row,column)
    return CSI..row..\";\"..column..\"H\"
end

local J = { __call = Jump}
setmetatable(jump,J)

anterm[\"jump\"] = jump

function anterm.rc (row, column)
   return CSI .. row .. \";\" .. column .. \"H\"
end

anterm.rowcol = anterm.rc"]
// END RANK codeblock_83

section_10 -> { header_88 prose_89 codeblock_90 section_91}
{rank=same; header_88 prose_89 codeblock_90 section_91}

header_88 [label="2 : Erasure"]

prose_89 [label="prose"]

codeblock_90 [label="code block 272-295"]

section_91 [label="section: 297-309"]


// END RANK section_10

header_88 -> leaf_92
leaf_92  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Erasure"]
// END RANK header_88

prose_89 -> { raw_93}
{rank=same; raw_93}

raw_93 [label="raw"]


// END RANK prose_89

raw_93 -> leaf_94
leaf_94  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_93

codeblock_90 -> leaf_95
leaf_95  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local erase = {}
anterm.erase = erase

local e__below = CSI .. \"0J\"
local e__above = CSI .. \"1J\"
local e__all   = CSI .. \"2J\"
local e__right = CSI .. \"0K\"
local e__left  = CSI .. \"1K\"
local e__line  = CSI .. \"2K\"

function erase.below() return e__below end

function erase.above() return e__above end

function erase.all()   return e__all   end

function erase.right() return e__right end

function erase.left()  return e__left  end

function erase.line()  return e__line  end
"]
// END RANK codeblock_90

section_91 -> { header_96 prose_97 codeblock_98}
{rank=same; header_96 prose_97 codeblock_98}

header_96 [label="3 : Miscellaneous term handling"]

prose_97 [label="prose"]

codeblock_98 [label="code block 299-309"]


// END RANK section_91

header_96 -> leaf_99
leaf_99  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Miscellaneous term handling"]
// END RANK header_96

prose_97 -> { raw_100}
{rank=same; raw_100}

raw_100 [label="raw"]


// END RANK prose_97

raw_100 -> leaf_101
leaf_101  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_100

codeblock_98 -> leaf_102
leaf_102  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function anterm.stash()
   return \"\\0277\"
end

function anterm.pop()
   return \"\\0278\"
end

return anterm"]
// END RANK codeblock_98


}
