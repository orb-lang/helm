digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 765"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-453"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 prose_5 prose_6 prose_7 section_8 section_9 section_10 section_11 section_12 section_13}
{rank=same; header_2 prose_3 prose_4 prose_5 prose_6 prose_7 section_8 section_9 section_10 section_11 section_12 section_13}

header_2 [label="1 : Anterm"]

prose_3 [label="prose"]

prose_4 [label="prose"]

prose_5 [label="prose"]

prose_6 [label="prose"]

prose_7 [label="prose"]

section_8 [label="section: 15-44"]

section_9 [label="section: 45-60"]

section_10 [label="section: 61-235"]

section_11 [label="section: 299-359"]

section_12 [label="section: 360-419"]

section_13 [label="section: 454-695"]


// END RANK section_1

header_2 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Anterm"]
// END RANK header_2

prose_3 -> { raw_15 prespace_16 literal_17 raw_18}
{rank=same; raw_15 prespace_16 literal_17 raw_18}

raw_15 [label="raw"]

prespace_16 [label="prespace"]

literal_17 [label="literal"]

raw_18 [label="raw"]


// END RANK prose_3

raw_15 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_15

prespace_16 -> leaf_20
leaf_20  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_16

literal_17 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label="anterm"]
// END RANK literal_17

raw_18 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is actually the protocol.
"]
// END RANK raw_18

prose_4 -> { prespace_23 literal_24 raw_25}
{rank=same; prespace_23 literal_24 raw_25}

prespace_23 [label="prespace"]

literal_24 [label="literal"]

raw_25 [label="raw"]


// END RANK prose_4

prespace_23 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_23

literal_24 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label="anterm.orb"]
// END RANK literal_24

raw_25 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is properly called \"anterm's monster\".
"]
// END RANK raw_25

prose_5 -> { raw_29 prespace_30 literal_31 raw_32 prespace_33 literal_34 raw_35}
{rank=same; raw_29 prespace_30 literal_31 raw_32 prespace_33 literal_34 raw_35}

raw_29 [label="raw"]

prespace_30 [label="prespace"]

literal_31 [label="literal"]

raw_32 [label="raw"]

prespace_33 [label="prespace"]

literal_34 [label="literal"]

raw_35 [label="raw"]


// END RANK prose_5

raw_29 -> leaf_36
leaf_36  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This is in fact our raw"]
// END RANK raw_29

prespace_30 -> leaf_37
leaf_37  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_30

literal_31 -> leaf_38
leaf_38  [color=Gray,shape=rectangle,fontname=Inconsolata,label="xterm"]
// END RANK literal_31

raw_32 -> leaf_39
leaf_39  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" handler. "]
// END RANK raw_32

prespace_33 -> leaf_40
leaf_40  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_33

literal_34 -> leaf_41
leaf_41  [color=Gray,shape=rectangle,fontname=Inconsolata,label="anterm"]
// END RANK literal_34

raw_35 -> leaf_42
leaf_42  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" protocol requires a few
platforms which run it.
"]
// END RANK raw_35

prose_6 -> { raw_43}
{rank=same; raw_43}

raw_43 [label="raw"]


// END RANK prose_6

raw_43 -> leaf_44
leaf_44  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
In the meantime, here's a handy dandy Lua library for raw terminal handling.
"]
// END RANK raw_43

prose_7 -> { raw_45}
{rank=same; raw_45}

raw_45 [label="raw"]


// END RANK prose_7

raw_45 -> leaf_46
leaf_46  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It is free of non-core extensions, with one exception:
"]
// END RANK raw_45

section_8 -> { header_47 prose_48 codeblock_49 prose_50 prose_51 structure_52}
{rank=same; header_47 prose_48 codeblock_49 prose_50 prose_51 structure_52}

header_47 [label="3 : includes"]

prose_48 [label="prose"]

codeblock_49 [label="code block 17-33"]

prose_50 [label="prose"]

prose_51 [label="prose"]

structure_52 [label="structure"]


// END RANK section_8

header_47 -> leaf_53
leaf_53  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** includes"]
// END RANK header_47

prose_48 -> { raw_54}
{rank=same; raw_54}

raw_54 [label="raw"]


// END RANK prose_48

raw_54 -> leaf_55
leaf_55  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_54

codeblock_49 -> leaf_56
leaf_56  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local pairs = assert (pairs)
local tostring = assert (tostring)
local setmeta = assert (setmetatable)
local error = assert (error)
local require = assert (require)
local rawget = assert (rawget)

local schar = assert(string.char)
local sub   = assert(string.sub)
local rep   = assert(string.rep)
local byte  = assert(string.byte)
local bit   = assert(bit, \"anterm requires Luajit 'bit' or compatible in _G\")
local rshift = assert(bit.rshift)
local core = require \"core\"
bit = nil"]
// END RANK codeblock_49

prose_50 -> { raw_57 prespace_58 literal_59 prespace_60 literal_61 raw_62}
{rank=same; raw_57 prespace_58 literal_59 prespace_60 literal_61 raw_62}

raw_57 [label="raw"]

prespace_58 [label="prespace"]

literal_59 [label="literal"]

prespace_60 [label="prespace"]

literal_61 [label="literal"]

raw_62 [label="raw"]


// END RANK prose_50

raw_57 -> leaf_63
leaf_63  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I believe the 5.3 idiom is"]
// END RANK raw_57

prespace_58 -> leaf_64
leaf_64  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_58

literal_59 -> leaf_65
leaf_65  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bit = { rshift = "]
// END RANK literal_59

prespace_60 -> leaf_66
leaf_66  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_60

literal_61 -> leaf_67
leaf_67  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function(byte, off) return byte >> off end }"]
// END RANK literal_61

raw_62 -> leaf_68
leaf_68  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_62

prose_51 -> { raw_69}
{rank=same; raw_69}

raw_69 [label="raw"]


// END RANK prose_51

raw_69 -> leaf_70
leaf_70  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This code is otherwise 5.1 and upward compatible.
"]
// END RANK raw_69

structure_52 -> { hashline_71}
{rank=same; hashline_71}

hashline_71 [label="hashline"]


// END RANK structure_52

hashline_71 -> { hashtag_72}
{rank=same; hashtag_72}

hashtag_72 [label="hashtag"]


// END RANK hashline_71

hashtag_72 -> leaf_73
leaf_73  [color=Gray,shape=rectangle,fontname=Inconsolata,label="NB"]
// END RANK hashtag_72

section_9 -> { header_74 prose_75 prose_76 codeblock_77}
{rank=same; header_74 prose_75 prose_76 codeblock_77}

header_74 [label="3 : Principles"]

prose_75 [label="prose"]

prose_76 [label="prose"]

codeblock_77 [label="code block 54-58"]


// END RANK section_9

header_74 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Principles"]
// END RANK header_74

prose_75 -> { raw_79}
{rank=same; raw_79}

raw_79 [label="raw"]


// END RANK prose_75

raw_79 -> leaf_80
leaf_80  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

As a rule, fields are either functions returning strings,
or callable tables which return strings when called or concatenated, or
tables with fields which, called, return strings.
"]
// END RANK raw_79

prose_76 -> { raw_81}
{rank=same; raw_81}

raw_81 [label="raw"]


// END RANK prose_76

raw_81 -> leaf_82
leaf_82  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This presents a consistent interface. It is easy to cache strings you might
use several times.
"]
// END RANK raw_81

codeblock_77 -> leaf_83
leaf_83  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local anterm = {}

local CSI = schar(27)..'['"]
// END RANK codeblock_77

section_10 -> { header_84 prose_85 prose_86 codeblock_87 section_88 section_89 section_90}
{rank=same; header_84 prose_85 prose_86 codeblock_87 section_88 section_89 section_90}

header_84 [label="2 : color"]

prose_85 [label="prose"]

prose_86 [label="prose"]

codeblock_87 [label="code block 68-71"]

section_88 [label="section: 74-186"]

section_89 [label="section: 187-235"]

section_90 [label="section: 236-249"]


// END RANK section_10

header_84 -> leaf_91
leaf_91  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** color"]
// END RANK header_84

prose_85 -> { raw_92}
{rank=same; raw_92}

raw_92 [label="raw"]


// END RANK prose_85

raw_92 -> leaf_93
leaf_93  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The color tables concatenate as the color code, or return it when
called with no arguments.
"]
// END RANK raw_92

prose_86 -> { raw_94}
{rank=same; raw_94}

raw_94 [label="raw"]


// END RANK prose_86

raw_94 -> leaf_95
leaf_95  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Called on a string, they will cleanup the color in a way which composes.
"]
// END RANK raw_94

codeblock_87 -> leaf_96
leaf_96  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local colormt = {}
colormt.__index = colormt"]
// END RANK codeblock_87

section_88 -> { header_97 prose_98 prose_99 codeblock_100}
{rank=same; header_97 prose_98 prose_99 codeblock_100}

header_97 [label="3 : OG xterm color"]

prose_98 [label="prose"]

prose_99 [label="prose"]

codeblock_100 [label="code block 81-184"]


// END RANK section_88

header_97 -> leaf_101
leaf_101  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** OG xterm color"]
// END RANK header_97

prose_98 -> { raw_102}
{rank=same; raw_102}

raw_102 [label="raw"]


// END RANK prose_98

raw_102 -> leaf_103
leaf_103  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Aka the angry fruit salad tier.
"]
// END RANK raw_102

prose_99 -> { raw_104 prespace_105 literal_106 raw_107}
{rank=same; raw_104 prespace_105 literal_106 raw_107}

raw_104 [label="raw"]

prespace_105 [label="prespace"]

literal_106 [label="literal"]

raw_107 [label="raw"]


// END RANK prose_99

raw_104 -> leaf_108
leaf_108  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The attributes are broadly useful.  Note the absence of"]
// END RANK raw_104

prespace_105 -> leaf_109
leaf_109  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_105

literal_106 -> leaf_110
leaf_110  [color=Gray,shape=rectangle,fontname=Inconsolata,label="5"]
// END RANK literal_106

raw_107 -> leaf_111
leaf_111  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", or a way to
clear it.
"]
// END RANK raw_107

codeblock_100 -> leaf_112
leaf_112  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local colors = {
    -- attributes
    attribute = {
        reset = 0,
        clear = 0,
        bright = 1,
        bold = 1,
        dim = 2,
        italic = 3,
        underscore = 4,
        underline = 4,
        reverse = 7,
        hidden = 8,
        clear_bold = 22,
        clear_dim  = 22,
        clear_underline = 24,
        clear_inverse = 27,
        clear_hidden = 28 },
    -- foreground
    fg = {
        black = 30,
        red = 31,
        green = 32,
        yellow = 33,
        blue = 34,
        magenta = 35,
        cyan = 36,
        white = 37,
        clear_fg = 39  },
    -- background
    bg = {
        onblack = 40,
        onred = 41,
        ongreen = 42,
        onyellow = 43,
        onblue = 44,
        onmagenta = 45,
        oncyan = 46,
        onwhite = 47,
        clear_bg = 49}
}

local function makecolor(value, name, kind)
    local color = {
        value = CSI .. value ..\"m\",
        name = name,
        kind = kind }
    return setmetatable(color, colormt)
end

for kind, val in pairs(colors) do
    for c, v in pairs(val) do
        anterm[c] = makecolor(v, c, kind)
    end
end

function colormt.__tostring(color)
    return color.value
end

function colormt.__concat(color, other)
    return tostring(color) .. tostring(other)
end

local clear_fg, clear_bg, clear = anterm.clear_fg, anterm.clear_bg,
                                  anterm.clear
local clear_bold = anterm.clear_bold

local function reset(color)
    -- given a color, reset its action.
    -- simple for fg and bg
    if color.kind == \"fg\" then
        return clear_fg
    elseif color.kind == \"bg\" then
        return clear_bg
    elseif color.kind == \"attribute\" then
       local name = color.name
       if name == \"bold\" or name == \"dim\" then
          return clear_bold
       elseif name == \"underscore\" or name == \"underline\" then
          return clear_underline
       elseif name == \"inverse\" then
          return clear_inverse
       elseif name == \"hidden\" then
          return clear_hidden
       else
          return clear
       end
    end
end

local __ts = colormt.__tostring

function colormt.__call(color, str)
    if str then
        return __ts(color) .. str .. reset(color)
    else
        return __ts(color)
    end
end

"]
// END RANK codeblock_100

section_89 -> { header_113 prose_114 prose_115 codeblock_116}
{rank=same; header_113 prose_114 prose_115 codeblock_116}

header_113 [label="3 : 256 color"]

prose_114 [label="prose"]

prose_115 [label="prose"]

codeblock_116 [label="code block 193-233"]


// END RANK section_89

header_113 -> leaf_117
leaf_117  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** 256 color"]
// END RANK header_113

prose_114 -> { raw_118 prespace_119 literal_120 raw_121}
{rank=same; raw_118 prespace_119 literal_120 raw_121}

raw_118 [label="raw"]

prespace_119 [label="prespace"]

literal_120 [label="literal"]

raw_121 [label="raw"]


// END RANK prose_114

raw_118 -> leaf_122
leaf_122  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

There are 512"]
// END RANK raw_118

prespace_119 -> leaf_123
leaf_123  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_119

literal_120 -> leaf_124
leaf_124  [color=Gray,shape=rectangle,fontname=Inconsolata,label="xterm"]
// END RANK literal_120

raw_121 -> leaf_125
leaf_125  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" colors available.
"]
// END RANK raw_121

prose_115 -> { raw_126}
{rank=same; raw_126}

raw_126 [label="raw"]


// END RANK prose_115

raw_126 -> leaf_127
leaf_127  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We memoize their creation in a weak table.
"]
// END RANK raw_126

codeblock_116 -> leaf_128
leaf_128  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function byte_panic(byte_p)
   if not byte_p or not (0 <= byte_p and byte_p <= 255) then
      error \"xterm value must be 8 bit unsigned\"
   end
end

local x256_store = setmetatable({}, {__mode = \"v\"})

local function ansi_fg(byte)
    local function make (byte)
        byte_panic(byte)
        local color = { value = schar(27)..\"[38;5;\"..byte..\"m\",
                        kind = \"fg\" }
        return setmetatable(color, colormt)
    end
    if x256_store[byte] then
        return x256_store[byte]
    else
        local color = make(byte)
        x256_store[byte] = color
        return color
    end
end

local function ansi_bg(byte)
    local function make (byte)
        byte_panic(byte)
        local color = { value = schar(27)..\"[48;5;\"..byte..\"m\",
                        kind = \"bg\" }
        return setmetatable(color, colormt)
    end
    if x256_store[byte] then
        return x256_store[byte]
    else
        local color = make(byte)
        x256_store[byte] = color
        return color
    end
end"]
// END RANK codeblock_116

section_90 -> { header_129 prose_130 prose_131 prose_132 prose_133 section_134}
{rank=same; header_129 prose_130 prose_131 prose_132 prose_133 section_134}

header_129 [label="3 : fg24(r,g,b), bg24(r,g,b)"]

prose_130 [label="prose"]

prose_131 [label="prose"]

prose_132 [label="prose"]

prose_133 [label="prose"]

section_134 [label="section: 250-298"]


// END RANK section_90

header_129 -> leaf_135
leaf_135  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** fg24(r,g,b), bg24(r,g,b)"]
// END RANK header_129

prose_130 -> { raw_136}
{rank=same; raw_136}

raw_136 [label="raw"]


// END RANK prose_130

raw_136 -> leaf_137
leaf_137  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This state space is far too large to retain pointers to all colorizers.
"]
// END RANK raw_136

prose_131 -> { raw_138}
{rank=same; raw_138}

raw_138 [label="raw"]


// END RANK prose_131

raw_138 -> leaf_139
leaf_139  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
One might want to write a smooth transition, and would expect the colors to be
garbage collected after.
"]
// END RANK raw_138

prose_132 -> { raw_140}
{rank=same; raw_140}

raw_140 [label="raw"]


// END RANK prose_132

raw_140 -> leaf_141
leaf_141  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Hence we memoize with a weak table.  The only reliable way to achieve
reference equality between instances of a 24 bit color is to retain a pointer
to it.
"]
// END RANK raw_140

prose_133 -> { raw_142}
{rank=same; raw_142}

raw_142 [label="raw"]


// END RANK prose_133

raw_142 -> leaf_143
leaf_143  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Happily, this is a requirement for any comparison.

"]
// END RANK raw_142

section_134 -> { header_144 prose_145 codeblock_146}
{rank=same; header_144 prose_145 codeblock_146}

header_144 [label="4 : other color sequences?"]

prose_145 [label="prose"]

codeblock_146 [label="code block 258-296"]


// END RANK section_134

header_144 -> leaf_147
leaf_147  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** other color sequences?"]
// END RANK header_144

prose_145 -> { raw_148 prespace_149 italic_150 raw_151 prespace_152 literal_153 raw_154}
{rank=same; raw_148 prespace_149 italic_150 raw_151 prespace_152 literal_153 raw_154}

raw_148 [label="raw"]

prespace_149 [label="prespace"]

italic_150 [label="italic"]

raw_151 [label="raw"]

prespace_152 [label="prespace"]

literal_153 [label="literal"]

raw_154 [label="raw"]


// END RANK prose_145

raw_148 -> leaf_155
leaf_155  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

I don't think this is relevant for"]
// END RANK raw_148

prespace_149 -> leaf_156
leaf_156  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_149

italic_150 -> leaf_157
leaf_157  [color=Gray,shape=rectangle,fontname=Inconsolata,label="writing"]
// END RANK italic_150

raw_151 -> leaf_158
leaf_158  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" colors but there appear to be
other ways to emit them in the wild, including codes that set entire
backgrounds, and"]
// END RANK raw_151

prespace_152 -> leaf_159
leaf_159  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_152

literal_153 -> leaf_160
leaf_160  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#"]
// END RANK literal_153

raw_154 -> leaf_161
leaf_161  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" hex-coded colors are also supported.
"]
// END RANK raw_154

codeblock_146 -> leaf_162
leaf_162  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local x24k = setmetatable({}, {__mode = \"v\"})

local fg24pre = schar(27) .. \"[38;2;\"

local function fg24(r,g,b)
   byte_panic(r)
   byte_panic(g)
   byte_panic(b)
   local color = { value = fg24pre
                           .. r .. \";\" .. g .. \";\" .. b .. \"m\",
                   kind = \"fg\" }
   if x24k[color] then
      return x24k[color]
   end
   x24k[color] = color
   return setmetatable(color, colormt)
end

local bg24pre = schar(27) .. \"[48;2;\"

local function bg24(r,g,b)
   byte_panic(r)
   byte_panic(g)
   byte_panic(b)
   local color = { value = bg24pre
                           .. r .. \";\" .. g .. \";\" .. b .. \"m\",
                   kind = \"bg\" }
   if x24k[color] then
      return x24k[color]
   end
   x24k[color] = color
   return setmetatable(color, colormt)
end

anterm[\"fg\"], anterm[\"bg\"] = ansi_fg, ansi_bg

anterm[\"fg24\"], anterm[\"bg24\"] = fg24, bg24"]
// END RANK codeblock_146

section_11 -> { header_163 prose_164 codeblock_165}
{rank=same; header_163 prose_164 codeblock_165}

header_163 [label="2 : Jumps"]

prose_164 [label="prose"]

codeblock_165 [label="code block 301-357"]


// END RANK section_11

header_163 -> leaf_166
leaf_166  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Jumps"]
// END RANK header_163

prose_164 -> { raw_167}
{rank=same; raw_167}

raw_167 [label="raw"]


// END RANK prose_164

raw_167 -> leaf_168
leaf_168  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_167

codeblock_165 -> leaf_169
leaf_169  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local jump = {}

function jump.up(num)
    if not num then num = \"1\" end
    return CSI..num..\"A\"
end

function jump.down(num)
    if not num then num = \"1\" end
        return CSI..num..\"B\"
end

function jump.forward(num)
    if not num then num = \"1\" end
    return CSI..num..\"C\"
end

jump.right = jump.forward

jump.back = function(num)
    if not num then num = \"1\" end
    return CSI..num..\"D\"
end

local __nl = CSI .. 1 .. \"B\" .. CSI .. 1 .. \"G\"

function jump.nl()
   return __nl
end

jump.left = jump.back

local function Jump(_,row,column)
    return CSI..row..\";\"..column..\"H\"
end

local J = { __call = Jump}
setmetatable(jump,J)

anterm[\"jump\"] = jump

function anterm.rc(row, column)
   return CSI .. row .. \";\" .. column .. \"H\"
end

anterm.rowcol = anterm.rc

function anterm.colrow(col, row)
   return CSI .. row .. \";\" .. col .. \"H\"
end

function anterm.col(col)
   col = col or 1
   return CSI .. col .. \"G\"
end"]
// END RANK codeblock_165

section_12 -> { header_170 prose_171 codeblock_172 prose_173 codeblock_174 prose_175 prose_176 codeblock_177 section_178}
{rank=same; header_170 prose_171 codeblock_172 prose_173 codeblock_174 prose_175 prose_176 codeblock_177 section_178}

header_170 [label="2 : Erasure"]

prose_171 [label="prose"]

codeblock_172 [label="code block 362-384"]

prose_173 [label="prose"]

codeblock_174 [label="code block 390-408"]

prose_175 [label="prose"]

prose_176 [label="prose"]

codeblock_177 [label="code block 414-418"]

section_178 [label="section: 420-453"]


// END RANK section_12

header_170 -> leaf_179
leaf_179  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Erasure"]
// END RANK header_170

prose_171 -> { raw_180}
{rank=same; raw_180}

raw_180 [label="raw"]


// END RANK prose_171

raw_180 -> leaf_181
leaf_181  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_180

codeblock_172 -> leaf_182
leaf_182  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local erase = {}
anterm.erase = erase

local e__below = CSI .. \"0J\"
local e__above = CSI .. \"1J\"
local e__all   = CSI .. \"2J\"
local e__right = CSI .. \"0K\"
local e__left  = CSI .. \"1K\"
local e__line  = CSI .. \"2K\"

function erase.below() return e__below end

function erase.above() return e__above end

function erase.all()   return e__all   end

function erase.right() return e__right end

function erase.left()  return e__left  end

function erase.line()  return e__line  end"]
// END RANK codeblock_172

prose_173 -> { raw_183}
{rank=same; raw_183}

raw_183 [label="raw"]


// END RANK prose_173

raw_183 -> leaf_184
leaf_184  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Comes with an optional fifth parameter for debugging purposes.
"]
// END RANK raw_183

codeblock_174 -> leaf_185
leaf_185  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local cursor = {}
function erase.box(tr, tc, br, bc, dash)
   dash = dash or \" \"
   assert(tr <= br and tc <= bc, \"box must be at least 1 by 1: \"
          .. \" tc: \" .. tc .. \" tr: \" .. tr
          .. \" bc: \" .. bc .. \" br: \" .. br)
   local phrase = anterm.stash()
               .. Jump(nil, tr, tc)
   br = br + 1
   bc = bc + 1
   local blanks = rep(dash, bc - tc)
   local nl = anterm.col(tc) .. jump.down(1)
   for i = 1, br - tr do
      phrase = phrase .. blanks .. nl
   end
   return phrase .. anterm.pop()
end"]
// END RANK codeblock_174

prose_175 -> { raw_186}
{rank=same; raw_186}

raw_186 [label="raw"]


// END RANK prose_175

raw_186 -> leaf_187
leaf_187  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Great, I fucked this up and it takes row before column.
"]
// END RANK raw_186

prose_176 -> { raw_188}
{rank=same; raw_188}

raw_188 [label="raw"]


// END RANK prose_176

raw_188 -> leaf_189
leaf_189  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Let's fix that a little at a time:
"]
// END RANK raw_188

codeblock_177 -> leaf_190
leaf_190  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function erase._box(tc, tr, bc, br, dash)
   return erase.box(tr, tc, br, bc, dash)
end"]
// END RANK codeblock_177

section_178 -> { header_191 prose_192 codeblock_193}
{rank=same; header_191 prose_192 codeblock_193}

header_191 [label="3 : erase.checker(tc, tr, bc, br, dash, mod)"]

prose_192 [label="prose"]

codeblock_193 [label="code block 422-451"]


// END RANK section_178

header_191 -> leaf_194
leaf_194  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** erase.checker(tc, tr, bc, br, dash, mod)"]
// END RANK header_191

prose_192 -> { raw_195}
{rank=same; raw_195}

raw_195 [label="raw"]


// END RANK prose_192

raw_195 -> leaf_196
leaf_196  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_195

codeblock_193 -> leaf_197
leaf_197  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local random = assert(math.random)

function erase.checker(tc, tr, bc, br, dash, mod)
   mod = mod or 3
   dash = dash or \".\"
   local space = jump.forward()
   assert(tr <= br and tc <= bc, \"box must be at least 1 by 1\")
   local skip = random(1, mod)
   local phrase = anterm.stash()
               .. Jump(nil, tr, tc)
   br = br + 1
   bc = bc + 1

   local nl = anterm.col(tc) .. jump.down(1)
   for i = 1, br - tr do
      local checks = \"\"
      for j = 1, bc - tc do
         if skip % mod == 0 then
            checks = checks .. dash
         else
            checks = checks .. space
         end
         skip = skip + 1
      end
      phrase = phrase .. checks .. nl
   end
   return phrase .. anterm.pop()
end"]
// END RANK codeblock_193

section_13 -> { header_198 prose_199 codeblock_200 section_201 section_202 section_203 section_204 section_205 section_206 section_207}
{rank=same; header_198 prose_199 codeblock_200 section_201 section_202 section_203 section_204 section_205 section_206 section_207}

header_198 [label="2 : Mouse"]

prose_199 [label="prose"]

codeblock_200 [label="code block 456-461"]

section_201 [label="section: 464-488"]

section_202 [label="section: 518-532"]

section_203 [label="section: 533-557"]

section_204 [label="section: 558-563"]

section_205 [label="section: 575-587"]

section_206 [label="section: 639-695"]

section_207 [label="section: 696-704"]


// END RANK section_13

header_198 -> leaf_208
leaf_208  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Mouse"]
// END RANK header_198

prose_199 -> { raw_209}
{rank=same; raw_209}

raw_209 [label="raw"]


// END RANK prose_199

raw_209 -> leaf_210
leaf_210  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_209

codeblock_200 -> leaf_211
leaf_211  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local mouse = {}
anterm.mouse = mouse

local buttons = {[0] =\"MB0\", \"MB1\", \"MB2\", \"MBNONE\"}"]
// END RANK codeblock_200

section_201 -> { header_212 prose_213 prose_214 codeblock_215 codeblock_216 section_217}
{rank=same; header_212 prose_213 prose_214 codeblock_215 codeblock_216 section_217}

header_212 [label="3 : mouse.track(on)"]

prose_213 [label="prose"]

prose_214 [label="prose"]

codeblock_215 [label="code block 470-478"]

codeblock_216 [label="code block 480-486"]

section_217 [label="section: 489-517"]


// END RANK section_201

header_212 -> leaf_218
leaf_218  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** mouse.track(on)"]
// END RANK header_212

prose_213 -> { raw_219 prespace_220 literal_221 raw_222}
{rank=same; raw_219 prespace_220 literal_221 raw_222}

raw_219 [label="raw"]

prespace_220 [label="prespace"]

literal_221 [label="literal"]

raw_222 [label="raw"]


// END RANK prose_213

raw_219 -> leaf_223
leaf_223  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

If"]
// END RANK raw_219

prespace_220 -> leaf_224
leaf_224  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_220

literal_221 -> leaf_225
leaf_225  [color=Gray,shape=rectangle,fontname=Inconsolata,label="on == true"]
// END RANK literal_221

raw_222 -> leaf_226
leaf_226  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", turn mouse mode on.
"]
// END RANK raw_222

prose_214 -> { raw_227}
{rank=same; raw_227}

raw_227 [label="raw"]


// END RANK prose_214

raw_227 -> leaf_228
leaf_228  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Off otherwise.
"]
// END RANK raw_227

codeblock_215 -> leaf_229
leaf_229  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function mouse.track(on)
   if on == true then
      return \"\\x1b[?1003h\"
   end

   return \"\\x1b[?1003l\"
end"]
// END RANK codeblock_215

codeblock_216 -> leaf_230
leaf_230  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function mouse.ismousemove(seq)
   if sub(seq, 1, 3) == \"\\x1b[M\" then
      return true
   end
end"]
// END RANK codeblock_216

section_217 -> { header_231 prose_232 prose_233 codeblock_234}
{rank=same; header_231 prose_232 prose_233 codeblock_234}

header_231 [label="4 : mouse.parser_fast(seq)"]

prose_232 [label="prose"]

prose_233 [label="prose"]

codeblock_234 [label="code block 495-515"]


// END RANK section_217

header_231 -> leaf_235
leaf_235  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** mouse.parser_fast(seq)"]
// END RANK header_231

prose_232 -> { raw_236}
{rank=same; raw_236}

raw_236 [label="raw"]


// END RANK prose_232

raw_236 -> leaf_237
leaf_237  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Performs no checks and may silently fail.
"]
// END RANK raw_236

prose_233 -> { raw_238}
{rank=same; raw_238}

raw_238 [label="raw"]


// END RANK prose_233

raw_238 -> leaf_239
leaf_239  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Returns a mouse action.
"]
// END RANK raw_238

codeblock_234 -> leaf_240
leaf_240  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function mouse.parse_fast(seq)
   local kind, col, row = byte(seq,4), byte(seq, 5), byte(seq, 6)
   kind = kind - 32
   local m = {row = row - 32, col = col - 32}
   -- Get button
   m.button = buttons[kind % 4]
   -- Get modifiers
   kind = rshift(kind, 2)
   m.shift = kind % 2 == 1
   kind = rshift(kind, 1)
   m.meta = kind % 2 == 1
   kind = rshift(kind, 1)
   m.ctrl = kind % 2 == 1
   kind = rshift(kind, 1)
   m.moving = kind % 2 == 1
   -- we skip a bit that seems to just mirror .moving
   m.scrolling = kind == 2
   return m
end"]
// END RANK codeblock_234

section_202 -> { header_241 prose_242 codeblock_243}
{rank=same; header_241 prose_242 codeblock_243}

header_241 [label="3 : mouse.parse(seq)"]

prose_242 [label="prose"]

codeblock_243 [label="code block 522-530"]


// END RANK section_202

header_241 -> leaf_244
leaf_244  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** mouse.parse(seq)"]
// END RANK header_241

prose_242 -> { raw_245}
{rank=same; raw_245}

raw_245 [label="raw"]


// END RANK prose_242

raw_245 -> leaf_246
leaf_246  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Checks first.
"]
// END RANK raw_245

codeblock_243 -> leaf_247
leaf_247  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function mouse.parse(seq)
   if mouse.ismousemove(seq) then
      return mouse.parsefast(seq)
   else
      return nil, \"sequence was not a mouse move\", seq
   end
end"]
// END RANK codeblock_243

section_203 -> { header_248 prose_249 codeblock_250}
{rank=same; header_248 prose_249 codeblock_250}

header_248 [label="3 : Cursor handling"]

prose_249 [label="prose"]

codeblock_250 [label="code block 535-555"]


// END RANK section_203

header_248 -> leaf_251
leaf_251  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Cursor handling"]
// END RANK header_248

prose_249 -> { raw_252}
{rank=same; raw_252}

raw_252 [label="raw"]


// END RANK prose_249

raw_252 -> leaf_253
leaf_253  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_252

codeblock_250 -> leaf_254
leaf_254  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function anterm.stash()
   return \"\\x1b7\"
end

function anterm.pop()
   return \"\\x1b8\"
end
anterm.cursor = cursor

function cursor.hide()
   return \"\\x1b[?25l\"
end

function cursor.show()
   return \"\\x1b[?25h\"
end

cursor.stash = anterm.stash
cursor.pop = anterm.pop"]
// END RANK codeblock_250

section_204 -> { header_255 prose_256 prose_257 section_258}
{rank=same; header_255 prose_256 prose_257 section_258}

header_255 [label="3 : Reports"]

prose_256 [label="prose"]

prose_257 [label="prose"]

section_258 [label="section: 564-574"]


// END RANK section_204

header_255 -> leaf_259
leaf_259  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Reports"]
// END RANK header_255

prose_256 -> { raw_260}
{rank=same; raw_260}

raw_260 [label="raw"]


// END RANK prose_256

raw_260 -> leaf_261
leaf_261  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Requests various statuses from the terminal.
"]
// END RANK raw_260

prose_257 -> { raw_262}
{rank=same; raw_262}

raw_262 [label="raw"]


// END RANK prose_257

raw_262 -> leaf_263
leaf_263  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Responses must be parsed from stdin.
"]
// END RANK raw_262

section_258 -> { header_264 prose_265 codeblock_266}
{rank=same; header_264 prose_265 codeblock_266}

header_264 [label="4 : report.area()"]

prose_265 [label="prose"]

codeblock_266 [label="code block 566-573"]


// END RANK section_258

header_264 -> leaf_267
leaf_267  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** report.area()"]
// END RANK header_264

prose_265 -> { raw_268}
{rank=same; raw_268}

raw_268 [label="raw"]


// END RANK prose_265

raw_268 -> leaf_269
leaf_269  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_268

codeblock_266 -> leaf_270
leaf_270  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local report = {}

function report.area()
   return \"\\x1b[18t\"
end
anterm.report = report"]
// END RANK codeblock_266

section_205 -> { header_271 prose_272 codeblock_273 section_274}
{rank=same; header_271 prose_272 codeblock_273 section_274}

header_271 [label="3 : String Transformation"]

prose_272 [label="prose"]

codeblock_273 [label="code block 581-585"]

section_274 [label="section: 588-638"]


// END RANK section_205

header_271 -> leaf_275
leaf_275  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** String Transformation"]
// END RANK header_271

prose_272 -> { raw_276 prespace_277 literal_278 raw_279}
{rank=same; raw_276 prespace_277 literal_278 raw_279}

raw_276 [label="raw"]

prespace_277 [label="prespace"]

literal_278 [label="literal"]

raw_279 [label="raw"]


// END RANK prose_272

raw_276 -> leaf_280
leaf_280  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Turns out I had some useful stuff in"]
// END RANK raw_276

prespace_277 -> leaf_281
leaf_281  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_277

literal_278 -> leaf_282
leaf_282  [color=Gray,shape=rectangle,fontname=Inconsolata,label="termstring.lua"]
// END RANK literal_278

raw_279 -> leaf_283
leaf_283  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".


"]
// END RANK raw_279

codeblock_273 -> leaf_284
leaf_284  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local totty = {}
local lines = assert(core.lines)
local collect = assert(core.collect)"]
// END RANK codeblock_273

section_274 -> { header_285 prose_286 prose_287 codeblock_288 prose_289}
{rank=same; header_285 prose_286 prose_287 codeblock_288 prose_289}

header_285 [label="4 : nl_to_jumps(str)"]

prose_286 [label="prose"]

prose_287 [label="prose"]

codeblock_288 [label="code block 595-635"]

prose_289 [label="prose"]


// END RANK section_274

header_285 -> leaf_290
leaf_290  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** nl_to_jumps(str)"]
// END RANK header_285

prose_286 -> { raw_291}
{rank=same; raw_291}

raw_291 [label="raw"]


// END RANK prose_286

raw_291 -> leaf_292
leaf_292  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Turns newlines into jumps.
"]
// END RANK raw_291

prose_287 -> { raw_293}
{rank=same; raw_293}

raw_293 [label="raw"]


// END RANK prose_287

raw_293 -> leaf_294
leaf_294  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Returns the transformed string, the length of the widest line, and the
number of lines total.
"]
// END RANK raw_293

codeblock_288 -> leaf_295
leaf_295  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function totty.nl_to_jumps(str)
  local l = collect(lines, str)
  local phrase = \"\"
  local length = 0
  for i,v in ipairs(l) do
    phrase = phrase..v..a.jump.down()..a.jump.back(utf8.width(v))
    if length < utf8.width(v) then
      length = utf8.width(v)
    end
  end
  return phrase, length, #l
end

--- takes a string and a width in columns.
--  Returns the amount of string which fits the width.
function totty.truncate(str, width)
  local trunc = utf8.sub(str,1,width)
  if utf8.len(trunc) == utf8.width(trunc) then
    return trunc
  else
    local i = 1
    while utf8.width(trunc) > width do
      -- io.write(\"width is \", utf8.width(trunc), \"  target: \", width, \"\\n\")
      trunc = utf8.sub(str,1,width-i)
      i = i + 1
    end
    return trunc
  end
end

-- takes a string, returning a string which, when printed, will:
-- print the string as a column, return to the top, and move one beyond
-- the column thereby printed.
function totty.collimate(str)
  local phrase, length, lines = totty.nl_to_jumps(str)
  return phrase..a.jump.up(lines)..a.jump.forward(length)
end

anterm.totty = totty"]
// END RANK codeblock_288

prose_289 -> { raw_296}
{rank=same; raw_296}

raw_296 [label="raw"]


// END RANK prose_289

raw_296 -> leaf_297
leaf_297  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
If we forget to delete the above, no harm done.
"]
// END RANK raw_296

section_206 -> { header_298 prose_299 prose_300 prose_301 codeblock_302 prose_303 codeblock_304 prose_305 prose_306}
{rank=same; header_298 prose_299 prose_300 prose_301 codeblock_302 prose_303 codeblock_304 prose_305 prose_306}

header_298 [label="3 : Input handling"]

prose_299 [label="prose"]

prose_300 [label="prose"]

prose_301 [label="prose"]

codeblock_302 [label="code block 648-677"]

prose_303 [label="prose"]

codeblock_304 [label="code block 681-687"]

prose_305 [label="prose"]

prose_306 [label="prose"]


// END RANK section_206

header_298 -> leaf_307
leaf_307  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Input handling"]
// END RANK header_298

prose_299 -> { raw_308 prespace_309 literal_310 raw_311}
{rank=same; raw_308 prespace_309 literal_310 raw_311}

raw_308 [label="raw"]

prespace_309 [label="prespace"]

literal_310 [label="literal"]

raw_311 [label="raw"]


// END RANK prose_299

raw_308 -> leaf_312
leaf_312  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK raw_308

prespace_309 -> leaf_313
leaf_313  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_309

literal_310 -> leaf_314
leaf_314  [color=Gray,shape=rectangle,fontname=Inconsolata,label="xterm"]
// END RANK literal_310

raw_311 -> leaf_315
leaf_315  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" informally specifies a variety of input signals.
"]
// END RANK raw_311

prose_300 -> { raw_316}
{rank=same; raw_316}

raw_316 [label="raw"]


// END RANK prose_300

raw_316 -> leaf_317
leaf_317  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We collate those here.
"]
// END RANK raw_316

prose_301 -> { raw_318}
{rank=same; raw_318}

raw_318 [label="raw"]


// END RANK prose_301

raw_318 -> leaf_319
leaf_319  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
To avoid extraneous quoting, we define the tokens as keys, and their escape
strings as values.
"]
// END RANK raw_318

codeblock_302 -> leaf_320
leaf_320  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local __navigation = {  UP       = \"\\x1b[A\",
                        DOWN     = \"\\x1b[B\",
                        RIGHT    = \"\\x1b[C\",
                        LEFT     = \"\\x1b[D\",
                        SHIFT_UP = \"\\x1b[1;2A\",
                        SHIFT_DOWN = \"\\x1b[1;2B\",
                        SHIFT_RIGHT = \"\\x1b[1;2C\",
                        SHIFT_LEFT  = \"\\x1b[1;2D\",
                        HYPER_UP    = \"\\x1b[5~\",
                        HYPER_DOWN  = \"\\x1b[6~\",
                        HYPER_RIGHT = \"\\x1b[F\",
                        HYPER_LEFT  = \"\\x1b[H\",
                        ALT_UP    = \"\\x1b\\x1b[A\",
                        ALT_DOWN  = \"\\x1b\\x1b[B\",
                        ALT_RIGHT = \"\\x1bf\", -- heh
                        ALT_LEFT  = \"\\x1bb\",
                        SHIFT_ALT_UP = \"\\x1b[1;10A\",
                        SHIFT_ALT_DOWN = \"\\x1b[1;10B\",
                        SHIFT_ALT_RIGHT = \"\\x1b[1;10C\",
                        SHIFT_ALT_LEFT  = \"\\x1b[1;10D\",
                        SHIFT_TAB  = \"\\x1b[Z\",
                        ALT_TAB    = \"\\x1b\\t\",
                        NEWLINE    = \"\\n\",
                        RETURN     = \"\\r\",
                        TAB        = \"\\t\",
                        BACKSPACE  = \"\\127\",
                        DELETE     = \"\\x1b[3~\",
                     }"]
// END RANK codeblock_302

prose_303 -> { raw_321}
{rank=same; raw_321}

raw_321 [label="raw"]


// END RANK prose_303

raw_321 -> leaf_322
leaf_322  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It's possible to coerce a terminal into sending these, apparently:
"]
// END RANK raw_321

codeblock_304 -> leaf_323
leaf_323  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local __alt_nav = {  UP       = \"\\x1bOA\",
                     DOWN     = \"\\x1bOB\",
                     RIGHT    = \"\\x1bOC\",
                     LEFT     = \"\\x1bOD\",
                  }"]
// END RANK codeblock_304

prose_305 -> { raw_324}
{rank=same; raw_324}

raw_324 [label="raw"]


// END RANK prose_305

raw_324 -> leaf_325
leaf_325  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I don't know why, and if anyone does, please let me know.
"]
// END RANK raw_324

prose_306 -> { raw_326}
{rank=same; raw_326}

raw_326 [label="raw"]


// END RANK prose_306

raw_326 -> leaf_327
leaf_327  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I'm fairly sure those are the only valid meanings for the above escape
strings.

"]
// END RANK raw_326

section_207 -> { header_328 prose_329 codeblock_330 section_331}
{rank=same; header_328 prose_329 codeblock_330 section_331}

header_328 [label="3 : #todo function keys"]

prose_329 [label="prose"]

codeblock_330 [label="code block 700-702"]

section_331 [label="section: 705-765"]


// END RANK section_207

header_328 -> leaf_332
leaf_332  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** #todo function keys"]
// END RANK header_328

prose_329 -> { raw_333}
{rank=same; raw_333}

raw_333 [label="raw"]


// END RANK prose_329

raw_333 -> leaf_334
leaf_334  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Don't really use them, should parse them, goes here:
"]
// END RANK raw_333

codeblock_330 -> leaf_335
leaf_335  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK codeblock_330

section_331 -> { header_336 prose_337 codeblock_338 codeblock_339}
{rank=same; header_336 prose_337 codeblock_338 codeblock_339}

header_336 [label="4 : flip"]

prose_337 [label="prose"]

codeblock_338 [label="code block 709-730"]

codeblock_339 [label="code block 732-734"]


// END RANK section_331

header_336 -> leaf_340
leaf_340  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** flip"]
// END RANK header_336

prose_337 -> { raw_341}
{rank=same; raw_341}

raw_341 [label="raw"]


// END RANK prose_337

raw_341 -> leaf_342
leaf_342  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

We need the inverse of this map, so flip and forget:
"]
// END RANK raw_341

codeblock_338 -> leaf_343
leaf_343  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local navigation = {}

for k,v in pairs(__navigation) do
   navigation[v] = k
end
for k,v in pairs(__alt_nav) do
   navigation[v] = k
end

__navigation, __alt_nav = nil, nil

anterm.navigation = navigation

function anterm.is_nav(seq)
   if navigation[seq] then
      return navigation[seq]
   else
      return false, \"not a recognized NAV token\", seq
   end
end"]
// END RANK codeblock_338

codeblock_339 -> leaf_344
leaf_344  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return anterm"]
// END RANK codeblock_339


}
