digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 682"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-388"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 prose_5 prose_6 prose_7 section_8 section_9 section_10 section_11 section_12 section_13}
{rank=same; header_2 prose_3 prose_4 prose_5 prose_6 prose_7 section_8 section_9 section_10 section_11 section_12 section_13}

header_2 [label="1 : Anterm"]

prose_3 [label="prose"]

prose_4 [label="prose"]

prose_5 [label="prose"]

prose_6 [label="prose"]

prose_7 [label="prose"]

section_8 [label="section: 15-42"]

section_9 [label="section: 43-58"]

section_10 [label="section: 59-221"]

section_11 [label="section: 285-341"]

section_12 [label="section: 342-388"]

section_13 [label="section: 389-612"]


// END RANK section_1

header_2 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Anterm"]
// END RANK header_2

prose_3 -> { raw_15 prespace_16 literal_17 raw_18}
{rank=same; raw_15 prespace_16 literal_17 raw_18}

raw_15 [label="raw"]

prespace_16 [label="prespace"]

literal_17 [label="literal"]

raw_18 [label="raw"]


// END RANK prose_3

raw_15 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_15

prespace_16 -> leaf_20
leaf_20  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_16

literal_17 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label="anterm"]
// END RANK literal_17

raw_18 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is actually the protocol.
"]
// END RANK raw_18

prose_4 -> { prespace_23 literal_24 raw_25}
{rank=same; prespace_23 literal_24 raw_25}

prespace_23 [label="prespace"]

literal_24 [label="literal"]

raw_25 [label="raw"]


// END RANK prose_4

prespace_23 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_23

literal_24 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label="anterm.orb"]
// END RANK literal_24

raw_25 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is properly called \"anterm's monster\".
"]
// END RANK raw_25

prose_5 -> { raw_29 prespace_30 literal_31 raw_32 prespace_33 literal_34 raw_35}
{rank=same; raw_29 prespace_30 literal_31 raw_32 prespace_33 literal_34 raw_35}

raw_29 [label="raw"]

prespace_30 [label="prespace"]

literal_31 [label="literal"]

raw_32 [label="raw"]

prespace_33 [label="prespace"]

literal_34 [label="literal"]

raw_35 [label="raw"]


// END RANK prose_5

raw_29 -> leaf_36
leaf_36  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This is in fact our raw"]
// END RANK raw_29

prespace_30 -> leaf_37
leaf_37  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_30

literal_31 -> leaf_38
leaf_38  [color=Gray,shape=rectangle,fontname=Inconsolata,label="xterm"]
// END RANK literal_31

raw_32 -> leaf_39
leaf_39  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" handler. "]
// END RANK raw_32

prespace_33 -> leaf_40
leaf_40  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_33

literal_34 -> leaf_41
leaf_41  [color=Gray,shape=rectangle,fontname=Inconsolata,label="anterm"]
// END RANK literal_34

raw_35 -> leaf_42
leaf_42  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" protocol requires a few
platforms which run it.
"]
// END RANK raw_35

prose_6 -> { raw_43}
{rank=same; raw_43}

raw_43 [label="raw"]


// END RANK prose_6

raw_43 -> leaf_44
leaf_44  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
In the meantime, here's a handy dandy Lua library for raw terminal handling.
"]
// END RANK raw_43

prose_7 -> { raw_45}
{rank=same; raw_45}

raw_45 [label="raw"]


// END RANK prose_7

raw_45 -> leaf_46
leaf_46  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It is free of non-core extensions, with one exception:
"]
// END RANK raw_45

section_8 -> { header_47 prose_48 codeblock_49 prose_50 prose_51}
{rank=same; header_47 prose_48 codeblock_49 prose_50 prose_51}

header_47 [label="3 : includes"]

prose_48 [label="prose"]

codeblock_49 [label="code block 17-33"]

prose_50 [label="prose"]

prose_51 [label="prose"]


// END RANK section_8

header_47 -> leaf_52
leaf_52  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** includes"]
// END RANK header_47

prose_48 -> { raw_53}
{rank=same; raw_53}

raw_53 [label="raw"]


// END RANK prose_48

raw_53 -> leaf_54
leaf_54  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_53

codeblock_49 -> leaf_55
leaf_55  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local pairs = assert (pairs)
local tostring = assert (tostring)
local setmeta = assert (setmetatable)
local error = assert (error)
local require = assert (require)
local rawget = assert (rawget)

local schar = assert(string.char)
local sub   = assert(string.sub)
local rep   = assert(string.rep)
local byte  = assert(string.byte)
local bit   = assert(bit, \"anterm requires Luajit 'bit' or compatible in _G\")
local rshift = assert(bit.rshift)
local core = require \"core\"
bit = nil"]
// END RANK codeblock_49

prose_50 -> { raw_56 prespace_57 literal_58 prespace_59 literal_60 raw_61}
{rank=same; raw_56 prespace_57 literal_58 prespace_59 literal_60 raw_61}

raw_56 [label="raw"]

prespace_57 [label="prespace"]

literal_58 [label="literal"]

prespace_59 [label="prespace"]

literal_60 [label="literal"]

raw_61 [label="raw"]


// END RANK prose_50

raw_56 -> leaf_62
leaf_62  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I believe the 5.3 idiom is"]
// END RANK raw_56

prespace_57 -> leaf_63
leaf_63  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_57

literal_58 -> leaf_64
leaf_64  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bit = { rshift = "]
// END RANK literal_58

prespace_59 -> leaf_65
leaf_65  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_59

literal_60 -> leaf_66
leaf_66  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function(byte, off) return byte >> off end }"]
// END RANK literal_60

raw_61 -> leaf_67
leaf_67  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_61

prose_51 -> { raw_68}
{rank=same; raw_68}

raw_68 [label="raw"]


// END RANK prose_51

raw_68 -> leaf_69
leaf_69  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This code is otherwise 5.1 and upward compatible.
"]
// END RANK raw_68

section_9 -> { header_70 prose_71 prose_72 codeblock_73}
{rank=same; header_70 prose_71 prose_72 codeblock_73}

header_70 [label="3 : Principles"]

prose_71 [label="prose"]

prose_72 [label="prose"]

codeblock_73 [label="code block 52-56"]


// END RANK section_9

header_70 -> leaf_74
leaf_74  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Principles"]
// END RANK header_70

prose_71 -> { raw_75}
{rank=same; raw_75}

raw_75 [label="raw"]


// END RANK prose_71

raw_75 -> leaf_76
leaf_76  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

As a rule, fields are either functions returning strings,
or callable tables which return strings when called or concatenated, or
tables with fields which, called, return strings.
"]
// END RANK raw_75

prose_72 -> { raw_77}
{rank=same; raw_77}

raw_77 [label="raw"]


// END RANK prose_72

raw_77 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This presents a consistent interface. It is easy to cache strings you might
use several times.
"]
// END RANK raw_77

codeblock_73 -> leaf_79
leaf_79  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local anterm = {}

local CSI = schar(27)..'['"]
// END RANK codeblock_73

section_10 -> { header_80 prose_81 prose_82 codeblock_83 section_84 section_85 section_86}
{rank=same; header_80 prose_81 prose_82 codeblock_83 section_84 section_85 section_86}

header_80 [label="2 : color"]

prose_81 [label="prose"]

prose_82 [label="prose"]

codeblock_83 [label="code block 66-69"]

section_84 [label="section: 72-172"]

section_85 [label="section: 173-221"]

section_86 [label="section: 222-235"]


// END RANK section_10

header_80 -> leaf_87
leaf_87  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** color"]
// END RANK header_80

prose_81 -> { raw_88}
{rank=same; raw_88}

raw_88 [label="raw"]


// END RANK prose_81

raw_88 -> leaf_89
leaf_89  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The color tables concatenate as the color code, or return it when
called with no arguments.
"]
// END RANK raw_88

prose_82 -> { raw_90}
{rank=same; raw_90}

raw_90 [label="raw"]


// END RANK prose_82

raw_90 -> leaf_91
leaf_91  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Called on a string, they will cleanup the color in a way which composes.
"]
// END RANK raw_90

codeblock_83 -> leaf_92
leaf_92  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local colormt = {}
colormt.__index = colormt"]
// END RANK codeblock_83

section_84 -> { header_93 prose_94 prose_95 codeblock_96}
{rank=same; header_93 prose_94 prose_95 codeblock_96}

header_93 [label="3 : OG xterm color"]

prose_94 [label="prose"]

prose_95 [label="prose"]

codeblock_96 [label="code block 78-170"]


// END RANK section_84

header_93 -> leaf_97
leaf_97  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** OG xterm color"]
// END RANK header_93

prose_94 -> { raw_98}
{rank=same; raw_98}

raw_98 [label="raw"]


// END RANK prose_94

raw_98 -> leaf_99
leaf_99  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Aka the angry fruit salad tier.
"]
// END RANK raw_98

prose_95 -> { raw_100 prespace_101 literal_102 raw_103}
{rank=same; raw_100 prespace_101 literal_102 raw_103}

raw_100 [label="raw"]

prespace_101 [label="prespace"]

literal_102 [label="literal"]

raw_103 [label="raw"]


// END RANK prose_95

raw_100 -> leaf_104
leaf_104  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The attributes are broadly useful.  Note the absence of"]
// END RANK raw_100

prespace_101 -> leaf_105
leaf_105  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_101

literal_102 -> leaf_106
leaf_106  [color=Gray,shape=rectangle,fontname=Inconsolata,label="5"]
// END RANK literal_102

raw_103 -> leaf_107
leaf_107  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_103

codeblock_96 -> leaf_108
leaf_108  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local colors = {
    -- attributes
    attribute = {
        reset = 0,
        clear = 0,
        bright = 1,
        bold = 1,
        dim = 2,
        italic = 3,
        underscore = 4,
        underline = 4,
        reverse = 7,
        hidden = 8},
    -- foreground
    fg = {
        black = 30,
        red = 31,
        green = 32,
        yellow = 33,
        blue = 34,
        magenta = 35,
        cyan = 36,
        white = 37,
        clear_fg = 39  },
    -- background
    bg = {
        onblack = 40,
        onred = 41,
        ongreen = 42,
        onyellow = 43,
        onblue = 44,
        onmagenta = 45,
        oncyan = 46,
        onwhite = 47,
        clear_bg = 49}
}

local function makecolor(value, name, kind)
    local color = {
        value = CSI .. value ..\"m\",
        name = name,
        kind = kind }
    return setmetatable(color, colormt)
end

for kind, val in pairs(colors) do
    for c, v in pairs(val) do
        anterm[c] = makecolor(v, c, kind)
    end
end

function colormt.__tostring(color)
    return color.value
end

function colormt.__concat(color, other)
    return tostring(color) .. tostring(other)
end

local clear_fg, clear_bg, clear = anterm.clear_fg, anterm.clear_bg,
                                  anterm.clear

local function reset(color)
    -- given a color, reset its action.
    -- simple for fg and bg
    if color.kind == \"fg\" then
        return clear_fg
    elseif color.kind == \"bg\" then
        return clear_bg
    elseif color.kind == \"attribute\" then
        return clear
    end
end

local __ts = colormt.__tostring

function colormt.__call(color, str)
    if str then
        return __ts(color) .. str .. reset(color)
    else
        return __ts(color)
    end
end

function colormt.__repr(color, str)
   if str then
      return {__ts(color), str, reset(color)()}
   else
      return {__ts(color)}
   end
end"]
// END RANK codeblock_96

section_85 -> { header_109 prose_110 prose_111 codeblock_112}
{rank=same; header_109 prose_110 prose_111 codeblock_112}

header_109 [label="3 : 256 color"]

prose_110 [label="prose"]

prose_111 [label="prose"]

codeblock_112 [label="code block 179-219"]


// END RANK section_85

header_109 -> leaf_113
leaf_113  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** 256 color"]
// END RANK header_109

prose_110 -> { raw_114 prespace_115 literal_116 raw_117}
{rank=same; raw_114 prespace_115 literal_116 raw_117}

raw_114 [label="raw"]

prespace_115 [label="prespace"]

literal_116 [label="literal"]

raw_117 [label="raw"]


// END RANK prose_110

raw_114 -> leaf_118
leaf_118  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

There are 512"]
// END RANK raw_114

prespace_115 -> leaf_119
leaf_119  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_115

literal_116 -> leaf_120
leaf_120  [color=Gray,shape=rectangle,fontname=Inconsolata,label="xterm"]
// END RANK literal_116

raw_117 -> leaf_121
leaf_121  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" colors available.
"]
// END RANK raw_117

prose_111 -> { raw_122}
{rank=same; raw_122}

raw_122 [label="raw"]


// END RANK prose_111

raw_122 -> leaf_123
leaf_123  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We memoize their creation in a weak table.
"]
// END RANK raw_122

codeblock_112 -> leaf_124
leaf_124  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function byte_panic(byte_p)
   if not byte_p or not (0 <= byte_p and byte_p <= 255) then
      error \"xterm value must be 8 bit unsigned\"
   end
end

local x256_store = setmetatable({}, {__mode = \"v\"})

local function ansi_fg(byte)
    local function make (byte)
        byte_panic(byte)
        local color = { value = schar(27)..\"[38;5;\"..byte..\"m\",
                        kind = \"fg\" }
        return setmetatable(color, colormt)
    end
    if x256_store[byte] then
        return x256_store[byte]
    else
        local color = make(byte)
        x256_store[byte] = color
        return color
    end
end

local function ansi_bg(byte)
    local function make (byte)
        byte_panic(byte)
        local color = { value = schar(27)..\"[48;5;\"..byte..\"m\",
                        kind = \"bg\" }
        return setmetatable(color, colormt)
    end
    if x256_store[byte] then
        return x256_store[byte]
    else
        local color = make(byte)
        x256_store[byte] = color
        return color
    end
end"]
// END RANK codeblock_112

section_86 -> { header_125 prose_126 prose_127 prose_128 prose_129 section_130}
{rank=same; header_125 prose_126 prose_127 prose_128 prose_129 section_130}

header_125 [label="3 : fg24(r,g,b), bg24(r,g,b)"]

prose_126 [label="prose"]

prose_127 [label="prose"]

prose_128 [label="prose"]

prose_129 [label="prose"]

section_130 [label="section: 236-284"]


// END RANK section_86

header_125 -> leaf_131
leaf_131  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** fg24(r,g,b), bg24(r,g,b)"]
// END RANK header_125

prose_126 -> { raw_132}
{rank=same; raw_132}

raw_132 [label="raw"]


// END RANK prose_126

raw_132 -> leaf_133
leaf_133  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This state space is far too large to retain pointers to all colorizers.
"]
// END RANK raw_132

prose_127 -> { raw_134}
{rank=same; raw_134}

raw_134 [label="raw"]


// END RANK prose_127

raw_134 -> leaf_135
leaf_135  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
One might want to write a smooth transition, and would expect the colors to be
garbage collected after.
"]
// END RANK raw_134

prose_128 -> { raw_136}
{rank=same; raw_136}

raw_136 [label="raw"]


// END RANK prose_128

raw_136 -> leaf_137
leaf_137  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Hence we memoize with a weak table.  The only reliable way to achieve
reference equality between instances of a 24 bit color is to retain a pointer
to it.
"]
// END RANK raw_136

prose_129 -> { raw_138}
{rank=same; raw_138}

raw_138 [label="raw"]


// END RANK prose_129

raw_138 -> leaf_139
leaf_139  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Happily, this is a requirement for any comparison.

"]
// END RANK raw_138

section_130 -> { header_140 prose_141 codeblock_142}
{rank=same; header_140 prose_141 codeblock_142}

header_140 [label="4 : other color sequences?"]

prose_141 [label="prose"]

codeblock_142 [label="code block 244-282"]


// END RANK section_130

header_140 -> leaf_143
leaf_143  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** other color sequences?"]
// END RANK header_140

prose_141 -> { raw_144 prespace_145 italic_146 raw_147 prespace_148 literal_149 raw_150}
{rank=same; raw_144 prespace_145 italic_146 raw_147 prespace_148 literal_149 raw_150}

raw_144 [label="raw"]

prespace_145 [label="prespace"]

italic_146 [label="italic"]

raw_147 [label="raw"]

prespace_148 [label="prespace"]

literal_149 [label="literal"]

raw_150 [label="raw"]


// END RANK prose_141

raw_144 -> leaf_151
leaf_151  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

I don't think this is relevant for"]
// END RANK raw_144

prespace_145 -> leaf_152
leaf_152  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_145

italic_146 -> leaf_153
leaf_153  [color=Gray,shape=rectangle,fontname=Inconsolata,label="writing"]
// END RANK italic_146

raw_147 -> leaf_154
leaf_154  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" colors but there appear to be
other ways to emit them in the wild, including codes that set entire
backgrounds, and"]
// END RANK raw_147

prespace_148 -> leaf_155
leaf_155  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_148

literal_149 -> leaf_156
leaf_156  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#"]
// END RANK literal_149

raw_150 -> leaf_157
leaf_157  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" hex-coded colors are also supported.
"]
// END RANK raw_150

codeblock_142 -> leaf_158
leaf_158  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local x24k = setmetatable({}, {__mode = \"v\"})

local fg24pre = schar(27) .. \"[38;2;\"

local function fg24(r,g,b)
   byte_panic(r)
   byte_panic(g)
   byte_panic(b)
   local color = { value = fg24pre
                           .. r .. \";\" .. g .. \";\" .. b .. \"m\",
                   kind = \"fg\" }
   if x24k[color] then
      return x24k[color]
   end
   x24k[color] = color
   return setmetatable(color, colormt)
end

local bg24pre = schar(27) .. \"[48;2;\"

local function bg24(r,g,b)
   byte_panic(r)
   byte_panic(g)
   byte_panic(b)
   local color = { value = bg24pre
                           .. r .. \";\" .. g .. \";\" .. b .. \"m\",
                   kind = \"bg\" }
   if x24k[color] then
      return x24k[color]
   end
   x24k[color] = color
   return setmetatable(color, colormt)
end

anterm[\"fg\"], anterm[\"bg\"] = ansi_fg, ansi_bg

anterm[\"fg24\"], anterm[\"bg24\"] = fg24, bg24"]
// END RANK codeblock_142

section_11 -> { header_159 prose_160 codeblock_161}
{rank=same; header_159 prose_160 codeblock_161}

header_159 [label="2 : Jumps"]

prose_160 [label="prose"]

codeblock_161 [label="code block 287-339"]


// END RANK section_11

header_159 -> leaf_162
leaf_162  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Jumps"]
// END RANK header_159

prose_160 -> { raw_163}
{rank=same; raw_163}

raw_163 [label="raw"]


// END RANK prose_160

raw_163 -> leaf_164
leaf_164  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_163

codeblock_161 -> leaf_165
leaf_165  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local jump = {}

function jump.up(num)
    if not num then num = \"1\" end
    return CSI..num..\"A\"
end

function jump.down(num)
    if not num then num = \"1\" end
        return CSI..num..\"B\"
end

function jump.forward(num)
    if not num then num = \"1\" end
    return CSI..num..\"C\"
end

jump.right = jump.forward

jump.back = function(num)
    if not num then num = \"1\" end
    return CSI..num..\"D\"
end

local __nl = CSI .. 1 .. \"B\" .. CSI .. 1 .. \"G\"

function jump.nl()
   return __nl
end

jump.left = jump.back

local function Jump(_,row,column)
    return CSI..row..\";\"..column..\"H\"
end

local J = { __call = Jump}
setmetatable(jump,J)

anterm[\"jump\"] = jump

function anterm.rc (row, column)
   return CSI .. row .. \";\" .. column .. \"H\"
end

anterm.rowcol = anterm.rc

function anterm.col(col)
   col = col or 1
   return CSI .. col .. \"G\"
end"]
// END RANK codeblock_161

section_12 -> { header_166 prose_167 codeblock_168 codeblock_169}
{rank=same; header_166 prose_167 codeblock_168 codeblock_169}

header_166 [label="2 : Erasure"]

prose_167 [label="prose"]

codeblock_168 [label="code block 344-366"]

codeblock_169 [label="code block 370-386"]


// END RANK section_12

header_166 -> leaf_170
leaf_170  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Erasure"]
// END RANK header_166

prose_167 -> { raw_171}
{rank=same; raw_171}

raw_171 [label="raw"]


// END RANK prose_167

raw_171 -> leaf_172
leaf_172  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_171

codeblock_168 -> leaf_173
leaf_173  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local erase = {}
anterm.erase = erase

local e__below = CSI .. \"0J\"
local e__above = CSI .. \"1J\"
local e__all   = CSI .. \"2J\"
local e__right = CSI .. \"0K\"
local e__left  = CSI .. \"1K\"
local e__line  = CSI .. \"2K\"

function erase.below() return e__below end

function erase.above() return e__above end

function erase.all()   return e__all   end

function erase.right() return e__right end

function erase.left()  return e__left  end

function erase.line()  return e__line  end"]
// END RANK codeblock_168

codeblock_169 -> leaf_174
leaf_174  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local cursor = {}
function erase.box(tr, tc, br, bc)
   assert(tr <= br and tc <= bc, \"box must be at least 1 by 1\")
   local phrase = anterm.stash()
               .. cursor.hide()
               .. Jump(nil, tr, tc)
   br = br + 1
   bc = bc + 1
   local blanks = rep(\" \", bc - tc)
   local nl = anterm.col(tc) .. jump.down(1)
   for i = 1, br - tr do
      phrase = phrase .. blanks .. nl
   end
   return phrase .. anterm.pop() .. cursor.show()
end"]
// END RANK codeblock_169

section_13 -> { header_175 prose_176 codeblock_177 section_178 section_179 section_180 section_181 section_182 section_183}
{rank=same; header_175 prose_176 codeblock_177 section_178 section_179 section_180 section_181 section_182 section_183}

header_175 [label="2 : Mouse"]

prose_176 [label="prose"]

codeblock_177 [label="code block 391-396"]

section_178 [label="section: 399-423"]

section_179 [label="section: 453-467"]

section_180 [label="section: 468-491"]

section_181 [label="section: 492-504"]

section_182 [label="section: 556-612"]

section_183 [label="section: 613-621"]


// END RANK section_13

header_175 -> leaf_184
leaf_184  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Mouse"]
// END RANK header_175

prose_176 -> { raw_185}
{rank=same; raw_185}

raw_185 [label="raw"]


// END RANK prose_176

raw_185 -> leaf_186
leaf_186  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_185

codeblock_177 -> leaf_187
leaf_187  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local mouse = {}
anterm.mouse = mouse

local buttons = {[0] =\"MB0\", \"MB1\", \"MB2\", \"MBNONE\"}"]
// END RANK codeblock_177

section_178 -> { header_188 prose_189 prose_190 codeblock_191 codeblock_192 section_193}
{rank=same; header_188 prose_189 prose_190 codeblock_191 codeblock_192 section_193}

header_188 [label="3 : mouse.track(on)"]

prose_189 [label="prose"]

prose_190 [label="prose"]

codeblock_191 [label="code block 405-413"]

codeblock_192 [label="code block 415-421"]

section_193 [label="section: 424-452"]


// END RANK section_178

header_188 -> leaf_194
leaf_194  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** mouse.track(on)"]
// END RANK header_188

prose_189 -> { raw_195 prespace_196 literal_197 raw_198}
{rank=same; raw_195 prespace_196 literal_197 raw_198}

raw_195 [label="raw"]

prespace_196 [label="prespace"]

literal_197 [label="literal"]

raw_198 [label="raw"]


// END RANK prose_189

raw_195 -> leaf_199
leaf_199  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

If"]
// END RANK raw_195

prespace_196 -> leaf_200
leaf_200  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_196

literal_197 -> leaf_201
leaf_201  [color=Gray,shape=rectangle,fontname=Inconsolata,label="on == true"]
// END RANK literal_197

raw_198 -> leaf_202
leaf_202  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", turn mouse mode on.
"]
// END RANK raw_198

prose_190 -> { raw_203}
{rank=same; raw_203}

raw_203 [label="raw"]


// END RANK prose_190

raw_203 -> leaf_204
leaf_204  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Off otherwise.
"]
// END RANK raw_203

codeblock_191 -> leaf_205
leaf_205  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function mouse.track(on)
   if on == true then
      return \"\\x1b[?1003h\"
   end

   return \"\\x1b[?1003l\"
end"]
// END RANK codeblock_191

codeblock_192 -> leaf_206
leaf_206  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function mouse.ismousemove(seq)
   if sub(seq, 1, 3) == \"\\x1b[M\" then
      return true
   end
end"]
// END RANK codeblock_192

section_193 -> { header_207 prose_208 prose_209 codeblock_210}
{rank=same; header_207 prose_208 prose_209 codeblock_210}

header_207 [label="4 : mouse.parser_fast(seq)"]

prose_208 [label="prose"]

prose_209 [label="prose"]

codeblock_210 [label="code block 430-450"]


// END RANK section_193

header_207 -> leaf_211
leaf_211  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** mouse.parser_fast(seq)"]
// END RANK header_207

prose_208 -> { raw_212}
{rank=same; raw_212}

raw_212 [label="raw"]


// END RANK prose_208

raw_212 -> leaf_213
leaf_213  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Performs no checks and may silently fail.
"]
// END RANK raw_212

prose_209 -> { raw_214}
{rank=same; raw_214}

raw_214 [label="raw"]


// END RANK prose_209

raw_214 -> leaf_215
leaf_215  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Returns a mouse action.
"]
// END RANK raw_214

codeblock_210 -> leaf_216
leaf_216  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function mouse.parse_fast(seq)
   local kind, col, row = byte(seq,4), byte(seq, 5), byte(seq, 6)
   kind = kind - 32
   local m = {row = row - 32, col = col - 32}
   -- Get button
   m.button = buttons[kind % 4]
   -- Get modifiers
   kind = rshift(kind, 2)
   m.shift = kind % 2 == 1
   kind = rshift(kind, 1)
   m.meta = kind % 2 == 1
   kind = rshift(kind, 1)
   m.ctrl = kind % 2 == 1
   kind = rshift(kind, 1)
   m.moving = kind % 2 == 1
   -- we skip a bit that seems to just mirror .moving
   m.scrolling = kind == 2
   return m
end"]
// END RANK codeblock_210

section_179 -> { header_217 prose_218 codeblock_219}
{rank=same; header_217 prose_218 codeblock_219}

header_217 [label="3 : mouse.parse(seq)"]

prose_218 [label="prose"]

codeblock_219 [label="code block 457-465"]


// END RANK section_179

header_217 -> leaf_220
leaf_220  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** mouse.parse(seq)"]
// END RANK header_217

prose_218 -> { raw_221}
{rank=same; raw_221}

raw_221 [label="raw"]


// END RANK prose_218

raw_221 -> leaf_222
leaf_222  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Checks first.
"]
// END RANK raw_221

codeblock_219 -> leaf_223
leaf_223  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function mouse.parse(seq)
   if mouse.ismousemove(seq) then
      return mouse.parsefast(seq)
   else
      return nil, \"sequence was not a mouse move\", seq
   end
end"]
// END RANK codeblock_219

section_180 -> { header_224 prose_225 codeblock_226}
{rank=same; header_224 prose_225 codeblock_226}

header_224 [label="3 : Cursor handling"]

prose_225 [label="prose"]

codeblock_226 [label="code block 470-490"]


// END RANK section_180

header_224 -> leaf_227
leaf_227  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Cursor handling"]
// END RANK header_224

prose_225 -> { raw_228}
{rank=same; raw_228}

raw_228 [label="raw"]


// END RANK prose_225

raw_228 -> leaf_229
leaf_229  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_228

codeblock_226 -> leaf_230
leaf_230  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function anterm.stash()
   return \"\\x1b7\"
end

function anterm.pop()
   return \"\\x1b8\"
end
anterm.cursor = cursor

function cursor.hide()
   return \"\\x1b[?25l\"
end

function cursor.show()
   return \"\\x1b[?25h\"
end

cursor.stash = anterm.stash
cursor.pop = anterm.pop"]
// END RANK codeblock_226

section_181 -> { header_231 prose_232 codeblock_233 section_234}
{rank=same; header_231 prose_232 codeblock_233 section_234}

header_231 [label="3 : String Transformation"]

prose_232 [label="prose"]

codeblock_233 [label="code block 498-502"]

section_234 [label="section: 505-555"]


// END RANK section_181

header_231 -> leaf_235
leaf_235  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** String Transformation"]
// END RANK header_231

prose_232 -> { raw_236 prespace_237 literal_238 raw_239}
{rank=same; raw_236 prespace_237 literal_238 raw_239}

raw_236 [label="raw"]

prespace_237 [label="prespace"]

literal_238 [label="literal"]

raw_239 [label="raw"]


// END RANK prose_232

raw_236 -> leaf_240
leaf_240  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Turns out I had some useful stuff in"]
// END RANK raw_236

prespace_237 -> leaf_241
leaf_241  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_237

literal_238 -> leaf_242
leaf_242  [color=Gray,shape=rectangle,fontname=Inconsolata,label="termstring.lua"]
// END RANK literal_238

raw_239 -> leaf_243
leaf_243  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".


"]
// END RANK raw_239

codeblock_233 -> leaf_244
leaf_244  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local totty = {}
local lines = assert(core.lines)
local collect = assert(core.collect)"]
// END RANK codeblock_233

section_234 -> { header_245 prose_246 prose_247 codeblock_248 prose_249}
{rank=same; header_245 prose_246 prose_247 codeblock_248 prose_249}

header_245 [label="4 : nl_to_jumps(str)"]

prose_246 [label="prose"]

prose_247 [label="prose"]

codeblock_248 [label="code block 512-552"]

prose_249 [label="prose"]


// END RANK section_234

header_245 -> leaf_250
leaf_250  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** nl_to_jumps(str)"]
// END RANK header_245

prose_246 -> { raw_251}
{rank=same; raw_251}

raw_251 [label="raw"]


// END RANK prose_246

raw_251 -> leaf_252
leaf_252  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Turns newlines into jumps.
"]
// END RANK raw_251

prose_247 -> { raw_253}
{rank=same; raw_253}

raw_253 [label="raw"]


// END RANK prose_247

raw_253 -> leaf_254
leaf_254  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Returns the transformed string, the length of the widest line, and the
number of lines total.
"]
// END RANK raw_253

codeblock_248 -> leaf_255
leaf_255  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function totty.nl_to_jumps(str)
  local l = collect(lines, str)
  local phrase = \"\"
  local length = 0
  for i,v in ipairs(l) do
    phrase = phrase..v..a.jump.down()..a.jump.back(utf8.width(v))
    if length < utf8.width(v) then
      length = utf8.width(v)
    end
  end
  return phrase, length, #l
end

--- takes a string and a width in columns.
--  Returns the amount of string which fits the width.
function totty.truncate(str, width)
  local trunc = utf8.sub(str,1,width)
  if utf8.len(trunc) == utf8.width(trunc) then
    return trunc
  else
    local i = 1
    while utf8.width(trunc) > width do
      -- io.write(\"width is \", utf8.width(trunc), \"  target: \", width, \"\\n\")
      trunc = utf8.sub(str,1,width-i)
      i = i + 1
    end
    return trunc
  end
end

-- takes a string, returning a string which, when printed, will:
-- print the string as a column, return to the top, and move one beyond
-- the column thereby printed.
function totty.collimate(str)
  local phrase, length, lines = totty.nl_to_jumps(str)
  return phrase..a.jump.up(lines)..a.jump.forward(length)
end

anterm.totty = totty"]
// END RANK codeblock_248

prose_249 -> { raw_256}
{rank=same; raw_256}

raw_256 [label="raw"]


// END RANK prose_249

raw_256 -> leaf_257
leaf_257  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
If we forget to delete the above, no harm done.
"]
// END RANK raw_256

section_182 -> { header_258 prose_259 prose_260 prose_261 codeblock_262 prose_263 codeblock_264 prose_265 prose_266}
{rank=same; header_258 prose_259 prose_260 prose_261 codeblock_262 prose_263 codeblock_264 prose_265 prose_266}

header_258 [label="3 : Input handling"]

prose_259 [label="prose"]

prose_260 [label="prose"]

prose_261 [label="prose"]

codeblock_262 [label="code block 565-594"]

prose_263 [label="prose"]

codeblock_264 [label="code block 598-604"]

prose_265 [label="prose"]

prose_266 [label="prose"]


// END RANK section_182

header_258 -> leaf_267
leaf_267  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Input handling"]
// END RANK header_258

prose_259 -> { raw_268 prespace_269 literal_270 raw_271}
{rank=same; raw_268 prespace_269 literal_270 raw_271}

raw_268 [label="raw"]

prespace_269 [label="prespace"]

literal_270 [label="literal"]

raw_271 [label="raw"]


// END RANK prose_259

raw_268 -> leaf_272
leaf_272  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK raw_268

prespace_269 -> leaf_273
leaf_273  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_269

literal_270 -> leaf_274
leaf_274  [color=Gray,shape=rectangle,fontname=Inconsolata,label="xterm"]
// END RANK literal_270

raw_271 -> leaf_275
leaf_275  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" informally specifies a variety of input signals.
"]
// END RANK raw_271

prose_260 -> { raw_276}
{rank=same; raw_276}

raw_276 [label="raw"]


// END RANK prose_260

raw_276 -> leaf_277
leaf_277  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We collate those here.
"]
// END RANK raw_276

prose_261 -> { raw_278}
{rank=same; raw_278}

raw_278 [label="raw"]


// END RANK prose_261

raw_278 -> leaf_279
leaf_279  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
To avoid extraneous quoting, we define the tokens as keys, and their escape
strings as values.
"]
// END RANK raw_278

codeblock_262 -> leaf_280
leaf_280  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local __navigation = {  UP       = \"\\x1b[A\",
                        DOWN     = \"\\x1b[B\",
                        RIGHT    = \"\\x1b[C\",
                        LEFT     = \"\\x1b[D\",
                        SHIFT_UP = \"\\x1b[1;2A\",
                        SHIFT_DOWN = \"\\x1b[1;2B\",
                        SHIFT_RIGHT = \"\\x1b[1;2C\",
                        SHIFT_LEFT  = \"\\x1b[1;2D\",
                        HYPER_UP    = \"\\x1b[5~\",
                        HYPER_DOWN  = \"\\x1b[6~\",
                        HYPER_RIGHT = \"\\x1b[F\",
                        HYPER_LEFT  = \"\\x1b[H\",
                        ALT_UP    = \"\\x1b\\x1b[A\",
                        ALT_DOWN  = \"\\x1b\\x1b[B\",
                        ALT_RIGHT = \"\\x1bf\", -- heh
                        ALT_LEFT  = \"\\x1bb\",
                        SHIFT_ALT_UP = \"\\x1b[1;10A\",
                        SHIFT_ALT_DOWN = \"\\x1b[1;10B\",
                        SHIFT_ALT_RIGHT = \"\\x1b[1;10C\",
                        SHIFT_ALT_LEFT  = \"\\x1b[1;10D\",
                        SHIFT_TAB  = \"\\x1b[Z\",
                        ALT_TAB    = \"\\x1b\\t\",
                        NEWLINE    = \"\\n\",
                        RETURN     = \"\\r\",
                        TAB        = \"\\t\",
                        BACKSPACE  = \"\\127\",
                        DELETE     = \"\\x1b[3~\",
                     }"]
// END RANK codeblock_262

prose_263 -> { raw_281}
{rank=same; raw_281}

raw_281 [label="raw"]


// END RANK prose_263

raw_281 -> leaf_282
leaf_282  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It's possible to coerce a terminal into sending these, apparently:
"]
// END RANK raw_281

codeblock_264 -> leaf_283
leaf_283  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local __alt_nav = {  UP       = \"\\x1bOA\",
                     DOWN     = \"\\x1bOB\",
                     RIGHT    = \"\\x1bOC\",
                     LEFT     = \"\\x1bOD\",
                  }"]
// END RANK codeblock_264

prose_265 -> { raw_284}
{rank=same; raw_284}

raw_284 [label="raw"]


// END RANK prose_265

raw_284 -> leaf_285
leaf_285  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I don't know why, and if anyone does, please let me know.
"]
// END RANK raw_284

prose_266 -> { raw_286}
{rank=same; raw_286}

raw_286 [label="raw"]


// END RANK prose_266

raw_286 -> leaf_287
leaf_287  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I'm fairly sure those are the only valid meanings for the above escape
strings.

"]
// END RANK raw_286

section_183 -> { header_288 prose_289 codeblock_290 section_291}
{rank=same; header_288 prose_289 codeblock_290 section_291}

header_288 [label="3 : #todo function keys"]

prose_289 [label="prose"]

codeblock_290 [label="code block 617-619"]

section_291 [label="section: 622-682"]


// END RANK section_183

header_288 -> leaf_292
leaf_292  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** #todo function keys"]
// END RANK header_288

prose_289 -> { raw_293}
{rank=same; raw_293}

raw_293 [label="raw"]


// END RANK prose_289

raw_293 -> leaf_294
leaf_294  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Don't really use them, should parse them, goes here:
"]
// END RANK raw_293

codeblock_290 -> leaf_295
leaf_295  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK codeblock_290

section_291 -> { header_296 prose_297 codeblock_298 codeblock_299}
{rank=same; header_296 prose_297 codeblock_298 codeblock_299}

header_296 [label="4 : flip"]

prose_297 [label="prose"]

codeblock_298 [label="code block 626-647"]

codeblock_299 [label="code block 649-651"]


// END RANK section_291

header_296 -> leaf_300
leaf_300  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** flip"]
// END RANK header_296

prose_297 -> { raw_301}
{rank=same; raw_301}

raw_301 [label="raw"]


// END RANK prose_297

raw_301 -> leaf_302
leaf_302  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

We need the inverse of this map, so flip and forget:
"]
// END RANK raw_301

codeblock_298 -> leaf_303
leaf_303  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local navigation = {}

for k,v in pairs(__navigation) do
   navigation[v] = k
end
for k,v in pairs(__alt_nav) do
   navigation[v] = k
end

__navigation, __alt_nav = nil, nil, nil

anterm.navigation = navigation

function anterm.is_nav(seq)
   if navigation[seq] then
      return navigation[seq]
   else
      return false, \"not a recognized NAV token\", seq
   end
end"]
// END RANK codeblock_298

codeblock_299 -> leaf_304
leaf_304  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return anterm"]
// END RANK codeblock_299


}
